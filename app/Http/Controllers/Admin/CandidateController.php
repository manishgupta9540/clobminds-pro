<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\Auth;
use Illuminate\Http\Request;
// use DB;
use Illuminate\Support\Str;
use App\User;
use Carbon\Carbon;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Validator;
use Illuminate\Support\Facades\Input;
use App\Exports\JafaddressExport; 
use App\Exports\JafitemExport;
use App\Exports\JafdataExport; 
use App\Exports\JafDataExportBgv; 
use App\Exports\JafadharExport;
use App\Exports\JafpanExport;
use App\Exports\JafvoteridExport;
use App\Exports\JafrcExport;
use App\Exports\JafpassportExport;
use App\Exports\JafdlExport;
use App\Exports\JafemploymentExport;
use App\Exports\JafeducationalExport;
use App\Exports\JafbankExport;
use App\Exports\JafelectricityExport;
use App\Exports\JafgstinExport;
use App\Exports\JafjudicialExport;
use App\Exports\JafcriminalExport;
use App\Exports\JafreferenceExport;
use App\Exports\JafdatabaseExport;
use App\Exports\JaftelecomExport;
use App\Exports\JafallExport;
use App\Helpers\Helper;
use App\Models\Admin\ActionMaster;
use App\Models\Admin\ImportCandidate;
use App\Models\Admin\KeyAccountManager;
use App\Models\Admin\Task;
use App\Models\Admin\TaskAssignment;
use App\Models\Admin\UserCheck;
use CreateCandidateHoldStatusesTable;
use Maatwebsite\Excel\Facades\Excel;
use Illuminate\Support\Facades\Mail;
use Illuminate\Support\Facades\Hash;
use Illuminate\Validation\Rule;
use App\Models\Admin\CandidateHoldStatus;
use App\Models\Admin\Report;
use App\Events\ApiCheck;
use App\Models\Admin\Candidate;
use App\Models\Admin\DigitalAddressVerification;
use App\Models\Admin\JafFormData;
use App\Models\Admin\Job;
use App\Models\Admin\JobItem;
use App\Models\Admin\ImportCanidateJafUpload;
use App\Models\Admin\JobSlaItem;
use App\VerificationInsufficiency;
use App\Traits\EmailConfigTrait;
use Illuminate\Support\Facades\Config;
use App\Models\Admin\ReportItem;
use Imagick;
use App\Models\AddressVerificationDecisionLog;

// use Image;
use Illuminate\Support\Facades\File;
use Mpdf\Tag\Span;
use ZipArchive;
use App\Traits\S3ConfigTrait;
use Illuminate\Support\Facades\Storage;
use App\Models\Admin\AddressVerification;

use App\Models\Admin\AadharCheck;
use App\Models\Admin\PanCheck;
use App\Models\Admin\RcCheck;
use App\Models\Admin\VoterIdCheck;
use App\Models\DlCheck;
use App\Models\PassportCheck;
use App\Models\BankAccountCheck;
use App\Models\GstCheck;
use App\Models\TelecomCheck;
use App\Covid19Check;
use App\Models\UpiCheck;
use App\Models\CinCheck;
use App\Models\ECourtCheck;
use App\Models\ECourtCheckItem;

use App\CocNotificationMaster;
use App\Models\Admin\OtpByEmail;
use App\Models\Admin\DigitalAddressVerificationLog;
use App\Models\CandidateAccess;
use PDF;


class CandidateController extends Controller 
{
   
    //candidate details
    public function index(Request $request)
    {
      $business_id = Auth::user()->business_id;
    	$user_id = Auth::user()->id;
      $rows=15;
      // $insuffs=$service="";
      $query = DB::table('users as u')
              ->DISTINCT('jsi.candidate_id')
              ->select('u.*','j.sla_id','j.tat_start_date','j.jaf_status','j.job_id','j.id as job_item_id','j.candidate_id','jsi.jaf_send_to','j.filled_at','j.is_tat_ignore','j.tat_notes','j.tat_ignore_days','j.is_qc_done','j.is_jaf_ready_report')      
              ->join('job_items as j','j.candidate_id','=','u.id')  
              ->join('job_sla_items as jsi','jsi.candidate_id','=','j.candidate_id' )      
              ->where(['u.user_type'=>'candidate','u.parent_id'=>$business_id,'u.is_deleted'=>0,'u.is_report_generate'=>0,'u.close_case'=>0]);
              if(is_numeric($request->get('customer_id'))){
                $query->where('u.business_id',$request->get('customer_id'));
              }
              if(is_numeric($request->get('candidate_id'))){
                $query->where('u.id',$request->get('candidate_id'));
              }
              if(is_numeric($request->get('candidate'))){
                // echo $request->get('candidate');
                $query->where('u.id',$request->get('candidate'));
              }
              if($request->get('from_date') !=""){
                $query->whereDate('u.created_at','>=',date('Y-m-d',strtotime($request->get('from_date'))));
              }
              if($request->get('to_date') !=""){
                $query->whereDate('u.created_at','<=',date('Y-m-d',strtotime($request->get('to_date'))));
              }
              if($request->get('email')){
                $query->where('u.email',$request->get('email'));
              }
              if($request->get('mob')){
                $query->where('u.phone',$request->get('mob'));
              }
              if($request->get('ref')){
                $query->where('u.display_id',$request->get('ref'));
              }
              if($request->get('type')){
                $query->where('u.priority',$request->get('type'));
              }
              if ($request->get('active_case')) {
                // echo $request->get('active_case');
                $query->where('j.jaf_status',$request->get('active_case'));
              }
              // if ($request->get('remain')&&$request->get('status')) {
              //   $query->where(['jsi.jaf_send_to'=>$request->get('remain'),'j.jaf_status'=>$request->get('status')]);
              // }
              if ($request->get('remain')) { 
        
                $query->where(['jsi.jaf_send_to'=>$request->get('remain')]);
              }
              if ($request->get('insuff_raised')&&$request->get('insuff_status')) {
       
                $query->join('jaf_form_data as jd','jd.candidate_id','=','u.id')->where(['jd.is_insufficiency'=>$request->get('insuff_status'),'jd.service_id'=>$request->get('insuff_raised')]);
                // dd($query);
              }
              if($request->get('service')){
                if ($request->get('insuffs') && $request->get('service')) {
        
                  $query->join('jaf_form_data as jd','jd.candidate_id','=','u.id')->where(['jd.is_insufficiency'=>$request->get('insuffs'),'jd.service_id'=>$request->get('service')]);
                  // dd($query);
                }
                if ($request->get('verification_status') && $request->get('service')) {
                  //  echo($request->get('verification_status'));
                //  if$request->get('verification_status')=='0' ? null:'success';
                    $query->join('jaf_form_data as jf','jf.candidate_id','=','u.id')->where(['jf.verification_status'=>null,'jf.service_id'=>$request->get('service')]);
                    
                }
                if ($request->get('verify_status') && $request->get('service')) {
                  //  echo($request->get('service'));
                //  if$request->get('verification_status')=='0' ? null:'success';
                    $query->join('jaf_form_data as jf','jf.candidate_id','=','u.id')->where(['jf.verification_status'=>$request->get('verify_status'),'jf.service_id'=>$request->get('service')]);
                    
                }
              }
              if ($request->get('service_name')) {
                // echo($request->get('service_name'));
                $query->where(['jsi.service_id'=>$request->get('service_name')]);
              }
              if ($request->get('sendto')) {
        
                $query->where(['jsi.jaf_send_to'=>$request->get('sendto')]);
              }
              if ($request->get('sendto') && ($request->get('jafstatus1') || $request->get('jafstatus2'))) {

                $value=$request->get('jafstatus1').','.$request->get('jafstatus2');

                $query->where(['jsi.jaf_send_to'=>$request->get('sendto')])
                        ->whereIn('j.jaf_status',explode(',',$value));
              }
              if ($request->get('search')) {
                // $searchQuery = '%' . $request->search . '%';
              // echo($request->input('search'));
                $query->where('u.first_name',$request->get('search'))->orWhere('u.name',$request->get('search'))->orWhere('u.email',$request->get('search'))->orWhere('u.display_id',$request->get('search'))->orWhere('u.phone',$request->get('search'))->orWhere('u.client_emp_code',$request->get('search'));
              }
              if($request->get('case_wip')!='' && $request->get('case_wip')=='1')
              {
                 $query->where('u.is_report_generate',0);
              }
              if ($request->get('insuff') ) {
                // echo($request->get('insuff'));
                $query->join('jaf_form_data as jfd','jfd.candidate_id','=','u.id')->where('jfd.is_insufficiency',$request->get('insuff'));
        
              }
              if($request->get('sendto') && $request->get('jafstatus'))
              {
                $value=$request->get('jafstatus');

                $query->where(['jsi.jaf_send_to'=>$request->get('sendto')])
                        ->whereIn('j.jaf_status',explode(',',$value));
              }
              if($request->get('rows')!='') {
                $rows = $request->get('rows');
              }
              $query->orderBy('u.created_at','desc');
      // dd($query->get());
      $items =    $query->paginate($rows);
      // dd($items);    
      // $users= User::whereIn('user_type',['user','candidate'])->get();
      // $checks = UserCheck::all(); 
      // $job_sla_items = DB::table('job_sla_items')->get();
              // dd($users);
      $customers = DB::table('users as u')
        ->select('u.id','u.name','u.first_name','u.last_name','u.email','u.phone','b.company_name')
        ->join('user_businesses as b','b.business_id','=','u.id')
        ->where(['u.user_type'=>'client','u.parent_id'=>$business_id])
        ->get();

        $filled = $request->get('active_case');
        // $send_to = $request->get('sendto');
        // $jafstatus =$request->get('jafstatus');
        // $insuff = $request->get('insuff');
        // $verification_status =$request->get('verification_status');
        // $verify_status =$request->get('verify_status');
        
        $send_to = $request->get('sendto');
        $jafstatus =$request->get('jafstatus');
        $pending=$request->get('jafstatus1');
        $draft=$request->get('jafstatus2');
        $insuff = $request->get('insuff');
        $verification_status =$request->get('verification_status');
        $verify_status =$request->get('verify_status');

        $insuffs = $request->get('insuffs');
        $service_s = $request->get('service');
        $candidates_id = $request->get('candidate');
        $case_wip = $request->get('case_wip');

        // dd($candidate);
        // dd($service);

        $permissions = DB::select("SELECT u.id,u.name,u.email,jsi.candidate_id,jsi.sla_id,u.business_id,u.phone,ji.jaf_status,u.created_at,ji.job_id, GROUP_CONCAT(DISTINCT s.name) AS alot_services FROM `users` AS u LEFT JOIN user_checks AS uc ON u.id = uc.user_id LEFT JOIN job_sla_items AS jsi ON uc.checks = jsi.service_id LEFT JOIN services AS s ON jsi.service_id = s.id JOIN job_items AS ji ON jsi.candidate_id= ji.candidate_id where u.business_id = $business_id AND u.id = $user_id and u.user_type= 'user'  GROUP BY u.id,jsi.candidate_id,jsi.sla_id,ji.jaf_status,ji.job_id");

      // $services = DB::table('services')->get();

      $services = DB::table('services')
        ->select('name','id')
        ->where('business_id',NULL)
        ->whereNotIn('type_name',['e_court'])
        ->orwhere('business_id',$business_id)
        ->where(['status'=>'1'])
        ->get();
      
        $array_result = [];

        foreach ($services as $key => $value) {
            
            
            $insuf = DB::table('jaf_form_data as jf')
            ->join('users as u','u.id','=','jf.candidate_id')
            ->where(['jf.service_id'=> $value->id,'u.parent_id'=>Auth::user()->business_id,'jf.is_insufficiency'=>'1'])
            ->count();

            $array_result[] = ['check_id'=>$value->id,'check_name'=> $value->name,'insuf'=>$insuf]; 
                // 
        }
        // dd($array_result);

      $route_group = ActionMaster::where('route_group','')->get();

      $candidates = DB::table('users as u')
      ->DISTINCT('u.id')
      ->select('u.*','j.sla_id','jsi.jaf_send_to','j.jaf_status','j.job_id','j.candidate_id','jsi.jaf_send_to','j.id as job_item_id')      
      ->join('job_items as j','j.candidate_id','=','u.id') 
      ->join('job_sla_items as jsi','jsi.candidate_id','=','j.candidate_id' )             
      ->where(['u.user_type'=>'candidate','u.parent_id'=>$business_id,'is_deleted'=>'0'])->get();

      // dd($candidates);

      // dd($candidates);

      $tota_candidates = $query->count();
         
        if ($request->ajax())
            return view('admin.candidates.ajax', compact('items','customers','services','tota_candidates','candidates','candidates_id','permissions','route_group','filled','array_result','insuffs','service_s','send_to','insuff','jafstatus','verification_status','verify_status','pending','draft','case_wip'));
        else
            return view('admin.candidates.index', compact('items','customers','services','tota_candidates','candidates','candidates_id','permissions','route_group','filled','array_result','insuffs','service_s','send_to','insuff','jafstatus','verification_status','verify_status','pending','draft','case_wip'));   
    	
    }

    //candidate details
    public function completedIndex(Request $request)
    {
      $business_id = Auth::user()->business_id;
    	$user_id = Auth::user()->id;
      $rows=15;
      // $insuffs=$service="";
      $query = DB::table('users as u')
              ->DISTINCT('u.id')
              ->select('u.*','j.sla_id','j.jaf_status','j.tat_start_date','j.job_id','j.id as job_item_id','j.candidate_id','jsi.jaf_send_to','j.filled_at','j.is_tat_ignore','j.tat_notes','j.tat_ignore_days')      
              ->join('job_items as j','j.candidate_id','=','u.id')  
              ->join('job_sla_items as jsi','jsi.candidate_id','=','j.candidate_id' )      
              ->where(['u.user_type'=>'candidate','u.parent_id'=>$business_id,'u.is_deleted'=>'0','u.is_report_generate'=>1,'u.close_case'=>0]);
              if(is_numeric($request->get('customer_id'))){
                $query->where('u.business_id',$request->get('customer_id'));
              }
              if(is_numeric($request->get('candidate_id'))){
                $query->where('u.id',$request->get('candidate_id'));
              }
              if(is_numeric($request->get('candidate'))){
                // echo $request->get('candidate');
                $query->where('u.id',$request->get('candidate'));
              }
              if($request->get('from_date') !=""){
                $query->whereDate('u.created_at','>=',date('Y-m-d',strtotime($request->get('from_date'))));
              }
              if($request->get('to_date') !=""){
                $query->whereDate('u.created_at','<=',date('Y-m-d',strtotime($request->get('to_date'))));
              }
              if($request->get('email')){
                $query->where('u.email',$request->get('email'));
              }
              if($request->get('mob')){
                $query->where('u.phone',$request->get('mob'));
              }
              if($request->get('ref')){
                $query->where('u.display_id',$request->get('ref'));
              }
              if($request->get('type')){
                $query->where('u.priority',$request->get('type'));
              }
              if ($request->get('active_case')) {
                // echo $request->get('active_case');
                $query->where('j.jaf_status',$request->get('active_case'));
              }
              // if ($request->get('remain')&&$request->get('status')) {
              //   $query->where(['jsi.jaf_send_to'=>$request->get('remain'),'j.jaf_status'=>$request->get('status')]);
              // }
              if ($request->get('remain')) {
        
                $query->where(['jsi.jaf_send_to'=>$request->get('remain')]);
              }
              if ($request->get('insuff_raised')&&$request->get('insuff_status')) {
       
                $query->join('jaf_form_data as jd','jd.candidate_id','=','u.id')->where(['jd.is_insufficiency'=>$request->get('insuff_status'),'jd.service_id'=>$request->get('insuff_raised')]);
                // dd($query);
              }
              if($request->get('service')){
                if ($request->get('insuffs') && $request->get('service')) {
        
                  $query->join('jaf_form_data as jd','jd.candidate_id','=','u.id')->where(['jd.is_insufficiency'=>$request->get('insuffs'),'jd.service_id'=>$request->get('service')]);
                  // dd($query);
                }
                if ($request->get('verification_status') && $request->get('service')) {
                  //  echo($request->get('verification_status'));
                //  if$request->get('verification_status')=='0' ? null:'success';
                    $query->join('jaf_form_data as jf','jf.candidate_id','=','u.id')->where(['jf.verification_status'=>null,'jf.service_id'=>$request->get('service')]);
                    
                }
                if ($request->get('verify_status') && $request->get('service')) {
                  //  echo($request->get('service'));
                //  if$request->get('verification_status')=='0' ? null:'success';
                    $query->join('jaf_form_data as jf','jf.candidate_id','=','u.id')->where(['jf.verification_status'=>$request->get('verify_status'),'jf.service_id'=>$request->get('service')]);
                    
                }
              }
              if ($request->get('service_name')) {
                // echo($request->get('service_name'));
                $query->where(['jsi.service_id'=>$request->get('service_name')]);
              }
              if ($request->get('sendto')) {
        
                $query->where(['jsi.jaf_send_to'=>$request->get('sendto')]);
              }
              if ($request->get('sendto') && ($request->get('jafstatus1') || $request->get('jafstatus2'))) {

                $value=$request->get('jafstatus1').','.$request->get('jafstatus2');

                $query->where(['jsi.jaf_send_to'=>$request->get('sendto')])
                        ->whereIn('j.jaf_status',explode(',',$value));
              }
              if ($request->get('search')) {
                // $searchQuery = '%' . $request->search . '%';
              // echo($request->input('search'));
                $query->where('u.first_name',$request->get('search'))->orWhere('u.name',$request->get('search'))->orWhere('u.email',$request->get('search'))->orWhere('u.display_id',$request->get('search'))->orWhere('u.phone',$request->get('search'))->orWhere('u.client_emp_code',$request->get('search'));
              }
              if($request->get('rows')!='') {
                $rows = $request->get('rows');
              }
              $query->orderBy('u.created_at','desc');
      // dd($query->get());
      $items =    $query->paginate($rows);
              
      // $users= User::whereIn('user_type',['user','candidate'])->get();
      // $checks = UserCheck::all(); 
      // $job_sla_items = DB::table('job_sla_items')->get();
              // dd($users);
      $customers = DB::table('users as u')
        ->select('u.id','u.name','u.first_name','u.last_name','u.email','u.phone','b.company_name')
        ->join('user_businesses as b','b.business_id','=','u.id')
        ->where(['u.user_type'=>'client','u.parent_id'=>$business_id])
        ->get();

        $filled = $request->get('active_case');
        // $send_to = $request->get('sendto');
        // $jafstatus =$request->get('jafstatus');
        // $insuff = $request->get('insuff');
        // $verification_status =$request->get('verification_status');
        // $verify_status =$request->get('verify_status');
        
        $send_to = $request->get('sendto');
        $jafstatus =$request->get('jafstatus');
        $pending=$request->get('jafstatus1');
        $draft=$request->get('jafstatus2');
        $insuff = $request->get('insuff');
        $verification_status =$request->get('verification_status');
        $verify_status =$request->get('verify_status');

        $insuffs = $request->get('insuffs');
        $service_s = $request->get('service');
        $candidates_id = $request->get('candidate');


        // dd($candidate);
        // dd($service);

        $permissions = DB::select("SELECT u.id,u.name,u.email,jsi.candidate_id,jsi.sla_id,u.business_id,u.phone,ji.jaf_status,u.created_at,ji.job_id, GROUP_CONCAT(DISTINCT s.name) AS alot_services FROM `users` AS u LEFT JOIN user_checks AS uc ON u.id = uc.user_id LEFT JOIN job_sla_items AS jsi ON uc.checks = jsi.service_id LEFT JOIN services AS s ON jsi.service_id = s.id JOIN job_items AS ji ON jsi.candidate_id= ji.candidate_id where u.business_id = $business_id AND u.id = $user_id and u.user_type= 'user'  GROUP BY u.id,jsi.candidate_id,jsi.sla_id,ji.jaf_status,ji.job_id");

      // $services = DB::table('services')->get();

      $services = DB::table('services')
        ->select('name','id')
        ->where(['status'=>'1'])
        ->where('business_id',NULL)
        ->whereNotIn('type_name',['e_court'])
        ->orwhere('business_id',$business_id)
        ->get();
      
        $array_result = [];

        foreach ($services as $key => $value) {
            
            
            $insuf = DB::table('jaf_form_data as jf')
            ->join('users as u','u.id','=','jf.candidate_id')
            ->where(['jf.service_id'=> $value->id,'u.parent_id'=>Auth::user()->business_id,'jf.is_insufficiency'=>'1'])
            ->count();

            $array_result[] = ['check_id'=>$value->id,'check_name'=> $value->name,'insuf'=>$insuf]; 
                // 
        }
        // dd($array_result);

      $route_group = ActionMaster::where('route_group','')->get();

      $candidates = DB::table('users as u')
      ->DISTINCT('u.id')
      ->select('u.*','j.sla_id','jsi.jaf_send_to','j.jaf_status','j.job_id','j.candidate_id','jsi.jaf_send_to','j.id as job_item_id')      
      ->join('job_items as j','j.candidate_id','=','u.id') 
      ->join('job_sla_items as jsi','jsi.candidate_id','=','j.candidate_id' )             
      ->where(['u.user_type'=>'candidate','u.parent_id'=>$business_id,'is_deleted'=>'0'])->get();

      // dd($candidates);

      // dd($candidates);

      $tota_candidates = $query->count();
         
        if ($request->ajax())
            return view('admin.candidates.completed-report.ajax', compact('items','customers','services','tota_candidates','candidates','candidates_id','permissions','route_group','filled','array_result','insuffs','service_s','send_to','insuff','jafstatus','verification_status','verify_status','pending','draft'));
        else
            return view('admin.candidates.completed-report.index', compact('items','customers','services','tota_candidates','candidates','candidates_id','permissions','route_group','filled','array_result','insuffs','service_s','send_to','insuff','jafstatus','verification_status','verify_status','pending','draft'));   
    	
    }
    public function closedcaseIndex(Request $request)
    {
      $business_id = Auth::user()->business_id;
    	$user_id = Auth::user()->id;
      $rows=15;
      // $insuffs=$service="";
      $query = DB::table('users as u')
              ->DISTINCT('u.id')
              ->select('u.*','j.sla_id','j.tat_start_date','j.jaf_status','j.job_id','j.id as job_item_id','j.candidate_id','jsi.jaf_send_to','j.filled_at','j.is_tat_ignore','j.tat_notes','j.tat_ignore_days','j.is_qc_done','j.is_jaf_ready_report')      
              ->join('job_items as j','j.candidate_id','=','u.id')  
              ->join('job_sla_items as jsi','jsi.candidate_id','=','j.candidate_id',) 
              ->where(['u.user_type'=>'candidate','u.parent_id'=>$business_id,'u.is_deleted'=>'0','u.close_case'=>1]);
              if(is_numeric($request->get('customer_id'))){
                $query->where('u.business_id',$request->get('customer_id'));
              }
              if(is_numeric($request->get('candidate_id'))){
                $query->where('u.id',$request->get('candidate_id'));
              }
              if(is_numeric($request->get('candidate'))){
                // echo $request->get('candidate');
                $query->where('u.id',$request->get('candidate'));
              }
              if($request->get('from_date') !=""){
                $query->whereDate('u.created_at','>=',date('Y-m-d',strtotime($request->get('from_date'))));
              }
              if($request->get('to_date') !=""){
                $query->whereDate('u.created_at','<=',date('Y-m-d',strtotime($request->get('to_date'))));
              }
              if($request->get('email')){
                $query->where('u.email',$request->get('email'));
              }
              if($request->get('mob')){
                $query->where('u.phone',$request->get('mob'));
              }
              if($request->get('ref')){
                $query->where('u.display_id',$request->get('ref'));
              }
              if($request->get('type')){
                $query->where('u.priority',$request->get('type'));
              }
              if ($request->get('active_case')) {
                // echo $request->get('active_case');
                $query->where('j.jaf_status',$request->get('active_case'));
              }
              // if ($request->get('remain')&&$request->get('status')) {
              //   $query->where(['jsi.jaf_send_to'=>$request->get('remain'),'j.jaf_status'=>$request->get('status')]);
              // }
              if ($request->get('remain')) {
        
                $query->where(['jsi.jaf_send_to'=>$request->get('remain')]);
              }
              if ($request->get('insuff_raised')&&$request->get('insuff_status')) {
       
                $query->join('jaf_form_data as jd','jd.candidate_id','=','u.id')->where(['jd.is_insufficiency'=>$request->get('insuff_status'),'jd.service_id'=>$request->get('insuff_raised')]);
                // dd($query);
              }
              if($request->get('service')){
                if ($request->get('insuffs') && $request->get('service')) {
        
                  $query->join('jaf_form_data as jd','jd.candidate_id','=','u.id')->where(['jd.is_insufficiency'=>$request->get('insuffs'),'jd.service_id'=>$request->get('service')]);
                  // dd($query);
                }
                if ($request->get('verification_status') && $request->get('service')) {
                  //  echo($request->get('verification_status'));
                //  if$request->get('verification_status')=='0' ? null:'success';
                    $query->join('jaf_form_data as jf','jf.candidate_id','=','u.id')->where(['jf.verification_status'=>null,'jf.service_id'=>$request->get('service')]);
                    
                }
                if ($request->get('verify_status') && $request->get('service')) {
                  //  echo($request->get('service'));
                //  if$request->get('verification_status')=='0' ? null:'success';
                    $query->join('jaf_form_data as jf','jf.candidate_id','=','u.id')->where(['jf.verification_status'=>$request->get('verify_status'),'jf.service_id'=>$request->get('service')]);
                    
                }
              }
              if ($request->get('service_name')) {
                // echo($request->get('service_name'));
                $query->where(['jsi.service_id'=>$request->get('service_name')]);
              }
              if ($request->get('sendto')) {
        
                $query->where(['jsi.jaf_send_to'=>$request->get('sendto')]);
              }
              if ($request->get('sendto') && ($request->get('jafstatus1') || $request->get('jafstatus2'))) {

                $value=$request->get('jafstatus1').','.$request->get('jafstatus2');

                $query->where(['jsi.jaf_send_to'=>$request->get('sendto')])
                        ->whereIn('j.jaf_status',explode(',',$value));
              }
              if ($request->get('search')) {
                // $searchQuery = '%' . $request->search . '%';
              // echo($request->input('search'));
                $query->where('u.first_name',$request->get('search'))->orWhere('u.name',$request->get('search'))->orWhere('u.email',$request->get('search'))->orWhere('u.display_id',$request->get('search'))->orWhere('u.phone',$request->get('search'))->orWhere('u.client_emp_code',$request->get('search'));
              }
              if($request->get('rows')!='') {
                $rows = $request->get('rows');
              }
              $query->orderBy('u.created_at','desc');
      // dd($query->get());
      $items =    $query->paginate($rows);
              
      // $users= User::whereIn('user_type',['user','candidate'])->get();
      // $checks = UserCheck::all(); 
      // $job_sla_items = DB::table('job_sla_items')->get();
              // dd($users);
      $customers = DB::table('users as u')
        ->select('u.id','u.name','u.first_name','u.last_name','u.email','u.phone','b.company_name')
        ->join('user_businesses as b','b.business_id','=','u.id')
        ->where(['u.user_type'=>'client','u.parent_id'=>$business_id])
        ->get();

        $filled = $request->get('active_case');
        // $send_to = $request->get('sendto');
        // $jafstatus =$request->get('jafstatus');
        // $insuff = $request->get('insuff');
        // $verification_status =$request->get('verification_status');
        // $verify_status =$request->get('verify_status');
        
        $send_to = $request->get('sendto');
        $jafstatus =$request->get('jafstatus');
        $pending=$request->get('jafstatus1');
        $draft=$request->get('jafstatus2');
        $insuff = $request->get('insuff');
        $verification_status =$request->get('verification_status');
        $verify_status =$request->get('verify_status');

        $insuffs = $request->get('insuffs');
        $service_s = $request->get('service');
        $candidates_id = $request->get('candidate');


        // dd($candidate);
        // dd($service);

        $permissions = DB::select("SELECT u.id,u.name,u.email,jsi.candidate_id,jsi.sla_id,u.business_id,u.phone,ji.jaf_status,u.created_at,ji.job_id, GROUP_CONCAT(DISTINCT s.name) AS alot_services FROM `users` AS u LEFT JOIN user_checks AS uc ON u.id = uc.user_id LEFT JOIN job_sla_items AS jsi ON uc.checks = jsi.service_id LEFT JOIN services AS s ON jsi.service_id = s.id JOIN job_items AS ji ON jsi.candidate_id= ji.candidate_id where u.business_id = $business_id AND u.id = $user_id and u.user_type= 'user'  GROUP BY u.id,jsi.candidate_id,jsi.sla_id,ji.jaf_status,ji.job_id");

      // $services = DB::table('services')->get();

      $services = DB::table('services')
        ->select('name','id')
        ->where(['status'=>'1'])
        ->where('business_id',NULL)
        ->whereNotIn('type_name',['e_court'])
        ->orwhere('business_id',$business_id)
        ->get();
      
        $array_result = [];

        foreach ($services as $key => $value) {
            
            
            $insuf = DB::table('jaf_form_data as jf')
            ->join('users as u','u.id','=','jf.candidate_id')
            ->where(['jf.service_id'=> $value->id,'u.parent_id'=>Auth::user()->business_id,'jf.is_insufficiency'=>'1'])
            ->count();

            $array_result[] = ['check_id'=>$value->id,'check_name'=> $value->name,'insuf'=>$insuf]; 
                // 
        }
        // dd($array_result);

      $route_group = ActionMaster::where('route_group','')->get();

      $candidates = DB::table('users as u')
      ->DISTINCT('u.id')
      ->select('u.*','j.sla_id','jsi.jaf_send_to','j.jaf_status','j.job_id','j.candidate_id','jsi.jaf_send_to','j.id as job_item_id')      
      ->join('job_items as j','j.candidate_id','=','u.id') 
      ->join('job_sla_items as jsi','jsi.candidate_id','=','j.candidate_id' )             
      ->where(['u.user_type'=>'candidate','u.parent_id'=>$business_id,'is_deleted'=>'0'])->get();

      // dd($candidates);

      // dd($candidates);

      $tota_candidates = $query->count();
        if ($request->ajax())
            return view('admin.candidates.close-case.ajax', compact('items','customers','services','tota_candidates','candidates','candidates_id','permissions','route_group','filled','array_result','insuffs','service_s','send_to','insuff','jafstatus','verification_status','verify_status','pending','draft'));
        else
            return view('admin.candidates.close-case.index', compact('items','customers','services','tota_candidates','candidates','candidates_id','permissions','route_group','filled','array_result','insuffs','service_s','send_to','insuff','jafstatus','verification_status','verify_status','pending','draft'));   
    	
    }
    

     /**
     * Export Excel of candidate's BGV data.
     *
     * @return \Illuminate\Contracts\Support\Renderable
     */
    public function export(Request $request) 
    {
      // dd($request->all());  
      $from_date = $to_date= $customer_id=$business_id = $check_id = "";
      $business_id = Auth::user()->business_id;

      $service_id=[];
      $candidate_id=[];
        
        // dd($request->session()->get('export_candidate_id'));

        // if( $request->session()->has('from_date') && $request->session()->has('to_date'))
        // {  
        //   $from_date     =  $request->session()->get('from_date');
        //   $to_date       =  $request->session()->get('to_date');
        // }
        // else
        // {
        //   if($request->session()->has('from_date'))
        //   {
        //     $from_date      =  $request->session()->get('from_date');
        //   }
        // }
        // //
        // if($request->session()->has('customer_id'))
        // {  
        //   $customer_id      =  $request->session()->get('customer_id');
        // }
        // if($request->session()->has('candidate_id'))
        // {  
        //   $candidate_id      =  $request->session()->get('candidate_id');
        // }
        // if($request->session()->has('check_id'))
        // {  
        //   $check_id      =  $request->session()->get('check_id');
        // }

        // if($request->session()->has('export_service_id'))
        // {  
        //     $service_id   =  $request->session()->get('export_service_id');
        //     sort($service_id);
        // }

        // if($request->session()->has('export_candidate_id'))
        // {  
        //     $candidate_id   =  $request->session()->get('export_candidate_id');
        //     rsort($candidate_id);
        // }

        if($request->has('export_service_id'))
        {  
            $service_id   =  $request->export_service_id;
            sort($service_id);
        }

        if($request->has('export_candidate_id'))
        {  
            $candidate_id   =  $request->export_candidate_id;
            rsort($candidate_id);
        }

        // dd($service_id);
        
        
        // dd($check_id);
         
        // if($check_id == '1'){
        //   return Excel::download(new JafaddressExport($from_date, $to_date, $customer_id,$candidate_id, $check_id, $business_id), 'candidates-jaf-address.xlsx');
        // }
        // elseif($check_id == '2'){
        //   return Excel::download(new JafadharExport($from_date, $to_date, $customer_id,$candidate_id, $check_id, $business_id), 'candidates-jaf-aadhar.xlsx');
        // }
        // elseif($check_id == '3'){
        //   return Excel::download(new JafpanExport($from_date, $to_date, $customer_id,$candidate_id, $check_id, $business_id), 'candidates-jaf-pan.xlsx');
        // }
        // elseif($check_id == '4'){
        //   return Excel::download(new JafvoteridExport($from_date, $to_date, $customer_id,$candidate_id, $check_id, $business_id), 'candidates-jaf-voterid.xlsx');
        // }
        // elseif($check_id == '7'){
        //   return Excel::download(new JafrcExport($from_date, $to_date, $customer_id,$candidate_id, $check_id, $business_id), 'candidates-jaf-rc.xlsx');
        // }
        // elseif($check_id == '8'){
        //   return Excel::download(new JafpassportExport($from_date, $to_date, $customer_id,$candidate_id, $check_id, $business_id), 'candidates-jaf-passport.xlsx');
        // }
        // elseif($check_id == '9'){
        //   return Excel::download(new JafdlExport($from_date, $to_date, $customer_id,$candidate_id, $check_id, $business_id), 'candidates-jaf-dl.xlsx');
        // }
        // elseif($check_id == '10'){
        //   return Excel::download(new JafemploymentExport($from_date, $to_date, $customer_id,$candidate_id, $check_id, $business_id), 'candidates-jaf-employment.xlsx');
        // }
        // elseif($check_id == '11'){
        //   return Excel::download(new JafeducationalExport($from_date, $to_date, $customer_id,$candidate_id, $check_id, $business_id), 'candidates-jaf-educational.xlsx');
        // }
        // elseif($check_id == '13'){
        //   return Excel::download(new JafelectricityExport($from_date, $to_date, $customer_id,$candidate_id, $check_id, $business_id), 'candidates-jaf-electricity.xlsx');
        // }
        // elseif($check_id == '14'){
        //   return Excel::download(new JafgstinExport($from_date, $to_date, $customer_id,$candidate_id, $check_id, $business_id), 'candidates-jaf-gstin.xlsx');
        // }
        // elseif($check_id == '15'){
        //   return Excel::download(new JafcriminalExport($from_date, $to_date, $customer_id,$candidate_id, $check_id, $business_id), 'candidates-jaf-criminal.xlsx');
        // }
        // elseif($check_id == '16'){
        //   return Excel::download(new JafjudicialExport($from_date, $to_date, $customer_id,$candidate_id, $check_id, $business_id), 'candidates-jaf-judicial.xlsx');
        // }
        // elseif($check_id == '17'){
        //   return Excel::download(new JafreferenceExport($from_date, $to_date, $customer_id,$candidate_id, $check_id, $business_id), 'candidates-jaf-refrence.xlsx');
        // }
        // elseif($check_id == '18'){
        //   return Excel::download(new JafdatabaseExport($from_date, $to_date, $customer_id,$candidate_id, $check_id, $business_id), 'candidates-jaf-database.xlsx');
        // }
        // elseif($check_id == '19'){
        //   return Excel::download(new JaftelecomExport($from_date, $to_date, $customer_id,$candidate_id, $check_id, $business_id), 'candidates-jaf-telecom.xlsx');
        // }
        // else{
        //   return Excel::download(new JafitemExport($from_date, $to_date, $customer_id,$candidate_id, $check_id, $business_id), 'candidates-jaf-data.xlsx');
        // }
        $i=0;
        foreach($service_id as $service)
        {
          $job_sla_items=DB::table('job_sla_items as js')
          ->select('js.*')
          ->join('job_items as j','j.id','=','js.job_item_id')
          // ->where('j.jaf_status','filled')
          ->where('js.service_id',$service)
          ->whereIn('js.candidate_id',$candidate_id)
          ->get();
          // dd($job_sla_items);
          if(count($job_sla_items)>0)
          {
              $i++;
          }
        }

        // if($i>0)
        // {
        //   return Excel::download(new JafdataExport($from_date, $to_date, $customer_id,$candidate_id, $service_id, $business_id), 'candidates-jaf-data.xlsx');
        // }
        // else
        // {
        //    return 'No Data Found';
        // }

        if($i>0)
        {
          $path=public_path().'/uploads/jaf-export/';

          $file_name = 'candidates-jaf-data-'.date('YmdHis').'.xlsx';

          if(!File::exists($path))
          {
              File::makeDirectory($path, $mode = 0777, true, true);
          }

          if (File::exists($path)) 
          {
              File::cleanDirectory($path);
          }

          Excel::store(new JafdataExport($from_date, $to_date, $customer_id,$candidate_id, $service_id, $business_id),'/uploads/jaf-export/'.$file_name,'real_public');

          return response()->json([
            'success' => true,
            'url' => url('/').'/uploads/jaf-export/'.$file_name
          ]);
        }
        else
        {
            return response()->json([
              'success' => false,
              'error' => 'No Data Found, Try Again with Some Other Filter Option !!'
            ]);
        }
        
        
    }


    public function exportBGV(Request $request) 
    {
      // dd($request->all());  
      $from_date = $to_date= $customer_id=$business_id = $check_id = "";
      $business_id = Auth::user()->business_id;

      $service_id=[];
      $candidate_id=[];
        
        if($request->has('export_service_id'))
        {  
            $service_id   =  $request->export_service_id;
            sort($service_id);
        }

        if($request->has('export_candidate_id'))
        {  
            $candidate_id   =  $request->export_candidate_id;
            rsort($candidate_id);
        }

        // dd($service_id);
      
        $i=0;
        foreach($service_id as $service)
        {
          $job_sla_items=DB::table('job_sla_items as js')
          ->select('js.*')
          ->join('job_items as j','j.id','=','js.job_item_id')
          // ->where('j.jaf_status','filled')
          ->where('js.service_id',$service)
          ->whereIn('js.candidate_id',$candidate_id)
          ->get();
          // dd($job_sla_items);
          if(count($job_sla_items)>0)
          {
              $i++;
          }
        }

        if($i>0)
        {
          $path=public_path().'/uploads/jaf-export/';

          $file_name = 'candidates-jaf-data-'.date('YmdHis').'.xlsx';

          if(!File::exists($path))
          {
              File::makeDirectory($path, $mode = 0777, true, true);
          }

          if (File::exists($path)) 
          {
              File::cleanDirectory($path);
          }

          Excel::store(new JafDataExportBgv($from_date, $to_date, $customer_id,$candidate_id, $service_id, $business_id),'/uploads/jaf-export/'.$file_name,'real_public');

          return response()->json([
            'success' => true,
            'url' => url('/').'/uploads/jaf-export/'.$file_name
          ]);
        }
        else
        {
            return response()->json([
              'success' => false,
              'error' => 'No Data Found, Try Again with Some Other Filter Option !!'
            ]);
        }
    }

    /**
     * Export All Excel of candidate's BGV data.
     *
     * @return \Illuminate\Contracts\Support\Renderable
     */
    public function allExport(Request $request) 
    {
        return Excel::download(new JafallExport(), 'candidates-all-jaf-data.xlsx');
    }
   
    /**
     * set the session data
     *
     * @return \Illuminate\Contracts\Support\Renderable
     */
    public function setSessionData(Request $request)
    {   
        //clear session data 
        Session()->forget('customer_id');
        Session()->forget('candidate_id');
        Session()->forget('to_date');
        Session()->forget('from_date');
        Session()->forget('check_id');

        Session()->forget('export_service_id');
        Session()->forget('export_candidate_id');

        // Session()->forget('jaf_id');
        // Session()->forget('service_id');

        if( is_numeric($request->get('customer_id')) ){             
            session()->put('customer_id', $request->get('customer_id'));
        }
        if( is_numeric($request->get('candidate_id')) ){             
          session()->put('candidate_id', $request->get('candidate_id'));
        }
        // both date is selected 
        if($request->get('report_date') !="" && $request->get('to_date') !=""){
            session()->put('report_from_date', $request->get('report_date'));
            session()->put('report_to_date', $request->get('to_date'));
        }
        else
        {
          if($request->get('from_date') !=""){
            session()->put('from_date', $request->get('from_date'));
          }
          if($request->get('to_date') !=""){
            session()->put('to_date', $request->get('to_date'));
          }
        }
        //
        if($request->get('check_id') !=""){
          session()->put('check_id', $request->get('check_id'));
        }

        // if($request->get('jaf_id')!="")
        // {
        //   session()->put('jaf_id', $request->get('jaf_id'));
        // }

        // if($request->get('service_id')!="")
        // {
        //   session()->put('service_id', $request->get('service_id'));
        // }
        
        if($request->get('export_service_id'))
        {
            session()->put('export_service_id', $request->get('export_service_id'));
        }

        if($request->get('export_candidate_id'))
        {
            session()->put('export_candidate_id', $request->get('export_candidate_id'));
        }

        // dd(session()->get('export_candidate_id'));

        echo '1';
    }

    /**
     * Resend Mail of candidate's BGV form.
     *
     * @return \Illuminate\Contracts\Support\Renderable
     */
    public function resendMail(Request $request)
    {
        $business_id = Auth::user()->business_id;
        $candidate_id = base64_decode($request->candidate_id);
          
        try{

          $candidate=DB::table('users')->where(['id'=>$candidate_id,'user_type'=>'candidate'])->first();
          
          if($candidate!=NULL)
          {
            $email = $candidate->email;
            $name  = $candidate->first_name;

            $job_items=DB::table('job_items')->where(['candidate_id'=>$candidate_id])->first();
            $data  = array('name'=>$name,'email'=>$email,'case_id'=>base64_encode($job_items->id),'c_id'=>base64_encode($candidate_id));

            if($email!="" || $email!=NULL){
              
              //   EmailConfigTrait::emailConfig();
              //   //get Mail config data
              //  //   $mail =null;
              //  $mail= Config::get('mail');
              //  // dd($mail['from']['address']);
              //      if (count($mail)>0) 
              //      {
              //          Mail::send(['html'=>'mails.jaf-info'], $data, function($message) use($email,$name,$mail) {
              //              $message->to($email, $name)->subject
              //              ('Task Notification - Fill your job application form ');
              //              $message->from($mail['from']['address'],$mail['from']['name']);
              //          });
              //      }
              //      else 
              //      {
              //         Mail::send(['html'=>'mails.jaf-info'], $data, function($message) use($email,$name) {
              //           $message->to($email, $name)->subject
              //             ('BGV Link - Fill your job application form');
              //           $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
              //         });
              //      }

              $randomPassword = Str::random(10);
              $hashed_random_password = Hash::make($randomPassword);
            
              DB::table('users')->where(['id'=>$candidate_id])->update(['password'=>$hashed_random_password,'status'=>'1']);
              $company = DB::table('user_businesses')->select('company_name')->where(['business_id'=>$candidate->business_id])->first();
            


              $email = $candidate->email;
              $name  = $candidate->first_name;
              $company_name=$company->company_name;
              $id = $candidate->business_id;
              $data  = array('name'=>$name,'email'=>$email,'password'=>$randomPassword,'company_name'=>$company_name,'id'=>$id,'candidate'=>$candidate);

              Mail::send(['html'=>'mails.jaf_info_credential-candidate'], $data, function($message) use($email,$name,$company_name) {
                  $message->to($email, $name)->subject
                    ($name.': Authorization by '.$company_name.' to do a Background Verification Check');
                  $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
              });

            // Send Email to Customer for BGV Link to Candidate
            // $client = User::where('id',$id)->first();

            // $email = $client->email;
            // $name = $client->first_name;

            $notification_controls = DB::table('notification_control_configs as nc')
                                        ->select('nc.*')
                                        ->join('notification_controls as n','n.business_id','=','nc.business_id')
                                        ->where(['n.status'=>1,'nc.status'=>1,'n.business_id'=>$candidate->business_id,'n.type'=>'jaf-sent-to-candidate','nc.type'=>'jaf-sent-to-candidate'])
                                        ->get();

            if(count($notification_controls)>0)
            {
              foreach($notification_controls as $item)
              {
                
                $email = $item->email;
                $name = $item->name;
                $company_name=$company->company_name;
                $sender = User::where('id',$business_id)->first();
                
                $msg = 'Notification for Job Application Form Verifications to Candidate ('.$candidate->name.' - '.$candidate->display_id.') Has Been Resent at '.date('d-M-y h:i A').'';
                $data  = array('name'=>$name,'email'=>$email,'company_name'=>$company_name,'sender'=>$sender,'msg'=>$msg);

                Mail::send(['html'=>'mails.jaf-link'], $data, function($message) use($email,$name) {
                    $message->to($email, $name)->subject
                        ('Clobminds Pvt Ltd - Your account credential');
                    $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                });

              }
            }

                return response()->json([
                  'status' =>'ok',
                  'name' => $candidate->name,
                  'message' => 'Mail Send Successfully !'
                ]);

            }
            else
            {
              return response()->json([
                'status' =>'no',
                'message' => 'Something Went Wrong!'
              ]);
            }
          }

          return response()->json([
            'status' =>'no',
            'message' => 'Something Went Wrong !'
          ]);

        }
        catch (\Exception $e) {
          // something went wrong
          return $e;
        }       
    }

    // public function sessionForget(Request $request)
    // {
    //     Session()->forget('jaf_id');
    //     Session()->forget('service_id');

    //     echo '1';
    // }

    //  //create options
    //  public function create_option()
    //  {
    //    $business_id = Auth::user()->business_id;
         
    //    $items = DB::table('users')
    //            ->select('*')              
    //            ->where(['user_type'=>'candidate','business_id'=>$business_id])
    //            ->get();
 
    //       return view('admin.candidates.create-option', compact('items'));
         
    //  }

    //create a candidate
    public function create()
    {
      $business_id = Auth::user()->business_id;
        
      $items = DB::table('users')
              ->select('*')
              ->where(['user_type'=>'candidate','business_id'=>$business_id])
              ->get();

      $customers = DB::table('users as u')
              ->select('u.id','u.name','u.email','u.phone','b.company_name')
              ->join('user_businesses as b','b.business_id','=','u.id')
              ->where(['user_type'=>'client','parent_id'=>$business_id])
              ->get();

      $services = DB::table('services as s')
                  ->select('s.*')
                  ->join('service_form_inputs as si','s.id','=','si.service_id')
                  ->where('s.business_id',NULL)
                  ->where('s.status',1)
                  ->whereNotIn('s.type_name',['gstin'])
                  ->orwhere('s.business_id',$business_id)
                  ->groupBy('si.service_id')
                  ->get();
      // dd($services);
      $variable = DB::table('customer_sla')->select('id','title')->where('parent_id','0')->first();
      // dd($variable);
      // $excel_dummy = ImportCandidate::all();
      return view('admin.candidates.create', compact('items','customers','services','variable'));
        
    }

    //store a candidate
    public function store(Request $request)
    {
        $current_date = date('d-m-Y');
        $business_id = Auth::user()->business_id;
        $dob = NULL;
        $case_received_date = NULL;
        $sla_id=NULL;
        $max_service_tat=0;
        $rules= [
            'customer'    => 'required',
            'first_name'  => 'required|regex:/^[a-zA-Z]+$/u|min:1|max:255',
            'middle_name' =>  'nullable|regex:/^[a-zA-Z ]+$/u|min:1|max:255',
            'last_name'  => 'nullable|regex:/^[a-zA-Z]+$/u|min:1|max:255',
            // 'sla'         => 'required',
            'father_name' => 'required|regex:/^[a-zA-Z ]+$/u|min:2|max:255',
            'dob'         => 'required|date',
            'case_received_date'  => 'required|date|before_or_equal:'.$current_date,
            'email'       => 'nullable|email:rfc,dns',
            'phone'       => 'required|regex:/^((?!(0))[0-9\s\-\+\(\)]{10,11})$/',
            'tat_start_date'    => 'nullable|date|after_or_equal:'.$current_date,
            'sla_type'  => 'required|in:package,variable',
            'days_type'  => 'required_if:sla_type,variable|in:working,calender',
            'price_type'  => 'required_if:sla_type,variable|in:package,check',
            'price'       => 'required_if:price_type,package|numeric|min:0',
            'jaf'         => 'required_without:assign_to',
            'aadhar'      => 'nullable|regex:/^((?!([0-1]))[0-9]{12})$/',
            'gender'      => 'required',
            'sla'         => 'required_if:sla_type,package',
            'services'    => 'required_if:sla_type,package,variable|array|min:1',
           
         ];
        
         $customMessages = [
          'days_type.required_if'       => 'The days type field is required',
          'price_type.required_if'       => 'The price type field is required',
          'price.required_if' => 'The price field is required',
          'sla.required_if' =>  'The sla is required',
          'services.required_if' => 'Select at least one Check or Service item.',
          'jaf.required_without' => 'Select at least one Option of BGV Filling Access',
          'aadhar.regex' => 'Please Enter a 12-digit valid Aadhar Number.',
          'phone.regex'=>'Phone Number must be Valid & 10-digit Number !!' ,
          
        ];

         $validator = Validator::make($request->all(), $rules,$customMessages);
         if ($validator->fails()){
             return response()->json([
                 'success' => false,
                 'errors' => $validator->errors()
             ]);
         }
         //dd($request->all());
        DB::beginTransaction();
        try
        {
            if($request->has('case_received_date')){
              $case_received_date = date('Y-m-d',strtotime($request->input('case_received_date')));
            }
            if($request->has('dob')){
              $dob = date('Y-m-d',strtotime($request->input('dob')));
            }
            $date_of_b=Carbon::parse($dob)->format('Y-m-d');
            $today=Carbon::now();
            $today_date=Carbon::now()->format('Y-m-d');
            $year_diff=$today->diffInYears($date_of_b);
            //  //validation for sla type
            //  if($request->sla_type=='package')
            //  {
            //    $rules=[
            //       'sla'         => 'required',
            //       'services'    => 'required|array|min:1',
            //    ];
            //    $customMessages=[
            //     'services.required' => 'Select at least one Check or Service item.',
            //    ];
            //     $validator = Validator::make($request->all(), $rules,$customMessages);
                
            //     if ($validator->fails()){
            //         return response()->json([
            //             'success' => false,
            //             'errors' => $validator->errors()
            //         ]);
            //     }  
            //  }
            if($request->sla_type=='variable')
            {
                // $rules=[
                //   'services'    => 'required|array|min:1',
                // ];
                // $customMessages=[
                //   'services.required' => 'Select at least one Check or Service item.',
                // ];
                //   $validator = Validator::make($request->all(), $rules,$customMessages);
                  
                //   if ($validator->fails()){
                //       return response()->json([
                //           'success' => false,
                //           'errors' => $validator->errors()
                //       ]);
                //   }

                  if( count($request->input('services')) > 0 ){
                    $arr=[];
                    foreach($request->input('services') as $item){
                      $rules=[
                        'service_unit-'.$item    => 'required|integer|min:1',
                        'tat-'.$item      => 'required|integer|min:1',
                        'incentive-'.$item      => 'required|integer|lte:tat-'.$item,
                        'penalty-'.$item      => 'required|integer|gte:tat-'.$item,
                        'price-'.$item => 'required_if:price_type,check|numeric|min:0'
                      ];
                      $customMessages=[
                        'service_unit-'.$item.'.required' => 'No of Verification is required',
                        'service_unit-'.$item.'.integer' => 'No of Verification should be numeric',
                        'service_unit-'.$item.'.min' => 'No of Verification should be atleast 1',
                        // 'service_unit-'.$item.'.max' => 'No of Verification should be Maximum 3',
                        'tat-'.$item.'.required' => 'No of TAT is required',
                        'tat-'.$item.'.integer' => 'No of TAT should be numeric',
                        'tat-'.$item.'.min' => 'No of TAT should be atleast 1',
                        'incentive-'.$item.'.required' => 'No of incentive TAT is required',
                        'incentive-'.$item.'.integer' => 'No of incentive TAT should be numeric',
                        'incentive-'.$item.'.lte' => 'No of Incentive TAT should be less than or equal to Service TAT',
                        'penalty-'.$item.'.required' => 'No of penalty TAT is required',
                        'penalty-'.$item.'.integer' => 'No of penalty TAT should be numeric',
                        'penalty-'.$item.'.gte' => 'No of penalty TAT should be greater than or equal to Service TAT',
                        'price-'.$item.'.required_if' => 'Check Price is required',
                        'price-'.$item.'.numeric' => 'Check Price should be numeric',
                        'price-'.$item.'.min' => 'Check Price should be minimum value 0',
                      ];
                        $validator = Validator::make($request->all(), $rules,$customMessages);
                        
                        if ($validator->fails()){
                            return response()->json([
                                'success' => false,
                                'errors' => $validator->errors()
                            ]);
                        }

                        // $max_service_tat =  $max_service_tat + $request->input('tat-'.$item);
                        $arr[]=intval($request->input('tat-'.$item));
                    }

                    $max_service_tat = max($arr);
                  }


            }

            $sla_id=$request->input('sla');
            $customer_sla=DB::table('customer_sla')->where('id',$sla_id)->first();
            //dd($customer_sla);

            //  dd($sla_id);


            //  if(preg_match("/^[0-9]{4}-[0-1][0-9]-[0-3][0-9]$",$date_of_b)===false)
            //  {
            //     return response()->json([
            //       'success' => false,
            //       'custom'  => 'yes',
            //       'errors' =>['dob'=>'DOB Should be date format']
            //     ]);
            //  }
            if($year_diff<18 || ($date_of_b >= $today_date))
            {
              return response()->json([
                'success' => false,
                'custom'  => 'yes',
                'errors' =>['dob'=>'Age Must be 18 or older !']
              ]);
            }

            if($request->input("jaf")=='candidate')
            {
              $email_rules=[
                'email' => 'required|email:rfc,dns'
              ];
      
              $validator = Validator::make($request->all(), $email_rules);
                
              if ($validator->fails()){
                  return response()->json([
                      'success' => false,
                      'errors' => $validator->errors()
                  ]);
              }
            }

            $phone = preg_replace('/\D/', '', $request->input('phone'));

            if(strlen($phone)!=10)
            {
              return response()->json([
                'success' => false,
                'custom'=>'yes',
                'errors' => ['phone'=>'Phone number must be Valid & 10-digit Number !!']
              ]);
            }

            // email  validation
            // $is_user_exist = DB::table('users')
            // ->where(['email'=>$request->input('email')])
            // ->count();

            // if($is_user_exist != 0 && $request->input('email') !=""){

            //     return response()->json([
            //       'success' => false,
            //       'custom'=>'yes',
            //       'errors' => ['email'=>'This email is already exists!']
            //     ]);
              
            // }

            
            // user validation
            $user_already_exist = DB::table('users')
            ->where(['first_name'=>$request->input('first_name'), 'dob'=>date('Y-m-d', strtotime($request->input('dob'))), 'father_name'=>$request->input('father_name') ])
            ->count();

            if($user_already_exist > 0)
            {
                return response()->json([
                  'success' => false,
                  'custom'=>'yes',
                  'errors' => ['user'=>'It Seems like the Candidate is already exist!']
                ]);
            }

            // Email Validation

            if($request->input('email')!=null || $request->input('email')!='')
            {
                $email_user = DB::table('users')->where('email',$request->input('email'))->first();

                if($email_user!=NULL)
                {
                    return response()->json([
                      'success' => false,
                      'custom'=>'yes',
                      'errors' => ['email'=>'This Email Has Already Been Exists !!']
                    ]);
                }
            }
            if($request->input('phone')!=null || $request->input('phone')!='')
            {
                $phone_user = DB::table('users')->where(['phone'=>$phone,'user_type'=>'candidate'])->first();

                if($phone_user!=NULL)
                {
                    return response()->json([
                      'success' => false,
                      'custom'=>'yes',
                      'errors' => ['phone'=>'This Phone number has already been exists !!']
                    ]);
                }
            }

            
            $is_send_jaf_link = 0;
            if($request->input('is_send_jaf_link')){
              $is_send_jaf_link = '1';
            }
            
            $name = trim(preg_replace('/^\s+|\s+$|\s+(?=\s)/', '', $request->input('first_name').' '.$request->input('middle_name').' '.$request->input('last_name')));
            //create user 
            $data = 
            [
                'business_id'   =>$request->input('customer'),
                'user_type'     =>'candidate',
                'client_emp_code'=>$request->input('client_emp_code'),
                'entity_code'   =>$request->input('entity_code'),
                // 'work_order_id'   =>$request->input('work_order_id'),
                'parent_id'     =>Auth::user()->business_id,
                'name'          =>$name,
                'first_name'    => ucwords(strtolower($request->input('first_name'))),
                'middle_name'   => ucwords(strtolower($request->input('middle_name'))),
                'last_name'     => ucwords(strtolower($request->input('last_name'))),
                'father_name'   => ucwords(strtolower($request->input('father_name'))),
                'aadhar_number' =>$request->input('aadhar'),
                'dob'           =>$dob,
                'case_received_date' => $case_received_date,
                'gender'        =>$request->input('gender'),
                'email'         =>$request->input('email'),
                // 'password'      => Hash::make($request->input('password')),
                'phone'         =>$phone,
                'phone_code'    => $request->primary_phone_code,
                'phone_iso'     => $request->primary_phone_iso,
                'created_by'    =>Auth::user()->id,
                'created_at'    =>date('Y-m-d H:i:s') 
            ];
            $user_id =User::create($data); 
            //dd($user_id);
            $user_id =  $user_id->id;
            // $pass_user= DB::table('users')->where(['id'=>$user_id])->first();
            // $pass_store=[
            //     'business_id'   =>$pass_user->business_id,
            //     'user_id'   =>$pass_user->id,
            //     'parent_id' =>$pass_user->parent_id,
            //     'email' =>$pass_user->email,
            //     'password' => $pass_user->password,
            // ];
            // DB::table('password_logs')->insert($pass_store);
            // dd($user_id);
            $display_id = "";
            //check customer config
            $candidate_config = DB::table('candidate_config')
            ->where(['client_id'=>$request->input('customer'),'business_id'=>$business_id])
            ->first();
            //check client 
            $client_config = DB::table('user_businesses')
            ->where(['business_id'=>$request->input('customer')])
            ->first(); 

            $latest_user = DB::table('users')
            ->select('display_id')
            ->where(['user_type'=>'candidate','business_id'=>$business_id])
            ->orderBy('id','desc')
            ->first();
            // dd($latest_user);
            $starting_number = $user_id;

            if($candidate_config !=null){
              if($latest_user != null){
                if($latest_user->display_id !=null){
                  $id_arr = explode('-',$latest_user->display_id);
                  $starting_number = $id_arr[2]+1;  
                }
              }
              $starting_number = str_pad($starting_number, 10, "0", STR_PAD_LEFT);
              $display_id = $candidate_config->customer_prefix.'-'.$candidate_config->client_prefix.'-'.$starting_number;
            }else{
              $customer_company = DB::table('user_businesses')
                ->select('company_name')
                ->where(['business_id'=>$business_id])
                ->first();
              $client_company = DB::table('user_businesses')
                ->select('company_name')
                ->where(['business_id'=>$request->input('customer')])
                ->first();
                
              $u_id = str_pad($user_id, 10, "0", STR_PAD_LEFT);
              $display_id = trim(strtoupper(str_replace(array(' ','-'),'',substr($customer_company->company_name,0,4)))).'-'.trim(strtoupper(substr($client_company->company_name,0,4))).'-'.$u_id;

              // $display_id = trim(strtoupper(substr($customer_company->company_name,0,4))).'-'.trim(strtoupper(substr($client_company->company_name,0,4))).'-'.$u_id;
            }
          // dd($display_id);
            DB::table('users')->where(['id'=>$user_id])->update(['display_id'=>$display_id]);

            if($request->input('customer_user')!=null){

                CandidateAccess::create([
                  'business_id' => $request->input('customer'),
                  'candidate_id' => $user_id,
                  'access_id' => $request->input('customer_user'),
                  'user_type' => 'user',
                  'created_at' => date('Y-m-d H:i:s')
                ]);
            }
            
            //
            $job_data = 
            [
              'business_id'  => $request->input('customer'),
              'parent_id'    => Auth::user()->business_id,
              'title'        => NULL,
              'sla_id'       => $sla_id,
              'total_candidates'=>1,
              'send_jaf_link_required'=>$is_send_jaf_link,
              'status'       =>0,
              'created_by'   =>Auth::user()->id,
              'created_at'   => date('Y-m-d H:i:s')
            ];
            $job_id = Job::create($job_data);
            $job_id  =$job_id->id;
            
            // DB::table('jobs')->insertGetId($job_data);


            // job item items      
            $data = 
            [
              'business_id' =>$request->input('customer'), 
              'job_id'       =>$job_id, 
              'candidate_id' =>$user_id,
              'sla_id'       =>$sla_id,
              'sla_type'     => $request->sla_type,
              'days_type'    => stripos($request->sla_type,'variable')!==false ? $request->days_type : $customer_sla->days_type,
              'price_type'    => stripos($request->sla_type,'variable')!==false ? $request->price_type : $customer_sla->price_type,
              'tat_type'     => $customer_sla->tat_type,
              'incentive'     => $customer_sla->incentive,
              'penalty'     => $customer_sla->penalty,
              'tat'     => stripos($request->sla_type,'variable')!==false ?$max_service_tat:$customer_sla->tat,
              'client_tat'     => stripos($request->sla_type,'variable')!==false ?$max_service_tat:$customer_sla->client_tat,
              'jaf_status'   =>'pending',
              'sla_title' => $customer_sla->title,
              'tat_start_date'=> $request->tat_start_date?date('Y-m-d',strtotime($request->tat_start_date)):NULL,
              'created_by'   =>Auth::user()->id,
              'created_at'   =>date('Y-m-d H:i:s')
            ];
            $job_item_id =JobItem::create($data);
            $job_item_id  =$job_item_id->id;
            
            // $job_item_id = DB::table('job_items')->insertGetId($data);

            if(stripos($request->sla_type,'package')!==false && stripos($customer_sla->price_type,'package')!==false)
            {
                DB::table('job_items')->where(['id'=>$job_item_id])->update([
                    'package_price'   => $customer_sla->package_price
                ]);
            }
            else if(stripos($request->sla_type,'variable')!==false && stripos($request->price_type,'package')!==false)
            {
                DB::table('job_items')->where(['id'=>$job_item_id])->update([
                    'package_price'   => $request->price
                ]);
            }

            // service items
            if($request->sla_type=='package')
            {
              $cust_sla_items = DB::table('customer_sla_items')->where(['sla_id'=>$request->input('sla')])->get();

              // if( count($request->input('services')) > 0 ){
              //   foreach($request->input('services') as $item){
                if(count($cust_sla_items)>0)
                {
                  foreach($cust_sla_items as $item)
                  {
                      $service_d=DB::table('services')->where('id',$item->service_id)->first();
                      $number_of_verifications=1;
                      $no_of_tat=1;
                      $incentive_tat=1;
                      $penalty_tat=1;
                      $price = 0;
                      $sal_item_data = DB::table('customer_sla_items')->select('number_of_verifications','tat','incentive_tat','penalty_tat','price')->where(['sla_id'=>$request->input('sla'),'service_id'=>$item->service_id])->first(); 
                      if($sal_item_data !=null){
                        $number_of_verifications= $sal_item_data->number_of_verifications;
                        $no_of_tat= $sal_item_data->tat;
                        $incentive_tat= $sal_item_data->incentive_tat;
                        $penalty_tat= $sal_item_data->penalty_tat;
                        $price= $sal_item_data->price;
                      }
                        $data = [
                                'business_id'=> $request->input('customer'), 
                                'job_id'      => $job_id, 
                                'job_item_id' => $job_item_id,
                                'candidate_id' =>$user_id,
                                'sla_id'      => $sla_id,
                                'service_id'  => $item->service_id,
                                'jaf_send_to' => $request->input('jaf')!=NULL?$request->input('jaf'):'customer',
                                // 'jaf_filled_by' => Auth::user()->id,
                                'number_of_verifications'=>$service_d->verification_type=='Manual' || $service_d->verification_type=='manual'?$number_of_verifications:1,
                                'tat'=>$no_of_tat,
                                'incentive_tat'=>$incentive_tat,
                                'penalty_tat'=>$penalty_tat,
                                'price'   => $price,
                                'sla_item_id' => $item->sla_id,
                                'created_by'  =>Auth::user()->id,
                                'created_at'  => date('Y-m-d H:i:s')
                              ]; 
                              // dd($data);
                        $jsi =JobSlaItem::create($data);
                        $jsi  =$jsi->id;
                              // DB::table('job_sla_items')->insertGetId($data); 
                  }
                }
              //   }
              // }
            }
            else if($request->sla_type=='variable')
            {
              if( count($request->input('services')) > 0 ){
                foreach($request->input('services') as $item){
                  $number_of_verifications=1;
                  $no_of_tat=1;
                  $incentive_tat=1;
                  $penalty_tat=1;
                  $price=0;
                  $number_of_verifications=$request->input('service_unit-'.$item);
                  $no_of_tat = $request->input('tat-'.$item);
                  $incentive_tat = $request->input('incentive-'.$item);
                  $penalty_tat = $request->input('penalty-'.$item);
                  $price = $request->input('price-'.$item);

                  $service_d=DB::table('services')->where('id',$item)->first();

                  $data = ['business_id'=> $request->input('customer'), 
                          'job_id'      => $job_id, 
                          'job_item_id' => $job_item_id,
                          'candidate_id' =>$user_id,
                          'sla_id'      => $sla_id,
                          'service_id'  => $item,
                          'jaf_send_to' => $request->input('jaf')!=NULL?$request->input('jaf'):'customer',
                          // 'jaf_filled_by' => Auth::user()->id,
                          'number_of_verifications'=>$service_d->verification_type=='Manual' || $service_d->verification_type=='manual'?$number_of_verifications:1,
                          'tat' => $no_of_tat,
                          'incentive_tat' => $incentive_tat,
                          'penalty_tat' => $penalty_tat,
                          'price'   => $price,
                          'sla_item_id' => $item,
                          'created_by'  =>Auth::user()->id,
                          'created_at'  => date('Y-m-d H:i:s')
                        ]; 
                        
                        $jsi =JobSlaItem::create($data);
                        $jsi  =$jsi->id;        
                }
              }
            }
            
            $checks= 0;
            //  Task assignment in task table
            if ($request->assign_to == 'on') 
            {
                  $data = [
                    'name'   =>$request->input('first_name').' '.$request->input('last_name'),
                    'parent_id'=> Auth::user()->business_id,
                    'business_id'=> $request->input('customer'), 
                    'description' => 'BGV Filling',
                    'job_id'      => $job_id, 
                    'priority' => 'normal',
                    'candidate_id' =>$user_id,
                    // 'service_id'  => $item, 
                    'assigned_to' =>Auth::user()->id,
                    'assigned_by' => Auth::user()->id, 
                    'assigned_at' => date('Y-m-d H:i:s'),
                    'start_date' => date('Y-m-d'),
                    'created_by'    =>Auth::user()->id,
                    'created_at'  => date('Y-m-d H:i:s'),
                    'is_completed' => 0,
                    'status'=>'1',
                    'started_at' => date('Y-m-d H:i:s'),
                    'updated_at'  => date('Y-m-d H:i:s')
                  ];
                  // dd($data);
                  $task =Task::create($data);
                  $task  =$task->id;
                  // $task =  DB::table('tasks')->insertGetId($data); 
          
                  // // dd($task_users); 
                  // if (count($task_users)>1) {
                  //   $random_user=array_rand($task_users,2);
                  // } else {
                  //   $random_user=$task_users;
                  // }
                  
                    //  dd($random_user);
                    // foreach ($random_user as $user)
                    // {
                    //   echo  
                    // }
                    // die;
                
                // foreach ($users as $user) {
                
                // $taskdata = [
                //   'parent_id'=> Auth::user()->business_id,
                //   'business_id'=> $request->input('customer'),
                //   'candidate_id' =>$user_id,   
                //   'job_sla_item_id'  => $jsi,
                //   'task_id'=> $task,
                //   // 'user_id' => $user->id,
                //   // 'service_id'  => $item,
                //   'created_at'  => date('Y-m-d H:i:s'),
                //   'updated_at'  => date('Y-m-d H:i:s')
                  
                // ];
                
                // DB::table('task_assignments')->insertGetId($taskdata); 
              if (Auth::user()->user_type == 'customer') {
                   # code...
                  $admin_email = Auth::user()->email;
                  $admin_name = Auth::user()->first_name;
                  //send email to customer
                  $email = $admin_email;
                  $name  = $admin_name;
                  $candidate_name = $request->input('first_name');
                  $msg = "New BGV Filling Task Created with candidate name";
                  $sender = DB::table('users')->where(['id'=>$business_id])->first();
                  $data  = array('name'=>$name,'email'=>$email,'candidate_name'=>$candidate_name,'msg'=>$msg,'sender'=>$sender);
                  EmailConfigTrait::emailConfig();
                  //get Mail config data
                 //   $mail =null;
                 $mail= Config::get('mail');
                 // dd($mail['from']['address']);
                     if (count($mail)>0) {
                         Mail::send(['html'=>'mails.task-notify'], $data, function($message) use($email,$name,$mail) {
                             $message->to($email, $name)->subject
                             ('Clobminds Pvt Ltd - Notification for BGV Filling Task');
                             $message->from($mail['from']['address'],$mail['from']['name']);
                         });
                     } else {
                        Mail::send(['html'=>'mails.task-notify'], $data, function($message) use($email,$name) {
                              $message->to($email, $name)->subject
                                ('Clobminds Pvt Ltd - Notification for BGV Filling Task');
                              $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                        });
                     }
              }
              else
              {
    
                $login_user = Auth::user()->business_id;
                $user= User::where('id',$login_user)->first();
                $admin_email = $user->email;
                $admin_name = $user->first_name;
                //send email to customer
                $email = $admin_email;
                $name  = $admin_name;
                $candidate_name = $request->input('first_name');
                $msg = "New BGV Filling Task Created with candidate name";
                $sender = DB::table('users')->where(['id'=>$business_id])->first();
                $data  = array('name'=>$name,'email'=>$email,'candidate_name'=>$candidate_name,'msg'=>$msg,'sender'=>$sender);
    
                EmailConfigTrait::emailConfig();
                //get Mail config data
               //   $mail =null;
               $mail = Config::get('mail');
               // dd($mail['from']['address']);
                   if (count($mail)>0) {
                       Mail::send(['html'=>'mails.task-notify'], $data, function($message) use($email,$name,$mail) {
                           $message->to($email, $name)->subject
                           ('Clobminds Pvt Ltd - Notification for BGV Filling Task');
                           $message->from($mail['from']['address'],$mail['from']['name']);
                       });
                   } else {
                      Mail::send(['html'=>'mails.task-notify'], $data, function($message) use($email,$name) {
                            $message->to($email, $name)->subject
                              ('Clobminds Pvt Ltd - Notification for BGV Filling Task');
                            $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                      });
                    }
              }
    
                $kams  = KeyAccountManager::where('business_id',$request->input('customer'))->get();

              $taskdata = [
                'parent_id'=> Auth::user()->business_id,
                'business_id'=> $request->input('customer'),
                'candidate_id' =>$user_id,   
                'job_sla_item_id'  => $jsi,
                'task_id'=> $task,
                'user_id' => Auth::user()->id,
                'status'=>'2',
                // 'service_id'  => $item,
                'created_at'  => date('Y-m-d H:i:s'),
                'updated_at'  => date('Y-m-d H:i:s')
                
              ];
          
              TaskAssignment::create($taskdata);
              // $task  =$task->id;
              // DB::table('task_assignments')->insertGetId($taskdata); 

            }
            else 
            {
              if ($request->input('jaf') == 'customer') {
                
                  #// end task assignment close 
                    //  if( count($request->input('services')) > 0 ){
                    //   foreach($request->input('services') as $item){
                    // $id = DB::table('user_checks')->select('*')->where(['checks'=> $item])->first(); 
                    // if($id !=null){
                    //   $checks= $id->user_id;
                    // }
                      // $kam = KeyAccountManager::where('business_id', $request->input('customer'))->first();
    
                      //Get data of user of customer with 
                      // $user_permissions = DB::table('users as u')
                      // ->join('role_masters as rm', 'rm.id', '=', 'u.role')
                      // ->join('role_permissions as rp', 'rp.role_id', '=', 'rm.id')
                      // ->select('u.name','u.id','u.role as role_id','rm.role','rp.permission_id' )
                      // ->where('u.business_id',Auth::user()->business_id)
                      // ->get();
                      // // Get BGV FILLING data from Action table for matching checking permission
                      //   $action_master = DB::table('action_masters')
                      //   ->select('*')
                      //   ->where(['route_group'=>'','action_title'=>'BGV Link'])
                      //   ->first(); 
                        // dd($action_master->id);
                        // Check condition if user_permission have any data or not
                      // if (count($user_permissions)>0) {
                      
                      //   $users=[];
                      //   foreach ($user_permissions as $user_permission) {
                        
                      //     if(in_array($action_master->id,json_decode($user_permission->permission_id)))
                      //     {
                      //       $users[]= $user_permission;
                      //     }
                      //   }
                      // }
                      // $task_users=[];
                      // if(count($users)>0){
                        // foreach ($users as $task_user) {
                        //   $task_users[]= $task_user->id;
                        // }
                        // $assigned_user_id =json_encode($task_users);
    
                        $data = [
                          'name'   =>$request->input('first_name').' '.$request->input('last_name'),
                          'parent_id'=> Auth::user()->business_id,
                          'business_id'=> $request->input('customer'), 
                          'description' => 'BGV Filling',
                          'job_id'      => $job_id, 
                          'priority' => 'normal',
                          'candidate_id' =>$user_id,   
                          // 'service_id'  => $item, 
                          // 'assigned_to' =>$assigned_user_id,
                          // 'assigned_by' => Auth::user()->id, 
                          // 'assigned_at' => date('Y-m-d H:i:s'),
                          // 'start_date' => date('Y-m-d'),
                          'created_by'    =>Auth::user()->id,
                          'created_at'  => date('Y-m-d H:i:s'),
                          'is_completed' => 0,
                          'status'=>'1',
                          'started_at' => date('Y-m-d H:i:s'),
                          'updated_at'  => date('Y-m-d H:i:s')
                        ];
                        // dd($data);
                        $task =Task::create($data);
                        $task  =$task->id;
                        // $task =  DB::table('tasks')->insertGetId($data); 
                
                        // // dd($task_users); 
                        // if (count($task_users)>1) {
                        //   $random_user=array_rand($task_users,2);
                        // } else {
                        //   $random_user=$task_users;
                        // }
                        
                        //  dd($random_user);
                        // foreach ($random_user as $user)
                        // {
                        //   echo  
                        // }
                        // die;
                      
                      // foreach ($users as $user) {
                      
                    
                    $taskdata = [
                      'parent_id'=> Auth::user()->business_id,
                      'business_id'=> $request->input('customer'),
                      'candidate_id' =>$user_id,   
                      'job_sla_item_id'  => $jsi,
                      'task_id'=> $task,
                      // 'user_id' => $user->id,
                      // 'service_id'  => $item,
                      'status'=>'1',
                      'created_at'  => date('Y-m-d H:i:s'),
                      'updated_at'  => date('Y-m-d H:i:s')
                      
                    ];
                    TaskAssignment::create($taskdata);
                  if (Auth::user()->user_type == 'customer') {
                      # code...
                      $admin_email = Auth::user()->email;
                      $admin_name = Auth::user()->first_name;
                      //send email to customer
                      $email = $admin_email;
                      $name  = $admin_name;
                      $candidate_name = $request->input('first_name');
                      $msg = "New BGV Filling Task Created with candidate name";
                      $sender = DB::table('users')->where(['id'=>$business_id])->first();
                      $data  = array('name'=>$name,'email'=>$email,'candidate_name'=>$candidate_name,'msg'=>$msg,'sender'=>$sender);
                      
                      Mail::send(['html'=>'mails.task-notify'], $data, function($message) use($email,$name) {
                            $message->to($email, $name)->subject
                              ('Clobminds Pvt Ltd - Notification for BGV Filling Task');
                            $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                      });
                  }
                  else
                  {
    
                    $login_user = Auth::user()->business_id;
                    $user= User::where('id',$login_user)->first();
                    $admin_email = $user->email;
                    $admin_name = $user->first_name;
                    //send email to customer
                    $email = $admin_email;
                    $name  = $admin_name;
                    $candidate_name = $request->input('first_name');
                    $msg = "New BGV Filling Task Created with candidate name";
                    $sender = DB::table('users')->where(['id'=>$business_id])->first();
                    $data  = array('name'=>$name,'email'=>$email,'candidate_name'=>$candidate_name,'msg'=>$msg,'sender'=>$sender);
    
                    Mail::send(['html'=>'mails.task-notify'], $data, function($message) use($email,$name) {
                          $message->to($email, $name)->subject
                            ('Clobminds Pvt Ltd - Notification for BGV Filling Task');
                          $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                    });
                  }
    
                    $kams  = KeyAccountManager::where('business_id',$request->input('customer'))->get();
    
                    if (count($kams)>0) {
                      foreach ($kams as $kam) {
                        $user= User::where('id',$kam->user_id)->first();
                        $email = $user->email;
                        $name  = $user->name;
                        //dd($name);
                        $candidate_name = $request->input('first_name');
                        $msg = "New BGV Filling Task Created with candidate name";
                        $sender = DB::table('users')->where(['id'=>$business_id])->first();
                        $data  = array('name'=>$name,'email'=>$email,'candidate_name'=>$candidate_name,'msg'=>$msg,'sender'=>$sender);
    
                        Mail::send(['html'=>'mails.task-notify'], $data, function($message) use($email,$name) {
                              $message->to($email, $name)->subject
                                ('Clobminds Pvt Ltd - Notification for BGV Filling Task');
                              $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                        });
    
                      }
                      
                    }
                
                  // }
              }
              // end task assignment close 
            }
            
            $name = trim(preg_replace('/^\s+|\s+$|\s+(?=\s)/', '', $request->input('first_name').' '.$request->input('middle_name').' '.$request->input('last_name')));
              //
          $data = 
          [     'business_id'   =>$request->input('customer'),
                'candidate_id'  =>$user_id,
                'job_id'        =>$job_id,
                'name'          =>$name,
                'first_name'    =>$request->input('first_name'),
                'middle_name'   =>$request->input('middle_name'),
                'last_name'     =>$request->input('last_name'),
                'email'         =>$request->input('email'),
                'phone'         =>$phone,
                'created_by'    =>Auth::user()->id,
                'created_at'    =>date('Y-m-d H:i:s')
          ];
          // dd($data);
          Candidate::create($data);
          // DB::table('candidates')->insertGetId($data);


          $attach_on_select=[];
          $allowedextension=['jpg','jpeg','png','svg','pdf','csv','zip','xlsx','docx','docs','xls'];
         
          // dd($allowmaxfilesize);
          $zip_name="";
          if($request->hasFile('jaf_details') && $request->file('jaf_details') !="" )
          {
              $filePath = public_path('/uploads/jaf_details/'); 
              $files= $request->file('jaf_details');

            
              foreach($files as $file)
              {
                      $extension = $file->getClientOriginalExtension();

                      $check = in_array($extension,$allowedextension);

                      $file_size = number_format(File::size($file) / 1048576, 2);
                      
                      if(!$check)
                      {
                          return response()->json([
                            'success' => false,
                            'custom'=>'yes',
                            'errors' => ['jaf_details' => 'Only jpg,jpeg,png,pdf,csv,zip,xls,xlsx,docs are allowed !']
                          ]);                        
                      }

                      if($file_size > 10)
                      {
                          return response()->json([
                            'success' => false,
                            'custom'=>'yes',
                            'errors' => ['jaf_details' => 'The document size must be less than only 10mb Upload !'],
                          ]);                        
                      }
              }

              $zipname = 'jaf_details-'.date('Ymdhis').'-'.$user_id.'.zip';
              $zip = new \ZipArchive();      
              $zip->open(public_path().'/uploads/jaf_details/'.$zipname, \ZipArchive::CREATE | \ZipArchive::OVERWRITE);

              foreach($files as $file)
              {
                  $file_data = $file->getClientOriginalName();
                  $tmp_data  = $user_id.'-'.date('mdYHis').'-'.$file_data; 
                  $data = $file->move($filePath, $tmp_data);       
                  $attach_on_select[]=$tmp_data;

                  $path=public_path()."/uploads/jaf_details/".$tmp_data;
                  $zip->addFile($path, '/jaf_details/'.basename($path));  
              }

              $zip->close();
          }

          if(count($attach_on_select)>0)
          {
              $i=0;
              $file_platform = 'web';
              $s3_config = S3ConfigTrait::s3Config();

              if($s3_config!=NULL)
              {
                $file_platform = 's3';

                $s3filePath='uploads/jaf_details/';

                $path = public_path()."/uploads/jaf_details/";

                if(!Storage::disk('s3')->exists($s3filePath))
                {
                    Storage::disk('s3')->makeDirectory($s3filePath,0777, true, true);
                }

                foreach($attach_on_select as $item)
                {
                  $file = Helper::createFileObject($path.$attach_on_select[$i]);

                  Storage::disk('s3')->put($s3filePath.$attach_on_select[$i],file_get_contents($file));

                  $insuff_file=[
                    'parent_id' => Auth::user()->business_id,
                    'business_id'   => $request->input('customer'),    
                    'candidate_id' => $user_id,                 
                    'file_name'        =>  $attach_on_select[$i],
                    'zip_file'        => $zipname!=""?$zipname:NULL, 
                    'file_platform'   => $file_platform,
                    'created_by'       => Auth::user()->id,
                    'created_at'       => date('Y-m-d H:i:s'),
                  ];
            
                  $file_id = DB::table('jaf_files')->insertGetId($insuff_file);

                  if(File::exists($path.$attach_on_select[$i]))
                  {
                      File::delete($path.$attach_on_select[$i]);
                  }

                  $i++;

                }

                if($zipname!="")
                {
                  $file = Helper::createFileObject($path.$zipname);

                  Storage::disk('s3')->put($s3filePath.$zipname,file_get_contents($file));

                  if(File::exists($path.$zipname))
                  {
                      File::delete($path.$zipname);
                  }
                  
                }

                if(File::exists($path.'tmp-files/'))
                {
                    File::cleanDirectory($path.'tmp-files/');
                }

              }
              else
              {
                foreach($attach_on_select as $item)
                {
                  $insuff_file=[
                    'parent_id' => Auth::user()->business_id,
                    'business_id'   => $request->input('customer'),    
                    'candidate_id' => $user_id,                 
                    'file_name'        =>  $attach_on_select[$i],
                    'zip_file'        => $zipname!=""?$zipname:NULL, 
                    'file_platform'   => $file_platform,
                    'created_by'       => Auth::user()->id,
                    'created_at'       => date('Y-m-d H:i:s'),
                  ];
            
                  $file_id = DB::table('jaf_files')->insertGetId($insuff_file);
                  $i++;
                }
              }
              
          }

      

              // Mail Send to COC
            //  $user= User::where('id',$request->input('customer'))->first();

            //     $email = $user->email;
            //     $name  = $user->name;
            //     $candidate_name = $request->input('first_name');
            //     $msg = "New Candidate Has Been Created with candidate name";
            //    $sender = DB::table('users')->where(['id'=>$business_id])->first();
            //     $data  = array('name'=>$name,'email'=>$email,'candidate_name'=>$candidate_name,'msg'=>$msg,'sender'=>$sender);

            //     Mail::send(['html'=>'mails.task-notify'], $data, function($message) use($email,$name) {
            //           $message->to($email, $name)->subject
            //             ('Clobminds Pvt Ltd - Notification for New Candidate Created');
            //           $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
            //     });

        
          if ($request->input('jaf') == 'candidate') {
            
            
            $randomPassword = Str::random(10);
            $hashed_random_password = Hash::make($randomPassword);
            $candidate = DB::table('users')->select('id','email','name','display_id','business_id','parent_id')->where(['email'=>$request->input('email')])->first();
            $company = DB::table('user_businesses')->select('company_name')->where(['business_id'=>$request->input('customer')])->first();
            // $request->input('customer')
            if ($candidate) {
    
              DB::table('users')->where(['email'=>$request->input('email')])->update(['password'=>$hashed_random_password,'status'=>'1']);
              $pass_user= DB::table('users')->where(['id'=>$candidate->id])->first();
              $pass_store=[
                'business_id'   =>$pass_user->business_id,
                'user_id'   =>$pass_user->id,
                'parent_id' =>$pass_user->parent_id,
                'email' =>$pass_user->email,
                'password' => $pass_user->password,
              ];
              DB::table('password_logs')->insert($pass_store);
            }
           
            $email = $request->input('email');
            $name  = $request->input('first_name');
            $company_name=$company->company_name;
            $id = $candidate->business_id;
            $data  = array('name'=>$name,'email'=>$email,'password'=>$randomPassword,'company_name'=>$company_name,'id'=>$id,'candidate'=>$candidate);

            Mail::send(['html'=>'mails.jaf_info_credential-candidate'], $data, function($message) use($email,$name,$company_name) {
                $message->to($email, $name)->subject
                    ($name.': Authorization by'.$company_name.'to do a Background Verification Check');
                $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
            });

            // Send Email to Customer for BGV Link to Candidate

            $notification_controls = DB::table('notification_control_configs as nc')
                                            ->select('nc.*')
                                            ->join('notification_controls as n','n.business_id','=','nc.business_id')
                                            ->where(['n.status'=>1,'nc.status'=>1,'n.business_id'=>$candidate->business_id,'n.type'=>'jaf-sent-to-candidate','nc.type'=>'jaf-sent-to-candidate'])
                                            ->get();

            // $client = User::where('id',$id)->first();

            // $email = $client->email;
            // $name = $client->first_name;

            if(count($notification_controls)>0)
            {
                foreach($notification_controls as $item)
                {
                  $email = $item->email;
                  $name = $item->name;

                  $company_name=$company->company_name;
                  $sender = User::where('id',$business_id)->first();
                  
                  $msg = 'Notification for Job Application Form Verifications to Candidate ('.$candidate->name.' - '.$candidate->display_id.') Has Been Sent at '.date('d-M-y h:i A').'';
                  $data  = array('name'=>$name,'email'=>$email,'company_name'=>$company_name,'sender'=>$sender,'msg'=>$msg,'candidate'=>$candidate);

                  Mail::send(['html'=>'mails.jaf-link'], $data, function($message) use($email,$name,$company_name) {
                      $message->to($email, $name)->subject
                      ($name.': Authorization by'.$company_name.'to do a Background Verification Check');
                      $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                  });

                }

            }


              //send email to customer
              // $email = $request->input('email');
              // $name  = $request->input('first_name');
              // $data  = array('name'=>$name,'email'=>$email,'case_id'=>base64_encode($job_item_id),'c_id'=>base64_encode($user_id)); 

              // if($email!="" || $email!=NULL){
              //   Mail::send(['html'=>'mails.jaf-info'], $data, function($message) use($email,$name) {
              //     $message->to($email, $name)->subject
              //       ('BGV Link - Fill your job application form');
              //     $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME')); 
              //   });
              // }
              
            // //send email to customer
            // $email = $request->input('email');
            // $name  = $request->input('first_name');
            // $data  = array('name'=>$name,'email'=>$email,'case_id'=>base64_encode($job_item_id),'c_id'=>base64_encode($user_id));

            // if($email!="" || $email!=NULL){
            //   EmailConfigTrait::emailConfig();
            //   //get Mail config data
            // //   $mail =null;
            // $mail= Config::get('mail');
            // // dd($mail['from']['address']);
            //     if (count($mail)>0) {
            //         Mail::send(['html'=>'mails.jaf-info'], $data, function($message) use($email,$name,$mail) {
            //             $message->to($email, $name)->subject
            //             ('BGV Link - Fill your job application form ');
            //             $message->from($mail['from']['address'],$mail['from']['name']);
            //         });
            //     } else {
            //         Mail::send(['html'=>'mails.jaf-info'], $data, function($message) use($email,$name) {
            //           $message->to($email, $name)->subject
            //             ('BGV Link - Fill your job application form');
            //           $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
            //         });
            //     }
                
            // }
            
          
          }
          
          DB::commit();
          return response()->json([
            'success' =>true,
            'custom'  =>'yes',
            'errors'  =>[]
          ]);
        }
        catch (\Exception $e) {
            DB::rollback();
            // something went wrong
            return $e;
        }       

    }

    /**
   * Show the form for editing the Candidate.
   *
   * @param  int  $id
   * @return \Illuminate\Http\Response
   */ 
    public function edit($user_id)
    {
        $userID =  base64_decode($user_id);

        $business_id=Auth::user()->business_id;
       
        $user = DB::table('users as u')
        ->select('u.*')   
        ->where(['u.id' =>$userID])        
        ->first();

        $case_info = DB::table('job_items as j')
                    ->select('cl.title','ub.company_name','cl.id','cl.sla_type','j.days_type as job_days_type','cl.days_type as cust_days_type','j.price_type as job_price_type','cl.price_type as cust_price_type','j.package_price as job_package_price','cl.package_price as cust_package_price','j.jaf_status')
                    ->join('customer_sla as cl','cl.id','=','j.sla_id')
                    // ->join('users as u','u.id','=','cl.business_id')
                    ->join('user_businesses as ub','j.business_id','=','ub.business_id')
                    ->where(['j.candidate_id'=>$userID])
                    ->first();

        $sla_items=DB::table('job_sla_items as sla')
                      ->select('s.id as service_id','s.name as service_name','s.verification_type','sla.number_of_verifications','sla.sla_id','sla.tat as check_tat','sla.incentive_tat','sla.penalty_tat','sla.price')
                      ->join('services as s','s.id','=','sla.service_id')
                      ->whereNotIn('s.name',['GSTIN'])
                      ->where(['sla.candidate_id'=>$user->id,'sla.business_id'=>$user->business_id])
                      ->get();

        // dd($sla_items);
        $selected_services_id = [];
        foreach($sla_items as $item){
            $selected_services_id[] = $item->service_id;
        }

        // dd($selected_services_id);

        $services= DB::table('services as s')
                  ->select('s.*')
                  ->join('service_form_inputs as si','s.id','=','si.service_id')
                  ->where('s.business_id',NULL)
                  ->whereNotIn('s.type_name',['gstin'])
                  ->orwhere('s.business_id',$business_id)
                  ->where('s.status',1)
                  ->groupBy('si.service_id')
                  ->get();

        $variable=DB::table('customer_sla')->select('id','title','price_type','package_price')->where('parent_id','0')->first();

        $total_checks = DB::table('job_sla_items')
                            ->select('number_of_verifications')
                            ->where(['candidate_id'=>$user->id,'business_id'=>$user->business_id])
                            ->sum('number_of_verifications');

        $total_check_price = DB::table('job_sla_items')
                                ->select('price')
                                ->where(['candidate_id'=>$user->id,'business_id'=>$user->business_id])
                                ->sum('price');
        // dd($case_info);
        $job_send_to= DB::table('job_sla_items')->select('jaf_send_to')->where(['candidate_id'=>$user->id])->first();
        $task=Null;
        if($job_send_to->jaf_send_to=='customer'){
          $task=DB::table('tasks as t')
            ->join('task_assignments as ta', 'ta.task_id', '=', 't.id')->where(['t.description'=>'BGV Filling','t.candidate_id'=>$user->id])->first();
        }
        // if ($task) {
        //   $tasks=$task;
        // }

        return view('admin.candidates.edit', compact('user','case_info','services','sla_items','selected_services_id','variable','total_checks','total_check_price','job_send_to','task'));
        
    }

  /**
   * Update the specified resource in storage.
   *
   * @param  \Illuminate\Http\Request  $request
   * @param  int  $id
   * @return \Illuminate\Http\Response
   */
    public function update(Request $request)
    {
      //  dd($request);
       $userID =  base64_decode($request->get('user_id'));
       $cust_id= base64_decode($request->customer);
       $business_id = Auth::user()->business_id;
       $max_service_tat = 0;
       $sla_id=NULL;
       $rules= [
        'first_name'  => 'required|regex:/^[a-zA-Z]+$/u|min:1|max:255',
        'last_name'  => 'nullable|regex:/^[a-zA-Z]+$/u|min:1|max:255',
        'middle_name'  => 'nullable|regex:/^[a-zA-Z ]+$/u|min:1|max:255',
        'father_name'  => 'required|regex:/^[a-zA-Z ]+$/u|min:2|max:255',
        'email'       => 'nullable|email:rfc,dns',
        'phone'       => 'required|regex:/^((?!(0))[0-9\s\-\+\(\)]{10,11})$/|unique:users,phone,' . $userID,
        'dob'         => 'required|date',
        // 'aadhar'      => 'nullable|numeric|digits:12',
        'gender'      => 'required',
        'sla_type'  => 'sometimes|required|in:package,variable',
        'price_type'  => 'required_if:sla_type,variable|in:package,check',
        'price'       => 'required_if:price_type,package|numeric|min:0',
        'sla'         => 'required_if:sla_type,package',
        'services'    => 'required_if:sla_type,package,variable|array|min:1',

       ];
        
        $customMessages = [
          'sla.required_if' =>  'The sla is required',
          'services.required_if' => 'Select at least one Check or Service item.',
          'phone.regex'=>'Phone Number must be Valid & 10-digit Number !!' 
        ];

     $validator = Validator::make($request->all(), $rules, $customMessages);
      
      if ($validator->fails()){
          return response()->json([
              'success' => false,
              'errors' => $validator->errors()
          ]);
      }
      if($request->jaf=='candidate'){
        $rules= [
          
          'email'       => 'required|email:rfc,dns',
          
        ];

        $validator = Validator::make($request->all(), $rules);
        
        if ($validator->fails()){
            return response()->json([
                'success' => false,
                'errors' => $validator->errors()
            ]);
        }
      }
      DB::beginTransaction();
      try
      {
        // email  validation
        $is_user_exist = DB::table('users')
        ->where(['email'=>$request->input('email')])
        ->whereNotIn('id',[$userID])
        ->count();

      
          if(($request->input('email')!=NULL || $request->input('email') !="") && $is_user_exist != 0){

              return response()->json([
                'success' => false,
                'custom'=>'yes',
                'errors' => ['email'=>'This Email Has Already Been Exists!!']
              ]);
            
          }

          $phone = preg_replace('/\D/', '', $request->input('phone'));

          if(strlen($phone)!=10)
          {
            return response()->json([
              'success' => false,
              'custom'=>'yes',
              'errors' => ['phone'=>'Phone Number must be Valid & 10-digit Number !!']
            ]);
          }

          $dob = NULL;
          if($request->get('dob') !=""){
            $dob = date("Y-m-d", strtotime($request->get('dob')));
          }
          $date_of_b=Carbon::parse($dob)->format('Y-m-d');
          $today=Carbon::now();
          $today_date=Carbon::now()->format('Y-m-d');
          $year_diff=$today->diffInYears($date_of_b);
          if($year_diff<18 || ($date_of_b >= $today_date))
            {
                return response()->json([
                  'success' => false,
                  'custom'  => 'yes',
                  'errors' =>['dob'=>'Age Must be 18 or older !']
                ]);
            }

            //validation for sla change
            if($request->has('sla_type'))
            {
                // $rules=[
                //   'sla_type'  => 'required|in:package,variable',
                // ];

                // $validator = Validator::make($request->all(), $rules);
          
                // if ($validator->fails()){
                //     return response()->json([
                //         'success' => false,
                //         'errors' => $validator->errors()
                //     ]);
                // }

                //validation for sla type
                // if($request->sla_type=='package')
                // {
                //   $rules=[
                //       'sla'         => 'required',
                //       'services'    => 'required|array|min:1',
                //   ];
                //   $customMessages=[
                //     'services.required' => 'Select at least one Check or Service item.',
                //   ];
                //     $validator = Validator::make($request->all(), $rules,$customMessages);
                    
                //     if ($validator->fails()){
                //         return response()->json([
                //             'success' => false,
                //             'errors' => $validator->errors()
                //         ]);
                //     }  
                // }
                if($request->sla_type=='variable')
                {
                    // $rules=[
                    //   'services'    => 'required|array|min:1',
                    // ];
                    // $customMessages=[
                    //   'services.required' => 'Select at least one Check or Service item.',
                    // ];
                    //   $validator = Validator::make($request->all(), $rules,$customMessages);
                      
                    //   if ($validator->fails()){
                    //       return response()->json([
                    //           'success' => false,
                    //           'errors' => $validator->errors()
                    //       ]);
                    //   }

                      if( count($request->input('services')) > 0 ){
                        $arr=[];
                        foreach($request->input('services') as $item){
                          $rules=[
                            'service_unit-'.$item    => 'required|integer|min:1',
                            'tat-'.$item      => 'required|integer|min:1',
                            'incentive-'.$item => 'required|integer|lte:tat-'.$item,
                            'penalty-'.$item => 'required|integer|gte:tat-'.$item,
                            'price-'.$item => 'required_if:price_type,check|numeric|min:0'
                          ];
                          $customMessages=[
                            'service_unit-'.$item.'.required' => 'No of Verification is required',
                            'service_unit-'.$item.'.integer' => 'No of Verification should be numeric',
                            'service_unit-'.$item.'.min' => 'No of Verification should be atleast 1',
                            // 'service_unit-'.$item.'.max' => 'No of Verification should be Maximum 3',
                            'tat-'.$item.'.required' => 'No of TAT is required',
                            'tat-'.$item.'.integer' => 'No of TAT should be numeric',
                            'tat-'.$item.'.min' => 'No of TAT should be atleast 1',
                            'incentive-'.$item.'.required' => 'No of incentive TAT is required',
                            'incentive-'.$item.'.integer' => 'No of incentive TAT should be numeric',
                            'incentive-'.$item.'.lte' => 'No of Incentive TAT should be less than or equal to Service TAT',
                            'penalty-'.$item.'.required' => 'No of penalty TAT is required',
                            'penalty-'.$item.'.integer' => 'No of penalty TAT should be numeric',
                            'penalty-'.$item.'.gte' => 'No of penalty TAT should be greater than or equal to Service TAT',
                            'price-'.$item.'.required_if' => 'Check Price is required',
                            'price-'.$item.'.numeric' => 'Check Price should be numeric',
                            'price-'.$item.'.min' => 'Check Price should be minimum value 0',
                          ];
                            $validator = Validator::make($request->all(), $rules,$customMessages);
                            
                            if ($validator->fails()){
                                return response()->json([
                                    'success' => false,
                                    'errors' => $validator->errors()
                                ]);
                            }

                            $arr[]=intval($request->input('tat-'.$item));

                        }

                        $max_service_tat = max($arr);
                      }

                }

            }

            // Get the user
            $user = User::find($userID);  
            
            $name = trim(preg_replace('/^\s+|\s+$|\s+(?=\s)/', '', $request->input('first_name').' '.$request->input('middle_name').' '.$request->input('last_name')));
            // Update user
            $user->update([
                    'first_name'            => ucwords(strtolower($request->get('first_name'))),
                    'middle_name'           =>  ucwords(strtolower($request->get('middle_name'))),
                    'last_name'             =>  ucwords(strtolower($request->get('last_name'))),
                    'name'                  => $name,
                    'email'                 => $request->get('email'),  
                    'father_name'           => ucwords(strtolower($request->get('father_name'))),     
                    'client_emp_code'       => $request->get('client_emp_code'),     
                    'entity_code'           => $request->get('entity_code'),         
                    'phone'                 => $phone, 
                    'phone_code'            => $request->primary_phone_code,
                    'phone_iso'             => $request->primary_phone_iso,                               
                    'gender'                => $request->get('gender'),
                    'dob'                   => $dob,             
                ]);
            //dd($user);        
            // check for password change
            // if($request->get('password')) {
            //     $user->password = bcrypt($request->get('password'));
            // }
            // Handle the user roles       
            // $user->save();

            if($request->has('sla_type'))
            {
                $sla_id=$request->input('sla');
                //
                $job_item = DB::table('job_items')
                      ->where(['business_id'=>$cust_id,'candidate_id'=>$userID])
                      ->first();
                $customer_sla = DB::table('customer_sla')->where('id',$sla_id)->first();

                if($job_item!=NULL)
                {
                  $days_type='';

                  // check if sla_type was same as previous one u selected at the time of creation
                  if(stripos($job_item->sla_type,$request->sla_type)!==false)
                  {
                    $days_type=$job_item->days_type;
                  }
                  else
                  {
                    $days_type = $customer_sla->days_type;
                  }

                  $job_data = 
                  [
                    'sla_id'       => $sla_id,
                    'total_candidates'=>1,
                    'status'       =>0,
                    'updated_by'   =>Auth::user()->id,
                    'updated_at'   => date('Y-m-d H:i:s')
                  ];
                  $job = Job::find($job_item->job_id);
                  $job->update($job_data);
                  // DB::table('jobs')->where('id',$job_item->job_id)->update($job_data);
      
                  // job item items      
                  $data = [
                  'candidate_id' =>$userID,
                  'sla_id'       =>$sla_id,
                  'sla_type'     => $request->sla_type,
                  'days_type'    => $days_type,
                  'tat_type'     => $customer_sla->tat_type,
                  'incentive'     => $customer_sla->incentive,
                  'penalty'     => $customer_sla->penalty,
                  'tat'     => stripos($request->sla_type,'variable')!==false ? $max_service_tat : $customer_sla->tat,
                  'client_tat'     => stripos($request->sla_type,'variable')!==false ?$max_service_tat : $customer_sla->client_tat,
                  'price_type'  => stripos($request->sla_type,'variable')!==false ? $request->price_type : $customer_sla->price_type,
                  'sla_title' => $customer_sla->title,
                  'jaf_status'   =>'pending',
                  'updated_at'   =>date('Y-m-d H:i:s')
                  ];

                  $job_items_id=  DB::table('job_items')->select('id')->where(['business_id'=>$cust_id,'candidate_id'=>$userID])->first(); 
                  $job_items = JobItem::find($job_items_id->id);
                  $job_items->update($data);

                  if(stripos($request->sla_type,'variable')!==false && stripos($request->price_type,'package')!==false)
                  {
                      DB::table('job_items')->where(['business_id'=>$cust_id,'candidate_id'=>$userID])->update([
                          'package_price' => $request->price,
                      ]);
                  }
                  else if(stripos($request->sla_type,'package')!==false && stripos($customer_sla->price_type,'package')!==false)
                  {
                      DB::table('job_items')->where(['business_id'=>$cust_id,'candidate_id'=>$userID])->update([
                          'package_price' => $customer_sla->package_price,
                      ]);
                  }
                  
                  $job_sla_items=DB::table('job_sla_items')->where(['job_id'=>$job_item->job_id,'job_item_id'=>$job_item->id])->first();
                  // service items
                $job_sla_item_id=  DB::table('job_sla_items')->select('id')->where(['job_id'=>$job_item->job_id,'job_item_id'=>$job_item->id])->get();
                foreach ($job_sla_item_id as $jsi_id) {
                   $delete = JobSlaItem::find($jsi_id->id);
                   $delete->delete();
                }

                  if($request->sla_type=='package')
                  {
                    if( count($request->input('services')) > 0 ){
                      foreach($request->input('services') as $item){
                        $service_d=DB::table('services')->where('id',$item)->first();
                        $number_of_verifications=1;
                        $no_of_tat=1;
                        $incentive_tat=1;
                        $penalty_tat=1;
                        $price = 0;
                        $sal_item_data = DB::table('customer_sla_items')->select('number_of_verifications','tat','incentive_tat','penalty_tat','price')->where(['sla_id'=>$request->input('sla'),'service_id'=>$item])->first(); 
                        if($sal_item_data !=null){
                          $number_of_verifications= $sal_item_data->number_of_verifications;
                          $no_of_tat= $sal_item_data->tat;
                          $incentive_tat= $sal_item_data->incentive_tat;
                          $penalty_tat= $sal_item_data->penalty_tat;
                          $price = $sal_item_data->price;
                        }
                          $data = [
                                  'business_id'=> $cust_id, 
                                  'job_id'      => $job_item->job_id, 
                                  'job_item_id' => $job_item->id,
                                  'candidate_id' =>$userID,
                                  'sla_id'      => $sla_id,
                                  'service_id'  => $item,
                                  'jaf_send_to' => $request->jaf=='candidate'?'candidate':$job_sla_items->jaf_send_to,
                                  // 'jaf_filled_by' => Auth::user()->id,
                                  'number_of_verifications'=>$service_d->verification_type=='Manual' || $service_d->verification_type=='manual'?$number_of_verifications:1,
                                  'tat'=>$no_of_tat,
                                  'incentive_tat'=>$incentive_tat,
                                  'penalty_tat'=>$penalty_tat,
                                  'price'=>$price,
                                  'sla_item_id' => $item,
                                  'created_at'  => date('Y-m-d H:i:s')
                                ]; 
                                JobSlaItem::create($data);
                      // $jsi =  DB::table('job_sla_items')->insertGetId($data);  
                      }
                    }
                  }
                  else if($request->sla_type=='variable')
                  {
                    if( count($request->input('services')) > 0 ){
                      foreach($request->input('services') as $item){
                        $number_of_verifications=1;
                        $no_of_tat=1;
                        $incentive_tat=$no_of_tat;
                        $penalty_tat=$no_of_tat;
                        $price = 0;
                        $number_of_verifications=$request->input('service_unit-'.$item);
                        $no_of_tat = $request->input('tat-'.$item);
                        $incentive_tat = $request->input('incentive-'.$item);
                        $penalty_tat = $request->input('penalty-'.$item);
                        $price = $request->input('price-'.$item);

                        $service_d=DB::table('services')->where('id',$item)->first();
      
                        $data = ['business_id'=> $cust_id, 
                                'job_id'      => $job_item->job_id, 
                                'job_item_id' => $job_item->id,
                                'candidate_id' =>$userID,
                                'sla_id'      => $sla_id,
                                'service_id'  => $item,
                                'jaf_send_to' =>$request->jaf=='candidate'?'candidate':$job_sla_items->jaf_send_to,
                                // 'jaf_filled_by' => Auth::user()->id,
                                'number_of_verifications'=>$service_d->verification_type=='Manual' || $service_d->verification_type=='manual'?$number_of_verifications:1,
                                'tat' => $no_of_tat,
                                'incentive_tat' => $incentive_tat,
                                'penalty_tat' => $penalty_tat,
                                'price'   => $price,
                                'sla_item_id' => $item,
                                'created_at'  => date('Y-m-d H:i:s')
                              ]; 
                              JobSlaItem::create($data);
                      // $jsi =  DB::table('job_sla_items')->insertGetId($data);  
                      }
                    }
                  }
                }
                
            }

            if ($request->input('jaf') == 'candidate') {
            
          
              $randomPassword = Str::random(10);
              $hashed_random_password = Hash::make($randomPassword);
              $candidate = DB::table('users')->select('id','email','name','display_id','business_id','parent_id')->where(['email'=>$request->input('email')])->first();
              $company = DB::table('user_businesses')->select('company_name')->where(['business_id'=>$cust_id])->first();
              // $request->input('customer')
              if ($candidate) {
      
                DB::table('users')->where(['email'=>$request->input('email')])->update(['password'=>$hashed_random_password,'status'=>'1']);
                $pass_user= DB::table('users')->where(['id'=>$candidate->id])->first();
                $pass_store=[
                  'business_id'   =>$pass_user->business_id,
                  'user_id'   =>$pass_user->id,
                  'parent_id' =>$pass_user->parent_id,
                  'email' =>$pass_user->email,
                  'password' => $pass_user->password,
                ];
                DB::table('password_logs')->insert($pass_store);
              }
             
              $email = $request->input('email');
              $name  = $request->input('first_name');
              $company_name=$company->company_name;
              $id = $candidate->business_id;
              $data  = array('name'=>$name,'email'=>$email,'password'=>$randomPassword,'company_name'=>$company_name,'id'=>$id);
  
              Mail::send(['html'=>'mails.jaf_info_credential-candidate'], $data, function($message) use($email,$name) {
                  $message->to($email, $name)->subject
                      ('Clobminds Pvt Ltd - Your account credential');
                  $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
              });
  
              // Send Email to Customer for BGV Link to Candidate
  
              $notification_controls = DB::table('notification_control_configs as nc')
                                              ->select('nc.*')
                                              ->join('notification_controls as n','n.business_id','=','nc.business_id')
                                              ->where(['n.status'=>1,'nc.status'=>1,'n.business_id'=>$candidate->business_id,'n.type'=>'jaf-sent-to-candidate','nc.type'=>'jaf-sent-to-candidate'])
                                              ->get();
  
              // $client = User::where('id',$id)->first();
  
              // $email = $client->email;
              // $name = $client->first_name;
  
              if(count($notification_controls)>0)
              {
                  foreach($notification_controls as $item)
                  {
                    $email = $item->email;
                    $name = $item->name;
  
                    $company_name=$company->company_name;
                    $sender = User::where('id',$business_id)->first();
                    
                    $msg = 'Notification for Job Application Form Verifications to Candidate ('.$candidate->name.' - '.$candidate->display_id.') Has Been Sent at '.date('d-M-y h:i A').'';
                    $data  = array('name'=>$name,'email'=>$email,'company_name'=>$company_name,'sender'=>$sender,'msg'=>$msg);
  
                    Mail::send(['html'=>'mails.jaf-link'], $data, function($message) use($email,$name) {
                        $message->to($email, $name)->subject
                            ('Clobminds Pvt Ltd - Your account credential');
                        $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                    });
  
                  }
  
              }
  
  
                //send email to customer
                // $email = $request->input('email');
                // $name  = $request->input('first_name');
                // $data  = array('name'=>$name,'email'=>$email,'case_id'=>base64_encode($job_item_id),'c_id'=>base64_encode($user_id)); 
  
                // if($email!="" || $email!=NULL){
                //   Mail::send(['html'=>'mails.jaf-info'], $data, function($message) use($email,$name) {
                //     $message->to($email, $name)->subject
                //       ('BGV Link - Fill your job application form');
                //     $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME')); 
                //   });
                // }
                
              // //send email to customer
              // $email = $request->input('email');
              // $name  = $request->input('first_name');
              // $data  = array('name'=>$name,'email'=>$email,'case_id'=>base64_encode($job_item_id),'c_id'=>base64_encode($user_id));
  
              // if($email!="" || $email!=NULL){
              //   EmailConfigTrait::emailConfig();
              //   //get Mail config data
              // //   $mail =null;
              // $mail= Config::get('mail');
              // // dd($mail['from']['address']);
              //     if (count($mail)>0) {
              //         Mail::send(['html'=>'mails.jaf-info'], $data, function($message) use($email,$name,$mail) {
              //             $message->to($email, $name)->subject
              //             ('BGV Link - Fill your job application form ');
              //             $message->from($mail['from']['address'],$mail['from']['name']);
              //         });
              //     } else {
              //         Mail::send(['html'=>'mails.jaf-info'], $data, function($message) use($email,$name) {
              //           $message->to($email, $name)->subject
              //             ('BGV Link - Fill your job application form');
              //           $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
              //         });
              //     }
                  
              // }
              
            
            }
            DB::commit();
            return response()->json([
              'success' =>true,
              'custom'  =>'yes',
              'errors'  =>[]
            ]);
      }
      catch (\Exception $e) {
          DB::rollback();
          // something went wrong
          return $e;
      }       

    }


    //Candidate profile
    public function show($id)
    {
        $candidate_id = base64_decode($id);
        // dd($candidate_id);
        //  $business_id = Auth::user()->business_id;
    	//
      // dd($candidate_id);
      $query = DB::table('users as u')
              ->select('u.*','j.sla_id','j.jaf_status','j.job_id','j.candidate_id','j.created_at','j.filled_at','j.filled_by','j.is_insuff','j.insuff_created_at')      
              ->join('job_items as j','j.candidate_id','=','u.id')        
              // ->where(['u.user_type'=>'candidate','is_deleted'=>'0'])->get();
              ->where(['u.user_type'=>'candidate','is_deleted'=>'0','u.id'=>$candidate_id ,'j.jaf_status'=>'filled'])->first();
              // dd($query);

        $candidate = DB::table('users as u')
        ->select('u.id','u.business_id','u.first_name','u.middle_name','u.last_name','u.name','u.email','u.phone','u.phone_code','u.phone_iso','u.created_by','u.created_at','u.client_emp_code','u.entity_code','u.display_id','u.dob','u.aadhar_number','u.father_name','u.gender')
        ->where(['u.id'=>$candidate_id])
        ->first();

        $sla_items = DB::select("SELECT sla_id, GROUP_CONCAT(DISTINCT service_id) AS alot_services FROM `job_sla_items` WHERE candidate_id = $candidate_id");

        // dd($sla_items);

        $users = DB::table('users as u')->select('u.id','u.name')->get();

        $report = DB::table('reports')->where(['candidate_id'=>$candidate_id,'status'=>'completed'])->first();

        $insuffs = DB::table('users as u')
        ->select('u.*','j.sla_id','j.jaf_status','j.job_id','jd.service_id', 'j.candidate_id','j.created_at','j.filled_at','j.filled_by','j.insuff_created_by','insuff_created_at')      
        ->join('job_items as j','j.candidate_id','=','u.id')    
        ->join('jaf_form_data as jd','jd.candidate_id','=','u.id')    
        ->where(['u.user_type'=>'candidate','u.is_deleted'=>'0','u.id'=>$candidate_id ,'j.jaf_status'=>'filled','jd.is_insufficiency'=>'1'])
        ->groupBy('jd.service_id')
        ->get();

        $insuff_data=DB::table('insufficiency_logs as v')
                    ->select('v.*','j.jaf_status','s.verification_type')
                    ->join('jaf_form_data as jd','jd.id','=','v.jaf_form_data_id')
                    ->join('job_items as j','j.id','=','jd.job_item_id')
                    ->join('services as s','s.id','=','v.service_id')
                    ->where(['v.candidate_id'=>$candidate_id,'j.jaf_status'=>'filled'])
                    ->orderBy('v.id','desc')
                    ->get();
        

        // dd($insuff_data);

        // dd($insuffs);

        // dd($insuffs);
        // dd($report);

        $candidate_hold_logs=DB::table('candidate_hold_status_logs')
                            ->where('candidate_id',$candidate_id)
                            ->orderBy('id','desc')
                            ->get();

        // dd($candidate_hold_logs);

        if ($report==NULL) {
          $report= '';
        }

        return view('admin.candidates.show',compact('candidate','users','query','sla_items','report','insuffs','insuff_data','candidate_hold_logs'));
    }

    //Candidate notes
    public function notes($id)
    {
      $candidate_id = base64_decode($id);

      $candidate = DB::table('users as u')
        ->select('u.id','u.business_id','u.first_name','u.middle_name','u.last_name','u.name','u.email','u.phone','u.phone_code','u.phone_iso','u.created_by','u.created_at','u.client_emp_code','u.entity_code','u.display_id','u.dob','u.aadhar_number','u.father_name','u.gender')
        ->where(['u.id'=>$candidate_id])
        ->first();

      $sla_items = DB::select("SELECT sla_id, GROUP_CONCAT(DISTINCT service_id) AS alot_services FROM `job_sla_items` WHERE candidate_id = $candidate_id");


      $insuff_data=DB::table('insufficiency_logs as v')
      ->select('v.*','j.jaf_status','s.verification_type')
      ->join('jaf_form_data as jd','jd.id','=','v.jaf_form_data_id')
      ->join('job_items as j','j.id','=','jd.job_item_id')
      ->join('services as s','s.id','=','v.service_id')
      ->where(['v.candidate_id'=>$candidate_id,'j.jaf_status'=>'filled'])
      ->orderBy('v.id','desc')
      ->get();

      
      $report = DB::table('reports')->where(['candidate_id'=>$candidate_id,'status'=>'completed'])->first();
      if ($report==NULL) {
        $report= '';
      }
      return view('admin.candidates.notes',compact('candidate','sla_items','report','insuff_data'));
    }

    public function emailList(Request $request){
    
      $candidate_id =base64_decode($request->id);
      $candidate = DB::table('users as u')
        ->select('u.id','u.business_id','u.first_name','u.middle_name','u.last_name','u.name','u.email','u.phone','u.phone_code','u.phone_iso','u.created_by','u.created_at','u.client_emp_code','u.entity_code','u.display_id','u.dob','u.aadhar_number','u.father_name','u.gender')
        ->where(['u.id'=>$candidate_id])
        ->first();
      $report = DB::table('reports')->where(['candidate_id'=>$candidate_id,'status'=>'completed'])->first();
      if ($report==NULL) {
        $report= '';
      }
      $sla_items = DB::select("SELECT sla_id, GROUP_CONCAT(DISTINCT service_id) AS alot_services FROM `job_sla_items` WHERE candidate_id = $candidate_id");


      return view('admin.candidates.email-index',compact('candidate','report','sla_items'));

    }

    // public function emailCreate(Request $request){
    //   $candidate_id =base64_decode($request->id);
    // }

    //BGV Form show
    public function jafForm($case_id,$c_id)
    {
        $id = base64_decode($case_id);
        $user_id = Auth::user()->id;
        $candidate_id =base64_decode($c_id);
        // dd($candidate_id);
        $hold_data = DB::table('candidate_hold_statuses')       
                    ->where(['candidate_id'=>$candidate_id])
                    ->where('hold_remove_by','=',null)
                    ->first();
        if($hold_data!=NULL)
        {
          return redirect()->route('/candidates');
        }
        else{
          $job_items=DB::table('job_items')->where('id',$id)->first();
          if($job_items!=NULL)
          {
            $status=$job_items->jaf_status;
            if($status=='filled')
            return redirect()->route('/candidates/jaf-qc',['case_id'=>$c_id]);
          }
        }
        
        $jaf_form_data_check = DB::table('jaf_form_data')->where('job_item_id',$id)->count();
        // dd($jaf_form_data_check);
        $job_sla_items = DB::table('job_sla_items')->where('jaf_send_to','customer')->where('candidate_id',$candidate_id)->get();
        // dd($job_sla_items);
        $input_data = [];
        //
      if ( $jaf_form_data_check == 0) {
        
        foreach($job_sla_items as $service){
          
          // service-input-label-0-1-1
          // echo $request->input('service-input-label-0-1-1');
          // die('ok');
          // $input_items = DB::table('service_form_inputs as sfi')
          //             ->select('sfi.*')            
          //             ->where(['sfi.service_id'=>$service->service_id,'status'=>1])
          //             ->get();
          $numbers_of_items = $service->number_of_verifications;
         
          for($j=1; $j<=$numbers_of_items; $j++){
            
            $i=0;

            $jaf_data = DB::table('jaf_form_data')->where(['candidate_id'=>$candidate_id,'service_id'=>$service->service_id,'check_item_number'=>$j])->first();
            
            if($jaf_data==null){
              $jaf_form_data = [
                'business_id' => $service->business_id,
                'job_id'      => $service->job_id,
                'job_item_id' => $service->job_item_id,
                'service_id'  => $service->service_id,
                'candidate_id' => $service->candidate_id,
                'check_item_number'=>$j,
                'sla_id'      =>$service->sla_id,
                'created_by'   => Auth::user()->id,
                'created_at'   => date('Y-m-d H:i:s')
              ];
                            
                $jaf_data =JafFormData::create($jaf_form_data);
               
            
            }
            
          }
        }
      }
        // dd($jaf_data);
        $candidate = DB::table('users as u')
        ->select('u.id','u.business_id','u.client_emp_code','u.name','u.first_name','u.middle_name','u.dob','u.father_name','u.last_name','u.name','u.email','u.phone','u.phone_code','u.gender','u.aadhar_number','u.display_id','u.entity_code','j.created_at','j.sla_id','u.user_type','u.digital_signature')  
        ->leftjoin('job_items as j','j.candidate_id','=','u.id')
        ->where(['u.id'=>$candidate_id]) 
        ->first(); 
         //dd($candidate);


        //$jaf_items= DB::select("SELECT DISTINCT jf.id, jf.*,jsi.jaf_send_to,s.name as service_name,s.id as service_id FROM jaf_form_data as jf JOIN services as s ON s.id=jf.service_id JOIN job_sla_items as jsi ON jsi.job_id=jf.job_id WHERE jf.job_item_id=$id");

        $jaf_items = JafFormData::from('jaf_form_data as jf')
                      ->Distinct('jf.id')
                      ->select('jf.id', 'jf.*','jsi.jaf_send_to','s.name as service_name','s.id as service_id','s.type_name')
                      ->join('services as s','s.id','=','jf.service_id')
                      ->join('job_sla_items as jsi','jsi.job_id','=','jf.job_id')
                      ->where('jf.job_item_id',$id)
                      ->get();
        // $jaf_items = Db::table('jaf_form_data as jf')
        // ->select('jf.*','jsi.jaf_send_to','s.name as service_name','s.id as service_id')  
        // ->join('services as s','s.id','=','jf.service_id')
        // ->join('job_sla_items as jsi','jsi.job_id','=','jf.job_id' )
        // ->where(['jf.job_item_id'=>$id])
        // ->groupBy('jf.id') 
        // ->get(); 

        //dd($jaf_items);
        $checks = UserCheck::where('user_id',$user_id)->get();
        // $servicetype=DB::table('service_attachment_types')->where(['service_id'=> $jaf_items])->get();

        // $new_jaf_form_data = DB::table('jaf_form_data')->where('job_id',$id)->get();
        // dd($new_jaf_form_data);
        return view('admin.candidates.jaf-form',compact('candidate','jaf_items','checks'));
    }

    //BGV Form data save
    public function jafSave(Request $request)
    {
      // dd($request->all());
        $case_id      = base64_decode($request->input('case_id'));
        $candidate_id = $request->input('candidate_id');
        
        $business_id  = $request->input('business_id');
        
        $candidate=base64_encode($request->input('candidate_id'));
        
        $user_id=Auth::user()->id;
        $job_sla_item_id=NULL;
        // $service_id  = $request->input('service_id');
        // dd($case_id);
        $business = Auth::user()->business_id;
        $parent_id=Auth::user()->parent_id;

      // dd('hi');

        if(Auth::user()->user_type=='user' || Auth::user()->user_type=='User')
        {
            $users=DB::table('users')->select('parent_id')->where('business_id',$business)->first();
            $parent_id=$users->parent_id;
        }
        DB::beginTransaction();
        try
        {
          // check form type for auto save
          if ($request->type == 'formtype') {
              $hold_data = DB::table('candidate_hold_statuses')       
              ->where(['candidate_id'=>$candidate_id])
              ->where('hold_remove_by','=',null)
              ->first();
              if($hold_data!=NULL){
                $users_d=DB::table('users as u')
                        ->select('u.*','ub.company_name')
                        ->join('user_businesses as ub','u.business_id','=','ub.business_id')
                        ->where(['u.id'=>$hold_data->hold_by])
                        ->first();
                $name= $users_d->name.' ('.$users_d->company_name.')';
                return response()->json([
                  'success' =>true,
                  'status'  =>'hold',
                  'hold_by' => $name,
                  'candidate_id'=>$candidate,
                ]);
              }
              else{
                $job_data=DB::table('job_items')->where(['id'=>$case_id])->first();
                
                if($job_data->jaf_status!='filled')
                {
                  // dd($request);
                  $jaf_items = DB::table('jaf_form_data')->where(['job_item_id'=>$case_id])->get();
                 
                  // $jsi = DB::table('job_sla_items')
                  $input_data = []; 
                  
                  foreach($jaf_items as $service){
                    // dd($service);
                    // service-input-label-0-1-1
                    // echo $request->input('service-input-label-0-1-1');
                    // die('ok');
                    $input_items = DB::table('service_form_inputs as sfi')
                                ->select('sfi.*')            
                                ->where(['sfi.service_id'=>$service->service_id,'status'=>1])
                                ->get();
                    //$j = 1;
                    //$job_item_data = DB::table('job_sla_items')->where(['id'=>$case_id])->first();
                    // $job_item_data = DB::table('job_sla_items')->where(['candidate_id'=>$service->candidate_id,'service_id'=>$service->service_id])->first();
                    // $numbers_of_items = $job_item_data->number_of_verifications;
                    // if($numbers_of_items > 1){
                    //   $j++;
                    // }

                      $reference_type = NULL;
      
                      $input_data = [];
                      $i=0;
                      foreach($input_items as $input){
                        if($input->service_id==17)
                        {
                            if($input->reference_type==NULL && !(stripos($input->label_name,'Mode of Verification')!==false || stripos($input->label_name,'Remarks')!==false))
                            { 
                              $input_data[] = [
                                $request->input('service-input-label-'.$service->id.'-'.$i)=>$request->input('service-input-value-'.$service->id.'-'.$i),
                                'is_report_output'=>$input->is_report_output 
                              ];

                              if(stripos($request->input('service-input-label-'.$service->id.'-'.$i),'Reference Type (Personal / Professional)')!==false)
                              {
                                  $reference_type = $request->input('service-input-value-'.$service->id.'-'.$i);
                              }

                            }
                        }
                        else
                        {
                            $input_data[] = [
                              $request->input('service-input-label-'.$service->id.'-'.$i)=>$request->input('service-input-value-'.$service->id.'-'.$i),
                              'is_report_output'=>$input->is_report_output 
                            ];
                        }
                        
                          $i++;
                      }
                    
                      $jaf_data = json_encode($input_data);
                      
                      //insuff
                      $is_insufficiency = 0;
                      if($request->has('insufficiency-'.$service->id)){
                        $is_insufficiency = 1;
                      }
                      // $insufficiency_notes = $request->input('insufficiency-notes-'.$service->id.'-'.$i);
      
                      $insufficiency_notes = $request->input('insufficiency-notes-'.$service->id);
      
                      $address_type = $request->input('address-type-'.$service->id);
      
                      $jaf_form_data = [
                                      
                                        'form_data'       => $jaf_data,
                                        'form_data_all'   => json_encode($request->all()),
                                        'is_insufficiency'=>$is_insufficiency,
                                        'insufficiency_notes'=>$is_insufficiency==1?$insufficiency_notes:NULL,
                                        'address_type'  =>$address_type,
                                        'reference_type'  =>$reference_type,
                                        'created_by'    => Auth::user()->id,
                                        'is_filled' => '1',
                                        'updated_at'    => date('Y-m-d H:i:s')
                                      ];
                                
                        // $jaf_update = JafFormData::find($service->id);
                      //$jaf_update->update($jaf_form_data);
                      DB::table('jaf_form_data')->where(['id'=>$service->id])->update($jaf_form_data);
                    
                      // $jaf_d=DB::table('jaf_form_data')->where('id',$service->id)->first();
                      if($is_insufficiency==1)
                      {
                          $insuff_data=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$service->id,'activity_type'=>'jaf-save','status'=>'raised'])->first();
      
                          if($insuff_data!=NULL)
                          {
                            $ver_insuff_data=[
                              'notes'=>$insufficiency_notes,
                              'updated_by'   => Auth::user()->id,
                              'updated_at'=> date('Y-m-d H:i:s'),
                            ]; 
                            DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$service->id,'activity_type'=>'jaf-save','status'=>'raised'])->update($ver_insuff_data);
                          }
                          else{
                            $ver_insuff_data=[
                              'parent_id'   => $parent_id,
                              'business_id' => $business,
                              'coc_id' => $service->business_id,
                              'candidate_id' => $service->candidate_id,
                              'jaf_form_data_id'  => $service->id,
                              'service_id'  => $service->service_id,
                              'item_number' => $service->check_item_number,
                              'created_by'   => Auth::user()->id,
                              'created_at'   => date('Y-m-d H:i:s'),
                              'activity_type'=> 'jaf-save',
                              'status' => 'raised',
                              'notes' => $insufficiency_notes,
                            ];
                            // VerificationInsufficiency::create($ver_insuff_data);
                            DB::table('verification_insufficiency')->insert($ver_insuff_data);
                          }
      
                      }
                      else if($is_insufficiency==0)
                      {
                        $insuff_data=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$service->id,'activity_type'=>'jaf-save','status'=>'raised'])->delete();
                      }
                      // else{
                      //   $ver_insuff_data=[
                      //     'business_id' => $service->business_id,
                      //     'candidate_id' => $service->candidate_id,
                      //     'service_id'  => $service->service_id,
                      //     'item_number' => $service->check_item_number,
                      //     'created_by'   => Auth::user()->id,
                      //     'created_at'   => date('Y-m-d H:i:s'),
                      //     'activity_type'=> 'jaf-save',
                      //     'status' => NULL,
                      //     'updated_at' => date('Y-m-d H:i:s')
                      //   ];
                      // }
                      // DB::table('verification_insufficiency')->insert($ver_insuff_data);
      
                      // DB::table('job_sla_items')->where(['job_item_id'=>$case_id])->update(['filled_by'=>Auth::user()->id]);
                      
                      
                      DB::table('job_items')->where(['id'=>$case_id])->update(['jaf_status'=>'draft','filled_by_type'=>'customer','filled_by'=>Auth::user()->id,'filled_at'=>date('Y-m-d H:i:s')]);
                  }
      
                  // if ($files = $request->file('digital_signature')) 
                  // {
                  //   $file=$request->file('digital_signature');
                  //   $file_name=date('Yhis').'-'.'sign'.'.png';
                  //   $destinationPath = public_path('uploads/signature/'); 
                  //   $dsext = $request->file('digital_signature')->getClientOriginalExtension();
                  //   // $files->move($destinationPath, $dsImage);
                  //   if($dsext=='png' || $dsext=='jpg' || $dsext=='jpeg')
                  //   {
                  //     $candidate=DB::table('users')->select('digital_signature')->where('id',$candidate_id)->first();
      
                  //     $candidate_img=$candidate->digital_signature;
                  //     // $user_img = Auth::user()->digital_signature;
                  //     if($candidate_img!=NULL || $candidate_img!='')
                  //     {
                  //       if(File::exists(public_path().'/uploads/signatures/'.$candidate_img))
                  //       {
                  //         File::delete(public_path().'/uploads/signatures/'.$candidate_img);
                  //       } 
                  //     }
                  //     $mask = Image::make($file)
                  //               ->orientate() // it's better to set a tolerance for trim()
                  //               ->invert(); // invert it to use as a ma
                                
                  //     $new_image = Image::canvas($mask->width(), $mask->height(), '#000000')
                  //                 ->mask($mask)
                  //                 ->save('uploads/signatures/'.$file_name);
      
                  //     DB::table('users')->where(['id'=>$candidate_id])->update([
                  //       'digital_signature' => $file_name
                  //     ]);
                  //   }
                  // }
                  // DB::commit();
                  return response()->json([
                    'success' =>true,
                    'status'  =>'no',
                    'errors'  =>[]
                  ]);
                }
                else
                {
                    $users_d=DB::table('users as u')
                          ->select('u.*','ub.company_name')
                          ->join('user_businesses as ub','u.business_id','=','ub.business_id')
                          ->where('u.id',$job_data->filled_by)
                          ->first();
                    $name= $users_d->name.' ('.$users_d->company_name.')';
                    return response()->json([
                      'success' =>true,
                      'status'  =>'filled',
                      'filled_by' => $name,
                      'candidate_id'=>$candidate,
                    ]);
                }
              }
                
          }
          else {
              // manual submit 
              $job_item =DB::table('job_items')->where(['candidate_id'=>$candidate_id,'jaf_status'=>'filled'])->first();
             
              if($job_item!=NULL)
              {
                $users_d=DB::table('users as u')
                ->select('u.*','ub.company_name')
                ->join('user_businesses as ub','u.business_id','=','ub.business_id')
                ->where('u.id',$job_item->filled_by)
                ->first();       
                $name= $users_d->name.' ('.$users_d->company_name.')';
                return response()->json([
                  'success' =>true,
                  'status'  =>'filled',
                  'filled_by' => $name,
                  'candidate_id'=>$candidate,
                ]);
              }
              else
              {
                  // $this->validate($request, [
                  //   'digital_signature' => 'mimes:png,jpeg,jpg,gif,svg|max:2048',
                  // ]);

                  $rules=[
                    'digital_signature' => 'mimes:png,jpeg,jpg,svg|max:2048',
                  ];

                  $validator = Validator::make($request->all(), $rules);
            
                  if ($validator->fails()){
                      return response()->json([
                          'fail' => true,
                          'errors' => $validator->errors(),
                          'error_type'=>'validation'
                      ]);
                  }

                if ($files = $request->file('digital_signature')) 
                {
                    $s3_config  = S3ConfigTrait::s3Config();
                    $digital_signature_file_platform  = 'web';
                    $file       = $request->file('digital_signature');
                    $filename   = $file->getClientOriginalName();
                    $file_name  = date('Yhis').$filename;
                    $destinationPath = public_path('uploads/signatures/'); 
                    $dsext      = $request->file('digital_signature')->getClientOriginalExtension();
                    // $files->move($destinationPath, $dsImage);
                    
                      $candidate=DB::table('users')->select('digital_signature','digital_signature_file_platform')->where('id',$candidate_id)->first();

                      $candidate_img=$candidate->digital_signature;
                      // $user_img = Auth::user()->digital_signature;
                      if($candidate_img!=NULL && $candidate_img!='')
                      {
                        if(File::exists(public_path().'/uploads/signatures/'.$candidate_img))
                        {
                          File::delete(public_path().'/uploads/signatures/'.$candidate_img);
                        } 
                      }

                      if($s3_config!=NULL)
                      {
                          $digital_signature_file_platform = 's3';
                          $path = 'uploads/signatures/';
                          if(!Storage::disk('s3')->exists($path))
                          {
                              Storage::disk('s3')->makeDirectory($path,0777, true, true);
                          }

                          Storage::disk('s3')->put($path.$file_name, file_get_contents($files));
                      }
                      else
                      {
                        $request->digital_signature->move($destinationPath,$file_name);
                      }

                      // $mask = Image::make($file)
                      //           ->orientate() // it's better to set a tolerance for trim()
                      //           ->invert(); // invert it to use as a ma
                                
                      // $new_image = Image::canvas($mask->width(), $mask->height(), '#000000')
                      //             ->mask($mask)
                      //             ->save('uploads/signatures/'.$file_name);

                      DB::table('users')->where(['id'=>$candidate_id])->update([
                        'digital_signature' => $file_name,
                        'digital_signature_file_platform' => $digital_signature_file_platform
                      ]);
                    
                }
                // end digital signature
                
                $jaf_items_data = DB::table('jaf_form_data')->where(['job_item_id'=>$case_id])->get();
               
                // Validation for address
                foreach($jaf_items_data as $service)
                {
                  //check ignore
                   $is_check_ignore = 0;
                   if($request->has('check_ignore-'.$service->id)){
                    $is_check_ignore = 1;
                   }

                   if($is_check_ignore==1)
                   {
                      if( $service->service_id == 1 )
                      {
                        $input_items = DB::table('service_form_inputs as sfi')->select('sfi.*')->where(['sfi.service_id'=>$service->service_id])->get();
                              
                        $data=false;
                        $i=2;
                        foreach($input_items as $item)
                        {
                          if($request->input('service-input-value-'.$service->id.'-'.$i)=='' || $request->input('service-input-value-'.$service->id.'-'.$i)==NULL)
                            {
                                $data=true;
                            }
                            else
                            {
                                $data = false;
                                break;
                            }
                            $i++;
                        }
        
                        if($data)
                        {
                            $rules=[
                              'address-type-'.$service->id => 'required',
                            ];
        
                            $custom=[
                              'address-type-'.$service->id.'.required' => 'Address Type Field is required'
                            ];
                
                            $validator = Validator::make($request->all(), $rules,$custom);
                        
                            if ($validator->fails()){
                                return response()->json([
                                    'fail' => true,
                                    'errors' => $validator->errors(),
                                    'error_type'=>'validation'
                                ]);
                            }
                        }

                      }
                      else
                      {
                        break;
                      }
                   }
                    
                }

                // Validation for Check Control
                foreach($jaf_items_data as $service)
                {
                    $input_items = DB::table('service_form_inputs as sfi')
                                  ->select('sfi.*')            
                                  ->where(['sfi.service_id'=>$service->service_id,'status'=>1])
                                  ->whereNull('sfi.reference_type')
                                  ->whereNotIn('label_name',['Mode of Verification','Remarks'])
                                  ->get();

                    //check ignore
                    $is_check_ignore = 0;
                    if($request->has('check_ignore-'.$service->id)){
                      $is_check_ignore = 1;
                    }

                    if($is_check_ignore==1)
                    {
                      // dd($service->business_id);
                      $j=0;
                      foreach($input_items as $item)
                      {
                          $name=$item->label_name;
                          $check_control_masters=DB::table('check_control_masters')->where(['check_control_coc_id'=>$service->business_id,'service_input_id'=>$item->id])->first();
                          //dd($check_control_masters);
                          if($check_control_masters!=NULL){
                            
                            $rules=[
                              'service-input-value-'.$service->id.'-'.$j=> 'required',
                            ];

                            $custom=[
                              'service-input-value-'.$service->id.'-'.$j.'.required' => $name.' Field is required'
                            ];
                
                            $validator = Validator::make($request->all(), $rules,$custom);
                        
                            if ($validator->fails()){
                                return response()->json([
                                    'fail' => true,
                                    'errors' => $validator->errors(),
                                    'error_type'=>'validation'
                                ]);
                            }
                            
                          
                          }
                          $j++;
                      }

                    }
                
                }

                // Validation for Employment & Educational

                foreach($jaf_items_data as $service)
                {
                  // Employment
                  if($service->service_id==10)
                  {
                     $fake_employment = DB::table('fake_employment_lists')->where(DB::raw('lower(company_name)'), strtolower($request->input('service-input-value-'.$service->id.'-'.'2')))->first();
                     if($fake_employment!=NULL)
                     {
                          return response()->json([
                            'fail' => true,
                            'errors' => ['service-input-value-'.$service->id.'-'.'2'=>'System found, This company name seems fake.'],
                            'error_type'=>'validation'
                        ]);
                     }
                    
                  }
                  // Educational
                  else if($service->service_id==11)
                  {
                    $fake_educational = DB::table('fake_educational_lists')->where(DB::raw('lower(board_or_university_name)'),strtolower($request->input('service-input-value-'.$service->id.'-'.'2')))->first();
                    if($fake_educational!=NULL)
                    {
                        return response()->json([
                          'fail' => true,
                          'errors' => ['service-input-value-'.$service->id.'-'.'2'=>'System found, This university / board name seems fake.'],
                          'error_type'=>'validation'
                      ]);
                    }
                  }
                }

                // dd(1);

                foreach($jaf_items_data as $service)
                {

                    // if($service->service_id==1)
                    // {
                    //   $rules=[
                    //     'address-type-'.$service->id => 'required',
                    //   ];

                    //   $custom=[
                    //     'address-type-'.$service->id.'.required' => 'Address Type Field is required'
                    //   ];
          
                    //   $validator = Validator::make($request->all(), $rules,$custom);
                  
                    //   if ($validator->fails()){
                    //         return response()->json([
                    //             'fail' => true,
                    //             'errors' => $validator->errors(),
                    //             'error_type'=>'validation'
                    //         ]);
                    //   }
                      
                      
                    // }

                    // $input_items = DB::table('service_form_inputs as sfi')
                    //               ->select('sfi.*')            
                    //               ->where(['sfi.service_id'=>$service->service_id])
                    //               ->get();
                    // $i=0;
                    // foreach($input_items as $input)
                    // {
                    //   $rules=[
                    //     'service-input-value-'.$service->id.'-'.$i => 'required',
                    //   ];

                    //   $custom=[
                    //     'service-input-value-'.$service->id.'-'.$i.'.required' => $input->label_name.' Field is required',
                    //   ];
          
                    //   $validator = Validator::make($request->all(), $rules,$custom);
                  
                    //   if ($validator->fails()){
                    //         return response()->json([
                    //             'fail' => true,
                    //             'errors' => $validator->errors(),
                    //             'error_type'=>'validation'
                    //         ]);
                    //   } 

                    //   $i++;
                    // }

                    $input_items = DB::table('service_form_inputs as sfi')
                                  ->select('sfi.*')            
                                  ->where(['sfi.service_id'=>$service->service_id,'status'=>1])
                                  ->get();

                    // if($service->form_data==NULL)
                    // {
                        // $j = 1;
                        // $job_item_data = DB::table('job_sla_items')->where(['id'=>$case_id])->first();
                        // $numbers_of_items = $job_item_data->number_of_verifications;
                        // if($numbers_of_items > 1){
                        //   $j++;
                        // }


                        $input_data = [];
                        $reference_type = NULL;
                        $i=0;
                        foreach($input_items as $input){
                          if($input->service_id==17)
                          {
                              if($input->reference_type==NULL && !(stripos($input->label_name,'Mode of Verification')!==false || stripos($input->label_name,'Remarks')!==false))
                              { 
                                $input_data[] = [
                                  $request->input('service-input-label-'.$service->id.'-'.$i)=>$request->input('service-input-value-'.$service->id.'-'.$i),
                                  'is_report_output'=>$input->is_report_output 
                                ];
  
                                if(stripos($request->input('service-input-label-'.$service->id.'-'.$i),'Reference Type (Personal / Professional)')!==false)
                                {
                                    $reference_type = $request->input('service-input-value-'.$service->id.'-'.$i);
                                }
  
                              }
                          }
                          else
                          {
                              $input_data[] = [
                                    $request->input('service-input-label-'.$service->id.'-'.$i)=>$request->input('service-input-value-'.$service->id.'-'.$i),
                                    'is_report_output'=>$input->is_report_output 
                              ];
                          }
                          
                            $i++;
                        }
                      
                        $jaf_data = json_encode($input_data);
                        
                        //insuff
                        $is_insufficiency = 0;
                        if($request->has('insufficiency-'.$service->id)){
                          $is_insufficiency = 1;
                        }

                        //check ignore
                        $is_check_ignore = 0;
                        if($request->has('check_ignore-'.$service->id)){
                          $is_check_ignore = 1;
                        }

                        $insufficiency_notes = $request->input('insufficiency-notes-'.$service->id);
      
                        $address_type = $request->input('address-type-'.$service->id);

                        $jaf_form_data = [
                                      
                          'form_data'       => $jaf_data,
                          'form_data_all'   => json_encode($request->all()),
                          'is_insufficiency'=>$is_insufficiency,
                          'insufficiency_notes'=>$is_insufficiency==1?$insufficiency_notes:NULL,
                          'address_type'  =>$address_type,
                          'reference_type'  =>$reference_type,
                          'is_check_ignore' => $is_check_ignore,
                          'check_ignore_created_by' => $is_check_ignore==1 ? Auth::user()->id : NULL,
                          'check_ignore_created_at' => $is_check_ignore==1 ? date('Y-m-d H:i:s') : NULL,
                          'created_by'    => Auth::user()->id,
                          'is_filled' => '1',
                          'updated_at'    => date('Y-m-d H:i:s')
                        ];
        
                          DB::table('jaf_form_data')->where(['id'=>$service->id])->update($jaf_form_data);

                          // if($is_insufficiency==1)
                          // {
                          //     $insuff_data=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$service->id,'activity_type'=>'jaf-save','status'=>'raised'])->first();
          
                          //     if($insuff_data!=NULL)
                          //     {
                          //       $ver_insuff_data=[
                          //         'notes'=>$insufficiency_notes,
                          //         'created_by'   => Auth::user()->id,
                          //         'updated_at'=> date('Y-m-d H:i:s'),
                          //       ]; 
                          //       DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$service->id,'activity_type'=>'jaf-save','status'=>'raised'])->update($ver_insuff_data);
                          //     }
                          //     else{
                          //       $ver_insuff_data=[
                          //         'parent_id'   => $parent_id,
                          //         'business_id' => $business,
                          //         'coc_id' => $service->business_id,
                          //         'candidate_id' => $service->candidate_id,
                          //         'jaf_form_data_id'  => $service->id,
                          //         'service_id'  => $service->service_id,
                          //         'item_number' => $service->check_item_number,
                          //         'created_by'   => Auth::user()->id,
                          //         'created_at'   => date('Y-m-d H:i:s'),
                          //         'activity_type'=> 'jaf-save',
                          //         'status' => 'raised',
                          //         'notes' => $insufficiency_notes,
                          //       ];
            
                          //       DB::table('verification_insufficiency')->insert($ver_insuff_data);
                          //     }
          
                          // }
                          // else if($is_insufficiency==0)
                          // {
                          //   $insuff_data=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$service->id,'activity_type'=>'jaf-save','status'=>'raised'])->delete();
                          // }

                          // $report_items = DB::table('report_items')->where(['jaf_id'=>$service->id])->first();

                          // if($report_items!=NULL)
                          // {
                          //   if($report_items->jaf_data==NULL)
                          //   {
                          //     $report_item_data=[];
                          //     if ($item->verification_status == 'success') {
                          //       $report_item_data = 
                          //       [ 
                          //         'jaf_data'      =>$jaf_data,
                          //         'reference_type'  =>$reference_type,
                          //         'created_at'    =>date('Y-m-d H:i:s')
                          //       ];
                          //     } 
                          //     else {
                          //       $report_item_data = 
                          //       [    
                          //         'jaf_data'      =>$jaf_data,
                          //         'reference_type'  =>$reference_type,
                          //         'is_report_output' => '0',
                          //         'created_at'    =>date('Y-m-d H:i:s')
                          //       ]; 
                          //     }
                          //     DB::table('report_items')->where(['id'=>$report_items->id])->update($report_item_data);
                          //   }
                           
                          // }
                         
                    // }

                    $report = DB::table('reports')->where('candidate_id',$service->candidate_id)->first();

                    if($report==null){
                        $job = DB::table('job_items')->where(['candidate_id'=>$service->candidate_id])->first(); 
                      
                        $data = 
                          [
                            'parent_id'     =>$business,
                            'business_id'   =>$job->business_id,
                            'candidate_id'  =>$service->candidate_id,
                            'sla_id'        =>$job->sla_id,       
                            'created_at'    =>date('Y-m-d H:i:s')
                          ];
                          
                          $report_id = DB::table('reports')->insertGetId($data);
                    }
                    else
                    {
                        $report_id = $report->id;
                    }

                    $r_item = DB::table('report_items')->where('jaf_id',$service->id)->first();

                    if($r_item!=NULL)
                    {
                        if ($service->verification_status == 'success') {
                          $data = 
                          [
                            'is_check_ignore' => $service->is_check_ignore,
                            'check_ignore_created_by' => $service->check_ignore_created_by,
                            'check_ignore_created_at' => $service->check_ignore_created_at,
                            'jaf_data'      =>$jaf_data,
                            'updated_at'    =>date('Y-m-d H:i:s')
                          ];
                        } 
                        else {
                          $data = 
                          [
                            'is_check_ignore' => $service->is_check_ignore,
                            'check_ignore_created_by' => $service->check_ignore_created_by,
                            'check_ignore_created_at' => $service->check_ignore_created_at,
                            'jaf_data'      =>$jaf_data,
                            'updated_at'    =>date('Y-m-d H:i:s')
                          ]; 
                        }

                        DB::table('report_items')->where('jaf_id',$service->id)->update($data);

                        $report_item_id = $r_item->id;
                    }
                    else
                    {
                      if ($service->verification_status == 'success') {
                        $data = 
                        [
                          'report_id'     =>$report_id,
                          'service_id'    =>$service->service_id,
                          'service_item_number'=>$service->check_item_number,
                          'candidate_id'  =>$service->candidate_id,      
                          'jaf_data'      =>$jaf_data,
                          'jaf_id'        =>$service->id,
                          'is_check_ignore' => $service->is_check_ignore,
                          'check_ignore_created_by' => $service->check_ignore_created_by,
                          'check_ignore_created_at' => $service->check_ignore_created_at,
                          'reference_type' =>  $reference_type,
                          'created_at'    =>date('Y-m-d H:i:s')
                        ];
                      } 
                      else {
                        $data = 
                        [
                          'report_id'     =>$report_id,
                          'service_id'    =>$service->service_id,
                          'service_item_number'=>$service->check_item_number,
                          'candidate_id'  =>$service->candidate_id,      
                          'jaf_data'      =>$jaf_data,
                          'jaf_id'        =>$service->id,
                          'is_report_output' => '0',
                          'is_check_ignore' => $service->is_check_ignore,
                          'check_ignore_created_by' => $service->check_ignore_created_by,
                          'check_ignore_created_at' => $service->check_ignore_created_at,
                          'reference_type' =>  $reference_type,
                          'created_at'    =>date('Y-m-d H:i:s')
                        ]; 
                      }
                      $report_item_id = DB::table('report_items')->insertGetId($data);
                    }

                    $reference_type = NULL;
                    $k=0;
                    foreach($input_items as $input)
                    {
                      if($input->service_id==17)
                      {
                        if(stripos($request->input('service-input-label-'.$service->id.'-'.$k),'Reference Type (Personal / Professional)')!==false)
                        {
                            $reference_type = $request->input('service-input-value-'.$service->id.'-'.$k);
                        }
                      }
                      $k++;
                    }

                    $is_insufficiency = 0;
                    if($request->has('insufficiency-'.$service->id)){
                      $is_insufficiency = 1;
                    }

                    $insufficiency_notes = $request->input('insufficiency-notes-'.$service->id);
          
                    $address_type = $request->input('address-type-'.$service->id);
                    
                    if($is_insufficiency==1)
                    {
                        $s3_config=NULL;
                        $c_file_platform = 'web';
                        $attach_on_select=[];
                        $allowedextension=['jpg','jpeg','png','svg','pdf'];
                        $zipname="";
                        $zip_r=mt_rand(100,500);
                        if($request->hasFile('attachments-'.$service->id) && $request->file('attachments-'.$service->id) !="")
                        {
                            $filePath = public_path('/uploads/raise-insuff/'); 
                            $files= $request->file('attachments-'.$service->id);
                            foreach($files as $file)
                            {
                                    $extension = $file->getClientOriginalExtension();
          
                                    $check = in_array($extension,$allowedextension);

                                    $file_size = number_format(File::size($file) / 1048576, 2);
                                    //dd($file_size);
                                    if(!$check)
                                    {
                                        return response()->json([
                                          'fail' => true,
                                          'errors' => ['attachments-'.$service->id => 'Only jpg,jpeg,png,pdf are allowed !'],
                                          'error_type'=>'validation'
                                        ]);
                                    }

                                    if($file_size > 10)
                                    {
                                        return response()->json([
                                          'fail' => true,
                                          'error_type'=>'validation',
                                          'errors' => ['attachments-'.$service->id => 'The document size must be less than only 10mb Upload !'],
                                        ]);                        
                                    }
                            }
                            
                            $zipname = 'raise-insuff-'.$zip_r.'-'.date('Ymdhis').'.zip';
                            $zip = new \ZipArchive();      
                            $zip->open(public_path().'/uploads/raise-insuff/'.$zipname, \ZipArchive::CREATE | \ZipArchive::OVERWRITE);
          
                            foreach($files as $file)
                            {
                                $r=mt_rand(100,500);
                                $file_data = $file->getClientOriginalName();
                                $tmp_data  = $candidate_id.'-'.$r.'-'.date('mdYHis').'-'.$file_data; 
                                $data = $file->move($filePath, $tmp_data);       
                                $attach_on_select[]=$tmp_data;
          
                                $path=public_path()."/uploads/raise-insuff/".$tmp_data;
                                $zip->addFile($path, '/raise-insuff/'.basename($path));  
                            }
          
                            $zip->close();
                        }

                        $s3_config = S3ConfigTrait::s3Config();

                        $path=public_path().'/uploads/raise-insuff/';

                        if($s3_config!=NULL && $zipname!='')
                        {
                          if(File::exists($path.$zipname))
                          {
                              $c_file_platform = 's3';

                              $s3filePath = 'uploads/raise-insuff/';
              
                              if(!Storage::disk('s3')->exists($s3filePath))
                              {
                                  Storage::disk('s3')->makeDirectory($s3filePath,0777, true, true);
                              }
              
                              $file = Helper::createFileObject($path.$zipname);
              
                              Storage::disk('s3')->put($s3filePath.$zipname,file_get_contents($file));

                              File::delete($path.$zipname);
                          }

                        }

                        if(File::exists($path.'tmp-files/'))
                        {
                            File::cleanDirectory($path.'tmp-files/');
                        }

                        $jaf_form_data = 
                        [
                          'is_insufficiency'=>$is_insufficiency,
                          'insufficiency_notes'=>$is_insufficiency==1?$insufficiency_notes:NULL,
                          'address_type'  =>$address_type,
                          'reference_type' => $reference_type,
                          'created_by'    => Auth::user()->id,
                          'is_filled' => '1',
                          'insuff_attachment' => $zipname!=""?$zipname:NULL,
                          'insuff_attachment_file_platform' => $c_file_platform,
                          'updated_at'    => date('Y-m-d H:i:s')
                        ];
        
                        DB::table('jaf_form_data')->where(['id'=>$service->id])->update($jaf_form_data);


                        $insuff_data=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$service->id,'activity_type'=>'jaf-save','status'=>'raised'])->first();

                        if($insuff_data!=NULL)
                        {
                          $ver_insuff_data=[
                            'notes'=>$insufficiency_notes,
                            'attachment' => $zipname!=""?$zipname:NULL,
                            'attachment_file_platform' => $c_file_platform,
                            'updated_by'   => Auth::user()->id,
                            'updated_at'=> date('Y-m-d H:i:s'),
                          ]; 
                          $ver_insuff_id = DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$service->id,'activity_type'=>'jaf-save','status'=>'raised'])->first();
                          $ver_insuff_update = VerificationInsufficiency::find($ver_insuff_id->id);
                          $ver_insuff_update->update($ver_insuff_data);
                          $ver_id=$insuff_data->id;
                        }
                        else{
                          $ver_insuff_data=[
                            'parent_id'   => $parent_id,
                            'business_id' => $business,
                            'coc_id' => $service->business_id,
                            'candidate_id' => $service->candidate_id,
                            'jaf_form_data_id'  => $service->id,
                            'service_id'  => $service->service_id,
                            'item_number' => $service->check_item_number,
                            'created_by'   => Auth::user()->id,
                            'created_at'   => date('Y-m-d H:i:s'),
                            'activity_type'=> 'jaf-save',
                            'status' => 'raised',
                            'notes' => $insufficiency_notes,
                            'attachment' => $zipname!=""?$zipname:NULL,
                            'attachment_file_platform' => $c_file_platform,
                            // 'updated_at' => date('Y-m-d H:i:s')
                          ];

                            $ver_id= VerificationInsufficiency::create($ver_insuff_data);
                            $ver_id=$ver_id->id;
                            
                            // DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);
                        }

                        $insuff_log_data=[
                          'parent_id' => $parent_id,
                          'business_id' => $business,
                          'coc_id' => $service->business_id,
                          'candidate_id' => $candidate_id,
                          'service_id'  => $service->service_id,
                          'jaf_form_data_id' => $service->id,
                          'item_number' => $service->check_item_number,
                          'activity_type'=> 'jaf-save',
                          'status'=>'raised',
                          'notes' => $insufficiency_notes,
                          'attachment' => $zipname!=""?$zipname:NULL,
                          'attachment_file_platform' => $c_file_platform,
                          'created_by'   => Auth::user()->id,
                          'created_at'   => date('Y-m-d H:i:s'),
                        ];
                  
                        DB::table('insufficiency_logs')->insert($insuff_log_data);

                        if(count($attach_on_select)>0)
                        {
                          $file_data=DB::table('insufficiency_attachments')->where(['jaf_form_data_id'=>$service->id,'service_id'=>$service->service_id,'status'=>'raise'])->get();

                          if(count($file_data)>0)
                          {
                              $path=public_path().'/uploads/raise-insuff/';
                              foreach($file_data as $file)
                              {
                                  if(File::exists($path.$file->file_name))
                                  {
                                      File::delete($path.$file->file_name);
                                  }
                              }

                              DB::table('insufficiency_attachments')->where(['jaf_form_data_id'=>$service->id,'service_id'=>$service->service_id,'status'=>'raise'])->delete();

                          }

                          $i=0;
                          $file_platform = 'web';
                          if($s3_config!=NULL)
                          {
                            $s3filePath = 'uploads/raise-insuff/';

                            if(!Storage::disk('s3')->exists($s3filePath))
                            {
                                Storage::disk('s3')->makeDirectory($s3filePath,0777, true, true);
                            }

                            foreach($attach_on_select as $item)
                            {
                              $file_platform = 'web';
                              $path=public_path().'/uploads/raise-insuff/';

                              if(File::exists($path.$attach_on_select[$i]))
                              {
                                $file_platform = 's3';
                                $file = Helper::createFileObject($path.$attach_on_select[$i]);

                                Storage::disk('s3')->put($s3filePath.$attach_on_select[$i],file_get_contents($file));

                                File::delete($path.$attach_on_select[$i]);
                              }

                              $insuff_file=[
                                'parent_id' => $parent_id,
                                'business_id' => $business,
                                'coc_id' => $service->business_id,
                                'candidate_id' => $candidate_id,
                                'service_id'  => $service->service_id,
                                'jaf_form_data_id' => $service->id,
                                'item_number' => $service->check_item_number,
                                'status'=>'raise',
                                'file_name' => $attach_on_select[$i],
                                'file_platform' => $file_platform,
                                'created_by'   => Auth::user()->id,
                                'created_at'   => date('Y-m-d H:i:s'),
                                
                              ];
                        
                              $file_id = DB::table('insufficiency_attachments')->insertGetId($insuff_file);
                  
                              $i++;
                              
                              if(File::exists($path.'tmp-files/'))
                              {
                                  File::cleanDirectory($path.'tmp-files/');
                              }

                            }
                          }
                          else
                          {
                            foreach($attach_on_select as $item)
                            {
                              $insuff_file=[
                                'parent_id' => $parent_id,
                                'business_id' => $business,
                                'coc_id' => $service->business_id,
                                'candidate_id' => $candidate_id,
                                'service_id'  => $service->service_id,
                                'jaf_form_data_id' => $service->id,
                                'item_number' => $service->check_item_number,
                                'status'=>'raise',
                                'file_name' => $attach_on_select[$i],
                                'file_platform' => $file_platform,
                                'created_by'   => Auth::user()->id,
                                'created_at'   => date('Y-m-d H:i:s'),
                                
                              ];
                        
                              $file_id = DB::table('insufficiency_attachments')->insertGetId($insuff_file);
                  
                              $i++;
                            }
  
                          }

                        }

                        $ver_insuff=DB::table('verification_insufficiency')->where(['id' => $ver_id,'status'=>'raised'])->first();

                        $candidates=DB::table('users as u')
                                    ->select('u.*','j.business_id as coc_id','j.id as jaf_id','v.created_at as insuff_date','v.created_by as insuff_by','v.item_number','v.notes','s.verification_type','s.name as service_name','v.business_id as cust_id','v.attachment','v.updated_at','v.updated_by')
                                    ->join('jaf_form_data as j','u.id','=','j.candidate_id')
                                    ->join('verification_insufficiency as v','v.jaf_form_data_id','=','j.id')
                                    ->join('services as s','s.id','=','v.service_id')
                                    ->where(['u.user_type'=>'candidate','j.id'=>$service->id,'v.status'=>'raised','v.id'=>$ver_insuff->id])
                                    ->first();
                           
                            if($candidates!=NULL)
                            {
                              // $client=DB::table('users')->where(['id'=>$candidates->coc_id])->first();

                              // $name = $client->name;
                              // $email = $client->email;
                              // $msg= "Insufficiency Raised For Candidate";
                              // $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                              // if($candidates->attachment!=NULL)
                              // {
                              //   $url = url('/').'/uploads/raise-insuff/'.$zipname;

                              //   if($s3_config!=NULL)
                              //   {
                              //     $filePath = 'uploads/raise-insuff/';

                              //     $disk = Storage::disk('s3');

                              //     $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                              //         'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                              //         'Key'                        => $filePath.$zipname,
                              //         'ResponseContentDisposition' => 'attachment;'//for download
                              //     ]);

                              //     $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');

                              //     $url = (string)$req->getUri();
                              //   }

                              //   $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>$url,'candidate'=>$candidates,'sender'=>$sender);
                              // }
                              // else
                              //     $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);

                              // Mail::send(['html'=>'mails.insuff-notify'], $data, function($message) use($email,$name) {
                              //   $message->to($email, $name)->subject
                              //       ('Clobminds Pvt Ltd - Insufficiency Notification');
                              //   $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                              // });

                              // Notification for Insufficiency to Client

                              $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                              $companyname=Helper::company_name($candidates->parent_id);

                              $notification_controls = DB::table('notification_control_configs as nc')
                                                          ->select('nc.*')
                                                          ->join('notification_controls as n','n.business_id','=','nc.business_id')
                                                          ->where(['n.status'=>1,'nc.status'=>1,'n.business_id'=>$candidates->business_id,'n.type'=>'case-insuff-raise','nc.type'=>'case-insuff-raise'])
                                                          ->get();

                              if(count($notification_controls)>0)
                              {
                                foreach($notification_controls as $item)
                                {
                                      $name = $item->name;
                                      $email =  $item->email;
                                      $msg= "Insufficiency Raised For Candidate";

                                      if($candidates->attachment!=NULL)
                                      {
                                        $url = url('/').'/uploads/raise-insuff/'.$zipname;

                                        if($s3_config!=NULL)
                                        {
                                          $filePath = 'uploads/raise-insuff/';
                                          $disk = Storage::disk('s3');

                                          $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                                              'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                                              'Key'                        => $filePath.$zipname,
                                              'ResponseContentDisposition' => 'attachment;'//for download
                                          ]);
                                          $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');
                                          $url = (string)$req->getUri();
                                        }

                                        $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>$url,'candidate'=>$candidates,'sender'=>$sender,'companyname'=>$companyname);

                                      }
                                      else{
                                      $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender,'companyname'=>$companyname);

                                      Mail::send(['html'=>'mails.insuff-notify'], $data, function($message) use($email,$name) {
                                          $message->to($email, $name)->subject
                                              ('Clobminds Pvt Ltd - Insufficiency Notification');
                                          $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                                      });

                                    }
                                    
                                }
 
                              }

                              // Notification for Insufficiency to Candidate

                              $notify_candidate = DB::table('notification_controls as n')
                                                          ->select('n.*')
                                                          ->where(['n.status'=>1,'n.business_id'=>$candidates->business_id,'n.type'=>'case-insuff-raise','n.is_send_candidate'=>1])
                                                          ->first();

                              if($notify_candidate!=NULL && $candidates->email!=NULL)
                              {
                                $name = $candidates->name;
                                $email =  $candidates->email;
                                $msg= "Insufficiency Raised For Candidate";

                                if($candidates->attachment!=NULL)
                                {
                                  $url = url('/').'/uploads/raise-insuff/'.$zipname;

                                  if($s3_config!=NULL)
                                  {
                                    $filePath = 'uploads/raise-insuff/';
                                    $disk = Storage::disk('s3');

                                    $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                                        'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                                        'Key'                        => $filePath.$zipname,
                                        'ResponseContentDisposition' => 'attachment;'//for download
                                    ]);
                                    $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');
                                    $url = (string)$req->getUri();
                                  }

                                  $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>$url,'candidate'=>$candidates,'sender'=>$sender,'companyname'=>$companyname);

                                }
                                else{
                                  $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender,'companyname'=>$companyname);

                                }

                                Mail::send(['html'=>'mails.insuff-notify'], $data, function($message) use($email,$name) {
                                    $message->to($email, $name)->subject
                                        ('Clobminds Pvt Ltd - Insufficiency Notification');
                                    $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                                });

                              }

                              $kams = DB::table('key_account_managers')->where(['business_id'=>$candidates->business_id])->get();
                              if(count($kams)>0)
                              {
                                foreach($kams as $kam)
                                {
                                    $user_data=DB::table('users')->where(['id'=>$kam->user_id])->first();

                                    $name1 = $user_data->name ?? null;
                                    $email1 = $user_data->email ?? null;
                                    $msg= "Insufficiency Raised For Candidate";
                                    $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();

                                    if($candidates->attachment!=NULL)
                                    {
                                      $url = url('/').'/uploads/raise-insuff/'.$zipname;

                                      if($s3_config!=NULL)
                                      {
                                        $filePath = 'uploads/raise-insuff/';

                                        $disk = Storage::disk('s3');

                                        $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                                            'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                                            'Key'                        => $filePath.$zipname,
                                            'ResponseContentDisposition' => 'attachment;'//for download
                                        ]);

                                        $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');

                                        $url = (string)$req->getUri();
                                      }

                                      $data  = array('name'=>$name1,'email'=>$email1,'msg'=>$msg,'link'=>$url,'candidate'=>$candidates,'sender'=>$sender,'companyname'=>$companyname);
                                    }
                                    else
                                      $data  = array('name'=>$name1,'email'=>$email1,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender,'companyname'=>$companyname);
                        
                                    Mail::send(['html'=>'mails.insuff-notify'], $data, function($message) use($email1,$name1) {
                                        $message->to($email1, $name1)->subject
                                            ('Clobminds Pvt Ltd - Insufficiency Notification');
                                        $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                                    });

                                }
                              }
                            }

                          // Task insuff raised and assign to  CAM

                          // $task = Task::where(['business_id'=>$service->business_id,'candidate_id'=>$service->candidate_id,'is_completed'=>0,'description'=>'JAF Filling'])->first();
                          // $task_id='';
                          // if ($task) {
                          //   # code...
                          //   $task_id = $task->id;

                          //     $task_update = Task::find($task_id);
                          //     $task_update->update(['is_completed'=> 1]);
                          //     // $task->save();
                          
                          //   //Change status of old task 
                          //   $task_assgn = TaskAssignment::where(['business_id'=>$service->business_id,'candidate_id'=>$service->candidate_id,'status'=>"1",'task_id'=>$task_id])->first();
                          //   // dd($task_assgn);
                          //   if($task_assgn)
                          //   {
                          //     $task_assign_update = TaskAssignment::find($task_assgn->id);
                          //     $task_assign_update->update(['status'=> '2']);
                          //     // $task_assgn->status= '2';
                          //     // $task_assgn->save();
                          //   }
                          // }
                          // task assign start
                          // $final_users = [];
                          // // $j = 0;
                          // $job_sla_item = DB::table('job_sla_items')->where(['candidate_id'=>$service->candidate_id,'service_id'=>$service->service_id])->first();
                          // // dd($job_sla_item);
                          // // foreach ($job_sla_items as $job_sla_item) {
                          //   if ($job_sla_item) {
                          //     # code...
                          //     $kam  = KeyAccountManager::where(['business_id'=>$service->business_id,'is_primary'=>'1'])->first();
                          //     // dd( $kam);
                          //     if ($kam) {
                          //       # code...
                             
                          //         $final_users = [];
                          //         $numbers_of_items = $job_sla_item->number_of_verifications;
                          //         // dd($numbers_of_items);
                          //         if($numbers_of_items > 0){
                          //           for ($i=1; $i <= $numbers_of_items; $i++) { 
                                      
                          //             $final_users = [];
                          //             $user_name='';
                          //             $user_name = DB::table('users')->where('id',$service->candidate_id)->first();
                          //             // dd($user_name); 
                          //             //insert in task
                          //               // $data = [
                          //               //   'name'          => $user_name->first_name.' '.$user_name->last_name,
                          //               //   'parent_id'=> $user_name->parent_id,
                          //               //   'business_id'   => $service->business_id, 
                          //               //   'description'   => 'Task for Verification',
                          //               //   'job_id'        => NULL, 
                          //               //   'priority'      => 'normal',
                          //               //   'candidate_id'  => $service->candidate_id,   
                          //               //   'service_id'    => $job_sla_item->service_id, 
                          //               //   'number_of_verifications' => $i,
                          //               //   'assigned_to'   => $kam->user_id,
                          //               //   'assigned_by'   => Auth::user()->id,
                          //               //   'assigned_at'   => date('Y-m-d H:i:s'),
                          //               //   'start_date'    => date('Y-m-d'),
                          //               //   'created_by'    => Auth::user()->id,
                          //               //   'created_at'    => date('Y-m-d H:i:s'),
                          //               //   'is_completed'  => 0,
                          //               //   // 'started_at'    => date('Y-m-d H:i:s')
                          //               // ];
                          //               // // // dd($data);
                          //               // $task_id = Task::create($data);
                          //               // $task_id=$task_id->id;
                          //               // //  DB::table('tasks')->insertGetId($data); 
                          //               // // dd($task_id); 
                          //               // $taskdata = [
                          //               //   'parent_id'=> $user_name->parent_id,
                          //               //   'business_id'   => $service->business_id,
                          //               //   'candidate_id'  =>$service->candidate_id,   
                          //               //   'job_sla_item_id'  => $job_sla_item->id,
                          //               //   'task_id'       => $task_id,
                          //               //   'user_id'       =>  $kam->user_id,
                          //               //   'service_id'    =>$job_sla_item->service_id,
                          //               //   'number_of_verifications' => $i,
                          //               //   'status'=>'1',
                          //               //   'created_at'    => date('Y-m-d H:i:s')  
                          //               // ];
                          //               // TaskAssignment::create($taskdata);
                          //               // DB::table('task_assignments')->insertGetId($taskdata); 
                                        
                          //           }
                          //         }
                          //     }
                          //   } 
                      
                    }
                    else if($is_insufficiency==0)
                    {
                      $path=public_path().'/uploads/raise-insuff';
                      $ver_data=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$service->id,'activity_type'=>'jaf-save'])->first();

                      if($ver_data!=NULL)
                      {
                        if($ver_data->attachment!=NULL)
                        {
                            if(File::exists($path.$ver_data->attachment))
                            {
                              File::delete($path.$ver_data->attachment);
                            }
                        }
                        $insuff_data=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$service->id,'activity_type'=>'jaf-save'])->delete();
                      }

                      $insuff_attach=DB::table('insufficiency_attachments')->where(['jaf_form_data_id'=>$service->id,'status'=>'raise'])->get();
                      if(count($insuff_attach)>0){
                        foreach($insuff_attach as $insuff)
                        {
                          if(File::exists($path.$insuff->file_name))
                          {
                            File::delete($path.$insuff->file_name);
                          }
                        }
                        DB::table('insufficiency_attachments')->where(['jaf_form_data_id'=>$service->id,'status'=>'raise'])->delete();
                      }

                    }
                }
              
                // end jaf item services
                $serviceId = DB::table('services')->select('id','name','type_name')->where('type_name','cin')->first();
                $serviceUpi = DB::table('services')->select('id','name','type_name')->where('type_name','upi')->first();
                $serviceUan = DB::table('services')->select('id','name','type_name')->where('type_name','uan-number')->first();
                $serviceCibil = DB::table('services')->select('id','name','type_name')->where('type_name','cibil')->first();
                // dd($serviceCibil);
                DB::table('job_items')->where(['id'=>$case_id])->update(['jaf_status'=>'filled','filled_by_type'=>'customer','filled_by'=>Auth::user()->id,'filled_at'=>date('Y-m-d H:i:s')]);

                $job_item =DB::table('job_items')->where(['candidate_id'=>$candidate_id,'jaf_status'=>'filled'])->first();


                //if jaf sattus is filled 
                if ( $job_item->jaf_status == 'filled') {
                  //  $jfd_service =[];
                  $jfd_service= DB::table('jaf_form_data')->where('candidate_id',$candidate_id)->whereIn('service_id',['2','3','4','7','8','9','12',$serviceId->id,$serviceUpi->id,$serviceUan->id,$serviceCibil->id])->get();
                  $jfd_service=$jfd_service->toArray();
                  // want to ApiCheck event
                  
                  $jafdatacount = DB::table('jaf_form_data')->where(['candidate_id'=>$candidate_id,'service_id'=>$service->service_id,])->first();
                  if(is_null($request->api_hits_counter)){
                    $apihitscounter = [];
                  }else{
                    $apihitscounter = $request->api_hits_counter;
                  }
                 
                  
                  event(new ApiCheck($jfd_service,$apihitscounter));
                  

                 
                  // }
                  // $job_item_item = DB::table('job_sla_items')->select('id')->where(['candidate_id'=>$candidate_id,'service_id'=>$service->service_id])->first();
                  // dd($job_item_item);
                
                  $task = Task::where(['business_id'=>$service->business_id,'candidate_id'=>$service->candidate_id,'is_completed'=>0,'description'=>'BGV Filling'])->first();
                 
                  $task_id='';
                  if ($task) {
                    # code...
                      $task_id = $task->id;
                      $task->is_completed= 1;
                      $task->updated_at= date('Y-m-d H:i:s');
                      $task->save();
                    
                    //Change status of old task 
                    $task_assgn = TaskAssignment::where(['business_id'=>$service->business_id,'candidate_id'=>$service->candidate_id,'status'=>"2",'task_id'=>$task_id])->first();
                    if($task_assgn)
                    {
                      $task_assgn->status= '3';
                      $task_assgn->updated_at = date('Y-m-d H:i:s');
                      $task_assgn->save();
                    }
                  }
                    // task assign start
                    // $final_users = [];
                    // // $j = 0;
                    // $job_sla_items  = DB::table('job_sla_items')->where('candidate_id',$candidate_id)->whereNotIn('service_id',[2,3,4,7,8,9,12])->get();
                    $user_name      = DB::table('users')->where('id',$service->candidate_id)->first();

                    // foreach ($job_sla_items as $job_sla_item) {
                    //   $job_sla_item_id= $job_sla_item->id;
                    //     //Get data of user of customer with 
                    //     $verify_task = Task::where(['business_id'=>$service->business_id,'candidate_id'=>$service->candidate_id,'service_id'=>$job_sla_item->service_id,'number_of_verifications'=>$job_sla_item->number_of_verifications,'is_completed'=>0,'description'=>'Task for Verification'])->first();
                    //     // dd($verify_task);
                    //     if($verify_task==NULL){
                    //       $user_permissions = DB::table('users as u')
                    //       ->join('role_masters as rm', 'rm.id', '=', 'u.role')
                    //       ->join('role_permissions as rp', 'rp.role_id', '=', 'rm.id')
                    //       ->select('u.name','u.id','u.role as role_id','rm.role','rp.permission_id' )
                    //       ->where('u.business_id',Auth::user()->business_id)
                    //       ->get();
                    //       // Get JAF FILLING data from Action table for matching checking permission
                    //       $action_master = DB::table('action_masters')
                    //       ->select('*')
                    //       ->where(['route_group'=>'','action_title'=>'JAF Filled'])
                    //       ->first(); 

                    //       // dd($action_master->id);
                    //       // Check condition if user_permission have any data or not
                    //       if(count($user_permissions)>0) {
                    //         $users=[];
                    //         foreach ($user_permissions as $user_permission) {  
                    //           if(in_array($action_master->id,json_decode($user_permission->permission_id)))
                    //           {
                    //             $users[]= $user_permission;
                    //           }
                    //         }
                    //         $final_users = [];
                    //         $numbers_of_items = $job_sla_item->number_of_verifications;
                    //         // if($numbers_of_items > 0){
                    //         //   for ($i=1; $i <= $numbers_of_items; $i++) { 
                                
                    //             $final_users = [];
                    //               //insert in task
                    //               // $data = [
                    //               //   'name'          => $user_name->first_name.' '.$user_name->last_name,
                    //               //   'parent_id'     => Auth::user()->business_id,
                    //               //   'business_id'   => $business_id, 
                    //               //   'description'   => 'Task for Verification',
                    //               //   'job_id'        => NULL, 
                    //               //   'priority'      => 'normal',
                    //               //   'candidate_id'  => $candidate_id,   
                    //               //   'service_id'    => $job_sla_item->service_id, 
                    //               //   'number_of_verifications' => $i,
                    //               //   'assigned_to'   => NULL,
                    //               //   'created_by'    => Auth::user()->id,
                    //               //   'created_at'    => date('Y-m-d H:i:s'),
                    //               //   'updated_at'    => date('Y-m-d H:i:s'),
                    //               //   'is_completed'  => 0,
                                    
                    //               // ];
                    //               // // // dd($data);
                    //               // // $task_id =  DB::table('tasks')->insertGetId($data); 
                                  
                    //               // $taskdata = [
                    //               //   'parent_id'       => Auth::user()->business_id,
                    //               //   'business_id'     => $business_id,
                    //               //   'candidate_id'    => $candidate_id,   
                    //               //   'job_sla_item_id' => $job_sla_item->id,
                    //               //   'task_id'         => $task_id,
                    //               //   //  'user_id'     =>  $task_user->id,
                    //               //   'service_id'      => $job_sla_item->service_id,
                    //               //   'number_of_verifications' => $i,
                    //               //   'created_at'      => date('Y-m-d H:i:s'),
                    //               //   'updated_at'      => date('Y-m-d H:i:s') 
                    //               // ];
                                  
                    //               // DB::table('task_assignments')->insertGetId($taskdata); 
                                
                    //               //send email to customer
                    //               // if (Auth::user()->user_type == 'customer') {
                                      
                    //               //     $admin_email = Auth::user()->email;
                    //               //     $admin_name = Auth::user()->first_name;
                                      
                    //               //     $email = $admin_email;
                    //               //     $name  = $admin_name;
                    //               //     $candidate_name = $request->input('first_name');
                    //               //     $msg = "New JAF Verification Task Created with candidate name";
                    //               //     $sender = DB::table('users')->where(['id'=>$business_id])->first();
                    //               //     $data  = array('name'=>$name,'email'=>$email,'candidate_name'=>$candidate_name,'msg'=>$msg,'sender'=>$sender);
                    //               //     Mail::send(['html'=>'mails.task-notify'], $data, function($message) use($email,$name) {
                    //               //           $message->to($email, $name)->subject
                    //               //             ('Clobminds Pvt Ltd - Notification for JAF Filling task');
                    //               //           $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                    //               //     });
                    //               // }
                    //               // else
                    //               // {
                    //               //   //If login user is normal user
                    //               //   $login_user = Auth::user()->business_id;
                    //               //   $user= User::where('id',$login_user)->first();
                    //               //   $admin_email = $user->email;
                    //               //   $admin_name = $user->first_name;
                    //               //   //send email to customer
                    //               //   $email = $admin_email;
                    //               //   $name  = $admin_name;
                    //               //   $candidate_name = $request->input('first_name');
                    //               //   $msg = "New JAF Verification Task Created with candidate name";
                    //               //   $sender = DB::table('users')->where(['id'=>$business_id])->first();
                    //               //   $data  = array('name'=>$name,'email'=>$email,'candidate_name'=>$candidate_name,'msg'=>$msg,'sender'=>$sender);

                    //               //   Mail::send(['html'=>'mails.task-notify'], $data, function($message) use($email,$name) {
                    //               //         $message->to($email, $name)->subject
                    //               //           ('Clobminds Pvt Ltd - Notification for JAF Filling Task');
                    //               //         $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                    //               //   });
                    //               // }

                    //               // $kams  = KeyAccountManager::where('business_id',$request->input('customer'))->get();

                    //               // if (count($kams)>0) {
                    //               //   foreach ($kams as $kam) {

                    //               //     $user= User::where('id',$kam->user_id)->first();
                                    
                    //               //     $email = $user->email;
                    //               //     $name  = $user->name;
                    //               //     $candidate_name = $request->input('first_name');
                    //               //     $msg = "New JAF Verification Task Created with candidate name";
                    //               //     $sender = DB::table('users')->where(['id'=>$business_id])->first();
                    //               //     $data  = array('name'=>$name,'email'=>$email,'candidate_name'=>$candidate_name,'msg'=>$msg,'sender'=>$sender);
                                      
                    //               //     EmailConfigTrait::emailConfig();
                    //               //     //get Mail config data
                    //               //     //   $mail =null;
                    //               //     $mail= Config::get('mail');
                                      
                    //               //         // dd($mail['from']['address']);
                    //               //         // if (count($mail)>0) {
                    //               //         //     Mail::send(['html'=>'mails.task-notify'], $data, function($message) use($email,$name,$mail) {
                    //               //         //         $message->to($email, $name)->subject
                    //               //         //           ('Clobminds Pvt Ltd - Notification for JAF Filling Task');
                    //               //         //         $message->from($mail['from']['address'],$mail['from']['name']);
                    //               //         //   });
                    //               //         // } else {
                    //               //         //     Mail::send(['html'=>'mails.task-notify'], $data, function($message) use($email,$name) {
                    //               //         //           $message->to($email, $name)->subject
                    //               //         //             ('Clobminds Pvt Ltd - Notification for JAF Filling Task');
                    //               //         //           $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                    //               //         //     });
                    //               //         // }
                    //               //         // email end
                    //               //   }
                                    
                    //               // }
                    //               // send mail to all CAMs
                                  
                    //           // }
                    //           // end no of verifications of check
                              
                                
                    //         // }
                          
                    //           //
                    //       }
                    //     }
                    // }
                  // all task loop end here
                    //create task for BGV QC
                      $j_sla_item  = DB::table('job_sla_items')->select('id')->where('candidate_id',$candidate_id)->latest()->first();

                      $data = 
                      [
                        'name'          => $user_name->first_name.' '.$user_name->last_name,
                        'parent_id'     => Auth::user()->business_id,
                        'business_id'   => $business_id, 
                        'description'   => 'BGV QC',
                        'job_id'        => NULL, 
                        'priority'      => 'normal',
                        'candidate_id'  => $candidate_id,   
                        'service_id'    => 0, 
                        'number_of_verifications' => NULL,
                        'assigned_to'   => NULL,
                        'created_by'    => Auth::user()->id,
                        'created_at'    => date('Y-m-d H:i:s'),
                        'updated_at'    => date('Y-m-d H:i:s'),
                        'is_completed'  => 0,
                        'assigned_to' => Auth::user()->id,
                        'assigned_by'  => Auth::user()->id,
                        'assigned_at' =>  date('Y-m-d H:i:s')
                        // 'started_at'    => date('Y-m-d H:i:s')
                      ];
                      // // dd($data);
                      $task_id =  DB::table('tasks')->insertGetId($data); 
                      $taskdata = 
                      [
                        'parent_id'=> Auth::user()->business_id,
                        'business_id'       => $business_id,
                        'candidate_id'      => $candidate_id,   
                        'job_sla_item_id'   => $j_sla_item->id,
                        'task_id'           => $task_id,
                        'service_id'        => NULL,
                        'status'            =>'1',
                        'number_of_verifications' => 0,
                        'created_at'        => date('Y-m-d H:i:s'),
                        'updated_at'        => date('Y-m-d H:i:s'),
                        'user_id'  =>       Auth::user()->id
                       
                      ];
                      
                      DB::table('task_assignments')->insertGetId($taskdata); 
                    
                    //end create task for BGV QC

                    //Send data to report section
                    //$report_job_sla_items = DB::table('job_sla_items')->where('candidate_id',$candidate_id)->get();

                  // foreach($report_job_sla_items as $report_job_sla_item){
                      $report = DB::table('reports')->where('candidate_id',$candidate_id)->first();
                        // dd($report);
                        if ($report==NULL) {
                          $report= '';
                        }
              
                        //check report items created or not
                        $report_count = DB::table('reports')->where(['candidate_id'=>$candidate_id])->count(); 
                        // dd($report_count);
                        if($report_count == 0){
                          
                          $job = DB::table('job_items')->where(['candidate_id'=>$candidate_id])->first(); 
                        
                          $data = 
                            [
                              'parent_id'     =>$business,
                              'business_id'   =>$job->business_id,
                              'candidate_id'  =>$candidate_id,
                              'sla_id'        =>$job->sla_id,       
                              'created_at'    =>date('Y-m-d H:i:s')
                            ];
                            
                            $report_id = DB::table('reports')->insertGetId($data);
                            
                            
                        }
                        else
                        {
                          $report_id = $report->id;
                        }

                        // add service items
                        $jaf_items_datas = DB::table('jaf_form_data')->where(['candidate_id'=>$candidate_id])->get(); 
                            
                        foreach($jaf_items_datas as $item){
                          $reference_type = NULL;
                          $r_item = DB::table('report_items')->where('jaf_id',$item->id)->first();
                          if($r_item!=NULL)
                          {
                              if ($item->verification_status == 'success') {
                                $data = 
                                [
                                  'is_check_ignore' => $item->is_check_ignore,
                                  'check_ignore_created_by' => $item->check_ignore_created_by,
                                  'check_ignore_created_at' => $item->check_ignore_created_at,
                                  'jaf_data'      =>$item->form_data,
                                  'updated_at'    =>date('Y-m-d H:i:s')
                                ];
                              } 
                              else {
                                $data = 
                                [
                                  'is_check_ignore' => $item->is_check_ignore,
                                  'check_ignore_created_by' => $item->check_ignore_created_by,
                                  'check_ignore_created_at' => $item->check_ignore_created_at,
                                  'jaf_data'      =>$item->form_data,
                                  'updated_at'    =>date('Y-m-d H:i:s')
                                ]; 
                              }

                              DB::table('report_items')->where('jaf_id',$item->id)->update($data);

                              $report_item_id = $r_item->id;
                          }
                          else
                          {
                            if ($item->verification_status == 'success') {
                              $data = 
                              [
                                'report_id'     =>$report_id,
                                'service_id'    =>$item->service_id,
                                'service_item_number'=>$item->check_item_number,
                                'candidate_id'  =>$candidate_id,      
                                'jaf_data'      =>$item->form_data,
                                'jaf_id'        =>$item->id,
                                'is_check_ignore' => $item->is_check_ignore,
                                'check_ignore_created_by' => $item->check_ignore_created_by,
                                'check_ignore_created_at' => $item->check_ignore_created_at,
                                // 'reference_type' =>  $reference_type,
                                'created_at'    =>date('Y-m-d H:i:s')
                              ];
                            } 
                            else {
                              $data = 
                              [
                                'report_id'     =>$report_id,
                                'service_id'    =>$item->service_id,
                                'service_item_number'=>$item->check_item_number,
                                'candidate_id'  =>$candidate_id,      
                                'jaf_data'      =>$item->form_data,
                                'jaf_id'        =>$item->id,
                                'is_report_output' => '0',
                                'is_check_ignore' => $item->is_check_ignore,
                                'check_ignore_created_by' => $item->check_ignore_created_by,
                                'check_ignore_created_at' => $item->check_ignore_created_at,
                                // 'reference_type' =>  $reference_type,
                                'created_at'    =>date('Y-m-d H:i:s')
                              ]; 
                            }
                            $report_item_id = DB::table('report_items')->insertGetId($data);
                          }
                        
                          
                          $jaf_item_attachments= DB::table('jaf_item_attachments')->where(['jaf_id'=>$item->id,'is_deleted'=>'0'])->get();
                          if (count($jaf_item_attachments) > 0) {
                            foreach ($jaf_item_attachments as $attachment) {
                                $file_platform = 'web'; 
                        
                                if (stripos($attachment->file_platform, 's3') !== false) {
                                    // Handle S3 storage
                                    $s3_config = S3ConfigTrait::s3Config();
                                    $file_platform = 's3';
                                    $jaf_path = 'uploads/jaf-files/';
                                    $report_path = 'uploads/report-files/';
                        
                                    if (!Storage::disk('s3')->exists($report_path)) {
                                        Storage::disk('s3')->makeDirectory($report_path, 0777, true, true);
                                    }
                        
                                    $s3FilePath = $report_path . $attachment->file_name;
                        
                                    if (!Storage::disk('s3')->exists($s3FilePath)) {
                                        Storage::disk('s3')->copy($jaf_path . $attachment->file_name, $s3FilePath);
                                    }
                                } else {
                                    // Handle local storage
                                    $rep_path = public_path('uploads/report-files/');
                        
                                    if (!File::exists($rep_path)) {
                                        File::makeDirectory($rep_path, $mode = 0777, true, true);
                                    }
                        
                                    $localFilePath = $rep_path . $attachment->file_name;
                        
                                    if (!File::exists($localFilePath)) {
                                        File::copy(public_path('/uploads/jaf-files/' . $attachment->file_name), $localFilePath);
                                    }
                                }
                        
                                // Insert into database
                                DB::table('report_item_attachments')->insert([
                                    'report_id' => $report_id, 
                                    'report_item_id' => $report_item_id,
                                    'jaf_item_attachment_id' => $attachment->id,
                                    'file_name' => $attachment->file_name,
                                    'attachment_type' => $attachment->attachment_type,
                                    'file_platform' => $file_platform,
                                    'img_order' => $attachment->img_order,
                                    'service_attachment_name' => $attachment->service_attachment_name,
                                    'service_attachment_id' => $attachment->service_attachment_id,
                                    'created_by' => Auth::user()->id,
                                    'created_at' => now(), // Use Carbon instance for current time
                                    'is_temp' => $attachment->is_temp,
                                ]);
                            }
                        }
                        
                          $report_item = DB::table('report_items')->where(['id'=>$report_item_id])->first();

                          if($report_item->service_id==17)
                          {
                            $input_data = $item->form_data;

                            $input_data_array = json_decode($input_data,true);

                            if($input_data_array!=NULL)
                            {
                              foreach($input_data_array as $key => $input)
                              {
                                $key_val = array_keys($input); $input_val = array_values($input);
                                if(stripos($key_val[0],'Reference Type (Personal / Professional)')!==false)
                                {
                                  $reference_type = $input_val[0];
                                }
                              }
                            }
                          }

                          DB::table('report_items')->where(['id'=>$report_item_id])->update([
                              'reference_type' => $reference_type
                          ]);
                        }
                  // }
                    // end send BGV data to report

                    
                    $candidate = DB::table('users')->where('id',$candidate_id)->first();
                    $company = DB::table('user_businesses')->select('company_name')->where(['business_id'=>$candidate->business_id])->first();
                    $sender = DB::table('users')->where(['id'=>$candidate->parent_id])->first();

                    // Send Email to Customer for BGV Filled Successfully
                    $notification_controls = DB::table('notification_control_configs as nc')
                                              ->select('nc.*')
                                              ->join('notification_controls as n','n.business_id','=','nc.business_id')
                                              ->where(['n.status'=>1,'nc.status'=>1,'n.business_id'=>$candidate->business_id,'n.type'=>'jaf-filled','nc.type'=>'jaf-filled'])
                                              ->get();

                      if(count($notification_controls)>0)
                      {
                        foreach($notification_controls as $item)
                        {
                            $name = $item->name;
                            $email =  $item->email;
                            $company_name = $company->company_name;
                            $msg= 'Notification for Job Application Form Has Been Filled Successfully for Candidate ('.$candidate->name.' - '.$candidate->display_id.') at '.date('d-M-y h:i A').'';

                            $data  = array('name'=>$name,'email'=>$email,'company_name'=>$company_name,'sender'=>$sender,'msg'=>$msg);

                            Mail::send(['html'=>'mails.jaf-filled'], $data, function($message) use($email,$name) {
                                $message->to($email, $name)->subject
                                    ('Clobminds Pvt Ltd - BGV Notification');
                                $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                            });
                        }
                      }
                }
              //end if jaf sattus is filled 
              DB::commit();

                return response()->json([
                  'fail'          => false,
                  'success'       => true,
                  'candidate_id'  => base64_encode($candidate_id)
                ]);
              }
          }

        }
        catch (\Exception $e) {
            DB::rollback();
            // something went wrong
            return $e;
        }    
            // return redirect('/candidates/jaf-info/'.base64_encode($candidate_id))
            // ->with('success', 'Candidate BGV submitted.');
    } 

    //BGV Info show
    public function jafInfo(Request $request,$id)
    {
        $user_id = Auth::user()->id;

        $candidate_id = base64_decode($id);
        // $business_id = $request->business_id;
        // dd($candidate_id);
        $business_id = Auth::user()->business_id;
        $report_id ="";
        $jaf_items = [];

        DB::beginTransaction();
        try{

          $candidate = DB::table('users as u')
          ->select('u.id','u.business_id','u.client_emp_code','u.entity_code','u.display_id','u.first_name','u.middle_name','u.last_name','u.name','u.email','u.phone','u.phone_code','u.phone_iso','u.dob','u.aadhar_number','u.father_name','u.gender','j.created_at','j.job_id','j.sla_id','j.is_all_insuff_cleared','j.insuff_cleared_by','j.jaf_status','u.digital_signature','j.is_jaf_ready_report','u.digital_signature_file_platform')  
          ->leftjoin('job_items as j','j.candidate_id','=','u.id')
          ->where(['u.id'=>$candidate_id]) 
          ->first(); 

          //get BGV data - 
          $jaf_items = DB::table('jaf_form_data as jf')
                ->select('jf.id','jf.form_data_all','jf.form_data','jf.check_item_number','jf.address_type','jf.insufficiency_notes','jf.is_insufficiency','jf.insuff_attachment','jf.is_api_checked','jf.verification_status','jf.verified_at','jf.is_data_verified','s.name as service_name','s.id as service_id','s.verification_type','jf.candidate_id','jf.is_supplementary','s.type_name','s.short_name','jf.verification_mode','jf.api_hits_counter')
                ->join('services as s','s.id','=','jf.service_id')
                ->where(['jf.candidate_id'=>$candidate_id])
                ->get();
                // dd($jaf_items);
          $is_insuff_arr=[];
          foreach($jaf_items as $service)
          {
            $is_insuff_arr[]=$service->is_insufficiency;
          }
          // dd($is_insuff_arr);        
          // dd($jaf_items);
          // $job_items=DB::table('job_items')->where(['candidate_id'=>$candidate_id])->first();
          // dd($job_items);
          $sla_items = DB::select("SELECT sla_id, GROUP_CONCAT(DISTINCT service_id) AS alot_services FROM `job_sla_items` WHERE candidate_id = $candidate_id");
          $checks = UserCheck::where('user_id',$user_id)->get();
          // dd($checks);
          $kams = DB::table('key_account_managers')->where(['user_id'=>$user_id,'business_id'=>$candidate->business_id])->first();
          // dFd($kams);

          $report = DB::table('reports')->where(['candidate_id'=>$candidate_id,'status'=>'completed'])->first();
            // dd($report);
            if ($report==NULL) {
              $report= '';
              $report_id='';
              $report_status='';
              $report_items=[];
              $status_list=[];
            }

              $job = DB::table('job_items')->where(['candidate_id'=>$candidate_id])->first();

              if($job->jaf_status=='filled')
              {
                  //check report items created or not
                  $report_count = DB::table('reports')->where(['candidate_id'=>$candidate_id])->count(); 
                  if($report_count == 0){ 
                  
                    $data = 
                      [
                        'parent_id'     =>$business_id,
                        'business_id'   =>$job->business_id,
                        'candidate_id'  =>$candidate_id,
                        'sla_id'        =>$job->sla_id,       
                        'created_at'    =>date('Y-m-d H:i:s')
                      ];
                      
                      $report_id = DB::table('reports')->insertGetId($data);
                      
                      // add service items
                      $jaf_item = DB::table('jaf_form_data')->where(['candidate_id'=>$candidate_id])->get(); 

                      foreach($jaf_item as $item){
                        if ($item->verification_status == 'success') {
                          $data = 
                          [
                            'report_id'     =>$report_id,
                            'service_id'    =>$item->service_id,
                            'service_item_number'=>$item->check_item_number,
                            'candidate_id'  =>$candidate_id,      
                            'jaf_data'      =>$item->form_data,
                            'jaf_id'        =>$item->id,
                            'created_at'    =>date('Y-m-d H:i:s')
                          ];
                        } else {
                          $data = 
                          [
                            'report_id'     =>$report_id,
                            'service_id'    =>$item->service_id,
                            'service_item_number'=>$item->check_item_number,
                            'candidate_id'  =>$candidate_id,      
                            'jaf_data'      =>$item->form_data,
                            'jaf_id'        =>$item->id,
                            'is_report_output' => '0',
                            'created_at'    =>date('Y-m-d H:i:s')
                          ]; 
                        }
                        
                        $report_item_id = DB::table('report_items')->insertGetId($data);
                      }
                  }
              }
            
              $reports = DB::table('reports')->where(['candidate_id'=>$candidate_id])->first(); 

              if($reports)
              {
                $report_id      = $reports->id;
                $report_status  = $reports->status;
            
                // $candidate = [];
                $report_items = [];
                // $candidate =    Db::table('users as u')
                //                   ->select('u.id','u.business_id','u.first_name','u.last_name','u.name','u.email','u.phone','r.created_at')  
                //                   ->leftjoin('reports as r','r.candidate_id','=','u.id')
                //                   ->where(['u.id'=>$candidate_id]) 
                //                   ->first(); 
              
                $report_items = DB::table('report_items as ri')
                                ->select('ri.*','s.name as service_name','s.id as service_id' )  
                                ->join('services as s','s.id','=','ri.service_id')
                                ->where(['ri.report_id'=>$report_id]) 
                                ->orderBy('s.sort_number','asc')
                                ->get(); 

                    $status_list = DB::table('report_status_masters')->where(['status'=>1])->get(); 
                  // dd($jaf_items);
      
              }

              $user_service_check=DB::table('jaf_form_data as jf')
                            ->join('user_checks as u','u.checks','=','jf.service_id')
                            ->where(['jf.candidate_id'=>$candidate_id,'u.user_id'=>$user_id])
                            ->get();
              // dd($user_service_check);
              $services = DB::table('services')
              ->select('name','id')
              ->where(['status'=>'1'])
              ->whereNull('business_id')
              ->whereNotIn('type_name',['gstin'])
              ->orwhere('business_id',$business_id)
              ->get();
              // dd($services);
              // Auto Services
             $auto_services= DB::table('services')->select('name','id')
             ->where(['status'=>'1','verification_type'=>'Auto'])
             ->whereNull('business_id')
             ->whereNotIn('type_name',['gstin'])
             ->orwhere('business_id',$business_id)
             ->get();
            
             $service=[];
             foreach ($auto_services as $as) {
              
              $service[] = $as->id;
             }
              // dd($service);
             $jaf_service=[];
             foreach ($jaf_items as $ji) {
               
                 $jaf_service[]=$ji->service_id;
               
             }
            //  dd($jaf_service);
             $arr_service=[];
             foreach ($jaf_service as $js) {
                // dd($js);
                if (in_array($js,$service)) {
                  // dd($js);
                  $arr_service[]= $js;
                }
             }
            //  dd($arr_service);
               // Auto Services
               $newcheck_services= DB::table('services')->select('name','id')
               ->whereNotIn('id',$arr_service)
               ->where(['status'=>'1'])
               ->whereNull('business_id')
               ->whereNotIn('type_name',['gstin'])
               ->orwhere('business_id',$business_id)
               ->get();
              //  dd($candidate);
            //  dd($newcheck_services);
              DB::commit();
              return view('admin.candidates.jaf-info',compact('candidate','jaf_items','checks','sla_items','is_insuff_arr','kams','report','status_list','report_items','report_id','user_service_check','services','newcheck_services'));
          }
          catch (\Exception $e) {
              DB::rollback();
              // something went wrong
              return $e;
          } 

    }

    //BGV QC
    public function jafQC(Request $request,$id)
    {
        $user_id = Auth::user()->id;
        $candidate_id = base64_decode($id);
        $business_id = Auth::user()->business_id;
        $report_id ="";
        $jaf_items = [];

        DB::beginTransaction();
        try{

          $candidate = DB::table('users as u')
          ->select('u.id','u.business_id','u.client_emp_code','u.entity_code','u.display_id','u.first_name','u.middle_name','u.last_name','u.name','u.email','u.phone','u.phone_code','u.phone_iso','u.dob','u.aadhar_number','u.father_name','u.gender','j.created_at','j.job_id','j.sla_id','j.is_all_insuff_cleared','j.insuff_cleared_by','j.jaf_status','u.digital_signature','j.is_jaf_ready_report','u.digital_signature_file_platform')  
          ->leftjoin('job_items as j','j.candidate_id','=','u.id')
          ->where(['u.id'=>$candidate_id]) 
          ->first(); 

          //get BGV data - 
          $jaf_items = DB::table('jaf_form_data as jf')
                ->select('jf.id','jf.form_data_all','jf.form_data','jf.check_item_number','jf.address_type','jf.insufficiency_notes','jf.is_insufficiency','jf.insuff_attachment','jf.is_api_checked','jf.verification_status','jf.verified_at','jf.clear_insuff_attachment','jf.is_data_verified','s.name as service_name','s.id as service_id','s.verification_type','jf.candidate_id','jf.is_supplementary','s.type_name','jf.verification_mode','jf.api_hits_counter')
                ->join('services as s','s.id','=','jf.service_id')
                ->where(['jf.candidate_id'=>$candidate_id])
                ->get();
                //dd($jaf_items);
          $is_insuff_arr=[];
          foreach($jaf_items as $service)
          {
            $is_insuff_arr[]=$service->is_insufficiency;
          }
          
          //dd($job_items);
          $sla_items = DB::select("SELECT sla_id, GROUP_CONCAT(DISTINCT service_id) AS alot_services FROM `job_sla_items` WHERE candidate_id = $candidate_id");
          $checks    = UserCheck::where('user_id',$user_id)->get();
          // dd($checks);
          $kams      = DB::table('key_account_managers')->where(['user_id'=>$user_id,'business_id'=>$candidate->business_id])->first();
          // dFd($kams);
          
          $report    = DB::table('reports')->where(['candidate_id'=>$candidate_id,'status'=>'completed'])->first();
            // dd($report);
            if ($report==NULL) {
              $report          = '';
              $report_id       = '';
              $report_status   = '';
              $report_items    = [];
              $status_list     = [];
            }

              $job = DB::table('job_items')->select('jaf_status','sla_id','business_id','is_qc_done','qc_done_at','qc_done_by')->where(['candidate_id'=>$candidate_id])->first();

              if($job->jaf_status=='filled')
              {
                  //check report items created or not
                  $report_count = DB::table('reports')->where(['candidate_id'=>$candidate_id])->count(); 
                  if($report_count == 0){ 
                  
                    $data = 
                      [
                        'parent_id'     =>$business_id,
                        'business_id'   =>$job->business_id,
                        'candidate_id'  =>$candidate_id,
                        'sla_id'        =>$job->sla_id,       
                        'created_at'    =>date('Y-m-d H:i:s')
                      ];
                      
                      $report_id = DB::table('reports')->insertGetId($data);
                      
                      // add service items
                      $jaf_item = DB::table('jaf_form_data')->where(['candidate_id'=>$candidate_id])->get(); 

                      foreach($jaf_item as $item){
                        if ($item->verification_status == 'success') {
                          $data = 
                          [
                            'report_id'     =>$report_id,
                            'service_id'    =>$item->service_id,
                            'service_item_number'=>$item->check_item_number,
                            'candidate_id'  =>$candidate_id,      
                            'jaf_data'      =>$item->form_data,
                            'jaf_id'        =>$item->id,
                            'created_at'    =>date('Y-m-d H:i:s')
                          ];
                        } else {
                          $data = 
                          [
                            'report_id'     =>$report_id,
                            'service_id'    =>$item->service_id,
                            'service_item_number'=>$item->check_item_number,
                            'candidate_id'  =>$candidate_id,      
                            'jaf_data'      =>$item->form_data,
                            'jaf_id'        =>$item->id,
                            'is_report_output' => '0',
                            'created_at'    =>date('Y-m-d H:i:s')
                          ]; 
                        }
                        
                        $report_item_id = DB::table('report_items')->insertGetId($data);
                      }
                  }
              }
            
              $reports = DB::table('reports')->where(['candidate_id'=>$candidate_id])->first(); 

              if($reports)
              {
                $report_id = $reports->id;
                $report_status = $reports->status;
            
                // $candidate = [];
                $report_items = [];
              
                $report_items = DB::table('report_items as ri')
                                ->select('ri.*','s.name as service_name','s.id as service_id' )  
                                ->join('services as s','s.id','=','ri.service_id')
                                ->where(['ri.report_id'=>$report_id]) 
                                ->orderBy('s.sort_number','asc')
                                ->get(); 

                    $status_list = DB::table('report_status_masters')->where(['status'=>1])->get(); 
                    //dd($status_list);
                  // dd($jaf_items);
      
              }

              $user_service_check=DB::table('jaf_form_data as jf')
                            ->join('user_checks as u','u.checks','=','jf.service_id')
                            ->where(['jf.candidate_id'=>$candidate_id,'u.user_id'=>$user_id])
                            ->get();
              // dd($user_service_check);
              $services = DB::table('services')
              ->select('name','id')
              ->where(['status'=>'1'])
              ->whereNull('business_id')
              ->whereNotIn('type_name',['gstin'])
              ->orwhere('business_id',$business_id)
              ->get();
              // dd($services);
              // Auto Services
            $auto_services= DB::table('services')->select('name','id')
            ->where(['status'=>'1','verification_type'=>'Auto'])
            ->whereNull('business_id')
            ->whereNotIn('type_name',['gstin'])
            ->orwhere('business_id',$business_id)
            ->get();
            
            $service=[];
            foreach ($auto_services as $as) {
              $service[] = $as->id;
            }
              // dd($service);
            $jaf_service=[];
            foreach ($jaf_items as $ji) {
                $jaf_service[]=$ji->service_id;
            }
            //  dd($jaf_service);
            $arr_service=[];
            foreach ($jaf_service as $js) {
                // dd($js);
                if (in_array($js,$service)) {
                  // dd($js);
                  $arr_service[]= $js;
                }
            }
            //  dd($arr_service);
              // Auto Services
              $newcheck_services= DB::table('services')->select('name','id')
              ->whereNotIn('id',$arr_service)
              ->where(['status'=>'1'])
              ->whereNull('business_id')
              ->whereNotIn('type_name',['gstin'])
              ->orwhere('business_id',$business_id)
              ->get();
            //  dd($newcheck_services);
              DB::commit();

            //  dd($jaf_items);
              return view('admin.candidates.jaf-qc',compact('candidate','job','jaf_items','checks','sla_items','is_insuff_arr','kams','report','status_list','report_items','report_id','user_service_check','services','newcheck_services'));
          }
          catch (\Exception $e) {
              DB::rollback();
              // something went wrong
              return $e;
          } 

    }

     //BGV Form data Update
    public function jafQCUpdate(Request $request)
    {
      // dd($request->all());
      $parent_id    = Auth::user()->parent_id;
      $business     = Auth::user()->business_id;
      $user_id      = Auth::user()->id;
      $kams         = NULL; 

      if(Auth::user()->user_type=='User' || Auth::user()->user_type=='user')
      {
          $users=DB::table('users')->where('id',$business)->first();
          $parent_id=$users->parent_id;
      }

      // dd($request);
      $rules=[
        'digital_signature' => 'mimes:png,jpeg,jpg,svg|max:2048',
      ];

      $validator = Validator::make($request->all(), $rules);
  
      if ($validator->fails()){
            return response()->json([
                'success' => false,
                'errors' => $validator->errors(),
                'error_type'=>'validation'
            ]);
      }

      DB::beginTransaction();
      try
      {
        $case_id      = base64_decode($request->input('case_id'));
        $candidate_id = base64_decode($request->input('candidate_id'));
        $business_id  = $request->input('business_id');

        if(stripos(Auth::user()->user_type,'user')!==false)
        {
            $kams = DB::table('key_account_managers')
                      ->where(['user_id'=>$user_id,'business_id'=>$business_id])
                      ->first();
        }

        // dd($candidate_id);
        $jaf_items = DB::table('jaf_form_data')->where(['candidate_id'=>$candidate_id])->get();
        //dd($jaf_items);
        //check if update client emp code 
        if($request->input('client_emp_code') !=""){
          DB::table('users')->where(['id'=>$candidate_id])->update(['client_emp_code'=>$request->input('client_emp_code'), 'entity_code'=>$request->input('entity_code')]);
        }
        
        $input_data = [];
        // Validation
        foreach($jaf_items as $service)
        {
          //check ignore
          $is_check_ignore = 0;
          if($request->has('check_ignore-'.$service->id)){
            $is_check_ignore = 1;
          }

          if (in_array($service->id,$request->jaf_id)) {
            if($is_check_ignore==1)
            {
              if($service->service_id=='17')
              {
                  $i=2;
                  $rules=[
                    'service-input-value-'.$service->id.'-'.$i => 'required|in:personal,professional',
                  ];

                  $custom = [
                    'service-input-value-'.$service->id.'-'.$i.'.required' => 'Reference Type Field is Required',
                    'service-input-value-'.$service->id.'-'.$i.'.in' => 'Reference Type Must be personal / professional',
                  ];
            
                  $validator = Validator::make($request->all(), $rules, $custom);
              
                  if ($validator->fails()){
                        return response()->json([
                            'success' => false,
                            'errors' => $validator->errors(),
                            'error_type'=>'validation'
                        ]);
                  }
              }
            }
          }
            
        }

        // dd(1);

        foreach($jaf_items as $service)
        {
        
          if (in_array($service->id,$request->jaf_id)) {
            # code...
              $input_items = DB::table('service_form_inputs as sfi')
                          ->select('sfi.*')            
                          ->where(['sfi.service_id'=>$service->service_id,'status'=>1])
                          ->whereNull('sfi.reference_type')
                          ->whereNotIn('label_name',['Mode of Verification','Remarks'])
                          ->get();
                
              // dd($input_items);
                $input_data = [];
                $i=0;
                $reference_type = NULL;
                foreach($input_items as $input){
                  $remarks_message= "";
                  $remarks_custom_message= "";
                  $remarks     = '-';
                  $is_executive_summary = 0;
                  $table_output = '1';
                  if($input->service_id==17)
                  {
                  //dd($request->input('service-input-value-'.$service->id.'-'.$i));
                    $input_data[] = [
                      $request->input('service-input-label-'.$service->id.'-'.$i)=>$request->input('service-input-value-'.$service->id.'-'.$i),
                      'remarks'=>'Yes',
                      'is_report_output'=>'1',
                      'remarks_message'=>'custom',
                      'remarks_custom_message'=>$request->input('service-input-value-'.$service->id.'-'.$i),
                      'is_executive_summary'=>'1' 
                    ];
                    // dd($request->input('service-input-label-'.$service->id.'-'.'2'));
                    if(stripos($request->input('service-input-label-'.$service->id.'-'.$i),'Reference Type (Personal / Professional)')!==false)
                    {
                        $reference_type = $request->input('service-input-value-'.$service->id.'-'.$i);
                    }

                  }
                  else
                  {
                    
                    $input_data[] = [
                      $request->input('service-input-label-'.$service->id.'-'.$i)=>$request->input('service-input-value-'.$service->id.'-'.$i),
                      'remarks'=>'Yes',
                      'is_report_output'=>'1',
                      'remarks_message'=>'custom',
                      'remarks_custom_message'=>$request->input('service-input-value-'.$service->id.'-'.$i),
                      'is_executive_summary'=>'1' 
                    ];
                  }
                  $i++;
                }
                //dd($input_data);

                 //check ignore
                $is_check_ignore = 0;
                if($request->has('check_ignore-'.$service->id)){
                  $is_check_ignore = 1;
                }
              
                // dd($reference_type);
                $jaf_data = json_encode($input_data);
                //dd($jaf_data);
                $reference_jaf_data = NULL;
                if($service->service_id==17)
                {
                    $reference_input_data=[];
                    $l=0;

                    $reference_input_items = DB::table('service_form_inputs as sfi')
                          ->select('sfi.*')            
                          ->where(['sfi.service_id'=>$service->service_id,'status'=>1,'reference_type'=>$reference_type])
                          ->orWhereIn('label_name',['Mode of Verification','Remarks'])
                          ->orderBy('reference_type','desc')
                          ->get();

                    // dd($reference_input_items);
                    
                    foreach($reference_input_items as $ref_input)
                    {
                      $reference_input_data[] = [
                        $request->input('reference-input-label-'.$service->id.'-'.$l)=>$request->input('reference-input-value-'.$service->id.'-'.$l),
                        'is_report_output'=>$input->is_report_output 
                      ];
                      $l++;
                    }

                    $reference_jaf_data = json_encode($reference_input_data);
                }

            $verified_data = $request->input('verified-input-checkbox-'.$service->id);
            $verification_mode  = $request->input('verification_mode-'.$service->id);
            // var
            // dd($verified_data);
            $address_type = $request->input('address-type-'.$service->id);
            $jaf_form_data = [
                              'form_data'         => $jaf_data,
                              'form_data_all'     => json_encode($request->all()),
                              // 'is_data_verified'  => $verified_data==true?'1':'0',
                              // 'insufficiency_notes'=>$insufficiency_notes,
                              'address_type'  => $address_type,
                              'reference_type'  => $reference_type,
                              'reference_form_data' => $reference_jaf_data,
                              'updated_by'   => Auth::user()->id,
                              'verification_mode'=>$verification_mode,
                              'is_check_ignore' => $is_check_ignore,
                              'check_ignore_created_by'   => Auth::user()->id,
                              'check_ignore_created_at' => date('Y-m-d H:i:s'),
                              'updated_at'   => date('Y-m-d H:i:s')];
              //dd($jaf_data);
              DB::table('jaf_form_data')->where(['id'=>$service->id])->update($jaf_form_data);
            $check_is_verified = JafFormData::find($service->id);
            // var_dump('(/' .$check_is_verified->is_data_verified.'/'.$verified_data.')');
            
            if ($check_is_verified) {
              if ($check_is_verified->is_data_verified=='0' &&  $verified_data == 'on') {
                $user_data= DB::table('users')->select('id','first_name','last_name')->where('id', Auth::user()->id)->first();
                // $stats = DB::table('report_items')->where(['jaf_id'=>$request->jaf_id])->update(['verified_by'=>$user_data->first_name.' '.$user_data->last_name]);
                $stats = ReportItem::where(['jaf_id'=>$request->jaf_id])->update(['verified_by'=>$user_data->first_name.' '.$user_data->last_name]);
                // var_dump($stats);
                // die();
                $check_is_verified->update(['is_data_verified'=> '1','data_verified_date'=> date('Y-m-d H:i:s'),'verified_data_submitted_by'=> Auth::user()->id]);
              }
             
            }
            if ( $service->service_id ==1 ) {
                $jaf_digital = JafFormData::find($service->id);
                $digital_user_bussiness_id = DB::table('users')->select('business_id')->where('id',Auth::user()->id)->first();
                $digital_user = DB::table('users')->select('user_type')->where('id',$digital_user_bussiness_id->business_id)->first(); 
                $digital_verify = $request->input('digital-verification-checkbox-'.$service->id);
              
              if(stripos(Auth::user()->user_type,'customer')!==false || $kams!=NULL)
              {
                if ($digital_verify==true) {
                  $jaf=DB::table('digital_address_verifications')->where('jaf_id',$jaf_digital->id)->first();
                  if ($jaf==null) {
                    $digital_address_verification = [
                      'business_id'         => $jaf_digital->business_id,
                      'candidate_id'     => $jaf_digital->candidate_id,
                      'jaf_id'  =>$jaf_digital->id,
                      'assigned_by_id'  =>Auth::user()->id,
                      'assigned_by' => $digital_user->user_type,
                      'status'   => '1',
                    ];
                  DigitalAddressVerification::create($digital_address_verification);
                  }
                  else {
                    DB::table('digital_address_verifications')->where('jaf_id',$jaf_digital->id)->update(['status'=>'1']);
                  }
                }
                
              }
            }
            
          }
        }
       
        //
        if ($files = $request->file('digital_signature')) 
        {
            $file=$request->file('digital_signature');
            $filename=$file->getclientOriginalName();
            $file_name=date('Yhis').$filename;
            $destinationPath = public_path('uploads/signatures/'); 
            $dsext = $request->file('digital_signature')->getClientOriginalExtension();
            // $files->move($destinationPath, $dsImage);
              $candidate=DB::table('users')->select('digital_signature')->where('id',$candidate_id)->first();
              $candidate_img=$candidate->digital_signature;
              // $user_img = Auth::user()->digital_signature;
              if($candidate_img!=NULL || $candidate_img!='')
              {
                if(File::exists(public_path().'/uploads/signatures/'.$candidate_img))
                {
                  File::delete(public_path().'/uploads/signatures/'.$candidate_img);
                } 
              }

              $request->digital_signature->move($destinationPath,$file_name);
              
              DB::table('users')->where(['id'=>$candidate_id])->update([
                'digital_signature' => $file_name
              ]);
          
        }

        //Report 
        $report_id = base64_decode($request->input('report_id'));
        $candidate = DB::table('reports')->select('candidate_id','business_id')->where(['id'=>$report_id])->first();
        $report_items = DB::table('report_items')->where(['report_id'=>$report_id])->get();
        //dd($report_items);
        $i = 0;
        foreach($report_items as $item){
          if (in_array($item->jaf_id,$request->jaf_id)) {
            //update report
            $verified_by          = $request->input('verified_by-'.$item->jaf_id);
            $annexure_value       = $request->input('annexure_value-'.$item->jaf_id);
            $comments             = $request->input('comments-'.$item->jaf_id);
            $additional_comments  = $request->input('additional-comments-'.$item->jaf_id);
            $status_id            = $request->input('approval-status-'.$item->jaf_id);
            $district_court_name  = $request->input('district_court_name-'.$item->jaf_id);
            $district_court_result  = $request->input('district_court_result-'.$item->jaf_id);
            $high_court_name      = $request->input('high_court_name-'.$item->jaf_id);
            $high_court_result    = $request->input('high_court_result-'.$item->jaf_id);
            $supreme_court_name   = $request->input('supreme_court_name-'.$item->jaf_id);
            $supreme_court_result = $request->input('supreme_court_result-'.$item->jaf_id);
            $verified_data = $request->input('verified-input-checkbox-'.$item->jaf_id);
            $verification_mode  = $request->input('verification_mode-'.$item->jaf_id);

            //check ignore
            $is_check_ignore = 0;
            if($request->has('check_ignore-'.$item->jaf_id)){
              $is_check_ignore = 1;
            }

            
            $inputs_item = DB::table('service_form_inputs as sfi')
                        ->select('sfi.*')            
                        ->where(['sfi.service_id'=>$item->service_id,'status'=>1])
                        ->whereNull('sfi.reference_type')
                        ->whereNotIn('label_name',['Mode of Verification','Remarks'])
                        ->get();
    
              //dd($input_items);
              $inputs_data = [];
              $j=0;
              $report_reference_type = NULL;
              foreach($inputs_item as $inputs){
                  $remarks_message= "";
                  $remarks_custom_message= "";
                  $remarks     = '-';
                  $is_executive_summary = '0';
                  $table_output = '1';
                  if($inputs->service_id==17)
                  {
                        $inputs_data[] = [
                          $request->input('service-input-label-'.$item->jaf_id.'-'.$j)=>$request->input('service-input-value-'.$item->jaf_id.'-'.$j),
                          'remarks'=>'Yes',
                          'is_report_output'=>'1',
                          'remarks_message'=>'custom',
                          'remarks_custom_message'=>$request->input('service-input-value-'.$item->jaf_id.'-'.$j),
                          'is_executive_summary'=>'1' 
                        ];

                        if(stripos($request->input('service-input-label-'.$item->jaf_id.'-'.$j),'Reference Type (Personal / Professional)')!==false)
                        {
                            $report_reference_type = $request->input('service-input-value-'.$item->jaf_id.'-'.$j);
                        }
                  }
                  else
                  {
                      $inputs_data[] = [
                        $request->input('service-input-label-'.$item->jaf_id.'-'.$j)=>$request->input('service-input-value-'.$item->jaf_id.'-'.$j),
                        'remarks'=>'Yes',
                        'is_report_output'=>'1',
                        'remarks_message'=>'custom',
                        'remarks_custom_message'=>$request->input('service-input-value-'.$item->jaf_id.'-'.$j),
                        'is_executive_summary'=>'1' 
                      ];
                  }

                  $j++;
              }
            
              $report_data = json_encode($inputs_data); 
             //dd($report_data);
              $insuf_notes = NULL;
              if($request->has('insuf_notes-'.$item->jaf_id)){
                $insuf_notes     = $request->input('insuf_notes-'.$item->jaf_id);
              }
              
                $report_reference_jaf_data = NULL;
                if($item->service_id==17)
                {
                    $reference_input_data=[];
                    $l=0;
                    $reference_input_items = DB::table('service_form_inputs as sfi')
                          ->select('sfi.*')            
                          ->where(['sfi.service_id'=>$item->service_id,'status'=>1,'reference_type'=>$report_reference_type])
                          ->orWhereIn('label_name',['Mode of Verification','Remarks'])
                          ->orderBy('reference_type','desc')
                          ->get();
                    
                    foreach($reference_input_items as $input)
                    {
                      $reference_input_data[] = [
                        $request->input('reference-input-label-'.$item->jaf_id.'-'.$l)=>$request->input('reference-input-value-'.$item->jaf_id.'-'.$l),
                        'is_report_output'=>$input->is_report_output 
                      ];
                      $l++;
                    }
                    $report_reference_jaf_data = json_encode($reference_input_data);
                }
              
                    $is_updated = DB::table('report_items')
                    ->where(['report_id'=>$report_id,'id'=>$item->id])
                    ->update(['jaf_data'=>$report_data,
                              'annexure_value'=>$annexure_value,
                              'comments'=>$comments,
                              'additional_comments'=>$additional_comments,
                              'report_insufficiency_notes'=>$insuf_notes,
                              'approval_status_id'=>$status_id,
                              'district_court_name'=>$district_court_name,
                              'district_court_result'=>$district_court_result,
                              'high_court_name'=>$high_court_name,
                              'high_court_result'=>$high_court_result,
                              'supreme_court_name'=>$supreme_court_name,
                              'supreme_court_result'=>$supreme_court_result,
                              'reference_type' => $report_reference_type,
                              'reference_form_data' => $report_reference_jaf_data,
                              'verification_mode'=>$verification_mode,
                              'is_check_ignore' => $is_check_ignore,
                              'check_ignore_created_by' => Auth::user()->id,
                              'check_ignore_created_at' => date('Y-m-d H:i:s')
                              ]
                            );
                    //check if not verified by not empty 
            
                      if($verified_by != NULL){
                              DB::table('report_items')
                              ->where(['report_id'=>$report_id,'id'=>$item->id])
                              ->update([
                                        'verified_by'=>$verified_by,
                                        ]
                                      );
                      }
                                  

                      $check_is_verified = ReportItem::find($item->id);
                      // var_dump('(/' .$check_is_verified->is_data_verified.'/'.$verified_data.')');
                      if ($check_is_verified) {
                        if ($check_is_verified->is_data_verified=='0' &&  $verified_data == true) {
                          
                          $check_is_verified->update(['is_data_verified'=>'1','data_verified_date'=> date('Y-m-d H:i:s'),'verified_data_submitted_by'=>Auth::user()->id]);
                        }
                      
                      }
                        // update jaf form data 
                        //  DB::table('jaf_form_data')
                        //  ->where(['candidate_id'=>$candidate->candidate_id,'service_id'=>$item->service_id])
                        //  ->update(['verification_status'=>'success']);
                        $approval_status_id = DB::table('report_items')->where(['report_id'=>$report_id,'id'=>$item->id])->first();
                        if($approval_status_id->approval_status_id !=null){
                          $task = Task::where(['business_id'=>$candidate->business_id,'candidate_id'=>$candidate_id,'is_completed'=>0,'service_id'=>$item->service_id,'number_of_verifications'=>$item->service_item_number])->first();
                          if ($task) {
                            $task->is_completed= 1;
                            $task->updated_at = date('Y-m-d H:i:s');
                            $task->save();
                          }
                          //Change status of old task 
                          $task_assgn = TaskAssignment::where(['business_id'=>$candidate->business_id,'candidate_id'=>$candidate_id,'status'=>"1",'service_id'=>$item->service_id,'number_of_verifications'=>$item->service_item_number])->first();
                          //dd($task_assgn);
                          if ($task_assgn) {
                            
                            $task_assgn->status= '1';
                            $task_assgn->updated_at =date('Y-m-d H:i:s');
                            $task_assgn->save();
                          }
                        }
          }
            $i++;
        } 
        
        //check if jaf qc done
        $jaf_qc_done = $request->input('jaf-qc-done');
        $job_item = JobItem::where('candidate_id',$candidate_id)->first();
      
            if( $jaf_qc_done==true )
            {
              JobItem::find($job_item->id)->update([
                'is_qc_done' => 1,
                'qc_done_by' => $user_id,
                'qc_done_at' => date('Y-m-d H:i:s')
              ]);
              //update task id
              $tasks = DB::table('tasks')->select('id')->where(['candidate_id'=>$candidate_id,'description'=>'BGV QC'])->first();
              //dd($tasks); die();
              //

              if($tasks)
              {
                $stt= DB::table('tasks')->where(['id'=>$tasks->id])->update(['status' => '1']);
                //var_dump($stt); die();
                $tska_stat = DB::table('task_assignments')->where(['task_id'=>$tasks->id, 'candidate_id'=>$candidate_id])->whereNotIn('status',['0'])->update([
                  'status' => '3', 
                ]);
              }
            
            

              // var_dump($tska_stat); die();

              $users_id = DB::table('users')->where('id',$candidate_id)->first();
              $job_sla_item_id = DB::table('job_sla_items')->where('candidate_id',$candidate_id)->first();  
              $service = DB::table('jaf_form_data')->where(['candidate_id'=>$candidate_id])->first();

              // Validation
              // foreach($jaf_items as $service)
              // {
               // task assign start
               $final_users = [];
               // $j = 0;
               //$job_sla_items  = DB::table('job_sla_items')->where('candidate_id',$candidate_id)->whereNotIn('service_id',[2,3,4,7,8,9,12])->get();
               $job_sla_items  = DB::table('job_sla_items')->where('candidate_id',$candidate_id)->get();
               $user_name      = DB::table('users')->where('id',$candidate_id)->first();

               foreach ($job_sla_items as $job_sla_item) {
                   //Get data of user of customer with 
                   $verify_task = Task::where(['business_id'=>$service->business_id,'candidate_id'=>$candidate_id,'service_id'=>$job_sla_item->service_id,'number_of_verifications'=>$job_sla_item->number_of_verifications,'is_completed'=>0,'description'=>'Task for Verification'])->first();
                   // dd($verify_task);
                   if($verify_task==NULL){
                     $user_permissions = DB::table('users as u')
                                        ->join('role_masters as rm', 'rm.id', '=', 'u.role')
                                        ->join('role_permissions as rp', 'rp.role_id', '=', 'rm.id')
                                        ->select('u.name','u.id','u.role as role_id','rm.role','rp.permission_id' )
                                        ->where('u.business_id', Auth::user()->business_id)
                                        ->get();
                     // Get BGV FILLING data from Action table for matching checking permission
                     $action_master = DB::table('action_masters')
                                        ->select('*')
                                        ->where(['route_group'=>'','action_title'=>'BGV Filled'])
                                        ->first(); 

                     // dd($action_master->id);
                     // Check condition if user_permission have any data or not
                     if(count($user_permissions)>0) {
                       $users=[];
                       foreach ($user_permissions as $user_permission) {  
                         if(in_array($action_master->id,json_decode($user_permission->permission_id)))
                         {
                           $users[]= $user_permission;
                         }
                       }
                       $final_users = [];
                       $numbers_of_items = $job_sla_item->number_of_verifications;
                        if($numbers_of_items > 0){
                          for ($i=1; $i <= $numbers_of_items; $i++) { 
                           
                           $final_users = [];
                             //insert in task
                             $data = [
                               'name'          => $user_name->first_name.' '.$user_name->last_name,
                               'parent_id'     => Auth::user()->business_id,
                               'business_id'   => $job_sla_item->business_id, 
                               'description'   => 'Task for Verification',
                               'job_id'        => NULL, 
                               'priority'      => 'normal',
                               'candidate_id'  => $candidate_id,   
                               'service_id'    => $job_sla_item->service_id, 
                               'number_of_verifications' => $i,
                               'status'         =>'1',
                               'assigned_to'   => NULL,
                               'created_by'    => Auth::user()->id,
                               'created_at'    => date('Y-m-d H:i:s'),
                               'updated_at'    => date('Y-m-d H:i:s'),
                               'is_completed'  => 0,
                               
                             ];
                             // dd($data);
                             $task_id =  DB::table('tasks')->insertGetId($data); 

                             $taskdata = [
                               'parent_id'       => Auth::user()->business_id,
                               'business_id'     => $job_sla_item->business_id,
                               'candidate_id'    => $candidate_id,   
                               'job_sla_item_id' => $job_sla_item->id,
                               'task_id'         => $task_id,
                               'status'         =>'1',
                               'service_id'      => $job_sla_item->service_id,
                               'number_of_verifications' => $i,
                               'created_at'      => date('Y-m-d H:i:s'),
                               'updated_at'      => date('Y-m-d H:i:s') 
                             ];
                             //dd($taskdata);
                             DB::table('task_assignments')->insertGetId($taskdata); 
                           
                             //send email to customer
                            if (Auth::user()->user_type == 'customer') {  
                              $admin_email = Auth::user()->email;
                              $admin_name = Auth::user()->first_name;
                              
                              $email = $admin_email;
                              $name  = $admin_name;
                              $candidate_name = $request->input('first_name');
                              $msg = "New BGV Verification Task Created with candidate name";
                              $sender = DB::table('users')->where(['id'=>Auth::user()->business_id])->first();
                              $data  = array('name'=>$name,'email'=>$email,'candidate_name'=>$candidate_name,'msg'=>$msg,'sender'=>$sender);
                              Mail::send(['html'=>'mails.task-notify'], $data, function($message) use($email,$name) {
                                    $message->to($email, $name)->subject
                                      ('Clobminds Pvt Ltd - Notification for BGV Filling task');
                                    $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                              });
                            }
                            else
                            {
                                //If login user is normal user
                                $login_user = Auth::user()->business_id;
                                $user= User::where('id',$login_user)->first();
                                $admin_email = $user->email;
                                $admin_name = $user->first_name;
                                //send email to customer
                                $email = $admin_email;
                                $name  = $admin_name;
                                $candidate_name = $request->input('first_name');
                                $msg = "New BGV Verification Task Created with candidate name";
                                $sender = DB::table('users')->where(['id'=>Auth::user()->business_id])->first();
                                $data  = array('name'=>$name,'email'=>$email,'candidate_name'=>$candidate_name,'msg'=>$msg,'sender'=>$sender);

                                Mail::send(['html'=>'mails.task-notify'], $data, function($message) use($email,$name) {
                                      $message->to($email, $name)->subject
                                        ('Clobminds Pvt Ltd - Notification for BGV Filling Task');
                                      $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                                });
                            }

                             $kams  = KeyAccountManager::where('business_id',$request->input('customer'))->get();

                              if (count($kams)>0) {
                                foreach ($kams as $kam) {

                                  $user= User::where('id',$kam->user_id)->first();
                                
                                  $email = $user->email;
                                  $name  = $user->name;
                                  $candidate_name = $request->input('first_name');
                                  $msg = "New BGV Verification Task Created with candidate name";
                                  $sender = DB::table('users')->where(['id'=>Auth::user()->business_id])->first();
                                  $data  = array('name'=>$name,'email'=>$email,'candidate_name'=>$candidate_name,'msg'=>$msg,'sender'=>$sender);
                                  
                                  EmailConfigTrait::emailConfig();
                                  //get Mail config data
                                  //   $mail =null;
                                  $mail= Config::get('mail');
                                  
                                      // dd($mail['from']['address']);
                                      // if (count($mail)>0) {
                                      //     Mail::send(['html'=>'mails.task-notify'], $data, function($message) use($email,$name,$mail) {
                                      //         $message->to($email, $name)->subject
                                      //           ('Clobminds Pvt Ltd - Notification for BGV Filling Task');
                                      //         $message->from($mail['from']['address'],$mail['from']['name']);
                                      //   });
                                      // } else {
                                      //     Mail::send(['html'=>'mails.task-notify'], $data, function($message) use($email,$name) {
                                      //           $message->to($email, $name)->subject
                                      //             ('Clobminds Pvt Ltd - Notification for BGV Filling Task');
                                      //           $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                                      //     });
                                      // }
                                      // email end
                                } 
                              }
                             // send mail to all CAMs  
                          }
                         // end no of verifications of check   
                        }
                         //
                      }
                   }
               }

             // all task loop end here
              // }
              // end of the jaf data 

            }
            

        DB::table('jaf_logs')->insert([
          'parent_id' => $parent_id,
          'business_id' =>  $business,
          'candidate_id' => $candidate_id,
          'created_by' => $user_id,
          'user_type' => 'customer',
          'activity_type' => 'jaf-qc-done',
          'created_at' => date('Y-m-d H:i:s')
        ]);

        DB::commit();
        // return redirect()
        //       ->route('/candidates/jaf-info',['case_id'=> base64_encode($candidate_id)])
        //       ->with('success', 'Candidate BGV updated.');
        return response()->json([
            'success' =>true,
            // 'case_id' => base64_encode($candidate_id),
            'custom'  =>'yes',
            'errors'  =>[]
          ]);
      }
      catch (\Exception $e) {
          DB::rollback();
          // something went wrong
          return $e;
      } 

    }


    //BGV Form data Update
    public function jafUpdate(Request $request)
    {
      $parent_id = Auth::user()->parent_id;
      $business=Auth::user()->business_id;
      $user_id =Auth::user()->id;
      $kams = NULL; 
      // dd($request->all());
      if(Auth::user()->user_type=='User' || Auth::user()->user_type=='user')
      {
          $users=DB::table('users')->where('id',$business)->first();
          $parent_id=$users->parent_id;

      }

      //dd($request->all());

      // $this->validate($request, [
      //   'digital_signature' => 'mimes:jpeg,png,jpg,gif,svg|max:2048',
      // ]);

      $rules=[
        'digital_signature' => 'mimes:png,jpeg,jpg,svg|max:2048',
      ];

      $validator = Validator::make($request->all(), $rules);
  
      if ($validator->fails()){
            return response()->json([
                'success' => false,
                'errors' => $validator->errors(),
                'error_type'=>'validation'
            ]);
      }

      DB::beginTransaction();
      try
      {
        $case_id      = base64_decode($request->input('case_id'));
        $candidate_id = base64_decode($request->input('candidate_id'));
        $business_id  = $request->input('business_id');

        if(stripos(Auth::user()->user_type,'user')!==false)
        {
            $kams = DB::table('key_account_managers')
                      ->where(['user_id'=>$user_id,'business_id'=>$business_id])
                      ->first();
        }

        // dd($candidate_id);
        $jaf_items = DB::table('jaf_form_data')->where(['candidate_id'=>$candidate_id])->get();

        //check if update client emp code 
        if($request->input('client_emp_code') !=""){
          DB::table('users')->where(['id'=>$candidate_id])->update(['client_emp_code'=>$request->input('client_emp_code'), 'entity_code'=>$request->input('entity_code')]);
        }
        
        $input_data = [];

         
        // Validation
        foreach($jaf_items as $service)
        {
          //check ignore
          $is_check_ignore = 0;
          if($request->has('check_ignore-'.$service->id)){
            $is_check_ignore = 1;
          }

          //  dd($request->input('service-input-value-'.$service->id.'-2'));
            // if($service->service_id=='17')
            // {
            //   $i=2;
            //   $this->validate($request,[
            //       'service'.'-'.'input'.'-'.'value'.'-'.$service->id.'-'.$i => 'required',
            //     ]
            //   );

            // }
            
          if (in_array($service->id,$request->jaf_id)) {
            if($is_check_ignore==1){
              if($service->service_id=='17')
              {
                  $i=2;
                  $rules=[
                    'service-input-value-'.$service->id.'-'.$i => 'required|in:personal,professional',
                  ];

                  $custom = [
                    'service-input-value-'.$service->id.'-'.$i.'.required' => 'Reference Type Field is Required',
                    'service-input-value-'.$service->id.'-'.$i.'.in' => 'Reference Type Must be personal / professional',
                  ];
            
                  $validator = Validator::make($request->all(), $rules, $custom);
              
                  if ($validator->fails()){
                        return response()->json([
                            'success' => false,
                            'errors' => $validator->errors(),
                            'error_type'=>'validation'
                        ]);
                  }
              }
            }
          }
          //   $dataVal=array(1,10,11,15,16,17,28);
          //   if(in_array($service->service_id,$dataVal)){
          //   $rules=[
          //     'verification_mode-'.$service->id => 'required',
          //   ];

          //   $custom = [
          //     'verification_mode-'.$service->id.'.required' => 'Verfication Mode Field is Required',
          //   ];
      
          //   $validator = Validator::make($request->all(), $rules, $custom);
        
          //   if ($validator->fails()){
          //         return response()->json([
          //             'success' => false,
          //             'errors' => $validator->errors(),
          //             'error_type'=>'validation'
          //         ]);
          //   }
          // }

        }
        
        // dd(1);

        foreach($jaf_items as $service)
        {
          // if($service->service_id=='1')
          // {
          //   $this->validate($request, [
          //       'address-type-'.$service->id => 'required',
          //     ],
          //     [
          //       'address-type-'.$service->id.'.required'=> 'Address Type Field is required'
          //     ]
          //   );

          // }

          //check ignore
          $is_check_ignore = 0;
          if($request->has('check_ignore-'.$service->id)){
            $is_check_ignore = 1;
          }

          
          if (in_array($service->id,$request->jaf_id)) {
            # code...
            $verification_mode  = $request->input('verification_mode-'.$service->id);
            // $input_data = [];
            // service-input-label-0-1-1
            // echo $request->input('service-input-label-'.$service->id);
            // die('ok');
              $input_items = DB::table('service_form_inputs as sfi')
                          ->select('sfi.*')            
                          ->where(['sfi.service_id'=>$service->service_id,'status'=>1])
                          ->whereNull('sfi.reference_type')
                          ->whereNotIn('label_name',['Mode of Verification','Remarks'])
                          ->get();
                    
                // dd($input_items);
                $input_data = [];
                $i=0;
                $reference_type = NULL;
                foreach($input_items as $input){
                  $remarks_message= "";
                  $remarks_custom_message= "";
                  $remarks     = '-';
                  $is_executive_summary = 0;
                  $table_output = 0;

                  if($request->has('remarks-input-checkbox-'.$service->id.'-'.$i)){
                    $remarks     = 'Yes';
                  }
                  if($request->has('remarks-input-value-'.$service->id.'-'.$i)){
                    $remarks_message = $request->input('remarks-input-value-'.$service->id.'-'.$i);

                    if ($remarks_message=='custom') {
                      // dd($request->input('remarks-msg-'.$service->id.'-'.$i));
                      $remarks_custom_message=$request->input('remarks-msg-'.$service->id.'-'.$i)!=null && $request->input('remarks-msg-'.$service->id.'-'.$i)!='' ? $request->input('remarks-msg-'.$service->id.'-'.$i) : '';
                    // $remarks_custom_message=$request->input('remarks-msg-'.$service->id.'-'.$i);
                    }

                  }
                  if($request->has('table-output-'.$service->id.'-'.$i)){
                    $table_output = '1';
                  }
                  
                  if($request->has('executive-summary-'.$service->id.'-'.$i)){
                    $is_executive_summary   = '1';
                  }

                  if($input->service_id==17)
                  {
                        $input_data[] = [
                          $request->input('service-input-label-'.$service->id.'-'.$i)=>$request->input('service-input-value-'.$service->id.'-'.$i),
                          'is_report_output'=>$input->is_report_output,
                          'remarks'=>$remarks,
                          'remarks_message'=>$remarks_message,
                          'remarks_custom_message'=>$remarks_custom_message,
                          'is_executive_summary'=>$is_executive_summary 
                        ];
                        // dd($request->input('service-input-label-'.$service->id.'-'.'2'));
                        if(stripos($request->input('service-input-label-'.$service->id.'-'.$i),'Reference Type (Personal / Professional)')!==false)
                        {
                            $reference_type = $request->input('service-input-value-'.$service->id.'-'.$i);
                        }

                  }
                  else
                  {
                      $input_data[] = [
                        $request->input('service-input-label-'.$service->id.'-'.$i)=>$request->input('service-input-value-'.$service->id.'-'.$i),
                        'is_report_output'=>$input->is_report_output,
                        'remarks'=>$remarks,
                        'remarks_message'=>$remarks_message,
                        'remarks_custom_message'=>$remarks_custom_message,
                        'is_executive_summary'=>$is_executive_summary
                      ];
                  }
                    $i++;
                }
              
                // dd($reference_type);
                $jaf_data = json_encode($input_data);
              //dd($jaf_data);
                $reference_jaf_data = NULL;
                if($service->service_id==17)
                {
                    $reference_input_data=[];
                    $l=0;

                    $reference_input_items = DB::table('service_form_inputs as sfi')
                          ->select('sfi.*')            
                          ->where(['sfi.service_id'=>$service->service_id,'status'=>1,'reference_type'=>$reference_type])
                          ->orWhereIn('label_name',['Mode of Verification','Remarks'])
                          ->orderBy('reference_type','desc')
                          ->get();

                    // dd($reference_input_items);
                    
                    foreach($reference_input_items as $ref_input)
                    {
                      $reference_input_data[] = [
                        $request->input('reference-input-label-'.$service->id.'-'.$l)=>$request->input('reference-input-value-'.$service->id.'-'.$l),
                        'is_report_output'=>$input->is_report_output 
                      ];
                      $l++;
                    }

                    $reference_jaf_data = json_encode($reference_input_data);
                }


            
            // //insuff
            // $is_insufficiency = 0;
            // if($request->has('insufficiency-'.$service->id)){
            //   $is_insufficiency = 1;
            // }
            // $insufficiency_notes = $request->input('insufficiency-notes-'.$service->id);
            // echo( '/'.$service->id); continue;
            $verified_data = $request->input('verified-input-checkbox-'.$service->id);
            // var
            // dd($verified_data);
            $address_type = $request->input('address-type-'.$service->id);
            $jaf_form_data = [
                              'form_data'         => $jaf_data,
                              'form_data_all'     => json_encode($request->all()),
                              //'is_data_verified'  => $verified_data==true?'1':'0',
                              // 'insufficiency_notes'=>$insufficiency_notes,
                              'address_type'  => $address_type,
                              'reference_type'  => $reference_type,
                              'verification_mode'=>$verification_mode,
                              'reference_form_data' => $reference_jaf_data,
                              'is_check_ignore' => $is_check_ignore,
                              'check_ignore_created_by' => Auth::user()->id,
                              'check_ignore_created_at' => date('Y-m-d H:i:s'),
                              'updated_by'   => Auth::user()->id,
                              'updated_at'   => date('Y-m-d H:i:s')];
                //dd($jaf_data);
              DB::table('jaf_form_data')->where(['id'=>$service->id])->update($jaf_form_data);
            $check_is_verified = JafFormData::find($service->id);
            // var_dump('(/' .$check_is_verified->is_data_verified.'/'.$verified_data.')');
            
            if ($check_is_verified) {
              if ($check_is_verified->is_data_verified=='0' &&  $verified_data == 'on') {
                $user_data= DB::table('users')->select('id','first_name','last_name')->where('id', Auth::user()->id)->first();
                // $stats = DB::table('report_items')->where(['jaf_id'=>$request->jaf_id])->update(['verified_by'=>$user_data->first_name.' '.$user_data->last_name]);
                $stats = ReportItem::where(['jaf_id'=>$request->jaf_id])->update(['verified_by'=>$user_data->first_name.' '.$user_data->last_name]);
                // var_dump($stats);
                // die();
                $check_is_verified->update(['is_data_verified'=> '1','data_verified_date'=> date('Y-m-d H:i:s'),'verified_data_submitted_by'=> Auth::user()->id]);
              }
             
            }
            if ( $service->service_id ==1 ) {
                $jaf_digital = JafFormData::find($service->id);
                $digital_user_bussiness_id = DB::table('users')->select('business_id')->where('id',Auth::user()->id)->first();
                $digital_user = DB::table('users')->select('user_type')->where('id',$digital_user_bussiness_id->business_id)->first(); 
                $digital_verify = $request->input('digital-verification-checkbox-'.$service->id);
              
              if(stripos(Auth::user()->user_type,'customer')!==false || $kams!=NULL)
              {
                if ($digital_verify==true) {
                  $jaf=DB::table('digital_address_verifications')->where('jaf_id',$jaf_digital->id)->first();
                  if ($jaf==null) {
                    $digital_address_verification = [
                      'business_id'         => $jaf_digital->business_id,
                      'candidate_id'     => $jaf_digital->candidate_id,
                      'jaf_id'  =>$jaf_digital->id,
                      'assigned_by_id'  =>Auth::user()->id,
                      'assigned_by' => $digital_user->user_type,
                      'status'   => '1',
                    ];
                  DigitalAddressVerification::create($digital_address_verification);
                  }
                  else {
                    DB::table('digital_address_verifications')->where('jaf_id',$jaf_digital->id)->update(['status'=>'1']);
                  }
                }
                // else {
                //   $jaf=DB::table('digital_address_verifications')->where('jaf_id',$jaf_digital->id)->first();
                //   if ($jaf) {
                //     DB::table('digital_address_verifications')->where('jaf_id',$jaf_digital->id)->update(['status'=>'0']);
                //   }
                // }
              }
            }
            
          }
        }
        // $jaf_items = DB::table('jaf_form_data')->where(['candidate_id'=>$candidate_id])->get();
        // foreach($jaf_items as $service)
        // {
        //   if($service->is_insufficiency==1)
        //   {
        //       $ver_insuff_data=[
        //         'business_id' => $service->business_id,
        //         'candidate_id' => $service->candidate_id,
        //         'service_id'  => $service->service_id,
        //         'item_number' => $service->check_item_number,
        //         'activity_type'=> 'jaf-update',
        //         'status' => 'raised',
        //         'created_at' => date('Y-m-d H:i:s'),
        //         'updated_at' => date('Y-m-d H:i:s')
        //       ];
        //       DB::table('verification_insufficiency')->insert($ver_insuff_data);
        //   }
        //   else{
        //     if($service->verification_status=='success')
        //     {
        //       $ver_insuff_data=[
        //         'business_id' => $service->business_id,
        //         'candidate_id' => $service->candidate_id,
        //         'service_id'  => $service->service_id,
        //         'item_number' => $service->check_item_number,
        //         'activity_type'=> 'jaf-update',
        //         'status' => 'success',
        //         'created_at' => date('Y-m-d H:i:s'),
        //         'updated_at' => date('Y-m-d H:i:s')
        //       ];
        //     }
        //     else{
        //       $ver_insuff_data=[
        //         'business_id' => $service->business_id,
        //         'candidate_id' => $service->candidate_id,
        //         'service_id'  => $service->service_id,
        //         'item_number' => $service->check_item_number,
        //         'activity_type'=> 'jaf-update',
        //         'status' => NULL,
        //         'created_at' => date('Y-m-d H:i:s'),
        //         'updated_at' => date('Y-m-d H:i:s')
        //       ];
        //     }
        //     DB::table('verification_insufficiency')->insert($ver_insuff_data);
        //   }
        // }

        if ($files = $request->file('digital_signature')) 
        {
            $file=$request->file('digital_signature');
            $filename=$file->getclientOriginalName();
            $file_name=date('Yhis').$filename;
            $destinationPath = public_path('uploads/signatures/'); 
            $dsext = $request->file('digital_signature')->getClientOriginalExtension();
            // $files->move($destinationPath, $dsImage);
            
              $candidate=DB::table('users')->select('digital_signature')->where('id',$candidate_id)->first();

              $candidate_img=$candidate->digital_signature;
              // $user_img = Auth::user()->digital_signature;
              if($candidate_img!=NULL || $candidate_img!='')
              {
                if(File::exists(public_path().'/uploads/signatures/'.$candidate_img))
                {
                  File::delete(public_path().'/uploads/signatures/'.$candidate_img);
                } 
              }

              $request->digital_signature->move($destinationPath,$file_name);
              // $mask = Image::make($file)
              //           ->orientate() // it's better to set a tolerance for trim()
              //           ->invert(); // invert it to use as a ma
                        
              // $new_image = Image::canvas($mask->width(), $mask->height(), '#000000')
              //             ->mask($mask)
              //             ->save('uploads/signatures/'.$file_name);

              DB::table('users')->where(['id'=>$candidate_id])->update([
                'digital_signature' => $file_name
              ]);
          
        }

        //Report 

        $report_id = base64_decode($request->input('report_id'));
        // dd($report_id);
        $candidate = DB::table('reports')->select('candidate_id','business_id')->where(['id'=>$report_id])->first();
        //get report items
        // dd($candidate);
        $report_items = DB::table('report_items')->where(['report_id'=>$report_id])->get();
        // echo "<pre>";
        // print_r($report_items); die;
        $i = 0;
        foreach($report_items as $item){

          //check ignore
          $is_check_ignore = 0;
          if($request->has('check_ignore-'.$item->jaf_id)){
            $is_check_ignore = 1;
          }

          if (in_array($item->jaf_id,$request->jaf_id)) {
            //update report
            $verified_by  = $request->input('verified_by-'.$item->jaf_id);
            $annexure_value  = $request->input('annexure_value-'.$item->jaf_id);
            $comments     = $request->input('comments-'.$item->jaf_id);
            $additional_comments  = $request->input('additional-comments-'.$item->jaf_id);
            $status_id            = $request->input('approval-status-'.$item->jaf_id);
            $district_court_name  = $request->input('district_court_name-'.$item->jaf_id);
            $district_court_result  = $request->input('district_court_result-'.$item->jaf_id);
            $high_court_name      = $request->input('high_court_name-'.$item->jaf_id);
            $high_court_result    = $request->input('high_court_result-'.$item->jaf_id);
            $supreme_court_name   = $request->input('supreme_court_name-'.$item->jaf_id);
            $supreme_court_result = $request->input('supreme_court_result-'.$item->jaf_id);
            $verified_data = $request->input('verified-input-checkbox-'.$item->jaf_id);
            $verification_mode  = $request->input('verification_mode-'.$item->jaf_id);
            
            $inputs_item = DB::table('service_form_inputs as sfi')
                        ->select('sfi.*')            
                        ->where(['sfi.service_id'=>$item->service_id,'status'=>1])
                        ->whereNull('sfi.reference_type')
                        ->whereNotIn('label_name',['Mode of Verification','Remarks'])
                        ->get();
    
              //dd($input_items);
              $inputs_data = [];
              $j=0;
              $report_reference_type = NULL;
              foreach($inputs_item as $inputs){
    
                // $remarks     = '-';
                // if($request->has('remarks-input-checkbox-'.$item->jaf_id.'-'.$j)){
                //   $remarks     = 'Yes';
                // }
                $remarks_message= "";
                $remarks_custom_message= "";
                $remarks     = '-';
                $is_executive_summary = 0;
                $table_output = 0;

                if($request->has('remarks-input-checkbox-'.$item->jaf_id.'-'.$j)){
                  $remarks     = 'Yes';
                }
                if($request->has('remarks-input-value-'.$item->jaf_id.'-'.$j)){
                  $remarks_message = $request->input('remarks-input-value-'.$item->jaf_id.'-'.$j);

                  if ($remarks_message=='custom') {
                   $remarks_custom_message=$request->input('remarks-msg-'.$item->jaf_id.'-'.$j)!=null && $request->input('remarks-msg-'.$item->jaf_id.'-'.$j)!='' ? $request->input('remarks-msg-'.$item->jaf_id.'-'.$j) : '';
                  }

                }
                if($request->has('table-output-'.$item->jaf_id.'-'.$j)){
                  $table_output = '1';
                }
                
                if($request->has('executive-summary-'.$item->jaf_id.'-'.$j)){
                  $is_executive_summary   = '1';
                }

                  if($inputs->service_id==17)
                  {
                        $inputs_data[] = [
                          $request->input('service-input-label-'.$item->jaf_id.'-'.$j)=>$request->input('service-input-value-'.$item->jaf_id.'-'.$j),
                          'remarks'=>$remarks,
                          'is_report_output'=>$table_output,
                          'remarks_message'=>$remarks_message,
                          'remarks_custom_message'=>$remarks_custom_message,
                          'is_executive_summary'=>$is_executive_summary 
                        ];

                        if(stripos($request->input('service-input-label-'.$item->jaf_id.'-'.$j),'Reference Type (Personal / Professional)')!==false)
                        {
                            $report_reference_type = $request->input('service-input-value-'.$item->jaf_id.'-'.$j);
                        }
                  }
                  else
                  {
                      $inputs_data[] = [
                        $request->input('service-input-label-'.$item->jaf_id.'-'.$j)=>$request->input('service-input-value-'.$item->jaf_id.'-'.$j),
                        'remarks'=>$remarks,
                        'is_report_output'=>$table_output,
                        'remarks_message'=>$remarks_message,
                        'remarks_custom_message'=>$remarks_custom_message,
                        'is_executive_summary'=>$is_executive_summary
                      ];
                  }

                  $j++;
              }
            
              $report_data = json_encode($inputs_data); 
              //dd($report_data);
              $insuf_notes = NULL;
              if($request->has('insuf_notes-'.$item->jaf_id)){
                $insuf_notes     = $request->input('insuf_notes-'.$item->jaf_id);
              }
              
                $report_reference_jaf_data = NULL;
                if($item->service_id==17)
                {
                    $reference_input_data=[];
                    $l=0;
                    $reference_input_items = DB::table('service_form_inputs as sfi')
                          ->select('sfi.*')            
                          ->where(['sfi.service_id'=>$item->service_id,'status'=>1,'reference_type'=>$report_reference_type])
                          ->orWhereIn('label_name',['Mode of Verification','Remarks'])
                          ->orderBy('reference_type','desc')
                          ->get();
                    
                    foreach($reference_input_items as $input)
                    {
                      $reference_input_data[] = [
                        $request->input('reference-input-label-'.$item->jaf_id.'-'.$l)=>$request->input('reference-input-value-'.$item->jaf_id.'-'.$l),
                        'is_report_output'=>$input->is_report_output 
                      ];
                      $l++;
                    }
                    $report_reference_jaf_data = json_encode($reference_input_data);
                }
              
            $is_updated = DB::table('report_items')
                          ->where(['report_id'=>$report_id,'id'=>$item->id])
                          ->update(['jaf_data'=>$report_data,
                                    'annexure_value'=>$annexure_value,
                                    'comments'=>$comments,
                                    'additional_comments'=>$additional_comments,
                                    'report_insufficiency_notes'=>$insuf_notes,
                                    'approval_status_id'=>$status_id,
                                    'district_court_name'=>$district_court_name,
                                    'district_court_result'=>$district_court_result,
                                    'high_court_name'=>$high_court_name,
                                    'high_court_result'=>$high_court_result,
                                    'supreme_court_name'=>$supreme_court_name,
                                    'supreme_court_result'=>$supreme_court_result,
                                    'reference_type' => $report_reference_type,
                                    'verification_mode'=>$verification_mode,
                                    'reference_form_data' => $report_reference_jaf_data,
                                    'is_check_ignore' => $is_check_ignore,
                                    'check_ignore_created_by' => Auth::user()->id,
                                    'check_ignore_created_at' => date('Y-m-d H:i:s'),
                                    ]
                                  );
            //check if not verified by not empty 
            
                  if($verified_by != NULL){
                          DB::table('report_items')
                          ->where(['report_id'=>$report_id,'id'=>$item->id])
                          ->update([
                                    'verified_by'=>$verified_by,
                                    ]
                                  );
                  }
                                  // $check_is_verified = JafFormData::find($item->jaf_id);
                                
                                  // // $verified_data = $request->input('verified-input-checkbox-'.$item->jaf_id);
                                  // // dd($verified_data);
                                  // // var_dump('(/' .$check_is_verified->is_data_verified.'/'.$verified_data.')');
                                  // if ($check_is_verified) {
                                  //   if ($check_is_verified->is_data_verified=='1' ) {
                                      
                                  //     DB::table('report_items')->where('jaf_id',$item->jaf_id)->update(['is_data_verified'=>'1','data_verified_date'=> date('Y-m-d H:i:s'),'verified_data_submitted_by'=>Auth::user()->id]);
                                  //   }
                                  // }

                                  $check_is_verified = ReportItem::find($item->id);
                                  // var_dump('(/' .$check_is_verified->is_data_verified.'/'.$verified_data.')');
                                  if ($check_is_verified) {
                                    if ($check_is_verified->is_data_verified=='0' &&  $verified_data == true) {
                                      
                                      $check_is_verified->update(['is_data_verified'=>'1','data_verified_date'=> date('Y-m-d H:i:s'),'verified_data_submitted_by'=>Auth::user()->id]);
                                    }
                                  
                                  }
                        // update jaf form data 
                        //  DB::table('jaf_form_data')
                        //  ->where(['candidate_id'=>$candidate->candidate_id,'service_id'=>$item->service_id])
                        //  ->update(['verification_status'=>'success']);
                        $approval_status_id = DB::table('report_items')->where(['report_id'=>$report_id,'id'=>$item->id])->first();
                        if($approval_status_id->approval_status_id !=null){
                          $is_data_verified = ReportItem::where(['id'=>$item->id,'is_data_verified'=>'1'])->first();
                          if($is_data_verified!=NULL)
                          {
                            // dd($candidate->business_id);
                              $task = Task::where(['business_id'=>$candidate->business_id,'candidate_id'=>$candidate_id,'is_completed'=>0,'service_id'=>$item->service_id,'number_of_verifications'=>$item->service_item_number])->first();
                              // dd($task);
                              if ($task) {
                                // dd($task);
                                $task->is_completed= 1;
                                $task->updated_at = date('Y-m-d H:i:s');
                                $task->save();
                              }
                              //Change status of old task 
                              $task_assgn = TaskAssignment::where(['business_id'=>$candidate->business_id,'candidate_id'=>$candidate_id,'service_id'=>$item->service_id,'number_of_verifications'=>$item->service_item_number])->whereIn('status',['1','2'])->first();
                              // dd($task_assgn);
                              if ($task_assgn) {
                                 // dd($task_assgn);
                                $task_assgn->status= '3';
                                $task_assgn->updated_at =date('Y-m-d H:i:s');
                                $task_assgn->save();
                              }
                          }
                          
                        }
          }
            $i++;
        } 
        
    
        //color status
        // $approval_status_id= NULL;
        // $report_item_data = DB::table('report_items')->where(['report_id'=>$report_id])->whereNotNull('approval_status_id')->orderBy('approval_status_id','asc')->first();
        // // dd($report_item_data);
        // if($report_item_data !=null){
        //   $approval_status_id= $report_item_data->approval_status_id;
        // }
    
        //update report status
    
        // //report update
        //     $jaf_items_failed = DB::table('jaf_form_data')->where(['candidate_id'=>$candidate_id,'verification_status'=>NULL])->orWhere('verification_status','failed')->get(); 
        //     // dd($jaf_items_failed);
        //     if (count($jaf_items_failed)>0) {
        //      //update report status
        //     DB::table('reports')
        //     ->where(['id'=>$report_id])
        //     ->update(['report_type'=>'auto','is_verified'=>'1','status'=>'interim','manual_input_status'=>'completed','approval_status_id'=>$approval_status_id,'report_jaf_data'=>NULL]);
          
        //     } else {
                
        //     //update report status
        //     DB::table('reports')
        //     ->where(['id'=>$report_id])
        //     ->update(['report_type'=>'auto','is_verified'=>'1','status'=>'completed','manual_input_status'=>'completed','approval_status_id'=>$approval_status_id,'report_jaf_data'=>NULL]);
        
        //     }

        $jaf_ready_report = $request->input('jaf-ready-report');

        $report_status = DB::table('reports')->where(['candidate_id'=>$candidate_id,'status'=>'incomplete'])->first();

        if($report_status!=NULL)
        {
            $report_items = ReportItem::where(['report_id'=>$report_status->id,'is_data_verified'=>'1'])->get();

            $job_item = JobItem::where('candidate_id',$candidate_id)->first();

            if(count($report_items)>0 && $job_item->is_jaf_ready_report==0 && $jaf_ready_report==true)
            {
              JobItem::find($job_item->id)->update([
                'is_jaf_ready_report' => 1,
                'jaf_ready_report_by' => $user_id,
                'jaf_ready_report_at' => date('Y-m-d H:i:s')
              ]);
              $users_id = DB::table('users')->where('id',$candidate_id)->first();
              $job_sla_item_id = DB::table('job_sla_items')->where('candidate_id',$candidate_id)->first();
              $data = [
                'name'        => $users_id->name,
                'parent_id'   => Auth::user()->business_id,
                'business_id' => $users_id->business_id, 
                'description' => 'Report generation',
                'job_id'      => $job_item->job_id, 
                'priority'    => 'normal',
                'candidate_id' =>$candidate_id,   
                // 'service_id'  => $item, 
                // 'assigned_to' =>$assigned_user_id,
                // 'assigned_by' => Auth::user()->id, 
                // 'assigned_at' => date('Y-m-d H:i:s'),
                // 'start_date' => date('Y-m-d'),
                'created_by'  =>Auth::user()->id,
                'created_at'  => date('Y-m-d H:i:s'),
                'is_completed' => 0,
                'status'=>'1',
                'started_at' => date('Y-m-d H:i:s'),
                'updated_at'  => date('Y-m-d H:i:s')
              ];
              // dd($data);
              $task =Task::create($data);
              $task  =$task->id;
              $taskdata = [
                'parent_id'=> Auth::user()->business_id,
                'business_id'=> $users_id->business_id,
                'candidate_id' =>$candidate_id, 
                'task_id'=> $task,
                'status'=>'1',
                'job_sla_item_id'=> $job_sla_item_id->id,
                // 'user_id' => $user->id,
                // 'service_id'  => $item,
                'created_at'  => date('Y-m-d H:i:s'),
                'updated_at'  => date('Y-m-d H:i:s')
              
              ];
              TaskAssignment::create($taskdata);

            }
        }
        DB::table('jaf_logs')->insert([
          'parent_id' => $parent_id,
          'business_id' =>  $business,
          'candidate_id' => $candidate_id,
          'created_by' => $user_id,
          'user_type' => 'customer',
          'activity_type' => 'jaf-update',
          'created_at' => date('Y-m-d H:i:s')
        ]);

        DB::commit();
        // return redirect()
        //       ->route('/candidates/jaf-info',['case_id'=> base64_encode($candidate_id)])
        //       ->with('success', 'Candidate BGV updated.');
        return response()->json([
            'success' =>true,
            // 'case_id' => base64_encode($candidate_id),
            'custom'  =>'yes',
            'errors'  =>[]
          ]);
      }
      catch (\Exception $e) {
          DB::rollback();
          // something went wrong
          return $e;
      } 

    }

   /**
     * clear check item insuff
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
    */
   

    public function clearCheckInsuff(Request $request)
    {   
      // dd($request->get('candidate_id'));
        
        $candidate_id = base64_decode($request->get('cand_id')); 
        $service_id   = base64_decode($request->get('serv_id')); 
        $item_id      = base64_decode($request->get('jaf_f_id')); 

        $business_id = Auth::user()->business_id;
        $user_id=Auth::user()->id;
        $is_updated= FALSE;

        $parent_id=Auth::user()->parent_id;
        if(Auth::user()->user_type=='user' || Auth::user()->user_type=='User')
        {
          $users=DB::table('users')->select('parent_id')->where('id',$business_id)->first();
          $parent_id=$users->parent_id;
        }

        $price=20;
        $checkprice_db=DB::table('check_price_masters')
                            ->select('price')
                            ->where(['business_id'=>$parent_id,'service_id'=>$service_id])->first();
                            
        $serviceId = DB::table('services')->select('id','name','type_name')->where('id',$service_id)->first();
        //dd($serviceId);
        DB::beginTransaction();
        try{
          if(Auth::check()){
            $rules= [
              'comment'  => 'required',
            ];

            $validator = Validator::make($request->all(), $rules);
        
            if ($validator->fails()){
                return response()->json([
                    'fail' => true,
                    'errors' => $validator->errors(),
                    'error_type'=>'validation'
                ]);
            }

            $service_d = DB::table('services')->where(['id'=>$service_id])->first();
            //dd($serviceId);
            // check service type 
            if($service_id == 2){

              $jaf_aadhaar = DB::table('jaf_form_data')->select('id','business_id','form_data','service_id','check_item_number')->where(['id'=>$item_id])->first();
              $jaf_array = json_decode($jaf_aadhaar->form_data, true);
              // print_r($jaf_array);
              $aaddhaar_number ="";
              foreach($jaf_array as $input){
                  if(array_key_exists('Aadhar Number',$input)){
                    $aaddhaar_number = $input['Aadhar Number'];
                  }
              }
                $s3_config=NULL;
                $c_file_platform = 'web';
                $attach_on_select=[];
                $allowedextension=['jpg','jpeg','png','svg','pdf'];
                $zipname="";
                if($request->hasFile('attachment') && $request->file('attachment') !="")
                {
                    $filePath = public_path('/uploads/clear-insuff/'); 
                    $files= $request->file('attachment');
                    foreach($files as $file)
                    {
                            $extension = $file->getClientOriginalExtension();

                            $check = in_array($extension,$allowedextension);

                            $file_size = number_format(File::size($file) / 1048576, 2);
                           
                            if(!$check)
                            {
                                return response()->json([
                                  'fail' => true,
                                  'errors' => ['attachment' => 'Only jpg,jpeg,png,pdf are allowed !'],
                                  'error_type'=>'validation'
                                ]);                        
                            }

                            if($file_size > 10)
                            {
                                return response()->json([
                                  'fail' => true,
                                  'error_type'=>'validation',
                                  'errors' => ['attachment' => 'The document size must be less than only 10mb Upload !'],
                                ]);                        
                            }

                    }

                    $zipname = 'clear-insuff-'.date('Ymdhis').'.zip';
                    $zip = new \ZipArchive();      
                    $zip->open(public_path().'/uploads/clear-insuff/'.$zipname, \ZipArchive::CREATE | \ZipArchive::OVERWRITE);

                    foreach($files as $file)
                    {
                        $file_data = $file->getClientOriginalName();
                        $tmp_data  = $candidate_id.'-'.date('mdYHis').'-'.$file_data; 
                        $data = $file->move($filePath, $tmp_data);       
                        $attach_on_select[]=$tmp_data;

                        $path=public_path()."/uploads/clear-insuff/".$tmp_data;
                        $zip->addFile($path, '/clear-insuff/'.basename($path));  
                    }

                    $zip->close();
                }

                $s3_config = S3ConfigTrait::s3Config();

                $path=public_path().'/uploads/clear-insuff/';

                if($s3_config!=NULL && $zipname!='')
                {
                  if(File::exists($path.$zipname))
                  {
                      $c_file_platform = 's3';

                      $s3filePath = 'uploads/clear-insuff/';
      
                      if(!Storage::disk('s3')->exists($s3filePath))
                      {
                          Storage::disk('s3')->makeDirectory($s3filePath,0777, true, true);
                      }
      
                      $file = Helper::createFileObject($path.$zipname);
      
                      Storage::disk('s3')->put($s3filePath.$zipname,file_get_contents($file));

                      File::delete($path.$zipname);
                  }

                }

                if(File::exists($path.'tmp-files/'))
                {
                  File::cleanDirectory($path.'tmp-files/');
                }

              //check first into master table
              $master_data = DB::table('aadhar_check_masters')->select('*')->where(['aadhar_number'=>$aaddhaar_number])->first();
              // dd($master_data);
              if($master_data !=null){
                //update case
                DB::table('jaf_form_data')->where(['id'=>$item_id])
                ->update(['is_api_checked'=>'1','is_api_verified'=>'1','verification_status'=>'success','verified_at'=>date('Y-m-d H:i:s'),'is_insufficiency'=>'0','clear_insuff_notes'=>$request->comment,'clear_insuff_attachment' => $zipname!=NULL?$zipname:NULL,'clear_insuff_attachment_file_platform'=>$c_file_platform,'is_all_insuff_cleared' => 1,'insuff_cleared_by'=>Auth::user()->id,'updated_at'=>date('Y-m-d H:i:s')]); 
                $is_updated=TRUE;
              
                $check_data = [
                  'parent_id'         =>$parent_id,
                  'business_id'       =>$business_id,
                  'service_id'        =>$service_id,
                  'candidate_id'      =>$candidate_id,
                  'source_reference'  =>'SystemDB',
                  'aadhar_number'     =>$master_data->aadhar_number,
                  'age_range'         =>$master_data->age_range,
                  'gender'            =>$master_data->gender,
                  'state'             =>$master_data->state,
                  'last_digit'        =>$master_data->last_digit,
                  'is_verified'       =>'1',
                  'is_aadhar_exist'   =>'1',
                  'price'             =>$checkprice_db!=NULL?$checkprice_db->price:$price,
                  'used_by'           =>'customer',
                  'user_id'            => $user_id,
                  'created_at'        =>date('Y-m-d H:i:s')
                  ];

                  DB::table('aadhar_checks')->insert($check_data);

                  $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->first();

                    if($ver_insuff!=NULL)
                    {
                        $ver_insuff_data=[
                          'notes' => $request->comment,
                          'updated_by' => Auth::user()->id,
                          'attachment'  => $zipname!=""?$zipname:NULL, 
                          'attachment_file_platform' => $c_file_platform,
                          'updated_at' => date('Y-m-d H:i:s')
                        ];

                        DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->update($ver_insuff_data);

                        $ver_id=$ver_insuff->id;
                    }
                    else
                    {
                      $ver_insuff_data=[
                        'parent_id' => $parent_id,
                        'business_id' => $business_id,
                        'coc_id' => $jaf_aadhaar->business_id,
                        'candidate_id' => $candidate_id,
                        'service_id'  => $jaf_aadhaar->service_id,
                        'jaf_form_data_id' => $jaf_aadhaar->id,
                        'item_number' => $jaf_aadhaar->check_item_number,
                        'activity_type'=> 'jaf-insuff',
                        'status'=>'removed',
                        'notes' => $request->comment,
                        'attachment' => $zipname!=NULL?$zipname:NULL,
                        'attachment_file_platform' => $c_file_platform,
                        'created_by'   => Auth::user()->id,
                        'created_at'   => date('Y-m-d H:i:s'),
                      ];
                
                      $ver_id=DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);
                    }

                    $insuff_log_data=[
                      'parent_id' => $parent_id,
                      'business_id' => $business_id,
                      'coc_id' => $jaf_aadhaar->business_id,
                      'candidate_id' => $candidate_id,
                      'service_id'  => $jaf_aadhaar->service_id,
                      'jaf_form_data_id' => $jaf_aadhaar->id,
                      'item_number' => $jaf_aadhaar->check_item_number,
                      'activity_type'=> 'jaf-insuff',
                      'status'=>'removed',
                      'notes' => $request->comment,
                      'attachment' => $zipname!=NULL?$zipname:NULL,
                      'attachment_file_platform' => $c_file_platform,
                      'created_by'   => Auth::user()->id,
                      'user_type'    =>'customer',
                      'created_at'   => date('Y-m-d H:i:s'),
                    ];
              
                    DB::table('insufficiency_logs')->insert($insuff_log_data);

                  if(count($attach_on_select)>0)
                  {
                      $file_data=DB::table('insufficiency_attachments')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->get();

                      if(count($file_data)>0)
                      {
                          $path=public_path().'/uploads/clear-insuff/';
                          foreach($file_data as $file)
                          {
                              if(File::exists($path.$file->file_name))
                              {
                                  File::delete($path.$file->file_name);
                              }
                          }

                          DB::table('insufficiency_attachments')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->delete();

                      }

                      $i=0;
                      $file_platform = 'web';
                      if($s3_config!=NULL)
                      {
                        $s3filePath = 'uploads/clear-insuff/';

                        if(!Storage::disk('s3')->exists($s3filePath))
                        {
                            Storage::disk('s3')->makeDirectory($s3filePath,0777, true, true);
                        }
                        

                        foreach($attach_on_select as $item)
                        {
                          $file_platform = 'web';

                          $path=public_path().'/uploads/clear-insuff/';

                          if(File::exists($path.$attach_on_select[$i]))
                          {
                            $file_platform = 's3';
                            $file = Helper::createFileObject($path.$attach_on_select[$i]);

                            Storage::disk('s3')->put($s3filePath.$attach_on_select[$i],file_get_contents($file));

                            File::delete($path.$attach_on_select[$i]);
                          }

                          $insuff_file=[
                            'parent_id' => $parent_id,
                            'business_id' => $business_id,
                            'coc_id' => $jaf_aadhaar->business_id,
                            'candidate_id' => $candidate_id,
                            'service_id'  => $service_id,
                            'jaf_form_data_id' => $jaf_aadhaar->id,
                            'item_number' => $jaf_aadhaar->check_item_number,
                            'status'=>'removed',
                            'file_name' => $attach_on_select[$i],
                            'file_platform' => $file_platform,
                            'created_by'   => Auth::user()->id,
                            'created_at'   => date('Y-m-d H:i:s'),
                            'updated_at' => date('Y-m-d H:i:s')
                          ];
                    
                          $file_id = DB::table('insufficiency_attachments')->insertGetId($insuff_file);

                          $i++;

                          if(File::exists($path.'tmp-files/'))
                          {
                              File::cleanDirectory($path.'tmp-files/');
                          }

                        }

                      }
                      else
                      {
                          foreach($attach_on_select as $item)
                          {
                            $insuff_file=[
                              'parent_id' => $parent_id,
                              'business_id' => $business_id,
                              'coc_id' => $jaf_aadhaar->business_id,
                              'candidate_id' => $candidate_id,
                              'service_id'  => $service_id,
                              'jaf_form_data_id' => $jaf_aadhaar->id,
                              'item_number' => $jaf_aadhaar->check_item_number,
                              'status'=>'removed',
                              'file_name' => $attach_on_select[$i],
                              'file_platform' => $file_platform,
                              'created_by'   => Auth::user()->id,
                              'created_at'   => date('Y-m-d H:i:s'),
                              'updated_at' => date('Y-m-d H:i:s')
                            ];
                      
                            $file_id = DB::table('insufficiency_attachments')->insertGetId($insuff_file);

                            $i++;
                          }
                      }
                  }

                  $ver_insuff=DB::table('verification_insufficiency')->where(['id'=>$ver_id])->first();

                  $candidates=DB::table('users as u')
                      ->select('u.*','j.business_id as coc_id','j.id as jaf_id','v.created_at as insuff_clear_date','v.created_by as insuff_clear_by','v.item_number','v.notes','s.verification_type','s.name as service_name','v.business_id as cust_id','v.attachment','v.updated_at','v.updated_by')
                      ->join('jaf_form_data as j','u.id','=','j.candidate_id')
                      ->join('verification_insufficiency as v','v.jaf_form_data_id','=','j.id')
                      ->join('services as s','s.id','=','v.service_id')
                      ->where(['u.user_type'=>'candidate','j.id'=>$item_id,'v.status'=>'removed','v.id'=>$ver_insuff->id])
                      ->first();

                  if($candidates!=NULL)
                  {
                    // $client=DB::table('users')->where(['id'=>$candidates->coc_id])->first();
                    // $name = $client->name;
                    // $email = $client->email;
                    // $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                    // $msg= "Insufficiency Cleared For Candidate";
    
                    // if($candidates->attachment!=NULL)
                    // {
                    //   $url = url('/').'/uploads/clear-insuff/'.$zipname;

                    //   if($s3_config!=NULL)
                    //   {
                    //     $filePath = 'uploads/clear-insuff/';

                    //     $disk = Storage::disk('s3');

                    //     $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                    //         'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                    //         'Key'                        => $filePath.$zipname,
                    //         'ResponseContentDisposition' => 'attachment;'//for download
                    //     ]);

                    //     $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');

                    //     $url = (string)$req->getUri();
                    //   }

                    //   $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>$url,'candidate'=>$candidates,'sender'=>$sender);
                    // }
                    // else
                    //   $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);
    
                    // Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email,$name) {
                    //   $message->to($email, $name)->subject
                    //       ('Clobminds Pvt Ltd - Insufficiency Notification');
                    //   $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                    // });

                    $kams = DB::table('key_account_managers')->where(['business_id'=>$candidates->business_id])->get();
                    if(count($kams)>0)
                    {
                      foreach($kams as $kam)
                      {
                          $user_data=DB::table('users')->where(['id'=>$kam->user_id])->first();

                          $name1 = $user_data->name;
                          $email1 = $user_data->email;
                          $msg= "Insufficiency Cleared For Candidate";
                          $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                          if($candidates->attachment!=NULL)
                          {
                            $url = url('/').'/uploads/clear-insuff/'.$zipname;

                            if($s3_config!=NULL)
                            {
                              $filePath = 'uploads/clear-insuff/';

                              $disk = Storage::disk('s3');

                              $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                                  'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                                  'Key'                        => $filePath.$zipname,
                                  'ResponseContentDisposition' => 'attachment;'//for download
                              ]);

                              $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');

                              $url = (string)$req->getUri();
                            }

                            $data  = array('name'=>$name1,'email'=>$email1,'msg'=>$msg,'link'=>$url,'candidate'=>$candidates,'sender'=>$sender);
                          }
                          else
                            $data  = array('name'=>$name1,'email'=>$email1,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);

                          Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email1,$name1) {
                              $message->to($email1, $name1)->subject
                                  ('Clobminds Pvt Ltd - Insufficiency Notification');
                              $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                          });

                      }
                    }

                    $ver_insuff_data=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$candidates->jaf_id,'status'=>'removed'])->first();

                    if($ver_insuff_data!=NULL)
                    {
                        $user_data=DB::table('users')->where(['id'=>$ver_insuff_data->created_by])->first();
                        $name = $user_data->name;
                        $email = $user_data->email;
                        $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                        $msg= "Insufficiency Cleared For Candidate";
                        if($candidates->attachment!=NULL)
                        {
                          $url = url('/').'/uploads/clear-insuff/'.$zipname;

                          if($s3_config!=NULL)
                          {
                            $filePath = 'uploads/clear-insuff/';

                            $disk = Storage::disk('s3');

                            $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                                'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                                'Key'                        => $filePath.$zipname,
                                'ResponseContentDisposition' => 'attachment;'//for download
                            ]);

                            $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');

                            $url = (string)$req->getUri();
                          }

                          $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>$url,'candidate'=>$candidates,'sender'=>$sender);
                        }
                        else
                          $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);
                          Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email,$name) {
                          $message->to($email, $name)->subject
                              ('Clobminds Pvt Ltd - Insufficiency Notification');
                          $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                        }); 
                    }

                  }

              }else{
                //check from live API
                $api_check_status = false;
                // Setup request to send json via POST
                $data = array(
                    'id_number'    => $aaddhaar_number,
                    'async'         => true,
                );
                $payload = json_encode($data);
                $apiURL = "https://kyc-api.aadhaarkyc.io/api/v1/aadhaar-validation/aadhaar-validation";

                $ch = curl_init();
                curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
                curl_setopt ( $ch, CURLOPT_POST, 1 );
                $authorization = "Authorization: Bearer ".env('SUREPASS_PRODUCTION_TOKEN');
                //$authorization = "Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTY3NTQxMTcwMywianRpIjoiMTA5ZDNkNWMtOTE4NC00MTJkLTg3YTMtYzhiNmYzZWQyYjQ3IiwidHlwZSI6ImFjY2VzcyIsImlkZW50aXR5IjoiZGV2LnRlY2hzYWdhQHN1cmVwYXNzLmlvIiwibmJmIjoxNjc1NDExNzAzLCJleHAiOjE5OTA3NzE3MDMsInVzZXJfY2xhaW1zIjp7InNjb3BlcyI6WyJ1c2VyIl19fQ.r4XeIMOFEdnb52_xCspvLyiu6ciS5wx4YeIMv8ZyHKI"; // Prepare the authorisation token
                curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json' , $authorization )); // Inject the token into the header
                curl_setopt($ch, CURLOPT_URL, $apiURL);
                // Attach encoded JSON string to the POST fields
                curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);
                $resp = curl_exec ( $ch );
                curl_close ( $ch );
                
                $array_data =  json_decode($resp,true);

                if($array_data['success'])
                {
                    $master_data ="";
                    //check if ID number is new then insert into DB
                    $checkIDInDB= DB::table('aadhar_check_masters')->where(['aadhar_number'=>$aaddhaar_number])->count();
                    if($checkIDInDB ==0)
                    {
                        $gender = 'Male';
                        if($array_data['data']['gender'] == 'F'){
                            $gender = 'Female';
                        }
                        $data = ['aadhar_number'    =>$array_data['data']['aadhaar_number'],
                                'age_range'         =>$array_data['data']['age_range'],
                                'gender'            =>$gender,
                                'state'             =>$array_data['data']['state'],
                                'last_digit'        =>$array_data['data']['last_digits'],
                                'is_api_verified'       =>'1',
                                'is_aadhar_exist'   =>'1',
                                'created_at'        =>date('Y-m-d H:i:s')
                                ];

                        DB::table('aadhar_check_masters')->insert($data);
                                
                        //insert into business table
                        $check_data = [
                                'parent_id'         =>$parent_id,
                                'business_id'       =>$business_id,
                                'candidate_id'      =>$candidate_id,
                                'service_id'        =>$service_id,
                                'aadhar_number'     =>$array_data['data']['aadhaar_number'],
                                'age_range'         =>$array_data['data']['age_range'],
                                'gender'            =>$gender,
                                'state'             =>$array_data['data']['state'],
                                'last_digit'        =>$array_data['data']['last_digits'],
                                'is_verified'       =>'1',
                                'is_aadhar_exist'   =>'1',
                                'price'             =>$checkprice_db!=NULL?$checkprice_db->price:$price,
                                'used_by'           =>'customer',
                                'user_id'            => $user_id,
                                'created_at'        =>date('Y-m-d H:i:s')
                                ];

                        DB::table('aadhar_checks')->insert($check_data);
                        
                        $master_data = DB::table('aadhar_check_masters')->select('*')->where(['aadhar_number'=>$aaddhaar_number])->first();
                        // update the status
                      DB::table('jaf_form_data')->where(['id'=>$item_id])->update(['is_api_checked'=>'1','is_api_verified'=>'1','is_insufficiency'=>'0','verification_status'=>'success','verified_at'=>date('Y-m-d H:i:s'),'is_insufficiency'=>'0','clear_insuff_notes'=>$request->comment,'clear_insuff_attachment' => $zipname!=NULL?$zipname:NULL,'clear_insuff_attachment_file_platform'=>$c_file_platform,'is_all_insuff_cleared' => 1,'insuff_cleared_by'=>Auth::user()->id,'updated_at'=>date('Y-m-d H:i:s')]); 
                      $is_updated=TRUE;

                      $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->first();

                      if($ver_insuff!=NULL)
                      {
                          $ver_insuff_data=[
                            'notes' => $request->comment,
                            'updated_by' => Auth::user()->id,
                            'attachment'  => $zipname!=""?$zipname:NULL, 
                            'attachment_file_platform' => $c_file_platform, 
                            'updated_at' => date('Y-m-d H:i:s')
                          ];

                          DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->update($ver_insuff_data);

                          $ver_id=$ver_insuff->id;
                      }
                      else
                      {
                        $ver_insuff_data=[
                          'parent_id' => $parent_id,
                          'business_id' => $business_id,
                          'coc_id' => $jaf_aadhaar->business_id,
                          'candidate_id' => $candidate_id,
                          'service_id'  => $jaf_aadhaar->service_id,
                          'jaf_form_data_id' => $jaf_aadhaar->id,
                          'item_number' => $jaf_aadhaar->check_item_number,
                          'activity_type'=> 'jaf-insuff',
                          'status'=>'removed',
                          'notes' => $request->comment,
                          'attachment' => $zipname!=NULL?$zipname:NULL,
                          'attachment_file_platform' => $c_file_platform,
                          'created_by'   => Auth::user()->id,
                          'created_at'   => date('Y-m-d H:i:s'),
                        ];
                  
                        $ver_id=DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);
                      }

                      $insuff_log_data=[
                        'parent_id' => $parent_id,
                        'business_id' => $business_id,
                        'coc_id' => $jaf_aadhaar->business_id,
                        'candidate_id' => $candidate_id,
                        'service_id'  => $service_id,
                        'jaf_form_data_id' => $jaf_aadhaar->id,
                        'item_number' => $jaf_aadhaar->check_item_number,
                        'activity_type'=> 'jaf-insuff',
                        'status'=>'removed',
                        'notes' => $request->comment,
                        'created_by'   => Auth::user()->id,
                        'attachment'  => $zipname!=""?$zipname:NULL, 
                        'attachment_file_platform' => $c_file_platform,
                        'created_at'   => date('Y-m-d H:i:s'),
                      ];
                
                      DB::table('insufficiency_logs')->insert($insuff_log_data);

                      if(count($attach_on_select)>0)
                      {
                          $file_data=DB::table('insufficiency_attachments')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->get();

                          if(count($file_data)>0)
                          {
                              $path=public_path().'/uploads/clear-insuff/';
                              foreach($file_data as $file)
                              {
                                  if(File::exists($path.$file->file_name))
                                  {
                                      File::delete($path.$file->file_name);
                                  }
                              }

                              DB::table('insufficiency_attachments')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->delete();

                          }

                          $i=0;
                          $file_platform =  'web';
                          if($s3_config!=NULL)
                          {
                            $s3filePath = 'uploads/clear-insuff/';

                            if(!Storage::disk('s3')->exists($s3filePath))
                            {
                                Storage::disk('s3')->makeDirectory($s3filePath,0777, true, true);
                            }
                            
                            foreach($attach_on_select as $item)
                            {
                              $file_platform = 'web';

                              $path=public_path().'/uploads/clear-insuff/';

                              if(File::exists($path.$attach_on_select[$i]))
                              {
                                $file_platform = 's3';

                                $file = Helper::createFileObject($path.$attach_on_select[$i]);

                                Storage::disk('s3')->put($s3filePath.$attach_on_select[$i],file_get_contents($file));

                                File::delete($path.$attach_on_select[$i]);
                              }

                              $insuff_file=[
                                'parent_id' => $parent_id,
                                'business_id' => $business_id,
                                'coc_id' => $jaf_aadhaar->business_id,
                                'candidate_id' => $candidate_id,
                                'service_id'  => $service_id,
                                'jaf_form_data_id' => $jaf_aadhaar->id,
                                'item_number' => $jaf_aadhaar->check_item_number,
                                'status'=>'removed',
                                'file_name' => $attach_on_select[$i],
                                'file_platform' => $file_platform,
                                'created_by'   => Auth::user()->id,
                                'created_at'   => date('Y-m-d H:i:s'),
                                'updated_at' => date('Y-m-d H:i:s')
                              ];
                        
                              $file_id = DB::table('insufficiency_attachments')->insertGetId($insuff_file);

                              $i++;

                              if(File::exists($path.'tmp-files/'))
                              {
                                  File::cleanDirectory($path.'tmp-files/');
                              }
                            }

                          }
                          else
                          {
                            foreach($attach_on_select as $item)
                            {
                              $insuff_file=[
                                'parent_id' => $parent_id,
                                'business_id' => $business_id,
                                'coc_id' => $jaf_aadhaar->business_id,
                                'candidate_id' => $candidate_id,
                                'service_id'  => $service_id,
                                'jaf_form_data_id' => $jaf_aadhaar->id,
                                'item_number' => $jaf_aadhaar->check_item_number,
                                'status'=>'removed',
                                'file_name' => $attach_on_select[$i],
                                'file_platform' => $file_platform,
                                'created_by'   => Auth::user()->id,
                                'created_at'   => date('Y-m-d H:i:s'),
                                'updated_at' => date('Y-m-d H:i:s')
                              ];
                        
                              $file_id = DB::table('insufficiency_attachments')->insertGetId($insuff_file);

                              $i++;
                            }
                          }
                      }

                      $ver_insuff=DB::table('verification_insufficiency')->where(['id'=>$ver_id])->first();

                      $candidates=DB::table('users as u')
                          ->select('u.*','j.business_id as coc_id','j.id as jaf_id','v.created_at as insuff_clear_date','v.created_by as insuff_clear_by','v.item_number','v.notes','s.verification_type','s.name as service_name','v.business_id as cust_id','v.attachment','v.updated_at','v.updated_by')
                          ->join('jaf_form_data as j','u.id','=','j.candidate_id')
                          ->join('verification_insufficiency as v','v.jaf_form_data_id','=','j.id')
                          ->join('services as s','s.id','=','v.service_id')
                          ->where(['u.user_type'=>'candidate','j.id'=>$item_id,'v.status'=>'removed','v.id'=>$ver_insuff->id])
                          ->first();

                      if($candidates!=NULL)
                      {
                        // $client=DB::table('users')->where(['id'=>$candidates->coc_id])->first();
                        // $name = $client->name;
                        // $email = $client->email;
                        // $msg= "Insufficiency Cleared For Candidate";
                        // $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                        // if($candidates->attachment!=NULL)
                        // {
                        //   $url = url('/').'/uploads/clear-insuff/'.$zipname;

                        //   if($s3_config!=NULL)
                        //   {
                        //     $filePath = 'uploads/clear-insuff/';

                        //     $disk = Storage::disk('s3');

                        //     $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                        //         'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                        //         'Key'                        => $filePath.$zipname,
                        //         'ResponseContentDisposition' => 'attachment;'//for download
                        //     ]);

                        //     $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');

                        //     $url = (string)$req->getUri();
                        //   }

                        //   $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>$url,'candidate'=>$candidates,'sender'=>$sender);
                        // }
                        // else
                        //   $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);
        
                        // Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email,$name) {
                        //   $message->to($email, $name)->subject
                        //       ('Clobminds Pvt Ltd - Insufficiency Notification');
                        //   $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                        // });

                        $kams = DB::table('key_account_managers')->where(['business_id'=>$candidates->business_id])->get();
                        if(count($kams)>0)
                        {
                          foreach($kams as $kam)
                          {
                              $user_data=DB::table('users')->where(['id'=>$kam->user_id])->first();

                              $name1 = $user_data->name;
                              $email1 = $user_data->email;
                              $msg= "Insufficiency Cleared For Candidate";
                              $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();

                              if($candidates->attachment!=NULL)
                              {
                                $url = url('/').'/uploads/clear-insuff/'.$zipname;

                                if($s3_config!=NULL)
                                {
                                  $filePath = 'uploads/clear-insuff/';

                                  $disk = Storage::disk('s3');

                                  $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                                      'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                                      'Key'                        => $filePath.$zipname,
                                      'ResponseContentDisposition' => 'attachment;'//for download
                                  ]);

                                  $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');

                                  $url = (string)$req->getUri();
                                }

                                $data  = array('name'=>$name1,'email'=>$email1,'msg'=>$msg,'link'=>$url,'candidate'=>$candidates,'sender'=>$sender);
                              }
                              else
                                $data  = array('name'=>$name1,'email'=>$email1,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);

                              Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email1,$name1) {
                                  $message->to($email1, $name1)->subject
                                      ('Clobminds Pvt Ltd - Insufficiency Notification');
                                  $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                              });

                          }
                        }

                        $ver_insuff_data=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$candidates->jaf_id,'status'=>'removed'])->first();

                        if($ver_insuff_data!=NULL)
                        {
                            $user_data=DB::table('users')->where(['id'=>$ver_insuff_data->created_by])->first();
                            $name = $user_data->name;
                            $email = $user_data->email;
                            $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                            $msg= "Insufficiency Cleared For Candidate";
            
                            if($candidates->attachment!=NULL)
                            {
                              $url = url('/').'/uploads/clear-insuff/'.$zipname;

                              if($s3_config!=NULL)
                              {
                                $filePath = 'uploads/clear-insuff/';

                                $disk = Storage::disk('s3');

                                $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                                    'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                                    'Key'                        => $filePath.$zipname,
                                    'ResponseContentDisposition' => 'attachment;'//for download
                                ]);

                                $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');

                                $url = (string)$req->getUri();
                              }

                              $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>$url,'candidate'=>$candidates,'sender'=>$sender);
                            }
                            else
                              $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);
                            Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email,$name) {
                              $message->to($email, $name)->subject
                                  ('Clobminds Pvt Ltd - Insufficiency Notification');
                              $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                            }); 
                        }

                      }
                    }
                
                }else{
                    //update insuff
                    DB::table('jaf_form_data')->where(['id'=>$item_id])->update(['is_api_checked'=>'1','is_api_verified'=>'0','is_insufficiency'=>'1','verification_status'=>'failed','verified_at'=>date('Y-m-d H:i:s')]); 
          
                    $jaf_data=DB::table('jaf_form_data')->where(['id'=>$item_id])->first();
                    $insuff_log_data=[
                      'parent_id' => $parent_id,
                      'business_id' => $business_id,
                      'coc_id' => $jaf_data->business_id,
                      'candidate_id' => $candidate_id,
                      'service_id'  => $service_id,
                      'jaf_form_data_id' => $jaf_data->id,
                      'item_number' => $jaf_data->check_item_number,
                      'activity_type'=> 'jaf-insuff',
                      'status'=>'failed',
                      'notes' => 'BGV Failed',
                      'created_by'   => Auth::user()->id,
                      'attachment'  => $zipname!=""?$zipname:NULL, 
                      'attachment_file_platform' => $c_file_platform,
                      'created_at'   => date('Y-m-d H:i:s'),
                    ];
              
                    DB::table('insufficiency_logs')->insert($insuff_log_data); 
                    
                    $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'raised'])->first();

                    if($ver_insuff!=NULL)
                    {
                        $ver_insuff_data=[
                          'notes' => 'BGV Failed',
                          'updated_by' => Auth::user()->id,
                          'updated_at' => date('Y-m-d H:i:s')
                        ];

                        DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'raised'])->update($ver_insuff_data);

                        $ver_id=$ver_insuff->id;
                    }
                    else
                    {
                      $ver_insuff_data=[
                        'parent_id' => $parent_id,
                        'business_id' => $business_id,
                        'coc_id' => $jaf_data->business_id,
                        'candidate_id' => $candidate_id,
                        'service_id'  => $service_id,
                        'jaf_form_data_id' => $jaf_data->id,
                        'item_number' => $jaf_data->check_item_number,
                        'activity_type'=> 'jaf-insuff',
                        'status'=>'raised',
                        'notes' => 'BGV Failed',
                        'created_by'   => Auth::user()->id,
                        'created_at'   => date('Y-m-d H:i:s'),
                      ];
                
                      $ver_id = DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);
                    }
                    
                }
                

              }

              //return result 
              if($is_updated){  
                //generate report here 
                // $this->generateCandidateReport($candidate_id);
                DB::commit();
                return response()->json([
                'fail' => false,  
                'status'=>'ok',
                'message' => 'updated',                
                ], 200);
              }
              else{
                  DB::commit();
                  return response()->json([
                  'fail' => true,
                  'status' =>'no',
                  ], 200);
              }

            }
            // service start
            else if($service_id == 3){
              $jaf_pan = DB::table('jaf_form_data')->select('id','business_id','form_data','service_id','check_item_number')->where(['id'=>$item_id])->first();
              
                    $pan_number = "";
                    // $business_id = $jaf_pan->business_id; 
                    $jaf_array = json_decode($jaf_pan->form_data, true);
                    // print_r($jaf_array);
                    foreach($jaf_array as $input){
                        if(array_key_exists('PAN Number',$input)){
                          $pan_number = $input['PAN Number'];
                        }
                    }
                    
                    $s3_config = NULL;
                    $c_file_platform = 'web';
                    $attach_on_select=[];
                    $allowedextension=['jpg','jpeg','png','svg','pdf'];
                    $zipname="";
                    if($request->hasFile('attachment') && $request->file('attachment') !="")
                    {
                        $filePath = public_path('/uploads/clear-insuff/'); 
                        $files= $request->file('attachment');
                        foreach($files as $file)
                        {
                                $extension = $file->getClientOriginalExtension();

                                $check = in_array($extension,$allowedextension);

                                $file_size = number_format(File::size($file) / 1048576, 2);
                                
                                if(!$check)
                                {
                                    return response()->json([
                                      'fail' => true,
                                      'errors' => ['attachment' => 'Only jpg,jpeg,png,pdf are allowed !'],
                                      'error_type'=>'validation'
                                    ]);                        
                                }

                                if($file_size > 10)
                                {
                                    return response()->json([
                                      'fail' => true,
                                      'error_type'=>'validation',
                                      'errors' => ['attachment' => 'The document size must be less than only 10mb Upload !'],
                                    ]);                        
                                }
                        }

                        $zipname = 'clear-insuff-'.date('Ymdhis').'.zip';
                        $zip = new \ZipArchive();      
                        $zip->open(public_path().'/uploads/clear-insuff/'.$zipname, \ZipArchive::CREATE | \ZipArchive::OVERWRITE);

                        foreach($files as $file)
                        {
                            $file_data = $file->getClientOriginalName();
                            $tmp_data  = $candidate_id.'-'.date('mdYHis').'-'.$file_data; 
                            $data = $file->move($filePath, $tmp_data);       
                            $attach_on_select[]=$tmp_data;

                            $path=public_path()."/uploads/clear-insuff/".$tmp_data;
                            $zip->addFile($path, '/clear-insuff/'.basename($path));  
                        }

                        $zip->close();
                    }

                    $s3_config = S3ConfigTrait::s3Config();

                    $path=public_path().'/uploads/clear-insuff/';

                    if($s3_config!=NULL && $zipname!='')
                    {
                      if(File::exists($path.$zipname))
                      {
                          $c_file_platform = 's3';

                          $s3filePath = 'uploads/clear-insuff/';
          
                          if(!Storage::disk('s3')->exists($s3filePath))
                          {
                              Storage::disk('s3')->makeDirectory($s3filePath,0777, true, true);
                          }
          
                          $file = Helper::createFileObject($path.$zipname);
          
                          Storage::disk('s3')->put($s3filePath.$zipname,file_get_contents($file));

                          File::delete($path.$zipname);
                      }

                    }

                    if(File::exists($path.'tmp-files/'))
                    {
                      File::cleanDirectory($path.'tmp-files/');
                    }

                    //check first into master table
                    $master_data = DB::table('pan_check_masters')->select('*')->where(['pan_number'=>$pan_number])->first();
                    
                    if($master_data !=null){
                        // update the status
                        DB::table('jaf_form_data')->where(['id'=>$item_id])
                        ->update(['is_api_checked'=>'1','is_api_verified'=>'1','verification_status'=>'success','verified_at'=>date('Y-m-d H:i:s'),'is_insufficiency'=>'0','clear_insuff_notes'=>$request->comment,'clear_insuff_attachment' => $zipname!=NULL?$zipname:NULL,'clear_insuff_attachment_file_platform'=>$c_file_platform,'is_all_insuff_cleared' => 1,'insuff_cleared_by'=>Auth::user()->id,'updated_at'=>date('Y-m-d H:i:s')]);
                        $is_updated=TRUE;

                        $data = [
                          'parent_id'         =>$parent_id,
                          'category'          =>$master_data->category,
                          'pan_number'        =>$master_data->pan_number,
                          'full_name'         =>$master_data->full_name,
                          'is_verified'       =>'1',
                          'is_pan_exist'      =>'1',
                          'business_id'       => $business_id,
                          'candidate_id' => $candidate_id,
                          'service_id'        => $service_id,
                          'source_type'       =>'SystemDb',
                          'price'             =>$checkprice_db!=NULL?$checkprice_db->price:$price,
                          'used_by'           =>'customer',
                          'user_id'            => $user_id,
                          'created_at'=>date('Y-m-d H:i:s')
                          ];
                  
                        DB::table('pan_checks')->insert($data);

                        $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->first();

                        if($ver_insuff!=NULL)
                        {
                            $ver_insuff_data=[
                              'notes' => $request->comment,
                              'updated_by' => Auth::user()->id,
                              'attachment'  => $zipname!=""?$zipname:NULL,
                              'attachment_file_platform' => $c_file_platform,
                              'updated_at' => date('Y-m-d H:i:s')
                            ];

                            DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->update($ver_insuff_data);

                            $ver_id=$ver_insuff->id;
                        }
                        else
                        {
                          $ver_insuff_data=[
                            'parent_id' => $parent_id,
                            'business_id' => $business_id,
                            'coc_id' => $jaf_pan->business_id,
                            'candidate_id' => $candidate_id,
                            'service_id'  => $jaf_pan->service_id,
                            'item_number' => $jaf_pan->check_item_number,
                            'jaf_form_data_id' => $jaf_pan->id,
                            'activity_type'=> 'jaf-insuff',
                            'status'=>'removed',
                            'notes' => $request->comment,
                            'attachment' => $zipname!=NULL?$zipname:NULL,
                            'attachment_file_platform' => $c_file_platform,
                            'created_by'   => Auth::user()->id,
                            'created_at'   => date('Y-m-d H:i:s'),
                          ];
                    
                          $ver_id=DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);
                        }

                        $insuff_log_data=[
                          'parent_id' => $parent_id,
                          'business_id' => $business_id,
                          'coc_id' => $jaf_pan->business_id,
                          'candidate_id' => $candidate_id,
                          'service_id'  => $service_id,
                          'jaf_form_data_id' => $jaf_pan->id,
                          'item_number' => $jaf_pan->check_item_number,
                          'activity_type'=> 'jaf-insuff',
                          'status'=>'removed',
                          'notes' => $request->comment,
                          'created_by'   => Auth::user()->id,
                          'attachment'  => $zipname!=""?$zipname:NULL, 
                          'attachment_file_platform' => $c_file_platform,
                          'created_at'   => date('Y-m-d H:i:s'),
                        ];
                  
                        DB::table('insufficiency_logs')->insert($insuff_log_data);
                  

                        if(count($attach_on_select)>0)
                        {
                            $file_data=DB::table('insufficiency_attachments')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->get();

                            if(count($file_data)>0)
                            {
                                $path=public_path().'/uploads/clear-insuff/';
                                foreach($file_data as $file)
                                {
                                    if(File::exists($path.$file->file_name))
                                    {
                                        File::delete($path.$file->file_name);
                                    }
                                }

                                DB::table('insufficiency_attachments')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->delete();

                            }

                            $i=0;
                            $file_platform = 'web';
                            if($s3_config!=NULL)
                            {
                              $s3filePath = 'uploads/clear-insuff/';

                              if(!Storage::disk('s3')->exists($s3filePath))
                              {
                                  Storage::disk('s3')->makeDirectory($s3filePath,0777, true, true);
                              }

                              foreach($attach_on_select as $item)
                              {
                                $file_platform = 'web';

                                $path=public_path().'/uploads/clear-insuff/';

                                if(File::exists($path.$attach_on_select[$i]))
                                {
                                  $file_platform = 's3';

                                  $file = Helper::createFileObject($path.$attach_on_select[$i]);

                                  Storage::disk('s3')->put($s3filePath.$attach_on_select[$i],file_get_contents($file));

                                  File::delete($path.$attach_on_select[$i]);
                                }

                                $insuff_file=[
                                  'parent_id' => $parent_id,
                                  'business_id' => $business_id,
                                  'coc_id' => $jaf_pan->business_id,
                                  'candidate_id' => $candidate_id,
                                  'service_id'  => $service_id,
                                  'jaf_form_data_id' => $jaf_pan->id,
                                  'item_number' => $jaf_pan->check_item_number,
                                  'status'=>'removed',
                                  'file_name' => $attach_on_select[$i],
                                  'file_platform' => $file_platform,
                                  'created_by'   => Auth::user()->id,
                                  'created_at'   => date('Y-m-d H:i:s'),
                                  'updated_at' => date('Y-m-d H:i:s')
                                ];
                          
                                $file_id = DB::table('insufficiency_attachments')->insertGetId($insuff_file);

                                $i++;

                                if(File::exists($path.'tmp-files/'))
                                {
                                    File::cleanDirectory($path.'tmp-files/');
                                }
                              }

                            }
                            else
                            {
                                foreach($attach_on_select as $item)
                                {
                                  $insuff_file=[
                                    'parent_id' => $parent_id,
                                    'business_id' => $business_id,
                                    'coc_id' => $jaf_pan->business_id,
                                    'candidate_id' => $candidate_id,
                                    'service_id'  => $service_id,
                                    'jaf_form_data_id' => $jaf_pan->id,
                                    'item_number' => $jaf_pan->check_item_number,
                                    'status'=>'removed',
                                    'file_name' => $attach_on_select[$i],
                                    'file_platform' => $file_platform,
                                    'created_by'   => Auth::user()->id,
                                    'created_at'   => date('Y-m-d H:i:s'),
                                    'updated_at' => date('Y-m-d H:i:s')
                                  ];
                            
                                  $file_id = DB::table('insufficiency_attachments')->insertGetId($insuff_file);
    
                                  $i++;
                                }
                            }
                        }

                        $ver_insuff=DB::table('verification_insufficiency')->where(['id'=>$ver_id])->first();

                        $candidates=DB::table('users as u')
                            ->select('u.*','j.business_id as coc_id','j.id as jaf_id','v.created_at as insuff_clear_date','v.created_by as insuff_clear_by','v.item_number','v.notes','s.verification_type','s.name as service_name','v.business_id as cust_id','v.attachment','v.updated_at','v.updated_by')
                            ->join('jaf_form_data as j','u.id','=','j.candidate_id')
                            ->join('verification_insufficiency as v','v.jaf_form_data_id','=','j.id')
                            ->join('services as s','s.id','=','v.service_id')
                            ->where(['u.user_type'=>'candidate','j.id'=>$item_id,'v.status'=>'removed','v.id'=>$ver_insuff->id])
                            ->first();

                        if($candidates!=NULL)
                        {
                          // $client=DB::table('users')->where(['id'=>$candidates->coc_id])->first();
                          // $name = $client->name;
                          // $email = $client->email;
                          // $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                          // $msg= "Insufficiency Cleared For Candidate";
          
                          // if($candidates->attachment!=NULL)
                          // {
                          //   $url = url('/').'/uploads/clear-insuff/'.$zipname;

                          //   if($s3_config!=NULL)
                          //   {
                          //     $filePath = 'uploads/clear-insuff/';

                          //     $disk = Storage::disk('s3');

                          //     $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                          //         'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                          //         'Key'                        => $filePath.$zipname,
                          //         'ResponseContentDisposition' => 'attachment;'//for download
                          //     ]);

                          //     $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');

                          //     $url = (string)$req->getUri();
                          //   }

                          //   $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>$url,'candidate'=>$candidates,'sender'=>$sender);
                          // }
                          // else
                          //   $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);
          
                          // Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email,$name) {
                          //   $message->to($email, $name)->subject
                          //       ('Clobminds Pvt Ltd - Insufficiency Notification');
                          //   $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                          // });

                          $kams = DB::table('key_account_managers')->where(['business_id'=>$candidates->business_id])->get();
                          if(count($kams)>0)
                          {
                            foreach($kams as $kam)
                            {
                                $user_data=DB::table('users')->where(['id'=>$kam->user_id])->first();

                                $name1 = $user_data->name;
                                $email1 = $user_data->email;
                                $msg= "Insufficiency Cleared For Candidate";
                                $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                                if($candidates->attachment!=NULL)
                                {
                                  $url = url('/').'/uploads/clear-insuff/'.$zipname;

                                  if($s3_config!=NULL)
                                  {
                                    $filePath = 'uploads/clear-insuff/';

                                    $disk = Storage::disk('s3');

                                    $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                                        'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                                        'Key'                        => $filePath.$zipname,
                                        'ResponseContentDisposition' => 'attachment;'//for download
                                    ]);

                                    $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');

                                    $url = (string)$req->getUri();
                                  }

                                  $data  = array('name'=>$name1,'email'=>$email1,'msg'=>$msg,'link'=>$url,'candidate'=>$candidates,'sender'=>$sender);
                                }
                                else
                                  $data  = array('name'=>$name1,'email'=>$email1,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);

                                Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email1,$name1) {
                                    $message->to($email1, $name1)->subject
                                        ('Clobminds Pvt Ltd - Insufficiency Notification');
                                    $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                                });

                            }
                          }

                          $ver_insuff_data=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$candidates->jaf_id,'status'=>'removed'])->first();

                          if($ver_insuff_data!=NULL)
                          {
                              $user_data=DB::table('users')->where(['id'=>$ver_insuff_data->created_by])->first();
                              $name = $user_data->name;
                              $email = $user_data->email;
                              $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                              $msg= "Insufficiency Cleared For Candidate";
                              if($candidates->attachment!=NULL)
                              {
                                $url = url('/').'/uploads/clear-insuff/'.$zipname;

                                if($s3_config!=NULL)
                                {
                                  $filePath = 'uploads/clear-insuff/';

                                  $disk = Storage::disk('s3');

                                  $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                                      'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                                      'Key'                        => $filePath.$zipname,
                                      'ResponseContentDisposition' => 'attachment;'//for download
                                  ]);

                                  $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');

                                  $url = (string)$req->getUri();
                                }

                                $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>$url,'candidate'=>$candidates,'sender'=>$sender);
                              }
                              else
                                $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);
                              Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email,$name) {
                                $message->to($email, $name)->subject
                                    ('Clobminds Pvt Ltd - Insufficiency Notification');
                                $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                              }); 
                          }

                        }
        
                    }
                    else{
                        //check from live API
                        $api_check_status = false;
                        // Setup request to send json via POST
                        $data = array(
                            'id_number'    => $pan_number,
                            'async'         => true,
                        );
                        $payload = json_encode($data);
                        $apiURL = "https://kyc-api.aadhaarkyc.io/api/v1/pan/pan";
        
                        $ch = curl_init();                
                        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);                
                        curl_setopt ( $ch, CURLOPT_POST, 1 );
                        $authorization = "Authorization: Bearer ".env('SUREPASS_PRODUCTION_TOKEN');
                       // $authorization = "Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTY3NTQxMTcwMywianRpIjoiMTA5ZDNkNWMtOTE4NC00MTJkLTg3YTMtYzhiNmYzZWQyYjQ3IiwidHlwZSI6ImFjY2VzcyIsImlkZW50aXR5IjoiZGV2LnRlY2hzYWdhQHN1cmVwYXNzLmlvIiwibmJmIjoxNjc1NDExNzAzLCJleHAiOjE5OTA3NzE3MDMsInVzZXJfY2xhaW1zIjp7InNjb3BlcyI6WyJ1c2VyIl19fQ.r4XeIMOFEdnb52_xCspvLyiu6ciS5wx4YeIMv8ZyHKI"; // Prepare the authorisation token
                        curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json' , $authorization )); // Inject the token into the header
                        curl_setopt($ch, CURLOPT_URL, $apiURL);
                        // Attach encoded JSON string to the POST fields
                        curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);
        
                        $resp = curl_exec ( $ch );
                        curl_close ( $ch );
                        
                        $array_data =  json_decode($resp,true);
                        // print_r($array_data); die;
                        if($array_data['success'])
                        {
                            //check if ID number is new then insert into DB
                            $checkIDInDB= DB::table('pan_check_masters')->where(['pan_number'=>$pan_number])->count();
                            if($checkIDInDB ==0)
                            {
                                $data = [
                                        'category'=>$array_data['data']['category'],
                                        'pan_number'=>$array_data['data']['pan_number'],
                                        'full_name'=>$array_data['data']['full_name'],
                                        'is_api_verified'=>'1',
                                        'is_pan_exist'=>'1',
                                        'created_at'=>date('Y-m-d H:i:s')
                                        ];
                                DB::table('pan_check_masters')->insert($data);

                                //store log
                                $data = [
                                  'parent_id'         =>$parent_id,
                                  'category'          =>$array_data['data']['category'],
                                  'pan_number'        =>$array_data['data']['pan_number'],
                                  'full_name'         =>$array_data['data']['full_name'],
                                  'is_verified'       =>'1',
                                  'is_pan_exist'      =>'1',
                                  'business_id'       =>$business_id,
                                  'candidate_id' => $candidate_id,
                                  'service_id'        => $service_id,
                                  'source_type'       =>'API',
                                  'price'             =>$checkprice_db!=NULL?$checkprice_db->price:$price,
                                  'used_by'           =>'customer',
                                  'user_id'            => $user_id,
                                  'created_at'=>date('Y-m-d H:i:s')
                                  ];
                          
                              DB::table('pan_checks')->insert($data);
                                
                            }
        
                            // update the status
                            DB::table('jaf_form_data')->where(['id'=>$item_id])
                            ->update(['is_api_checked'=>'1','is_api_verified'=>'1','verification_status'=>'success','verified_at'=>date('Y-m-d H:i:s'),'is_insufficiency'=>'0','clear_insuff_notes'=>$request->comment,'clear_insuff_attachment' => $zipname!=NULL?$zipname:NULL,'clear_insuff_attachment_file_platform'=>$c_file_platform,'is_all_insuff_cleared' => 1,'insuff_cleared_by'=>Auth::user()->id,'updated_at'=>date('Y-m-d H:i:s')]); 
                            $is_updated=TRUE;

                            $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->first();

                            if($ver_insuff!=NULL)
                            {
                                $ver_insuff_data=[
                                  'notes' => $request->comment,
                                  'updated_by' => Auth::user()->id,
                                  'attachment'  => $zipname!=""?$zipname:NULL, 
                                  'attachment_file_platform' => $c_file_platform,
                                  'updated_at' => date('Y-m-d H:i:s')
                                ];

                                DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->update($ver_insuff_data);

                                $ver_id=$ver_insuff->id;
                            }
                            else
                            {
                              $ver_insuff_data=[
                                'parent_id' => $parent_id,
                                'business_id' => $business_id,
                                'coc_id' => $jaf_pan->business_id,
                                'candidate_id' => $candidate_id,
                                'service_id'  => $jaf_pan->service_id,
                                'jaf_form_data_id' => $jaf_pan->id,
                                'item_number' => $jaf_pan->check_item_number,
                                'activity_type'=> 'jaf-insuff',
                                'status'=>'removed',
                                'notes' => $request->comment,
                                'attachment' => $zipname!=NULL?$zipname:NULL,
                                'attachment_file_platform' => $c_file_platform,
                                'created_by'   => Auth::user()->id,
                                'created_at'   => date('Y-m-d H:i:s'),
                              ];
                        
                              $ver_id=DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);
                            }

                            $insuff_log_data=[
                              'parent_id' => $parent_id,
                              'business_id' => $business_id,
                              'coc_id' => $jaf_pan->business_id,
                              'candidate_id' => $candidate_id,
                              'service_id'  => $service_id,
                              'jaf_form_data_id' => $jaf_pan->id,
                              'item_number' => $jaf_pan->check_item_number,
                              'activity_type'=> 'jaf-insuff',
                              'status'=>'removed',
                              'notes' => $request->comment,
                              'created_by'   => Auth::user()->id,
                              'attachment'  => $zipname!=""?$zipname:NULL, 
                              'attachment_file_platform' => $c_file_platform,
                              'created_at'   => date('Y-m-d H:i:s'),
                            ];
                      
                            DB::table('insufficiency_logs')->insert($insuff_log_data);

                            if(count($attach_on_select)>0)
                            {
                                $file_data=DB::table('insufficiency_attachments')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->get();

                                if(count($file_data)>0)
                                {
                                    $path=public_path().'/uploads/clear-insuff/';
                                    foreach($file_data as $file)
                                    {
                                        if(File::exists($path.$file->file_name))
                                        {
                                            File::delete($path.$file->file_name);
                                        }
                                    }

                                    DB::table('insufficiency_attachments')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->delete();

                                }

                                $i=0;
                                $file_platform = 'web';
                                if($s3_config!=NULL)
                                {
                                  $s3filePath = 'uploads/clear-insuff/';

                                  if(!Storage::disk('s3')->exists($s3filePath))
                                  {
                                      Storage::disk('s3')->makeDirectory($s3filePath,0777, true, true);
                                  }

                                  foreach($attach_on_select as $item)
                                  {

                                    $file_platform = 'web';
                                    $path=public_path().'/uploads/clear-insuff/';

                                    if(File::exists($path.$attach_on_select[$i]))
                                    {
                                      $file_platform = 's3';
                                      $file = Helper::createFileObject($path.$attach_on_select[$i]);

                                      Storage::disk('s3')->put($s3filePath.$attach_on_select[$i],file_get_contents($file));

                                      File::delete($path.$attach_on_select[$i]);
                                    }

                                    $insuff_file=[
                                      'parent_id' => $parent_id,
                                      'business_id' => $business_id,
                                      'coc_id' => $jaf_pan->business_id,
                                      'candidate_id' => $candidate_id,
                                      'service_id'  => $service_id,
                                      'jaf_form_data_id' => $jaf_pan->id,
                                      'item_number' => $jaf_pan->check_item_number,
                                      'status'=>'removed',
                                      'file_name' => $attach_on_select[$i],
                                      'file_platform' => $file_platform,
                                      'created_by'   => Auth::user()->id,
                                      'created_at'   => date('Y-m-d H:i:s'),
                                      'updated_at' => date('Y-m-d H:i:s')
                                    ];
                              
                                    $file_id = DB::table('insufficiency_attachments')->insertGetId($insuff_file);
  
                                    $i++;

                                    if(File::exists($path.'tmp-files/'))
                                    {
                                        File::cleanDirectory($path.'tmp-files/');
                                    }
                                  }
                                }
                                else
                                {
                                  foreach($attach_on_select as $item)
                                  {
                                    $insuff_file=[
                                      'parent_id' => $parent_id,
                                      'business_id' => $business_id,
                                      'coc_id' => $jaf_pan->business_id,
                                      'candidate_id' => $candidate_id,
                                      'service_id'  => $service_id,
                                      'jaf_form_data_id' => $jaf_pan->id,
                                      'item_number' => $jaf_pan->check_item_number,
                                      'status'=>'removed',
                                      'file_name' => $attach_on_select[$i],
                                      'file_platform' => $file_platform,
                                      'created_by'   => Auth::user()->id,
                                      'created_at'   => date('Y-m-d H:i:s'),
                                      'updated_at' => date('Y-m-d H:i:s')
                                    ];
                              
                                    $file_id = DB::table('insufficiency_attachments')->insertGetId($insuff_file);
  
                                    $i++;
                                  }
                                }
                                
                            }

                            $ver_insuff=DB::table('verification_insufficiency')->where(['id'=>$ver_id])->first();

                            $candidates=DB::table('users as u')
                                ->select('u.*','j.business_id as coc_id','j.id as jaf_id','v.created_at as insuff_clear_date','v.created_by as insuff_clear_by','v.item_number','v.notes','s.verification_type','s.name as service_name','v.business_id as cust_id','v.attachment','v.updated_at','v.updated_by')
                                ->join('jaf_form_data as j','u.id','=','j.candidate_id')
                                ->join('verification_insufficiency as v','v.jaf_form_data_id','=','j.id')
                                ->join('services as s','s.id','=','v.service_id')
                                ->where(['u.user_type'=>'candidate','j.id'=>$item_id,'v.status'=>'removed','v.id'=>$ver_insuff->id])
                                ->first();

                            if($candidates!=NULL)
                            {
                              // $client=DB::table('users')->where(['id'=>$candidates->coc_id])->first();
                              // $name = $client->name;
                              // $email = $client->email;
                              // $msg= "Insufficiency Cleared For Candidate";
                              // $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                              // if($candidates->attachment!=NULL)
                              // {
                              //   $url = url('/').'/uploads/clear-insuff/'.$zipname;

                              //   if($s3_config!=NULL)
                              //   {
                              //     $filePath = 'uploads/clear-insuff/';

                              //     $disk = Storage::disk('s3');

                              //     $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                              //         'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                              //         'Key'                        => $filePath.$zipname,
                              //         'ResponseContentDisposition' => 'attachment;'//for download
                              //     ]);

                              //     $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');

                              //     $url = (string)$req->getUri();
                              //   }

                              //   $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>$url,'candidate'=>$candidates,'sender'=>$sender);
                              // }
                              // else
                              //   $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);
              
                              // Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email,$name) {
                              //   $message->to($email, $name)->subject
                              //       ('Clobminds Pvt Ltd - Insufficiency Notification');
                              //   $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                              // });

                              $kams = DB::table('key_account_managers')->where(['business_id'=>$candidates->business_id])->get();
                              if(count($kams)>0)
                              {
                                foreach($kams as $kam)
                                {
                                    $user_data=DB::table('users')->where(['id'=>$kam->user_id])->first();

                                    $name1 = $user_data->name;
                                    $email1 = $user_data->email;
                                    $msg= "Insufficiency Cleared For Candidate";
                                    $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                                    if($candidates->attachment!=NULL)
                                    {
                                      $url = url('/').'/uploads/clear-insuff/'.$zipname;

                                      if($s3_config!=NULL)
                                      {
                                        $filePath = 'uploads/clear-insuff/';

                                        $disk = Storage::disk('s3');

                                        $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                                            'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                                            'Key'                        => $filePath.$zipname,
                                            'ResponseContentDisposition' => 'attachment;'//for download
                                        ]);

                                        $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');

                                        $url = (string)$req->getUri();
                                      }

                                      $data  = array('name'=>$name1,'email'=>$email1,'msg'=>$msg,'link'=>$url,'candidate'=>$candidates,'sender'=>$sender);
                                    }
                                    else
                                      $data  = array('name'=>$name1,'email'=>$email1,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);

                                    Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email1,$name1) {
                                        $message->to($email1, $name1)->subject
                                            ('Clobminds Pvt Ltd - Insufficiency Notification');
                                        $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                                    });

                                }
                              }

                              $ver_insuff_data=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$candidates->jaf_id,'status'=>'removed'])->first();

                              if($ver_insuff_data!=NULL)
                              {
                                  $user_data=DB::table('users')->where(['id'=>$ver_insuff_data->created_by])->first();
                                  $name = $user_data->name;
                                  $email = $user_data->email;
                                  $msg= "Insufficiency Cleared For Candidate";
                                  $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                                  if($candidates->attachment!=NULL)
                                  {
                                    $url = url('/').'/uploads/clear-insuff/'.$zipname;

                                    if($s3_config!=NULL)
                                    {
                                      $filePath = 'uploads/clear-insuff/';

                                      $disk = Storage::disk('s3');

                                      $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                                          'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                                          'Key'                        => $filePath.$zipname,
                                          'ResponseContentDisposition' => 'attachment;'//for download
                                      ]);

                                      $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');

                                      $url = (string)$req->getUri();
                                    }

                                    $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>$url,'candidate'=>$candidates,'sender'=>$sender);
                                  }
                                  else
                                    $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);
                                  Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email,$name) {
                                    $message->to($email, $name)->subject
                                        ('Clobminds Pvt Ltd - Insufficiency Notification');
                                    $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                                  }); 
                              }

                            }
        
        
                        }else{
                            //update insuff
                          DB::table('jaf_form_data')->where(['id'=>$item_id])->update(['is_api_checked'=>'1','is_api_verified'=>'0','is_insufficiency'=>'1','verification_status'=>'failed','verified_at'=>date('Y-m-d H:i:s')]); 

                            $jaf_data=DB::table('jaf_form_data')->where(['id'=>$item_id])->first();

                            $insuff_log_data=[
                              'parent_id' => $parent_id,
                              'business_id' => $business_id,
                              'coc_id' => $jaf_data->business_id,
                              'candidate_id' => $candidate_id,
                              'service_id'  => $service_id,
                              'jaf_form_data_id' => $jaf_data->id,
                              'item_number' => $jaf_data->check_item_number,
                              'activity_type'=> 'jaf-insuff',
                              'status'=>'failed',
                              'notes' => 'BGV Failed',
                              'created_by'   => Auth::user()->id,
                              'attachment'  => $zipname!=""?$zipname:NULL, 
                              'created_at'   => date('Y-m-d H:i:s'),
                            ];
                      
                            DB::table('insufficiency_logs')->insert($insuff_log_data);

                            $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'raised'])->first();

                              if($ver_insuff!=NULL)
                              {
                                  $ver_insuff_data=[
                                    'notes' => 'BGV Failed',
                                    'updated_by' => Auth::user()->id,
                                    'updated_at' => date('Y-m-d H:i:s')
                                  ];

                                  DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'raised'])->update($ver_insuff_data);

                                  $ver_id=$ver_insuff->id;
                              }
                              else
                              {
                                $ver_insuff_data=[
                                  'parent_id' => $parent_id,
                                  'business_id' => $business_id,
                                  'coc_id' => $jaf_data->business_id,
                                  'candidate_id' => $candidate_id,
                                  'service_id'  => $service_id,
                                  'jaf_form_data_id' => $jaf_data->id,
                                  'item_number' => $jaf_data->check_item_number,
                                  'activity_type'=> 'jaf-insuff',
                                  'status'=>'raised',
                                  'notes' => 'BGV Failed',
                                  'created_by'   => Auth::user()->id,
                                  'created_at'   => date('Y-m-d H:i:s'),
                                ];
                          
                                $ver_id = DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);
                              }

                            
                        }

                        
                        
                    }

                    if($is_updated){  
                      //generate report here 
                      // $this->generateCandidateReport($candidate_id);
                      DB::commit();
                      return response()->json([
                      'fail' => false,
                      'status'=>'ok',
                      'message' => 'updated',                
                      ], 200);
                    }
                    else{
                        DB::commit();
                        return response()->json([
                          'fail' => true,
                        'status' =>'no',
                        ], 200);
                    }
        
            }
            // ./service

            // service start
            else if($service_id == 4){

              $jaf_voterid = DB::table('jaf_form_data')->select('id','business_id','form_data','service_id','check_item_number')->where(['id'=>$item_id])->first();

                    $voterid_number = "";
                    // $business_id = $jaf_voterid->business_id; 
                    $jaf_array = json_decode($jaf_voterid->form_data, true);
                    // print_r($jaf_array);
                    foreach($jaf_array as $input){
                        if(array_key_exists('Voter ID Number',$input)){
                          $voterid_number = $input['Voter ID Number'];
                        }
                    }
                    $s3_config = NULL;
                    $c_file_platform = 'web';
                    $attach_on_select=[];
                    $allowedextension=['jpg','jpeg','png','svg','pdf'];
                    $zipname="";
                    if($request->hasFile('attachment') && $request->file('attachment') !="")
                    {
                        $filePath = public_path('/uploads/clear-insuff/'); 
                        $files= $request->file('attachment');
                        foreach($files as $file)
                        {
                                $extension = $file->getClientOriginalExtension();

                                $check = in_array($extension,$allowedextension);

                                $file_size = number_format(File::size($file) / 1048576, 2);

                                if(!$check)
                                {
                                    return response()->json([
                                      'fail' => true,
                                      'errors' => ['attachment' => 'Only jpg,jpeg,png,pdf are allowed !'],
                                      'error_type'=>'validation'
                                    ]);                        
                                }

                                if($file_size > 10)
                                {
                                    return response()->json([
                                      'fail' => true,
                                      'error_type'=>'validation',
                                      'errors' => ['attachment' => 'The document size must be less than only 10mb Upload !'],
                                    ]);                        
                                }
                        }

                        $zipname = 'clear-insuff-'.date('Ymdhis').'.zip';
                        $zip = new \ZipArchive();      
                        $zip->open(public_path().'/uploads/clear-insuff/'.$zipname, \ZipArchive::CREATE | \ZipArchive::OVERWRITE);

                        foreach($files as $file)
                        {
                            $file_data = $file->getClientOriginalName();
                            $tmp_data  = $candidate_id.'-'.date('mdYHis').'-'.$file_data; 
                            $data = $file->move($filePath, $tmp_data);       
                            $attach_on_select[]=$tmp_data;

                            $path=public_path()."/uploads/clear-insuff/".$tmp_data;
                            $zip->addFile($path, '/clear-insuff/'.basename($path));  
                        }

                        $zip->close();
                    }
                    
                    $s3_config = S3ConfigTrait::s3Config();

                    $path=public_path().'/uploads/clear-insuff/';

                    if($s3_config!=NULL && $zipname!='')
                    {
                      if(File::exists($path.$zipname))
                      {
                          $c_file_platform = 's3';

                          $s3filePath = 'uploads/clear-insuff/';
          
                          if(!Storage::disk('s3')->exists($s3filePath))
                          {
                              Storage::disk('s3')->makeDirectory($s3filePath,0777, true, true);
                          }
          
                          $file = Helper::createFileObject($path.$zipname);
          
                          Storage::disk('s3')->put($s3filePath.$zipname,file_get_contents($file));

                          File::delete($path.$zipname);
                      }

                    }

                    if(File::exists($path.'tmp-files/'))
                    {
                        File::cleanDirectory($path.'tmp-files/');
                    }

                    //check first into master table
                    $master_data = DB::table('voter_id_check_masters')->select('*')->where(['voter_id_number'=>$voterid_number])->first();
                    if($master_data !=null){
                        $data = $master_data;
                        // update the status
                        DB::table('jaf_form_data')->where(['id'=>$item_id])
                        ->update(['is_api_checked'=>'1','is_api_verified'=>'1','verification_status'=>'success','verified_at'=>date('Y-m-d H:i:s'),'is_insufficiency'=>'0','clear_insuff_notes'=>$request->comment,'clear_insuff_attachment' => $zipname!=NULL?$zipname:NULL,'clear_insuff_attachment_file_platform'=>$c_file_platform,'is_all_insuff_cleared' => 1,'insuff_cleared_by'=>Auth::user()->id,'updated_at'=>date('Y-m-d H:i:s')]); 
                        $is_updated=TRUE;
                        // return response()->json([
                        //     'fail'      =>false,
                        //     'data'      =>$master_data 
                        // ]);

                        $log_data = [
                          'parent_id'         =>$parent_id,
                          'api_client_id'     =>$master_data->api_client_id,
                          'relation_type'     =>$master_data->relation_type,
                          'voter_id_number'   =>$master_data->voter_id_number,
                          'relation_name'     =>$master_data->relation_name,
                          'full_name'         =>$master_data->full_name,
                          'gender'            =>$master_data->gender,
                          'age'               =>$master_data->age,
                          'dob'               =>$master_data->dob,
                          'house_no'          =>$master_data->house_no,
                          'area'              =>$master_data->area,
                          'state'             =>$master_data->state,
                          'is_verified'       =>'1',
                          'is_voter_id_exist' =>'1',
                          'business_id'       =>$business_id,
                          'candidate_id' => $candidate_id,
                          'service_id'        =>$service_id,
                          'source_reference'  =>'SystemDb',
                          'price'             =>$checkprice_db!=NULL?$checkprice_db->price:$price,
                          'used_by'           =>'customer',
                          'user_id'            => $user_id,
                          'created_at'        =>date('Y-m-d H:i:s')
                          ];
      
                      DB::table('voter_id_checks')->insert($log_data);

                      $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->first();

                        if($ver_insuff!=NULL)
                        {
                            $ver_insuff_data=[
                              'notes' => $request->comment,
                              'updated_by' => Auth::user()->id,
                              'attachment'  => $zipname!=""?$zipname:NULL, 
                              'attachment_file_platform' => $c_file_platform,
                              'updated_at' => date('Y-m-d H:i:s')
                            ];

                            DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->update($ver_insuff_data);

                            $ver_id=$ver_insuff->id;
                        }
                        else
                        {
                          $ver_insuff_data=[
                            'parent_id' => $parent_id,
                            'business_id' => $business_id,
                            'coc_id' => $jaf_voterid->business_id,
                            'candidate_id' => $candidate_id,
                            'service_id'  => $jaf_voterid->service_id,
                            'jaf_form_data_id' => $jaf_voterid->id,
                            'item_number' => $jaf_voterid->check_item_number,
                            'activity_type'=> 'jaf-insuff',
                            'status'=>'removed',
                            'notes' => $request->comment,
                            'attachment' => $zipname!=NULL?$zipname:NULL,
                            'attachment_file_platform' => $c_file_platform,
                            'created_by'   => Auth::user()->id,
                            'created_at'   => date('Y-m-d H:i:s'),
                            'updated_at' => date('Y-m-d H:i:s')
                          ];
                    
                          $ver_id=DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);
                        }

                        $insuff_log_data=[
                          'parent_id' => $parent_id,
                          'business_id' => $business_id,
                          'coc_id' => $jaf_voterid->business_id,
                          'candidate_id' => $candidate_id,
                          'service_id'  => $service_id,
                          'jaf_form_data_id' => $jaf_voterid->id,
                          'item_number' => $jaf_voterid->check_item_number,
                          'activity_type'=> 'jaf-insuff',
                          'status'=>'removed',
                          'notes' => $request->comment,
                          'created_by'   => Auth::user()->id,
                          'attachment'  => $zipname!=""?$zipname:NULL, 
                          'attachment_file_platform' => $c_file_platform,
                          'created_at'   => date('Y-m-d H:i:s'),
                        ];
                  
                        DB::table('insufficiency_logs')->insert($insuff_log_data);


                        if(count($attach_on_select)>0)
                        {
                            $file_data=DB::table('insufficiency_attachments')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->get();

                            if(count($file_data)>0)
                            {
                                $path=public_path().'/uploads/clear-insuff/';
                                foreach($file_data as $file)
                                {
                                    if(File::exists($path.$file->file_name))
                                    {
                                        File::delete($path.$file->file_name);
                                    }
                                }

                                DB::table('insufficiency_attachments')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->delete();

                            }
                            $i=0;
                            $file_platform = 'web';
                            if($s3_config!=NULL)
                            {
                                $s3filePath = 'uploads/clear-insuff/';
            
                                if(!Storage::disk('s3')->exists($s3filePath))
                                {
                                    Storage::disk('s3')->makeDirectory($s3filePath,0777, true, true);
                                }

                                foreach($attach_on_select as $item)
                                {
                                  $file_platform = 'web';
                                  $path=public_path().'/uploads/clear-insuff/';

                                  if(File::exists($path.$attach_on_select[$i]))
                                  {
                                    $file_platform = 's3';
                                    $file = Helper::createFileObject($path.$attach_on_select[$i]);

                                    Storage::disk('s3')->put($s3filePath.$attach_on_select[$i],file_get_contents($file));

                                    File::delete($path.$attach_on_select[$i]);
                                  }

                                  $insuff_file=[
                                    'parent_id' => $parent_id,
                                    'business_id' => $business_id,
                                    'coc_id' => $jaf_voterid->business_id,
                                    'candidate_id' => $candidate_id,
                                    'service_id'  => $service_id,
                                    'jaf_form_data_id' => $jaf_voterid->id,
                                    'item_number' => $jaf_voterid->check_item_number,
                                    'status'=>'removed',
                                    'file_name' => $attach_on_select[$i],
                                    'file_platform' => $file_platform,
                                    'created_by'   => Auth::user()->id,
                                    'created_at'   => date('Y-m-d H:i:s'),
                                    'updated_at' => date('Y-m-d H:i:s')
                                  ];
                            
                                  $file_id = DB::table('insufficiency_attachments')->insertGetId($insuff_file);
    
                                  $i++;

                                  if(File::exists($path.'tmp-files/'))
                                  {
                                      File::cleanDirectory($path.'tmp-files/');
                                  }
                                }

                            }
                            else
                            {
                              foreach($attach_on_select as $item)
                              {
                                $insuff_file=[
                                  'parent_id' => $parent_id,
                                  'business_id' => $business_id,
                                  'coc_id' => $jaf_voterid->business_id,
                                  'candidate_id' => $candidate_id,
                                  'service_id'  => $service_id,
                                  'jaf_form_data_id' => $jaf_voterid->id,
                                  'item_number' => $jaf_voterid->check_item_number,
                                  'status'=>'removed',
                                  'file_name' => $attach_on_select[$i],
                                  'file_platform' => $file_platform,
                                  'created_by'   => Auth::user()->id,
                                  'created_at'   => date('Y-m-d H:i:s'),
                                  'updated_at' => date('Y-m-d H:i:s')
                                ];
                          
                                $file_id = DB::table('insufficiency_attachments')->insertGetId($insuff_file);
  
                                $i++;
                              }
                            }
                        }

                        $ver_insuff=DB::table('verification_insufficiency')->where(['id'=>$ver_id])->first();

                        $candidates=DB::table('users as u')
                            ->select('u.*','j.business_id as coc_id','j.id as jaf_id','v.created_at as insuff_clear_date','v.created_by as insuff_clear_by','v.item_number','v.notes','s.verification_type','s.name as service_name','v.business_id as cust_id','v.attachment','v.updated_at','v.updated_by')
                            ->join('jaf_form_data as j','u.id','=','j.candidate_id')
                            ->join('verification_insufficiency as v','v.jaf_form_data_id','=','j.id')
                            ->join('services as s','s.id','=','v.service_id')
                            ->where(['u.user_type'=>'candidate','j.id'=>$item_id,'v.status'=>'removed','v.id'=>$ver_insuff->id])
                            ->first();

                        if($candidates!=NULL)
                        {
                          // $client=DB::table('users')->where(['id'=>$candidates->coc_id])->first();
                          // $name = $client->name;
                          // $email = $client->email;
                          // $msg= "Insufficiency Cleared For Candidate";
                          // $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                          // if($candidates->attachment!=NULL)
                          // {
                          //   $url = url('/').'/uploads/clear-insuff/'.$zipname;

                          //   if($s3_config!=NULL)
                          //   {
                          //     $filePath = 'uploads/clear-insuff/';

                          //     $disk = Storage::disk('s3');

                          //     $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                          //         'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                          //         'Key'                        => $filePath.$zipname,
                          //         'ResponseContentDisposition' => 'attachment;'//for download
                          //     ]);

                          //     $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');

                          //     $url = (string)$req->getUri();
                          //   }

                          //   $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>$url,'candidate'=>$candidates,'sender'=>$sender);
                          // }
                          // else
                          //   $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);
          
                          // Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email,$name) {
                          //   $message->to($email, $name)->subject
                          //       ('Clobminds Pvt Ltd - Insufficiency Notification');
                          //   $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                          // });

                          $kams = DB::table('key_account_managers')->where(['business_id'=>$candidates->business_id])->get();
                          if(count($kams)>0)
                          {
                            foreach($kams as $kam)
                            {
                                $user_data=DB::table('users')->where(['id'=>$kam->user_id])->first();

                                $name1 = $user_data->name;
                                $email1 = $user_data->email;
                                $msg= "Insufficiency Cleared For Candidate";
                                $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                                if($candidates->attachment!=NULL)
                                {
                                  $url = url('/').'/uploads/clear-insuff/'.$zipname;
  
                                  if($s3_config!=NULL)
                                  {
                                    $filePath = 'uploads/clear-insuff/';
  
                                    $disk = Storage::disk('s3');
  
                                    $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                                        'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                                        'Key'                        => $filePath.$zipname,
                                        'ResponseContentDisposition' => 'attachment;'//for download
                                    ]);
  
                                    $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');
  
                                    $url = (string)$req->getUri();
                                  }
  
                                  $data  = array('name'=>$name1,'email'=>$email1,'msg'=>$msg,'link'=>$url,'candidate'=>$candidates,'sender'=>$sender);
                                }
                                else
                                  $data  = array('name'=>$name1,'email'=>$email1,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);

                                Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email1,$name1) {
                                    $message->to($email1, $name1)->subject
                                        ('Clobminds Pvt Ltd - Insufficiency Notification');
                                    $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                                });

                            }
                          }

                          $ver_insuff_data=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$candidates->jaf_id,'status'=>'removed'])->first();

                          if($ver_insuff_data!=NULL)
                          {
                              $user_data=DB::table('users')->where(['id'=>$ver_insuff_data->created_by])->first();
                              $name = $user_data->name;
                              $email = $user_data->email;
                              $msg= "Insufficiency Cleared For Candidate";
                              $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();

                              if($candidates->attachment!=NULL)
                              {
                                $url = url('/').'/uploads/clear-insuff/'.$zipname;

                                if($s3_config!=NULL)
                                {
                                  $filePath = 'uploads/clear-insuff/';

                                  $disk = Storage::disk('s3');

                                  $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                                      'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                                      'Key'                        => $filePath.$zipname,
                                      'ResponseContentDisposition' => 'attachment;'//for download
                                  ]);

                                  $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');

                                  $url = (string)$req->getUri();
                                }

                                $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>$url,'candidate'=>$candidates,'sender'=>$sender);
                              }
                              else
                                $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);
                              Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email,$name) {
                                $message->to($email, $name)->subject
                                    ('Clobminds Pvt Ltd - Insufficiency Notification');
                                $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                              }); 
                          }

                        }
                    }
                    else{
                        //check from live API
                        // Setup request to send json via POST
                        $data = array(
                            'id_number'    => $voterid_number,
                            'async'         => true,
                        );
                        $payload = json_encode($data);
                        $apiURL = "https://kyc-api.aadhaarkyc.io/api/v1/voter-id/voter-id";
        
                        $ch = curl_init();
                        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);                
                        curl_setopt ( $ch, CURLOPT_POST, 1 );
                        $authorization = "Authorization: Bearer ".env('SUREPASS_PRODUCTION_TOKEN');
                        //$authorization = "Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTY3NTQxMTcwMywianRpIjoiMTA5ZDNkNWMtOTE4NC00MTJkLTg3YTMtYzhiNmYzZWQyYjQ3IiwidHlwZSI6ImFjY2VzcyIsImlkZW50aXR5IjoiZGV2LnRlY2hzYWdhQHN1cmVwYXNzLmlvIiwibmJmIjoxNjc1NDExNzAzLCJleHAiOjE5OTA3NzE3MDMsInVzZXJfY2xhaW1zIjp7InNjb3BlcyI6WyJ1c2VyIl19fQ.r4XeIMOFEdnb52_xCspvLyiu6ciS5wx4YeIMv8ZyHKI"; // Prepare the authorisation token
                        curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json' , $authorization )); // Inject the token into the header
                        curl_setopt($ch, CURLOPT_URL, $apiURL);
                        // Attach encoded JSON string to the POST fields
                        curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);
                        $resp = curl_exec ( $ch );
                        curl_close ( $ch );
                        $array_data =  json_decode($resp,true);
                        // print_r($array_data); die;
        
                        if($array_data['success'])
                        {
                            //check if ID number is new then insert into DB
                            $checkIDInDB= DB::table('voter_id_check_masters')->where(['voter_id_number'=>$voterid_number])->count();
                            if($checkIDInDB ==0)
                            {
                                $gender = 'Male';
                                if($array_data['data']['gender'] == 'F'){
                                    $gender = 'Female';
                                }
                                //
                                $relation_type = NULL;
                                if($array_data['data']['relation_type'] == 'M'){
                                    $relation_type = 'Mother';
                                }
                                if($array_data['data']['relation_type'] == 'F'){
                                    $relation_type = 'Father';
                                }
                                if($array_data['data']['relation_type'] == 'W'){
                                    $relation_type = 'Wife';
                                }
                                if($array_data['data']['relation_type'] == 'H'){
                                    $relation_type = 'Husband';
                                }
        
                                $data = [
                                          'api_client_id'     =>$array_data['data']['client_id'],
                                          'relation_type'     =>$relation_type,
                                          'voter_id_number'   =>$array_data['data']['epic_no'],
                                          'relation_name'     =>$array_data['data']['relation_name'],
                                          'full_name'         =>$array_data['data']['name'],
                                          'gender'            =>$gender,
                                          'age'               =>$array_data['data']['age'],
                                          'dob'               =>$array_data['data']['dob'],
                                          'house_no'          =>$array_data['data']['house_no'],
                                          'area'              =>$array_data['data']['area'],
                                          'state'             =>$array_data['data']['state'],
                                          'is_api_verified'   =>'1',
                                          'is_voter_id_exist' =>'1',
                                          'created_at'        =>date('Y-m-d H:i:s')
                                ];
                                
                                DB::table('voter_id_check_masters')->insert($data);
                                
                                $master_data = DB::table('voter_id_check_masters')->select('*')->where(['voter_id_number'=>$voterid_number])->first();

                                //store log
                                  $log_data = [
                                            'parent_id'         =>$parent_id,
                                            'api_client_id'     =>$array_data['data']['client_id'],
                                            'relation_type'     =>$relation_type,
                                            'voter_id_number'   =>$array_data['data']['epic_no'],
                                            'relation_name'     =>$array_data['data']['relation_name'],
                                            'full_name'         =>$array_data['data']['name'],
                                            'gender'            =>$gender,
                                            'age'               =>$array_data['data']['age'],
                                            'dob'               =>$array_data['data']['dob'],
                                            'house_no'          =>$array_data['data']['house_no'],
                                            'area'              =>$array_data['data']['area'],
                                            'state'             =>$array_data['data']['state'],
                                            'is_verified'       =>'1',
                                            'is_voter_id_exist' =>'1',
                                            'price'             =>$checkprice_db!=NULL?$checkprice_db->price:$price,
                                            'business_id'       =>$business_id,
                                            'candidate_id' => $candidate_id,
                                            'service_id'        =>$service_id,
                                            'source_reference'  =>'API',
                                            'used_by'           =>'customer',
                                            'user_id'            => $user_id,
                                            'created_at'        =>date('Y-m-d H:i:s')
                                  ];

                                DB::table('voter_id_checks')->insert($log_data);
                            }
        
                            // update the status
                            // DB::table('jaf_form_data')->where(['id'=>$item_id])->update(['is_api_checked'=>'1','is_api_verified'=>'1','verification_status'=>'success','verified_at'=>date('Y-m-d H:i:s')]); 
                            DB::table('jaf_form_data')->where(['id'=>$item_id])
                            ->update(['is_api_checked'=>'1','is_api_verified'=>'1','verification_status'=>'success','verified_at'=>date('Y-m-d H:i:s'),'is_insufficiency'=>'0','clear_insuff_notes'=>$request->comment,'clear_insuff_attachment' => $zipname!=NULL?$zipname:NULL,'clear_insuff_attachment_file_platform'=>$c_file_platform,'is_all_insuff_cleared' => 1,'insuff_cleared_by'=>Auth::user()->id,'updated_at'=>date('Y-m-d H:i:s')]); 
                            $is_updated=TRUE;

                            $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->first();

                            if($ver_insuff!=NULL)
                            {
                                $ver_insuff_data=[
                                  'notes' => $request->comment,
                                  'updated_by' => Auth::user()->id,
                                  'attachment'  => $zipname!=""?$zipname:NULL, 
                                  'attachment_file_platform' => $c_file_platform,
                                  'updated_at' => date('Y-m-d H:i:s')
                                ];

                                DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->update($ver_insuff_data);

                                $ver_id=$ver_insuff->id;
                            }
                            else
                            {
                              $ver_insuff_data=[
                                'parent_id' => $parent_id,
                                'business_id' => $business_id,
                                'coc_id' => $jaf_voterid->business_id,
                                'candidate_id' => $candidate_id,
                                'service_id'  => $jaf_voterid->service_id,
                                'jaf_form_data_id' => $jaf_voterid->id,
                                'item_number' => $jaf_voterid->check_item_number,
                                'activity_type'=> 'jaf-insuff',
                                'status'=>'removed',
                                'notes' => $request->comment,
                                'attachment' => $zipname!=NULL?$zipname:NULL,
                                'attachment_file_platform' => $c_file_platform,
                                'created_by'   => Auth::user()->id,
                                'created_at'   => date('Y-m-d H:i:s'),
                                'updated_at' => date('Y-m-d H:i:s')
                              ];
                        
                              $ver_id=DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);
                            }

                            $insuff_log_data=[
                              'parent_id' => $parent_id,
                              'business_id' => $business_id,
                              'coc_id' => $jaf_voterid->business_id,
                              'candidate_id' => $candidate_id,
                              'service_id'  => $service_id,
                              'jaf_form_data_id' => $jaf_voterid->id,
                              'item_number' => $jaf_voterid->check_item_number,
                              'activity_type'=> 'jaf-insuff',
                              'status'=>'removed',
                              'notes' => $request->comment,
                              'created_by'   => Auth::user()->id,
                              'attachment'  => $zipname!=""?$zipname:NULL,
                              'attachment_file_platform' => $c_file_platform, 
                              'created_at'   => date('Y-m-d H:i:s'),
                            ];
                      
                            DB::table('insufficiency_logs')->insert($insuff_log_data);

                            if(count($attach_on_select)>0)
                            {
                                $file_data=DB::table('insufficiency_attachments')->where(['jaf_form_data_id'=>$item_id])->get();

                                if(count($file_data)>0)
                                {
                                    $path=public_path().'/uploads/clear-insuff/';
                                    foreach($file_data as $file)
                                    {
                                        if(File::exists($path.$file->file_name))
                                        {
                                            File::delete($path.$file->file_name);
                                        }
                                    }

                                    DB::table('insufficiency_attachments')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->delete();

                                }

                                $file_platform = 'web';
                                $i=0;
                                if($s3_config!=NULL)
                                {
                                   $s3filePath = 'uploads/clear-insuff/';

                                    if(!Storage::disk('s3')->exists($s3filePath))
                                    {
                                        Storage::disk('s3')->makeDirectory($s3filePath,0777, true, true);
                                    }

                                    foreach($attach_on_select as $item)
                                    {
                                       $file_platform = 'web';
                                       $path=public_path().'/uploads/clear-insuff/';

                                      if(File::exists($path.$attach_on_select[$i]))
                                      {
                                        $file_platform = 's3';

                                        $file = Helper::createFileObject($path.$attach_on_select[$i]);

                                        Storage::disk('s3')->put($s3filePath.$attach_on_select[$i],file_get_contents($file));

                                        File::delete($path.$attach_on_select[$i]);
                                      }

                                      $insuff_file=[
                                        'parent_id' => $parent_id,
                                        'business_id' => $business_id,
                                        'coc_id' => $jaf_voterid->business_id,
                                        'candidate_id' => $candidate_id,
                                        'service_id'  => $service_id,
                                        'jaf_form_data_id' => $jaf_voterid->id,
                                        'item_number' => $jaf_voterid->check_item_number,
                                        'status'=>'removed',
                                        'file_name' => $attach_on_select[$i],
                                        'file_platform' => $file_platform,
                                        'created_by'   => Auth::user()->id,
                                        'created_at'   => date('Y-m-d H:i:s'),
                                        'updated_at' => date('Y-m-d H:i:s')
                                      ];
                                
                                      $file_id = DB::table('insufficiency_attachments')->insertGetId($insuff_file);

                                      $i++;

                                      if(File::exists($path.'tmp-files/'))
                                      {
                                        File::cleanDirectory($path.'tmp-files/');
                                      }
                                    }
                                }
                                else{
                                  foreach($attach_on_select as $item)
                                  {
                                    $insuff_file=[
                                      'parent_id' => $parent_id,
                                      'business_id' => $business_id,
                                      'coc_id' => $jaf_voterid->business_id,
                                      'candidate_id' => $candidate_id,
                                      'service_id'  => $service_id,
                                      'jaf_form_data_id' => $jaf_voterid->id,
                                      'item_number' => $jaf_voterid->check_item_number,
                                      'status'=>'removed',
                                      'file_name' => $attach_on_select[$i],
                                      'file_platform' => $file_platform,
                                      'created_by'   => Auth::user()->id,
                                      'created_at'   => date('Y-m-d H:i:s'),
                                      'updated_at' => date('Y-m-d H:i:s')
                                    ];
                              
                                    $file_id = DB::table('insufficiency_attachments')->insertGetId($insuff_file);

                                    $i++;
                                  }
                                }
                                
                            }

                            $ver_insuff=DB::table('verification_insufficiency')->where(['id'=>$ver_id])->first();

                            $candidates=DB::table('users as u')
                                ->select('u.*','j.business_id as coc_id','j.id as jaf_id','v.created_at as insuff_clear_date','v.created_by as insuff_clear_by','v.item_number','v.notes','s.verification_type','s.name as service_name','v.business_id as cust_id','v.attachment','v.updated_at','v.updated_by')
                                ->join('jaf_form_data as j','u.id','=','j.candidate_id')
                                ->join('verification_insufficiency as v','v.jaf_form_data_id','=','j.id')
                                ->join('services as s','s.id','=','v.service_id')
                                ->where(['u.user_type'=>'candidate','j.id'=>$item_id,'v.status'=>'removed','v.id'=>$ver_insuff->id])
                                ->first();

                            if($candidates!=NULL)
                            {
                              // $client=DB::table('users')->where(['id'=>$candidates->coc_id])->first();
                              // $name = $client->name;
                              // $email = $client->email;
                              // $msg= "Insufficiency Cleared For Candidate";
                              // $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                              // if($candidates->attachment!=NULL)
                              // {
                              //   $url = url('/').'/uploads/clear-insuff/'.$zipname;

                              //   if($s3_config!=NULL)
                              //   {
                              //     $filePath = 'uploads/clear-insuff/';

                              //     $disk = Storage::disk('s3');

                              //     $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                              //         'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                              //         'Key'                        => $filePath.$zipname,
                              //         'ResponseContentDisposition' => 'attachment;'//for download
                              //     ]);

                              //     $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');

                              //     $url = (string)$req->getUri();
                              //   }

                              //   $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>$url,'candidate'=>$candidates,'sender'=>$sender);
                              // }
                              // else
                              //   $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);
              
                              // Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email,$name) {
                              //   $message->to($email, $name)->subject
                              //       ('Clobminds Pvt Ltd - Insufficiency Notification');
                              //   $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                              // });

                              $kams = DB::table('key_account_managers')->where(['business_id'=>$candidates->business_id])->get();
                              if(count($kams)>0)
                              {
                                foreach($kams as $kam)
                                {
                                    $user_data=DB::table('users')->where(['id'=>$kam->user_id])->first();

                                    $name1 = $user_data->name;
                                    $email1 = $user_data->email;
                                    $msg= "Insufficiency Cleared For Candidate";
                                    $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();

                                    if($candidates->attachment!=NULL)
                                    {
                                      $url = url('/').'/uploads/clear-insuff/'.$zipname;

                                      if($s3_config!=NULL)
                                      {
                                        $filePath = 'uploads/clear-insuff/';

                                        $disk = Storage::disk('s3');

                                        $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                                            'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                                            'Key'                        => $filePath.$zipname,
                                            'ResponseContentDisposition' => 'attachment;'//for download
                                        ]);

                                        $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');

                                        $url = (string)$req->getUri();
                                      }

                                      $data  = array('name'=>$name1,'email'=>$email1,'msg'=>$msg,'link'=>$url,'candidate'=>$candidates,'sender'=>$sender);
                                    }
                                    else
                                      $data  = array('name'=>$name1,'email'=>$email1,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);

                                    Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email1,$name1) {
                                        $message->to($email1, $name1)->subject
                                            ('Clobminds Pvt Ltd - Insufficiency Notification');
                                        $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                                    });

                                }
                              }

                              $ver_insuff_data=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$candidates->jaf_id,'status'=>'removed'])->first();

                              if($ver_insuff_data!=NULL)
                              {
                                  $user_data=DB::table('users')->where(['id'=>$ver_insuff_data->created_by])->first();
                                  $name = $user_data->name;
                                  $email = $user_data->email;
                                  $msg= "Insufficiency Cleared For Candidate";
                                  $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();

                                  if($candidates->attachment!=NULL)
                                  {
                                    $url = url('/').'/uploads/clear-insuff/'.$zipname;

                                    if($s3_config!=NULL)
                                    {
                                      $filePath = 'uploads/clear-insuff/';

                                      $disk = Storage::disk('s3');

                                      $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                                          'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                                          'Key'                        => $filePath.$zipname,
                                          'ResponseContentDisposition' => 'attachment;'//for download
                                      ]);

                                      $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');

                                      $url = (string)$req->getUri();
                                    }

                                    $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>$url,'candidate'=>$candidates,'sender'=>$sender);
                                  }
                                  else
                                    $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);
                                  Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email,$name) {
                                    $message->to($email, $name)->subject
                                        ('Clobminds Pvt Ltd - Insufficiency Notification');
                                    $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                                  }); 
                              }

                            }
                            
                        }else{
                            //update insuff
                            DB::table('jaf_form_data')->where(['id'=>$item_id])->update(['is_api_checked'=>'1','is_api_verified'=>'0','is_insufficiency'=>'1','verification_status'=>'failed','verified_at'=>date('Y-m-d H:i:s')]);    

                            $jaf_data=DB::table('jaf_form_data')->where(['id'=>$item_id])->first();

                            $insuff_log_data=[
                              'parent_id' => $parent_id,
                              'business_id' => $business_id,
                              'coc_id' => $jaf_data->business_id,
                              'candidate_id' => $candidate_id,
                              'service_id'  => $service_id,
                              'jaf_form_data_id' => $jaf_data->id,
                              'item_number' => $jaf_data->check_item_number,
                              'activity_type'=> 'jaf-insuff',
                              'status'=>'failed',
                              'notes' => 'BGV Failed',
                              'created_by'   => Auth::user()->id,
                              'attachment'  => $zipname!=""?$zipname:NULL,
                              'attachment_file_platform' => $c_file_platform, 
                              'created_at'   => date('Y-m-d H:i:s'),
                            ];
                      
                            DB::table('insufficiency_logs')->insert($insuff_log_data);

                            $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'raised'])->first();

                              if($ver_insuff!=NULL)
                              {
                                  $ver_insuff_data=[
                                    'notes' => 'BGV Failed',
                                    'updated_by' => Auth::user()->id,
                                    'updated_at' => date('Y-m-d H:i:s')
                                  ];

                                  DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'raised'])->update($ver_insuff_data);

                                  $ver_id=$ver_insuff->id;
                              }
                              else
                              {
                                $ver_insuff_data=[
                                  'parent_id' => $parent_id,
                                  'business_id' => $business_id,
                                  'coc_id' => $jaf_data->business_id,
                                  'candidate_id' => $candidate_id,
                                  'service_id'  => $service_id,
                                  'jaf_form_data_id' => $jaf_data->id,
                                  'item_number' => $jaf_data->check_item_number,
                                  'activity_type'=> 'jaf-insuff',
                                  'status'=>'raised',
                                  'notes' => 'BGV Failed',
                                  'created_by'   => Auth::user()->id,
                                  'created_at'   => date('Y-m-d H:i:s'),
                                ];
                          
                                $ver_id = DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);
                              }
          
                        }

                        
                    
                    }

                    if($is_updated){  
                      //generate report here 
                      // $this->generateCandidateReport($candidate_id);
                      DB::commit();
                      return response()->json([
                      'fail' => false,
                      'status'=>'ok',
                      'message' => 'updated',                
                      ], 200);
                    }
                    else{
                        DB::commit();
                        return response()->json([
                        'fail' => true,
                        'status' =>'no',
                        ], 200);
                    }
            }
            // ./service
            else if($service_id == 7){

              $jaf_rc = DB::table('jaf_form_data')->select('id','business_id','form_data','service_id','check_item_number')->where(['id'=>$item_id])->first();

                  $rc_number = "";
                  // $business_id = $jaf_rc->business_id; 
                  $jaf_array = json_decode($jaf_rc->form_data, true);
                  // print_r($jaf_array);
                  foreach($jaf_array as $input){
                      if(array_key_exists('RC Number',$input)){
                        $rc_number = $input['RC Number'];
                      }
                  }
                  $s3_config = NULL;
                  $c_file_platform  = 'web';
                  $attach_on_select=[];
                  $allowedextension=['jpg','jpeg','png','svg','pdf'];
                  $zipname="";
                  if($request->hasFile('attachment') && $request->file('attachment') !="")
                  {
                      $filePath = public_path('/uploads/clear-insuff/'); 
                      $files= $request->file('attachment');
                      foreach($files as $file)
                      {
                              $extension = $file->getClientOriginalExtension();

                              $check = in_array($extension,$allowedextension);

                              $file_size = number_format(File::size($file) / 1048576, 2);
 
                              if(!$check)
                              {
                                  return response()->json([
                                    'fail' => true,
                                    'errors' => ['attachment' => 'Only jpg,jpeg,png,pdf are allowed !'],
                                    'error_type'=>'validation'
                                  ]);                        
                              }

                              if($file_size > 10)
                              {
                                  return response()->json([
                                    'fail' => true,
                                    'error_type'=>'validation',
                                    'errors' => ['attachment' => 'The document size must be less than only 10mb Upload !'],
                                  ]);                        
                              }
                      }

                      $zipname = 'clear-insuff-'.date('Ymdhis').'.zip';
                      $zip = new \ZipArchive();      
                      $zip->open(public_path().'/uploads/clear-insuff/'.$zipname, \ZipArchive::CREATE | \ZipArchive::OVERWRITE);

                      foreach($files as $file)
                      {
                          $file_data = $file->getClientOriginalName();
                          $tmp_data  = $candidate_id.'-'.date('mdYHis').'-'.$file_data; 
                          $data = $file->move($filePath, $tmp_data);       
                          $attach_on_select[]=$tmp_data;

                          $path=public_path()."/uploads/clear-insuff/".$tmp_data;
                          $zip->addFile($path, '/clear-insuff/'.basename($path));  
                      }

                      $zip->close();
                  }

                  $s3_config = S3ConfigTrait::s3Config();

                  $path=public_path().'/uploads/clear-insuff/';

                  if($s3_config!=NULL && $zipname!='')
                  {
                    if(File::exists($path.$zipname))
                    {
                        $c_file_platform = 's3';

                        $s3filePath = 'uploads/clear-insuff/';
        
                        if(!Storage::disk('s3')->exists($s3filePath))
                        {
                            Storage::disk('s3')->makeDirectory($s3filePath,0777, true, true);
                        }
        
                        $file = Helper::createFileObject($path.$zipname);
        
                        Storage::disk('s3')->put($s3filePath.$zipname,file_get_contents($file));

                        File::delete($path.$zipname);
                    }

                  }

                  if(File::exists($path.'tmp-files/'))
                  {
                      File::cleanDirectory($path.'tmp-files/');
                  }
              
                  //check first into master table
                  $master_data = DB::table('rc_check_masters')->select('*')->where(['rc_number'=>$rc_number])->first();
                  if($master_data !=null){
                      // update the status
                      DB::table('jaf_form_data')->where(['id'=>$item_id])
                      ->update(['is_api_checked'=>'1','is_api_verified'=>'1','verification_status'=>'success','verified_at'=>date('Y-m-d H:i:s'),'is_insufficiency'=>'0','clear_insuff_notes'=>$request->comment,'clear_insuff_attachment' => $zipname!=NULL?$zipname:NULL,'clear_insuff_attachment_file_platform'=>$c_file_platform,'is_all_insuff_cleared' => 1,'insuff_cleared_by'=>Auth::user()->id,'updated_at'=>date('Y-m-d H:i:s')]); 
                      $is_updated=TRUE;
                      $data = $master_data;

                      $log_data = [
                        'parent_id'         =>$parent_id,
                        'business_id'       => $business_id,
                        'candidate_id' => $candidate_id,
                        'service_id'        =>$service_id,
                        'source_type'       => 'SystemDb',
                        'api_client_id'     =>$master_data->api_client_id,
                        'rc_number'         =>$master_data->rc_number,
                        'registration_date' =>$master_data->registration_date,
                        'owner_name'        =>$master_data->owner_name,
                        'present_address'   =>$master_data->present_address,
                        'permanent_address'    =>$master_data->permanent_address,
                        'mobile_number'        =>$master_data->mobile_number,
                        'vehicle_category'     =>$master_data->vehicle_category,
                        'vehicle_chasis_number' =>$master_data->vehicle_chasis_number,
                        'vehicle_engine_number' =>$master_data->vehicle_engine_number,
                        'maker_description'     =>$master_data->maker_description,
                        'maker_model'           =>$master_data->maker_model,
                        'body_type'             =>$master_data->body_type,
                        'fuel_type'             =>$master_data->fuel_type,
                        'color'                 =>$master_data->color,
                        'norms_type'            =>$master_data->norms_type,
                        'fit_up_to'             =>$master_data->fit_up_to,
                        'financer'              =>$master_data->financer,
                        'insurance_company'     =>$master_data->insurance_company,
                        'insurance_policy_number'=>$master_data->insurance_policy_number,
                        'insurance_upto'         =>$master_data->insurance_upto,
                        'manufacturing_date'     =>$master_data->manufacturing_date,
                        'registered_at'          =>$master_data->registered_at,
                        'latest_by'              =>$master_data->latest_by,
                        'less_info'              =>$master_data->less_info,
                        'tax_upto'               =>$master_data->tax_upto,
                        'cubic_capacity'         =>$master_data->cubic_capacity,
                        'vehicle_gross_weight'   =>$master_data->vehicle_gross_weight,
                        'no_cylinders'           =>$master_data->no_cylinders,
                        'seat_capacity'          =>$master_data->seat_capacity,
                        'sleeper_capacity'       =>$master_data->sleeper_capacity,
                        'standing_capacity'      =>$master_data->standing_capacity,
                        'wheelbase'              =>$master_data->wheelbase,
                        'unladen_weight'         =>$master_data->unladen_weight,
                        'vehicle_category_description'         =>$master_data->vehicle_category_description,
                        'pucc_number'               =>$master_data->pucc_number,
                        'pucc_upto'                 =>$master_data->pucc_upto,
                        'masked_name'           =>$master_data->masked_name,
                        'is_verified'           =>'1',
                        'is_rc_exist'           =>'1',
                        'price'             =>$checkprice_db!=NULL?$checkprice_db->price:$price,
                        'used_by'               =>'customer',
                        'user_id'            => $user_id,
                        'created_at'            =>date('Y-m-d H:i:s')
                        ];
    
                        DB::table('rc_checks')->insert($log_data);

                        $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->first();

                        if($ver_insuff!=NULL)
                        {
                            $ver_insuff_data=[
                              'notes' => $request->comment,
                              'updated_by' => Auth::user()->id,
                              'attachment'  => $zipname!=""?$zipname:NULL, 
                              'attachment_file_platform' => $c_file_platform,
                              'updated_at' => date('Y-m-d H:i:s')
                            ];
                  
                            DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->update($ver_insuff_data);
                  
                            $ver_id=$ver_insuff->id;
                        }
                        else
                        {
                          $ver_insuff_data=[
                            'parent_id' => $parent_id,
                            'business_id' => $business_id,
                            'coc_id' => $jaf_rc->business_id,
                            'candidate_id' => $candidate_id,
                            'service_id'  => $jaf_rc->service_id,
                            'jaf_form_data_id' => $jaf_rc->id,
                            'item_number' => $jaf_rc->check_item_number,
                            'activity_type'=> 'jaf-insuff',
                            'status'=>'removed',
                            'notes' => $request->comment,
                            'attachment' => $zipname!=NULL?$zipname:NULL,
                            'attachment_file_platform' => $c_file_platform,
                            'created_by'   => Auth::user()->id,
                            'created_at'   => date('Y-m-d H:i:s'),
                            'updated_at' => date('Y-m-d H:i:s')
                          ];
                    
                          $ver_id=DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);
                        }

                        $insuff_log_data=[
                          'parent_id' => $parent_id,
                          'business_id' => $business_id,
                          'coc_id' => $jaf_rc->business_id,
                          'candidate_id' => $candidate_id,
                          'service_id'  => $service_id,
                          'jaf_form_data_id' => $jaf_rc->id,
                          'item_number' => $jaf_rc->check_item_number,
                          'activity_type'=> 'jaf-insuff',
                          'status'=>'removed',
                          'notes' => $request->comment,
                          'created_by'   => Auth::user()->id,
                          'attachment'  => $zipname!=""?$zipname:NULL, 
                          'attachment_file_platform' => $c_file_platform,
                          'created_at'   => date('Y-m-d H:i:s'),
                        ];
                  
                        DB::table('insufficiency_logs')->insert($insuff_log_data);


                      if(count($attach_on_select)>0)
                      {
                          $file_data=DB::table('insufficiency_attachments')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->get();

                          if(count($file_data)>0)
                          {
                              $path=public_path().'/uploads/clear-insuff/';
                              foreach($file_data as $file)
                              {
                                  if(File::exists($path.$file->file_name))
                                  {
                                      File::delete($path.$file->file_name);
                                  }
                              }

                              DB::table('insufficiency_attachments')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->delete();

                          }

                          $i=0;
                          $file_platform = 'web';

                          if($s3_config!=NULL)
                          {
                            $s3filePath = 'uploads/clear-insuff/';

                            if(!Storage::disk('s3')->exists($s3filePath))
                            {
                                Storage::disk('s3')->makeDirectory($s3filePath,0777, true, true);
                            }

                            foreach($attach_on_select as $item)
                            {
                              $file_platform = 'web';
                              $path=public_path().'/uploads/clear-insuff/';

                              if(File::exists($path.$attach_on_select[$i]))
                              {
                                $file_platform = 's3';
                                $file = Helper::createFileObject($path.$attach_on_select[$i]);

                                Storage::disk('s3')->put($s3filePath.$attach_on_select[$i],file_get_contents($file));

                                File::delete($path.$attach_on_select[$i]);
                              }
                              $insuff_file=[
                                'parent_id' => $parent_id,
                                'business_id' => $business_id,
                                'coc_id' => $jaf_rc->business_id,
                                'candidate_id' => $candidate_id,
                                'service_id'  => $service_id,
                                'jaf_form_data_id' => $jaf_rc->id,
                                'item_number' => $jaf_rc->check_item_number,
                                'status'=>'removed',
                                'file_name' => $attach_on_select[$i],
                                'file_platform' => $file_platform,
                                'created_by'   => Auth::user()->id,
                                'created_at'   => date('Y-m-d H:i:s'),
                                'updated_at' => date('Y-m-d H:i:s')
                              ];
                        
                              $file_id = DB::table('insufficiency_attachments')->insertGetId($insuff_file);

                              $i++;

                              if(File::exists($path.'tmp-files/'))
                              {
                                File::cleanDirectory($path.'tmp-files/');
                              }

                            }

                          }
                          else
                          {
                            foreach($attach_on_select as $item)
                            {
                              $insuff_file=[
                                'parent_id' => $parent_id,
                                'business_id' => $business_id,
                                'coc_id' => $jaf_rc->business_id,
                                'candidate_id' => $candidate_id,
                                'service_id'  => $service_id,
                                'jaf_form_data_id' => $jaf_rc->id,
                                'item_number' => $jaf_rc->check_item_number,
                                'status'=>'removed',
                                'file_name' => $attach_on_select[$i],
                                'file_platform' => $file_platform,
                                'created_by'   => Auth::user()->id,
                                'created_at'   => date('Y-m-d H:i:s'),
                                'updated_at' => date('Y-m-d H:i:s')
                              ];
                        
                              $file_id = DB::table('insufficiency_attachments')->insertGetId($insuff_file);
  
                              $i++;
                            }
                          }
                      }

                      $ver_insuff=DB::table('verification_insufficiency')->where(['id'=>$ver_id])->first();

                      $candidates=DB::table('users as u')
                          ->select('u.*','j.business_id as coc_id','j.id as jaf_id','v.created_at as insuff_clear_date','v.created_by as insuff_clear_by','v.item_number','v.notes','s.verification_type','s.name as service_name','v.business_id as cust_id','v.attachment','v.updated_at','v.updated_by')
                          ->join('jaf_form_data as j','u.id','=','j.candidate_id')
                          ->join('verification_insufficiency as v','v.jaf_form_data_id','=','j.id')
                          ->join('services as s','s.id','=','v.service_id')
                          ->where(['u.user_type'=>'candidate','j.id'=>$item_id,'v.status'=>'removed','v.id'=>$ver_insuff->id])
                          ->first();

                      if($candidates!=NULL)
                      {
                        // $client=DB::table('users')->where(['id'=>$candidates->coc_id])->first();
                        // $name = $client->name;
                        // $email = $client->email;
                        // $msg= "Insufficiency Cleared For Candidate";
                        // $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                        // if($candidates->attachment!=NULL)
                        // {
                        //   $url = url('/').'/uploads/clear-insuff/'.$zipname;

                        //   if($s3_config!=NULL)
                        //   {
                        //     $filePath = 'uploads/clear-insuff/';

                        //     $disk = Storage::disk('s3');

                        //     $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                        //         'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                        //         'Key'                        => $filePath.$zipname,
                        //         'ResponseContentDisposition' => 'attachment;'//for download
                        //     ]);

                        //     $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');

                        //     $url = (string)$req->getUri();
                        //   }

                        //   $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>$url,'candidate'=>$candidates,'sender'=>$sender);
                        // }
                        // else
                        //   $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);
        
                        // Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email,$name) {
                        //   $message->to($email, $name)->subject
                        //       ('Clobminds Pvt Ltd - Insufficiency Notification');
                        //   $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                        // });

                        $kams = DB::table('key_account_managers')->where(['business_id'=>$candidates->business_id])->get();
                        if(count($kams)>0)
                        {
                          foreach($kams as $kam)
                          {
                              $user_data=DB::table('users')->where(['id'=>$kam->user_id])->first();

                              $name1 = $user_data->name;
                              $email1 = $user_data->email;
                              $msg= "Insufficiency Cleared For Candidate";
                              $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();

                              if($candidates->attachment!=NULL)
                              {
                                $url = url('/').'/uploads/clear-insuff/'.$zipname;

                                if($s3_config!=NULL)
                                {
                                  $filePath = 'uploads/clear-insuff/';

                                  $disk = Storage::disk('s3');

                                  $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                                      'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                                      'Key'                        => $filePath.$zipname,
                                      'ResponseContentDisposition' => 'attachment;'//for download
                                  ]);

                                  $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');

                                  $url = (string)$req->getUri();
                                }

                                $data  = array('name'=>$name1,'email'=>$email1,'msg'=>$msg,'link'=>$url,'candidate'=>$candidates,'sender'=>$sender);
                              }
                              else
                                $data  = array('name'=>$name1,'email'=>$email1,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);

                              Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email1,$name1) {
                                  $message->to($email1, $name1)->subject
                                      ('Clobminds Pvt Ltd - Insufficiency Notification');
                                  $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                              });

                          }
                        }

                        $ver_insuff_data=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$candidates->jaf_id,'status'=>'removed'])->first();

                        if($ver_insuff_data!=NULL)
                        {
                            $user_data=DB::table('users')->where(['id'=>$ver_insuff_data->created_by])->first();
                            $name = $user_data->name;
                            $email = $user_data->email;
                            $msg= "Insufficiency Cleared For Candidate";
                            $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                            if($candidates->attachment!=NULL)
                            {
                              $url = url('/').'/uploads/clear-insuff/'.$zipname;

                              if($s3_config!=NULL)
                              {
                                $filePath = 'uploads/clear-insuff/';

                                $disk = Storage::disk('s3');

                                $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                                    'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                                    'Key'                        => $filePath.$zipname,
                                    'ResponseContentDisposition' => 'attachment;'//for download
                                ]);

                                $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');

                                $url = (string)$req->getUri();
                              }

                              $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>$url,'candidate'=>$candidates,'sender'=>$sender);
                            }
                            else
                              $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);
                            
                            Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email,$name) {
                              $message->to($email, $name)->subject
                                  ('Clobminds Pvt Ltd - Insufficiency Notification');
                              $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                            }); 
                        }

                      }
                  }
                  else{
                      //check from live API
                      // Setup request to send json via POST
                      $data = array(
                          'id_number'    => $rc_number,
                          'async'         => true,
                      );
                      $payload = json_encode($data);
                      $apiURL = "https://kyc-api.aadhaarkyc.io/api/v1/rc/rc";
      
                      $ch = curl_init();
                      curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);                
                      curl_setopt ( $ch, CURLOPT_POST, 1 );
                      $authorization = "Authorization: Bearer ".env('SUREPASS_PRODUCTION_TOKEN'); // Prepare the authorisation token
                      curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json' , $authorization )); // Inject the token into the header
                      curl_setopt($ch, CURLOPT_URL, $apiURL);
                      // Attach encoded JSON string to the POST fields
                      curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);
                      $resp = curl_exec ( $ch );
                      curl_close ( $ch );
                      $array_data =  json_decode($resp,true);
                      // print_r($array_data); die;
      
                      if($array_data['success'])
                      {
                          //check if ID number is new then insert into DB
                          $checkIDInDB= DB::table('rc_check_masters')->where(['rc_number'=>$rc_number])->count();
                          if($checkIDInDB ==0)
                          {
                          
                              $data = [
                                      'api_client_id'     =>$array_data['data']['client_id'],
                                      'rc_number'         =>$array_data['data']['rc_number'],
                                      'registration_date' =>$array_data['data']['registration_date'],
                                      'owner_name'        =>$array_data['data']['owner_name'],
                                      'present_address'   =>$array_data['data']['present_address'],
                                      'permanent_address'    =>$array_data['data']['permanent_address'],
                                      'mobile_number'        =>$array_data['data']['mobile_number'],
                                      'vehicle_category'     =>$array_data['data']['vehicle_category'],
                                      'vehicle_chasis_number' =>$array_data['data']['vehicle_chasi_number'],
                                      'vehicle_engine_number' =>$array_data['data']['vehicle_engine_number'],
                                      'maker_description'     =>$array_data['data']['maker_description'],
                                      'maker_model'           =>$array_data['data']['maker_model'],
                                      'body_type'             =>$array_data['data']['body_type'],
                                      'fuel_type'             =>$array_data['data']['fuel_type'],
                                      'color'                 =>$array_data['data']['color'],
                                      'norms_type'            =>$array_data['data']['norms_type'],
                                      'fit_up_to'             =>$array_data['data']['fit_up_to'],
                                      'financer'              =>$array_data['data']['financer'],
                                      'insurance_company'     =>$array_data['data']['insurance_company'],
                                      'insurance_policy_number'=>$array_data['data']['insurance_policy_number'],
                                      'insurance_upto'         =>$array_data['data']['insurance_upto'],
                                      'manufacturing_date'     =>$array_data['data']['manufacturing_date'],
                                      'registered_at'          =>$array_data['data']['registered_at'],
                                      'latest_by'              =>$array_data['data']['latest_by'],
                                      'less_info'              =>$array_data['data']['less_info'],
                                      'tax_upto'               =>$array_data['data']['tax_upto'],
                                      'cubic_capacity'         =>$array_data['data']['cubic_capacity'],
                                      'vehicle_gross_weight'   =>$array_data['data']['vehicle_gross_weight'],
                                      'no_cylinders'           =>$array_data['data']['no_cylinders'],
                                      'seat_capacity'          =>$array_data['data']['seat_capacity'],
                                      'sleeper_capacity'       =>$array_data['data']['sleeper_capacity'],
                                      'standing_capacity'      =>$array_data['data']['standing_capacity'],
                                      'wheelbase'              =>$array_data['data']['wheelbase'],
                                      'unladen_weight'         =>$array_data['data']['unladen_weight'],
                                      'vehicle_category_description'         =>$array_data['data']['vehicle_category_description'],
                                      'pucc_number'               =>$array_data['data']['pucc_number'],
                                      'pucc_upto'                 =>$array_data['data']['pucc_upto'],
                                      'masked_name'           =>$array_data['data']['masked_name'],
                                      'is_api_verified'           =>'1',
                                      'is_rc_exist'           =>'1',
                                      'created_at'            =>date('Y-m-d H:i:s')
                                      ];
      
                              DB::table('rc_check_masters')->insert($data);
                              
                              $master_data = DB::table('rc_check_masters')->select('*')->where(['rc_number'=>$rc_number])->first();

                              $log_data = [
                                'parent_id'         =>$parent_id,
                                'business_id'       => $business_id,
                                'candidate_id' => $candidate_id,
                                'service_id'        =>$service_id,
                                'source_type'       => 'API',
                                'api_client_id'     =>$master_data->api_client_id,
                                'rc_number'         =>$master_data->rc_number,
                                'registration_date' =>$master_data->registration_date,
                                'owner_name'        =>$master_data->owner_name,
                                'present_address'   =>$master_data->present_address,
                                'permanent_address'    =>$master_data->permanent_address,
                                'mobile_number'        =>$master_data->mobile_number,
                                'vehicle_category'     =>$master_data->vehicle_category,
                                'vehicle_chasis_number' =>$master_data->vehicle_chasis_number,
                                'vehicle_engine_number' =>$master_data->vehicle_engine_number,
                                'maker_description'     =>$master_data->maker_description,
                                'maker_model'           =>$master_data->maker_model,
                                'body_type'             =>$master_data->body_type,
                                'fuel_type'             =>$master_data->fuel_type,
                                'color'                 =>$master_data->color,
                                'norms_type'            =>$master_data->norms_type,
                                'fit_up_to'             =>$master_data->fit_up_to,
                                'financer'              =>$master_data->financer,
                                'insurance_company'     =>$master_data->insurance_company,
                                'insurance_policy_number'=>$master_data->insurance_policy_number,
                                'insurance_upto'         =>$master_data->insurance_upto,
                                'manufacturing_date'     =>$master_data->manufacturing_date,
                                'registered_at'          =>$master_data->registered_at,
                                'latest_by'              =>$master_data->latest_by,
                                'less_info'              =>$master_data->less_info,
                                'tax_upto'               =>$master_data->tax_upto,
                                'cubic_capacity'         =>$master_data->cubic_capacity,
                                'vehicle_gross_weight'   =>$master_data->vehicle_gross_weight,
                                'no_cylinders'           =>$master_data->no_cylinders,
                                'seat_capacity'          =>$master_data->seat_capacity,
                                'sleeper_capacity'       =>$master_data->sleeper_capacity,
                                'standing_capacity'      =>$master_data->standing_capacity,
                                'wheelbase'              =>$master_data->wheelbase,
                                'unladen_weight'         =>$master_data->unladen_weight,
                                'vehicle_category_description'         =>$master_data->vehicle_category_description,
                                'pucc_number'               =>$master_data->pucc_number,
                                'pucc_upto'                 =>$master_data->pucc_upto,
                                'masked_name'           =>$master_data->masked_name,
                                'is_verified'           =>'1',
                                'is_rc_exist'           =>'1',
                                'price'             =>$checkprice_db!=NULL?$checkprice_db->price:$price,
                                'used_by'               =>'customer',
                                'user_id'            => $user_id,
                                'created_at'            =>date('Y-m-d H:i:s')
                                ];
            
                                DB::table('rc_checks')->insert($log_data);
                          }
      
                          // update the status
                          DB::table('jaf_form_data')->where(['id'=>$item_id])
                              ->update(['is_api_checked'=>'1','is_api_verified'=>'1','verification_status'=>'success','verified_at'=>date('Y-m-d H:i:s'),'is_insufficiency'=>'0','clear_insuff_notes'=>$request->comment,'clear_insuff_attachment' => $zipname!=NULL?$zipname:NULL,'clear_insuff_attachment_file_platform'=>$c_file_platform,'is_all_insuff_cleared' => 1,'insuff_cleared_by'=>Auth::user()->id,'updated_at'=>date('Y-m-d H:i:s')]); 
                          $is_updated=TRUE;

                          $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->first();

                          if($ver_insuff!=NULL)
                          {
                              $ver_insuff_data=[
                                'notes' => $request->comment,
                                'updated_by' => Auth::user()->id,
                                'attachment'  => $zipname!=""?$zipname:NULL, 
                                'attachment_platform' => $c_file_platform,
                                'updated_at' => date('Y-m-d H:i:s')
                              ];

                              DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->update($ver_insuff_data);

                              $ver_id=$ver_insuff->id;
                          }
                          else
                          {
                            $ver_insuff_data=[
                              'parent_id' => $parent_id,
                              'business_id' => $business_id,
                              'coc_id' => $jaf_rc->business_id,
                              'candidate_id' => $candidate_id,
                              'service_id'  => $jaf_rc->service_id,
                              'jaf_form_data_id' => $jaf_rc->id,
                              'item_number' => $jaf_rc->check_item_number,
                              'activity_type'=> 'jaf-insuff',
                              'status'=>'removed',
                              'notes' => $request->comment,
                              'attachment' => $zipname!=NULL?$zipname:NULL,
                              'attachment_platform' => $c_file_platform,
                              'created_by'   => Auth::user()->id,
                              'created_at'   => date('Y-m-d H:i:s'),
                            ];
                      
                            $ver_id=DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);
                          }

                          $insuff_log_data=[
                            'parent_id' => $parent_id,
                            'business_id' => $business_id,
                            'coc_id' => $jaf_rc->business_id,
                            'candidate_id' => $candidate_id,
                            'service_id'  => $service_id,
                            'jaf_form_data_id' => $jaf_rc->id,
                            'item_number' => $jaf_rc->check_item_number,
                            'activity_type'=> 'jaf-insuff',
                            'status'=>'removed',
                            'notes' => $request->comment,
                            'created_by'   => Auth::user()->id,
                            'attachment'  => $zipname!=""?$zipname:NULL, 
                            'attachment_platform' => $c_file_platform,
                            'created_at'   => date('Y-m-d H:i:s'),
                          ];
                    
                          DB::table('insufficiency_logs')->insert($insuff_log_data);

                          if(count($attach_on_select)>0)
                          {
                              $file_data=DB::table('insufficiency_attachments')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->get();

                              if(count($file_data)>0)
                              {
                                  $path=public_path().'/uploads/clear-insuff/';
                                  foreach($file_data as $file)
                                  {
                                      if(File::exists($path.$file->file_name))
                                      {
                                          File::delete($path.$file->file_name);
                                      }
                                  }

                                  DB::table('insufficiency_attachments')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->delete();

                              }

                              $i=0;
                              $file_platform = 'web';
                              if($s3_config!=NULL)
                              {
                                $s3filePath = 'uploads/clear-insuff/';

                                if(!Storage::disk('s3')->exists($s3filePath))
                                {
                                    Storage::disk('s3')->makeDirectory($s3filePath,0777, true, true);
                                }

                                foreach($attach_on_select as $item)
                                {
                                  $file_platform = 'web';
                                  $path=public_path().'/uploads/clear-insuff/';

                                  if(File::exists($path.$attach_on_select[$i]))
                                  {
                                    $file_platform = 's3';
                                    $file = Helper::createFileObject($path.$attach_on_select[$i]);

                                    Storage::disk('s3')->put($s3filePath.$attach_on_select[$i],file_get_contents($file));

                                    File::delete($path.$attach_on_select[$i]);
                                  }

                                  $insuff_file=[
                                    'parent_id' => $parent_id,
                                    'business_id' => $business_id,
                                    'coc_id' => $jaf_rc->business_id,
                                    'candidate_id' => $candidate_id,
                                    'service_id'  => $service_id,
                                    'jaf_form_data_id' => $jaf_rc->id,
                                    'item_number' => $jaf_rc->check_item_number,
                                    'status'=>'removed',
                                    'file_name' => $attach_on_select[$i],
                                    'file_platform' => $file_platform,
                                    'created_by'   => Auth::user()->id,
                                    'created_at'   => date('Y-m-d H:i:s'),
                                    'updated_at' => date('Y-m-d H:i:s')
                                  ];
                            
                                  $file_id = DB::table('insufficiency_attachments')->insertGetId($insuff_file);
  
                                  $i++;

                                  if(File::exists($path.'tmp-files/'))
                                  {
                                    File::cleanDirectory($path.'tmp-files/');
                                  }
                                }
                              }
                              else
                              {
                                foreach($attach_on_select as $item)
                                {
                                  $insuff_file=[
                                    'parent_id' => $parent_id,
                                    'business_id' => $business_id,
                                    'coc_id' => $jaf_rc->business_id,
                                    'candidate_id' => $candidate_id,
                                    'service_id'  => $service_id,
                                    'jaf_form_data_id' => $jaf_rc->id,
                                    'item_number' => $jaf_rc->check_item_number,
                                    'status'=>'removed',
                                    'file_name' => $attach_on_select[$i],
                                    'file_platform' => $file_platform,
                                    'created_by'   => Auth::user()->id,
                                    'created_at'   => date('Y-m-d H:i:s'),
                                    'updated_at' => date('Y-m-d H:i:s')
                                  ];
                            
                                  $file_id = DB::table('insufficiency_attachments')->insertGetId($insuff_file);
  
                                  $i++;
                                }
                              }
                          }

                          $ver_insuff=DB::table('verification_insufficiency')->where(['id'=>$ver_id])->first();

                          $candidates=DB::table('users as u')
                              ->select('u.*','j.business_id as coc_id','j.id as jaf_id','v.created_at as insuff_clear_date','v.created_by as insuff_clear_by','v.item_number','v.notes','s.verification_type','s.name as service_name','v.business_id as cust_id','v.attachment','v.updated_at','v.updated_by')
                              ->join('jaf_form_data as j','u.id','=','j.candidate_id')
                              ->join('verification_insufficiency as v','v.jaf_form_data_id','=','j.id')
                              ->join('services as s','s.id','=','v.service_id')
                              ->where(['u.user_type'=>'candidate','j.id'=>$item_id,'v.status'=>'removed','v.id'=>$ver_insuff->id])
                              ->first();

                          if($candidates!=NULL)
                          {
                            // $client=DB::table('users')->where(['id'=>$candidates->coc_id])->first();
                            // $name = $client->name;
                            // $email = $client->email;
                            // $msg= "Insufficiency Cleared For Candidate";
                            // $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                            // if($candidates->attachment!=NULL)
                            // {
                            //   $url = url('/').'/uploads/clear-insuff/'.$zipname;

                            //   if($s3_config!=NULL)
                            //   {
                            //     $filePath = 'uploads/clear-insuff/';

                            //     $disk = Storage::disk('s3');

                            //     $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                            //         'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                            //         'Key'                        => $filePath.$zipname,
                            //         'ResponseContentDisposition' => 'attachment;'//for download
                            //     ]);

                            //     $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');

                            //     $url = (string)$req->getUri();
                            //   }

                            //   $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>$url,'candidate'=>$candidates,'sender'=>$sender);
                            // }
                            // else
                            //   $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);
            
                            // Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email,$name) {
                            //   $message->to($email, $name)->subject
                            //       ('Clobminds Pvt Ltd - Insufficiency Notification');
                            //   $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                            // });

                            $kams = DB::table('key_account_managers')->where(['business_id'=>$candidates->business_id])->get();
                            if(count($kams)>0)
                            {
                              foreach($kams as $kam)
                              {
                                  $user_data=DB::table('users')->where(['id'=>$kam->user_id])->first();

                                  $name1 = $user_data->name;
                                  $email1 = $user_data->email;
                                  $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                                  $msg= "Insufficiency Cleared For Candidate";

                                  if($candidates->attachment!=NULL)
                                  {
                                    $url = url('/').'/uploads/clear-insuff/'.$zipname;

                                    if($s3_config!=NULL)
                                    {
                                      $filePath = 'uploads/clear-insuff/';

                                      $disk = Storage::disk('s3');

                                      $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                                          'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                                          'Key'                        => $filePath.$zipname,
                                          'ResponseContentDisposition' => 'attachment;'//for download
                                      ]);

                                      $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');

                                      $url = (string)$req->getUri();
                                    }

                                    $data  = array('name'=>$name1,'email'=>$email1,'msg'=>$msg,'link'=>$url,'candidate'=>$candidates,'sender'=>$sender);
                                  }
                                  else
                                    $data  = array('name'=>$name1,'email'=>$email1,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);

                                  Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email1,$name1) {
                                      $message->to($email1, $name1)->subject
                                          ('Clobminds Pvt Ltd - Insufficiency Notification');
                                      $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                                  });

                              }
                            }

                            $ver_insuff_data=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$candidates->jaf_id,'status'=>'removed'])->first();

                            if($ver_insuff_data!=NULL)
                            {
                                $user_data=DB::table('users')->where(['id'=>$ver_insuff_data->created_by])->first();
                                $name = $user_data->name;
                                $email = $user_data->email;
                                $msg= "Insufficiency Cleared For Candidate";
                                $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                                if($candidates->attachment!=NULL)
                                {
                                  $url = url('/').'/uploads/clear-insuff/'.$zipname;

                                  if($s3_config!=NULL)
                                  {
                                    $filePath = 'uploads/clear-insuff/';

                                    $disk = Storage::disk('s3');

                                    $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                                        'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                                        'Key'                        => $filePath.$zipname,
                                        'ResponseContentDisposition' => 'attachment;'//for download
                                    ]);

                                    $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');

                                    $url = (string)$req->getUri();
                                  }

                                  $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>$url,'candidate'=>$candidates,'sender'=>$sender);
                                }
                                else
                                  $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);
                                Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email,$name) {
                                  $message->to($email, $name)->subject
                                      ('Clobminds Pvt Ltd - Insufficiency Notification');
                                  $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                                }); 
                            }

                          }


                      }else{
                          //update insuff
                          DB::table('jaf_form_data')->where(['id'=>$item_id])->update(['is_api_checked'=>'1','is_api_verified'=>'0','is_insufficiency'=>'1','verification_status'=>'failed','verified_at'=>date('Y-m-d H:i:s')]); 

                          $jaf_data=DB::table('jaf_form_data')->where(['id'=>$item_id])->first();
                          $insuff_log_data=[
                            'parent_id' => $parent_id,
                            'business_id' => $business_id,
                            'coc_id' => $jaf_data->business_id,
                            'candidate_id' => $candidate_id,
                            'service_id'  => $service_id,
                            'jaf_form_data_id' => $jaf_data->id,
                            'item_number' => $jaf_data->check_item_number,
                            'activity_type'=> 'jaf-insuff',
                            'status'=>'failed',
                            'notes' => 'BGV Failed',
                            'created_by'   => Auth::user()->id,
                            'attachment'  => $zipname!=""?$zipname:NULL, 
                            'attachment_file_platform' => $c_file_platform,
                            'created_at'   => date('Y-m-d H:i:s'),
                          ];
                    
                          DB::table('insufficiency_logs')->insert($insuff_log_data);

                          $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'raised'])->first();

                              if($ver_insuff!=NULL)
                              {
                                  $ver_insuff_data=[
                                    'notes' => 'BGV Failed',
                                    'updated_by' => Auth::user()->id,
                                    'updated_at' => date('Y-m-d H:i:s')
                                  ];

                                  DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'raised'])->update($ver_insuff_data);

                                  $ver_id=$ver_insuff->id;
                              }
                              else
                              {
                                $ver_insuff_data=[
                                  'parent_id' => $parent_id,
                                  'business_id' => $business_id,
                                  'coc_id' => $jaf_data->business_id,
                                  'candidate_id' => $candidate_id,
                                  'service_id'  => $service_id,
                                  'jaf_form_data_id' => $jaf_data->id,
                                  'item_number' => $jaf_data->check_item_number,
                                  'activity_type'=> 'jaf-insuff',
                                  'status'=>'raised',
                                  'notes' => 'BGV Failed',
                                  'created_by'   => Auth::user()->id,
                                  'created_at'   => date('Y-m-d H:i:s'),
                                ];
                          
                                $ver_id = DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);
                              }
                      }
                    
                    
                  }

                  if($is_updated){  
                    //generate report here 
                    // $this->generateCandidateReport($candidate_id);
                    DB::commit();
                    return response()->json([
                    'fail' => false,
                    'status'=>'ok',
                    'message' => 'updated',                
                    ], 200);
                  }
                  else{
                      DB::commit();
                      return response()->json([
                      'fail' => true,
                      'status' =>'no',
                      ], 200);
                  }

            }

            //service  
            else if($service_id == 9){
              $jaf_dl = DB::table('jaf_form_data')->select('id','business_id','form_data','service_id','check_item_number')->where(['id'=>$item_id])->first();

              $dl_number = "";
              // $business_id = $jaf_dl->business_id; 
              $jaf_array = json_decode($jaf_dl->form_data, true);
              // print_r($jaf_array);
              foreach($jaf_array as $input){
                  if(array_key_exists('DL Number',$input)){
                    $dl_number = $input['DL Number'];
                  }
              }
          
              $dl_number_input      = $dl_number;
              $dl_raw               = preg_replace('/[^A-Za-z0-9\ ]/', '', $dl_number_input);
              $final_dl_number      = str_replace(' ', '', $dl_raw);


                $s3_config = NULL;
                $c_file_platform = 'web';
                $attach_on_select=[];
                $allowedextension=['jpg','jpeg','png','svg','pdf'];
                $zipname="";
                if($request->hasFile('attachment') && $request->file('attachment') !="")
                {
                    $filePath = public_path('/uploads/clear-insuff/'); 
                    $files= $request->file('attachment');
                    foreach($files as $file)
                    {
                            $extension = $file->getClientOriginalExtension();

                            $check = in_array($extension,$allowedextension);

                            $file_size = number_format(File::size($file) / 1048576, 2);
 
                            if(!$check)
                            {
                                return response()->json([
                                  'fail' => true,
                                  'errors' => ['attachment' => 'Only jpg,jpeg,png,pdf are allowed !'],
                                  'error_type'=>'validation'
                                ]);                        
                            }

                            if($file_size > 10)
                            {
                                return response()->json([
                                  'fail' => true,
                                  'error_type'=>'validation',
                                  'errors' => ['attachment' => 'The document size must be less than only 10mb Upload !'],
                                ]);                        
                            }
                    }

                    $zipname = 'clear-insuff-'.date('Ymdhis').'.zip';
                    $zip = new \ZipArchive();      
                    $zip->open(public_path().'/uploads/clear-insuff/'.$zipname, \ZipArchive::CREATE | \ZipArchive::OVERWRITE);

                    foreach($files as $file)
                    {
                        $file_data = $file->getClientOriginalName();
                        $tmp_data  = $candidate_id.'-'.date('mdYHis').'-'.$file_data; 
                        $data = $file->move($filePath, $tmp_data);       
                        $attach_on_select[]=$tmp_data;

                        $path=public_path()."/uploads/clear-insuff/".$tmp_data;
                        $zip->addFile($path, '/clear-insuff/'.basename($path));  
                    }

                    $zip->close();
                }

                $s3_config = S3ConfigTrait::s3Config();

                $path=public_path().'/uploads/clear-insuff/';

                if($s3_config!=NULL && $zipname!='')
                {
                  if(File::exists($path.$zipname))
                  {
                      $c_file_platform = 's3';
  
                      $s3filePath = 'uploads/clear-insuff/';
      
                      if(!Storage::disk('s3')->exists($s3filePath))
                      {
                          Storage::disk('s3')->makeDirectory($s3filePath,0777, true, true);
                      }
      
                      $file = Helper::createFileObject($path.$zipname);
      
                      Storage::disk('s3')->put($s3filePath.$zipname,file_get_contents($file));
  
                      File::delete($path.$zipname);
                  }
                }

                if(File::exists($path.'tmp-files/'))
                {
                    File::cleanDirectory($path.'tmp-files/');
                }

              //check first into master table
              $master_data = DB::table('dl_check_masters')->select('*')->where(['dl_number'=>$final_dl_number])->first();
              
              if($master_data !=null){


                $log_data = [
                  'parent_id'         =>$parent_id,
                  'business_id'       => $business_id,
                  'service_id'        =>$service_id,
                  'candidate_id' => $candidate_id,
                  'source_type'       =>'SystemDb',
                  'api_client_id'     =>$master_data->api_client_id,
                  'dl_number'         =>$master_data->dl_number,
                  'name'              =>$master_data->name,
                  'permanent_address' =>$master_data->permanent_address,
                  'temporary_address' =>$master_data->temporary_address,
                  'permanent_zip'     =>$master_data->permanent_zip,
                  'temporary_zip'     =>$master_data->temporary_zip,
                  'state'             =>$master_data->state,
                  'citizenship'       =>$master_data->citizenship,
                  'ola_name'          =>$master_data->ola_name,
                  'ola_code'          =>$master_data->ola_code,
                  'gender'            =>$master_data->gender,
                  'father_or_husband_name' =>$master_data->father_or_husband_name,
                  'dob'               =>$master_data->dob,
                  'doe'               =>$master_data->doe,
                  'transport_doe'     =>$master_data->transport_doe,
                  'doi'               =>$master_data->doi,
                  'is_verified'       =>'1',
                  'is_rc_exist'       =>'1',
                  'price'             =>$checkprice_db!=NULL?$checkprice_db->price:$price,
                  'used_by'           =>'customer',
                  'user_id'            => $user_id,
                  'created_at'        =>date('Y-m-d H:i:s')
                ];
              
                  DB::table('dl_checks')->insert($log_data);
                  // update the status
                  DB::table('jaf_form_data')->where(['id'=>$item_id])
                  ->update(['is_api_checked'=>'1','is_api_verified'=>'1','verification_status'=>'success','verified_at'=>date('Y-m-d H:i:s'),'is_insufficiency'=>'0','clear_insuff_notes'=>$request->comment,'clear_insuff_attachment' => $zipname!=NULL?$zipname:NULL,'clear_insuff_attachment_file_platform'=>$c_file_platform,'is_all_insuff_cleared' => 1,'insuff_cleared_by'=>Auth::user()->id,'updated_at'=>date('Y-m-d H:i:s')]); 
                  $is_updated=TRUE;

                  $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->first();

                  if($ver_insuff!=NULL)
                  {
                      $ver_insuff_data=[
                        'notes' => $request->comment,
                        'updated_by' => Auth::user()->id,
                        'attachment'  => $zipname!=""?$zipname:NULL, 
                        'attachment_file_platform' => $c_file_platform,
                        'updated_at' => date('Y-m-d H:i:s')
                      ];

                      DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->update($ver_insuff_data);

                      $ver_id=$ver_insuff->id;
                  }
                  else
                  {
                    $ver_insuff_data=[
                      'parent_id' => $parent_id,
                      'business_id' => $business_id,
                      'coc_id' => $jaf_dl->business_id,
                      'candidate_id' => $candidate_id,
                      'service_id'  => $jaf_dl->service_id,
                      'jaf_form_data_id' => $jaf_dl->id,
                      'item_number' => $jaf_dl->check_item_number,
                      'activity_type'=> 'jaf-insuff',
                      'status'=>'removed',
                      'notes' => $request->comment,
                      'attachment' => $zipname!=NULL?$zipname:NULL,
                      'attachment_file_platform' => $c_file_platform,
                      'created_by'   => Auth::user()->id,
                      'created_at'   => date('Y-m-d H:i:s'),
                      'updated_at' => date('Y-m-d H:i:s')
                    ];
              
                    $ver_id=DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);
                  }

                  $insuff_log_data=[
                    'parent_id' => $parent_id,
                    'business_id' => $business_id,
                    'coc_id' => $jaf_dl->business_id,
                    'candidate_id' => $candidate_id,
                    'service_id'  => $service_id,
                    'jaf_form_data_id' => $jaf_dl->id,
                    'item_number' => $jaf_dl->check_item_number,
                    'activity_type'=> 'jaf-insuff',
                    'status'=>'removed',
                    'notes' => $request->comment,
                    'created_by'   => Auth::user()->id,
                    'attachment'  => $zipname!=""?$zipname:NULL, 
                    'attachment_file_platform' => $c_file_platform,
                    'created_at'   => date('Y-m-d H:i:s'),
                  ];
            
                  DB::table('insufficiency_logs')->insert($insuff_log_data);

                  if(count($attach_on_select)>0)
                  {
                      $file_data=DB::table('insufficiency_attachments')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->get();

                      if(count($file_data)>0)
                      {
                          $path=public_path().'/uploads/clear-insuff/';
                          foreach($file_data as $file)
                          {
                              if(File::exists($path.$file->file_name))
                              {
                                  File::delete($path.$file->file_name);
                              }
                          }

                          DB::table('insufficiency_attachments')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->delete();

                      }

                      $i=0;
                      $file_platform = 'web';

                      if($s3_config!=NULL)
                      {
                          $s3filePath = 'uploads/clear-insuff/';

                          if(!Storage::disk('s3')->exists($s3filePath))
                          {
                              Storage::disk('s3')->makeDirectory($s3filePath,0777, true, true);
                          }

                          foreach($attach_on_select as $item)
                          {

                            $file_platform = 'web';
                            $path=public_path().'/uploads/clear-insuff/';

                            if(File::exists($path.$attach_on_select[$i]))
                            {
                              $file_platform = 's3';
                              $file = Helper::createFileObject($path.$attach_on_select[$i]);

                              Storage::disk('s3')->put($s3filePath.$attach_on_select[$i],file_get_contents($file));

                              File::delete($path.$attach_on_select[$i]);
                            }

                            $insuff_file=[
                              'parent_id' => $parent_id,
                              'business_id' => $business_id,
                              'coc_id' => $jaf_dl->business_id,
                              'candidate_id' => $candidate_id,
                              'service_id'  => $service_id,
                              'jaf_form_data_id' => $jaf_dl->id,
                              'item_number' => $jaf_dl->check_item_number,
                              'status'=>'removed',
                              'file_name' => $attach_on_select[$i],
                              'file_platform' => $file_platform,
                              'created_by'   => Auth::user()->id,
                              'created_at'   => date('Y-m-d H:i:s'),
                              'updated_at' => date('Y-m-d H:i:s')
                            ];
                      
                            $file_id = DB::table('insufficiency_attachments')->insertGetId($insuff_file);
    
                            $i++;

                            if(File::exists($path.'tmp-files/'))
                            {
                                File::cleanDirectory($path.'tmp-files/');
                            }
                          }
                      }
                      else
                      {
                          foreach($attach_on_select as $item)
                          {
                            $insuff_file=[
                              'parent_id' => $parent_id,
                              'business_id' => $business_id,
                              'coc_id' => $jaf_dl->business_id,
                              'candidate_id' => $candidate_id,
                              'service_id'  => $service_id,
                              'jaf_form_data_id' => $jaf_dl->id,
                              'item_number' => $jaf_dl->check_item_number,
                              'status'=>'removed',
                              'file_name' => $attach_on_select[$i],
                              'file_platform' => $file_platform,
                              'created_by'   => Auth::user()->id,
                              'created_at'   => date('Y-m-d H:i:s'),
                              'updated_at' => date('Y-m-d H:i:s')
                            ];
                      
                            $file_id = DB::table('insufficiency_attachments')->insertGetId($insuff_file);
    
                            $i++;
                          }
                      }
                      
                  }

                      $ver_insuff=DB::table('verification_insufficiency')->where(['id'=>$ver_id])->first();

                      $candidates=DB::table('users as u')
                          ->select('u.*','j.business_id as coc_id','j.id as jaf_id','v.created_at as insuff_clear_date','v.created_by as insuff_clear_by','v.item_number','v.notes','s.verification_type','s.name as service_name','v.business_id as cust_id','v.attachment','v.updated_at','v.updated_by')
                          ->join('jaf_form_data as j','u.id','=','j.candidate_id')
                          ->join('verification_insufficiency as v','v.jaf_form_data_id','=','j.id')
                          ->join('services as s','s.id','=','v.service_id')
                          ->where(['u.user_type'=>'candidate','j.id'=>$item_id,'v.status'=>'removed','v.id'=>$ver_insuff->id])
                          ->first();

                      if($candidates!=NULL)
                      {
                        // $client=DB::table('users')->where(['id'=>$candidates->coc_id])->first();
                        // $name = $client->name;
                        // $email = $client->email;
                        // $msg= "Insufficiency Cleared For Candidate";
                        // $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                        // if($candidates->attachment!=NULL)
                        // {
                        //   $url = url('/').'/uploads/clear-insuff/'.$zipname;

                        //   if($s3_config!=NULL)
                        //   {
                        //     $filePath = 'uploads/clear-insuff/';

                        //     $disk = Storage::disk('s3');

                        //     $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                        //         'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                        //         'Key'                        => $filePath.$zipname,
                        //         'ResponseContentDisposition' => 'attachment;'//for download
                        //     ]);

                        //     $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');

                        //     $url = (string)$req->getUri();
                        //   }

                        //   $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>$url,'candidate'=>$candidates,'sender'=>$sender);
                        // }
                        // else
                        //   $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);
        
                        // Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email,$name) {
                        //   $message->to($email, $name)->subject
                        //       ('Clobminds Pvt Ltd - Insufficiency Notification');
                        //   $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                        // });

                        $kams = DB::table('key_account_managers')->where(['business_id'=>$candidates->business_id])->get();
                        if(count($kams)>0)
                        {
                          foreach($kams as $kam)
                          {
                              $user_data=DB::table('users')->where(['id'=>$kam->user_id])->first();

                              $name1 = $user_data->name;
                              $email1 = $user_data->email;
                              $msg= "Insufficiency Cleared For Candidate";
                              $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();

                              if($candidates->attachment!=NULL)
                              {
                                $url = url('/').'/uploads/clear-insuff/'.$zipname;

                                if($s3_config!=NULL)
                                {
                                  $filePath = 'uploads/clear-insuff/';

                                  $disk = Storage::disk('s3');

                                  $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                                      'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                                      'Key'                        => $filePath.$zipname,
                                      'ResponseContentDisposition' => 'attachment;'//for download
                                  ]);

                                  $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');

                                  $url = (string)$req->getUri();
                                }

                                $data  = array('name'=>$name1,'email'=>$email1,'msg'=>$msg,'link'=>$url,'candidate'=>$candidates,'sender'=>$sender);
                              }
                              else
                                $data  = array('name'=>$name1,'email'=>$email1,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);

                              Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email1,$name1) {
                                  $message->to($email1, $name1)->subject
                                      ('Clobminds Pvt Ltd - Insufficiency Notification');
                                  $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                              });

                          }
                        }

                        $ver_insuff_data=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$candidates->jaf_id,'status'=>'removed'])->first();

                        if($ver_insuff_data!=NULL)
                        {
                            $user_data=DB::table('users')->where(['id'=>$ver_insuff_data->created_by])->first();
                            $name = $user_data->name;
                            $email = $user_data->email;
                            $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                            $msg= "Insufficiency Cleared For Candidate";
            
                            if($candidates->attachment!=NULL)
                            {
                              $url = url('/').'/uploads/clear-insuff/'.$zipname;

                              if($s3_config!=NULL)
                              {
                                $filePath = 'uploads/clear-insuff/';

                                $disk = Storage::disk('s3');

                                $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                                    'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                                    'Key'                        => $filePath.$zipname,
                                    'ResponseContentDisposition' => 'attachment;'//for download
                                ]);

                                $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');

                                $url = (string)$req->getUri();
                              }

                              $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>$url,'candidate'=>$candidates,'sender'=>$sender);
                            }
                            else
                              $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);

                            Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email,$name) {
                              $message->to($email, $name)->subject
                                  ('Clobminds Pvt Ltd - Insufficiency Notification');
                              $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                            }); 
                        }

                      }

              }
              else{
                  //check from live API
                  // Setup request to send json via POST
                  $data = array(
                      'id_number'    => $dl_number,
                      'async'         => true,
                  );
                  $payload = json_encode($data);
                  $apiURL = "https://kyc-api.aadhaarkyc.io/api/v1/driving-license/driving-license";

                  $ch = curl_init();
                  curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);                
                  curl_setopt ( $ch, CURLOPT_POST, 1 );
                  $authorization = "Authorization: Bearer ".env('SUREPASS_PRODUCTION_TOKEN'); // Prepare the authorisation token
                  curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json' , $authorization )); // Inject the token into the header
                  curl_setopt($ch, CURLOPT_URL, $apiURL);
                  // Attach encoded JSON string to the POST fields
                  curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);
                  $resp = curl_exec ( $ch );
                  curl_close ( $ch );
                  $array_data =  json_decode($resp,true);
                  // print_r($array_data); die;

                  if($array_data['success'])
                  {
                      //check if ID number is new then insert into DB
                      $checkIDInDB= DB::table('dl_check_masters')->where(['dl_number'=>$final_dl_number])->count();
                      if($checkIDInDB ==0)
                      {
                          $gender = 'Male';
                          if($array_data['data']['gender'] == 'F'){
                              $gender = 'Female';
                          }

                          $dl_number      = $array_data['data']['license_number'];
                          $dl_raw         = preg_replace('/[^A-Za-z0-9\ ]/', '', $dl_number);
                          $final_number   = str_replace(' ', '', $dl_raw);

                          //
                          $data = [
                                  'api_client_id'     =>$array_data['data']['client_id'],
                                  'dl_number'         =>$final_number,
                                  'name'              =>$array_data['data']['name'],
                                  'permanent_address' =>$array_data['data']['permanent_address'],
                                  'temporary_address' =>$array_data['data']['temporary_address'],
                                  'permanent_zip'     =>$array_data['data']['permanent_zip'],
                                  'temporary_zip'     =>$array_data['data']['temporary_zip'],
                                  'state'             =>$array_data['data']['state'],
                                  'citizenship'       =>$array_data['data']['citizenship'],
                                  'ola_name'          =>$array_data['data']['ola_name'],
                                  'ola_code'          =>$array_data['data']['ola_code'],
                                  'gender'            =>$gender,
                                  'father_or_husband_name' =>$array_data['data']['father_or_husband_name'],
                                  'dob'               =>$array_data['data']['dob'],
                                  'doe'               =>$array_data['data']['doe'],
                                  'transport_doe'     =>$array_data['data']['transport_doe'],
                                  'doi'               =>$array_data['data']['doi'],
                                  'is_api_verified'       =>'1',
                                  'is_rc_exist'       =>'1',
                                  'created_at'        =>date('Y-m-d H:i:s')
                                  ];
                              
                              DB::table('dl_check_masters')->insert($data);

                              
                          
                          $master_data = DB::table('dl_check_masters')->select('*')->where(['dl_number'=>$final_dl_number])->first();

                          $log_data = [
                            'parent_id'         =>$parent_id,
                            'business_id'       => $business_id,
                            'service_id'        =>$service_id,
                            'candidate_id' => $candidate_id,
                            'source_type'       =>'API',
                            'api_client_id'     =>$master_data->api_client_id,
                            'dl_number'         =>$master_data->dl_number,
                            'name'              =>$master_data->name,
                            'permanent_address' =>$master_data->permanent_address,
                            'temporary_address' =>$master_data->temporary_address,
                            'permanent_zip'     =>$master_data->permanent_zip,
                            'temporary_zip'     =>$master_data->temporary_zip,
                            'state'             =>$master_data->state,
                            'citizenship'       =>$master_data->citizenship,
                            'ola_name'          =>$master_data->ola_name,
                            'ola_code'          =>$master_data->ola_code,
                            'gender'            =>$master_data->gender,
                            'father_or_husband_name' =>$master_data->father_or_husband_name,
                            'dob'               =>$master_data->dob,
                            'doe'               =>$master_data->doe,
                            'transport_doe'     =>$master_data->transport_doe,
                            'doi'               =>$master_data->doi,
                            'is_verified'       =>'1',
                            'is_rc_exist'       =>'1',
                            'price'             =>$checkprice_db!=NULL?$checkprice_db->price:$price,
                            'used_by'           =>'customer',
                            'user_id'            => $user_id,
                            'created_at'        =>date('Y-m-d H:i:s')
                            ];
                        
                        DB::table('dl_checks')->insert($log_data);
                      }
                      // update the status
                      DB::table('jaf_form_data')->where(['id'=>$item_id])
                      ->update(['is_api_checked'=>'1','is_api_verified'=>'1','verification_status'=>'success','verified_at'=>date('Y-m-d H:i:s'),'is_insufficiency'=>'0','clear_insuff_notes'=>$request->comment,'clear_insuff_attachment' => $zipname!=NULL?$zipname:NULL,'clear_insuff_attachment_file_platform'=>$c_file_platform,'is_all_insuff_cleared' => 1,'insuff_cleared_by'=>Auth::user()->id,'updated_at'=>date('Y-m-d H:i:s')]); 
                      $is_updated=TRUE;

                      $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->first();

                      if($ver_insuff!=NULL)
                      {
                          $ver_insuff_data=[
                            'notes' => $request->comment,
                            'updated_by' => Auth::user()->id,
                            'attachment'  => $zipname!=""?$zipname:NULL, 
                            'attachment_file_platform' => $c_file_platform,
                            'updated_at' => date('Y-m-d H:i:s')
                          ];

                          DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->update($ver_insuff_data);

                          $ver_id=$ver_insuff->id;
                      }
                      else
                      {
                        $ver_insuff_data=[
                          'parent_id' => $parent_id,
                          'business_id' => $business_id,
                          'coc_id' => $jaf_dl->business_id,
                          'candidate_id' => $candidate_id,
                          'service_id'  => $jaf_dl->service_id,
                          'jaf_form_data_id' => $jaf_dl->id,
                          'item_number' => $jaf_dl->check_item_number,
                          'activity_type'=> 'jaf-insuff',
                          'status'=>'removed',
                          'notes' => $request->comment,
                          'attachment' => $zipname!=NULL?$zipname:NULL,
                          'attachment_file_platform' => $c_file_platform,
                          'created_by'   => Auth::user()->id,
                          'created_at'   => date('Y-m-d H:i:s'),
                        ];
                  
                        $ver_id=DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);
                      }

                      $insuff_log_data=[
                        'parent_id' => $parent_id,
                        'business_id' => $business_id,
                        'coc_id' => $jaf_dl->business_id,
                        'candidate_id' => $candidate_id,
                        'service_id'  => $service_id,
                        'jaf_form_data_id' => $jaf_dl->id,
                        'item_number' => $jaf_dl->check_item_number,
                        'activity_type'=> 'jaf-insuff',
                        'status'=>'removed',
                        'notes' => $request->comment,
                        'created_by'   => Auth::user()->id,
                        'attachment'  => $zipname!=""?$zipname:NULL, 
                        'attachment_file_platform' => $c_file_platform,
                        'created_at'   => date('Y-m-d H:i:s'),
                      ];
                
                      DB::table('insufficiency_logs')->insert($insuff_log_data);

                      if(count($attach_on_select)>0)
                      {
                          $file_data=DB::table('insufficiency_attachments')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->get();

                          if(count($file_data)>0)
                          {
                              $path=public_path().'/uploads/clear-insuff/';
                              foreach($file_data as $file)
                              {
                                  if(File::exists($path.$file->file_name))
                                  {
                                      File::delete($path.$file->file_name);
                                  }
                              }

                              DB::table('insufficiency_attachments')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->delete();

                          }


                          $i=0;
                          $file_platform = 'web';
                          if($s3_config!=NULL)
                          {
                            $s3filePath = 'uploads/clear-insuff/';

                            if(!Storage::disk('s3')->exists($s3filePath))
                            {
                                Storage::disk('s3')->makeDirectory($s3filePath,0777, true, true);
                            }

                            foreach($attach_on_select as $item)
                            {
                              $file_platform = 'web';
                              $path=public_path().'/uploads/clear-insuff/';

                              if(File::exists($path.$attach_on_select[$i]))
                              {
                                $file_platform = 's3';
                                $file = Helper::createFileObject($path.$attach_on_select[$i]);

                                Storage::disk('s3')->put($s3filePath.$attach_on_select[$i],file_get_contents($file));

                                File::delete($path.$attach_on_select[$i]);
                              }

                              $insuff_file=[
                                'parent_id' => $parent_id,
                                'business_id' => $business_id,
                                'coc_id' => $jaf_dl->business_id,
                                'candidate_id' => $candidate_id,
                                'service_id'  => $service_id,
                                'jaf_form_data_id' => $jaf_dl->id,
                                'item_number' => $jaf_dl->check_item_number,
                                'status'=>'removed',
                                'file_name' => $attach_on_select[$i],
                                'file_platform' => $file_platform,
                                'created_by'   => Auth::user()->id,
                                'created_at'   => date('Y-m-d H:i:s'),
                                'updated_at' => date('Y-m-d H:i:s')
                              ];
                        
                              $file_id = DB::table('insufficiency_attachments')->insertGetId($insuff_file);
  
                              $i++;

                              if(File::exists($path.'tmp-files/'))
                              {
                                  File::cleanDirectory($path.'tmp-files/');
                              }
                            }
                          }
                          else
                          {
                            foreach($attach_on_select as $item)
                            {
                              $insuff_file=[
                                'parent_id' => $parent_id,
                                'business_id' => $business_id,
                                'coc_id' => $jaf_dl->business_id,
                                'candidate_id' => $candidate_id,
                                'service_id'  => $service_id,
                                'jaf_form_data_id' => $jaf_dl->id,
                                'item_number' => $jaf_dl->check_item_number,
                                'status'=>'removed',
                                'file_name' => $attach_on_select[$i],
                                'file_platform' => $file_platform,
                                'created_by'   => Auth::user()->id,
                                'created_at'   => date('Y-m-d H:i:s'),
                                'updated_at' => date('Y-m-d H:i:s')
                              ];
                        
                              $file_id = DB::table('insufficiency_attachments')->insertGetId($insuff_file);
  
                              $i++;
                            }
                          }
                      }

                      $ver_insuff=DB::table('verification_insufficiency')->where(['id'=>$ver_id])->first();

                      $candidates=DB::table('users as u')
                          ->select('u.*','j.business_id as coc_id','j.id as jaf_id','v.created_at as insuff_clear_date','v.created_by as insuff_clear_by','v.item_number','v.notes','s.verification_type','s.name as service_name','v.business_id as cust_id','v.attachment','v.updated_at','v.updated_by')
                          ->join('jaf_form_data as j','u.id','=','j.candidate_id')
                          ->join('verification_insufficiency as v','v.jaf_form_data_id','=','j.id')
                          ->join('services as s','s.id','=','v.service_id')
                          ->where(['u.user_type'=>'candidate','j.id'=>$item_id,'v.status'=>'removed','v.id'=>$ver_insuff->id])
                          ->first();

                      if($candidates!=NULL)
                      {
                        // $client=DB::table('users')->where(['id'=>$candidates->coc_id])->first();
                        // $name = $client->name;
                        // $email = $client->email;
                        // $msg= "Insufficiency Cleared For Candidate";
                        // $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                        // if($candidates->attachment!=NULL)
                        // {
                        //   $url = url('/').'/uploads/clear-insuff/'.$zipname;

                        //   if($s3_config!=NULL)
                        //   {
                        //     $filePath = 'uploads/clear-insuff/';

                        //     $disk = Storage::disk('s3');

                        //     $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                        //         'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                        //         'Key'                        => $filePath.$zipname,
                        //         'ResponseContentDisposition' => 'attachment;'//for download
                        //     ]);

                        //     $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');

                        //     $url = (string)$req->getUri();
                        //   }

                        //   $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>$url,'candidate'=>$candidates,'sender'=>$sender);
                        // }
                        // else
                        //   $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);
        
                        // Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email,$name) {
                        //   $message->to($email, $name)->subject
                        //       ('Clobminds Pvt Ltd - Insufficiency Notification');
                        //   $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                        // });

                        $kams = DB::table('key_account_managers')->where(['business_id'=>$candidates->business_id])->get();
                        if(count($kams)>0)
                        {
                          foreach($kams as $kam)
                          {
                              $user_data=DB::table('users')->where(['id'=>$kam->user_id])->first();

                              $name1 = $user_data->name;
                              $email1 = $user_data->email;
                              $msg= "Insufficiency Cleared For Candidate";
                              $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();

                              if($candidates->attachment!=NULL)
                              {
                                $url = url('/').'/uploads/clear-insuff/'.$zipname;

                                if($s3_config!=NULL)
                                {
                                  $filePath = 'uploads/clear-insuff/';

                                  $disk = Storage::disk('s3');

                                  $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                                      'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                                      'Key'                        => $filePath.$zipname,
                                      'ResponseContentDisposition' => 'attachment;'//for download
                                  ]);

                                  $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');

                                  $url = (string)$req->getUri();
                                }

                                $data  = array('name'=>$name1,'email'=>$email1,'msg'=>$msg,'link'=>$url,'candidate'=>$candidates,'sender'=>$sender);
                              }
                              else
                                $data  = array('name'=>$name1,'email'=>$email1,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);

                              Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email1,$name1) {
                                  $message->to($email1, $name1)->subject
                                      ('Clobminds Pvt Ltd - Insufficiency Notification');
                                  $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                              });

                          }
                        }

                        $ver_insuff_data=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$candidates->jaf_id,'status'=>'removed'])->first();

                        if($ver_insuff_data!=NULL)
                        {
                            $user_data=DB::table('users')->where(['id'=>$ver_insuff_data->created_by])->first();
                            $name = $user_data->name;
                            $email = $user_data->email;
                            $msg= "Insufficiency Cleared For Candidate";
                            $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                            if($candidates->attachment!=NULL)
                            {
                              $url = url('/').'/uploads/clear-insuff/'.$zipname;

                              if($s3_config!=NULL)
                              {
                                $filePath = 'uploads/clear-insuff/';

                                $disk = Storage::disk('s3');

                                $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                                    'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                                    'Key'                        => $filePath.$zipname,
                                    'ResponseContentDisposition' => 'attachment;'//for download
                                ]);

                                $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');

                                $url = (string)$req->getUri();
                              }

                              $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>$url,'candidate'=>$candidates,'sender'=>$sender);
                            }
                            else
                              $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);

                            Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email,$name) {
                              $message->to($email, $name)->subject
                                  ('Clobminds Pvt Ltd - Insufficiency Notification');
                              $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                            }); 
                        }

                      }

                  }else{
                      //update insuff
                      DB::table('jaf_form_data')->where(['id'=>$item_id])->update(['is_api_checked'=>'1','is_api_verified'=>'0','is_insufficiency'=>'1','verification_status'=>'failed','verified_at'=>date('Y-m-d H:i:s')]); 

                      $jaf_data=DB::table('jaf_form_data')->where(['id'=>$item_id])->first();

                      $insuff_log_data=[
                        'parent_id' => $parent_id,
                        'business_id' => $business_id,
                        'coc_id' => $jaf_dl->business_id,
                        'candidate_id' => $candidate_id,
                        'service_id'  => $service_id,
                        'jaf_form_data_id' => $jaf_dl->id,
                        'item_number' => $jaf_dl->check_item_number,
                        'activity_type'=> 'jaf-insuff',
                        'status'=>'failed',
                        'notes' => 'BGV Failed',
                        'created_by'   => Auth::user()->id,
                        'attachment'  => $zipname!=""?$zipname:NULL,
                        'attachment_file_platform' => $c_file_platform, 
                        'created_at'   => date('Y-m-d H:i:s'),
                      ];
                
                      DB::table('insufficiency_logs')->insert($insuff_log_data);


                      $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'raised'])->first();

                              if($ver_insuff!=NULL)
                              {
                                  $ver_insuff_data=[
                                    'notes' => 'BGV Failed',
                                    'updated_by' => Auth::user()->id,
                                    'updated_at' => date('Y-m-d H:i:s')
                                  ];

                                  DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'raised'])->update($ver_insuff_data);

                                  $ver_id=$ver_insuff->id;
                              }
                              else
                              {
                                $ver_insuff_data=[
                                  'parent_id' => $parent_id,
                                  'business_id' => $business_id,
                                  'coc_id' => $jaf_data->business_id,
                                  'candidate_id' => $candidate_id,
                                  'service_id'  => $service_id,
                                  'jaf_form_data_id' => $jaf_data->id,
                                  'item_number' => $jaf_data->check_item_number,
                                  'activity_type'=> 'jaf-insuff',
                                  'status'=>'raised',
                                  'notes' => 'BGV Failed',
                                  'created_by'   => Auth::user()->id,
                                  'created_at'   => date('Y-m-d H:i:s'),
                                ];
                          
                                $ver_id = DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);
                              }
    
                      
                  }

                  
                
              }

              if($is_updated){  
                //generate report here 
                // $this->generateCandidateReport($candidate_id);
                DB::commit();
                return response()->json([
                'fail' => false,
                'status'=>'ok',
                'message' => 'updated',                
                ], 200);
              }
              else{
                  DB::commit();
                  return response()->json([
                  'fail' => true,
                  'status' =>'no',
                  ], 200);
              }

            }
            // ./service

            // /service
            else if($service_id == 8){

              $jaf_passport = DB::table('jaf_form_data')->select('id','business_id','form_data','service_id','check_item_number')->where(['id'=>$item_id])->first();

              // $passport_file_no = $request->input('id_number');
              $dob = "";
              // $business_id = $jaf_passport->business_id; 
              $jaf_array = json_decode($jaf_passport->form_data, true);
              // print_r($jaf_array);
              foreach($jaf_array as $input){
                  if(array_key_exists('File Number',$input)){
                    $file_number = $input['File Number'];
                  }

                  if(array_key_exists('Date of Birth',$input) ){
                    $dob = $input['Date of Birth'];
                  }
              }

                $s3_config=NULL;
                $c_file_platform = 'web';
                $attach_on_select=[];
                $allowedextension=['jpg','jpeg','png','svg','pdf'];
                $zipname="";
                if($request->hasFile('attachment') && $request->file('attachment') !="")
                {
                    $filePath = public_path('/uploads/clear-insuff/'); 
                    $files= $request->file('attachment');
                    foreach($files as $file)
                    {
                            $extension = $file->getClientOriginalExtension();

                            $check = in_array($extension,$allowedextension);
                            $file_size = number_format(File::size($file) / 1048576, 2);

                            if(!$check)
                            {
                                return response()->json([
                                  'fail' => true,
                                  'errors' => ['attachment' => 'Only jpg,jpeg,png,pdf are allowed !'],
                                  'error_type'=>'validation'
                                ]);                        
                            }

                            if($file_size > 10)
                            {
                                return response()->json([
                                  'fail' => true,
                                  'error_type'=>'validation',
                                  'errors' => ['attachment' => 'The document size must be less than only 10mb Upload !'],
                                ]);                        
                            }
                    }

                    $zipname = 'clear-insuff-'.date('Ymdhis').'.zip';
                    $zip = new \ZipArchive();      
                    $zip->open(public_path().'/uploads/clear-insuff/'.$zipname, \ZipArchive::CREATE | \ZipArchive::OVERWRITE);

                    foreach($files as $file)
                    {
                        $file_data = $file->getClientOriginalName();
                        $tmp_data  = $candidate_id.'-'.date('mdYHis').'-'.$file_data; 
                        $data = $file->move($filePath, $tmp_data);       
                        $attach_on_select[]=$tmp_data;

                        $path=public_path()."/uploads/clear-insuff/".$tmp_data;
                        $zip->addFile($path, '/clear-insuff/'.basename($path));  
                    }

                    $zip->close();
                }

                $s3_config = S3ConfigTrait::s3Config();

                $path=public_path().'/uploads/clear-insuff/';

                if($s3_config!=NULL && $zipname!='')
                {
                  if(File::exists($path.$zipname))
                  {
                      $c_file_platform = 's3';

                      $s3filePath = 'uploads/clear-insuff/';
      
                      if(!Storage::disk('s3')->exists($s3filePath))
                      {
                          Storage::disk('s3')->makeDirectory($s3filePath,0777, true, true);
                      }
      
                      $file = Helper::createFileObject($path.$zipname);
      
                      Storage::disk('s3')->put($s3filePath.$zipname,file_get_contents($file));

                      File::delete($path.$zipname);
                  }

                }

                if(File::exists($path.'tmp-files/'))
                {
                    File::cleanDirectory($path.'tmp-files/');
                }

              //check first into master table
              $master_data = DB::table('passport_check_masters')->select('*')->where(['file_number'=>$file_number])->first();
              if($master_data !=null){

                $log_data = [
                  'parent_id'         =>$parent_id,
                  'business_id'       =>$business_id,
                  'candidate_id' => $candidate_id,
                  'service_id'        =>$service_id,
                  'source_type'       =>'SystemDb',
                  'api_client_id'     =>$master_data->api_client_id,
                  'passport_number'   =>$master_data->passport_number,
                  'full_name'         =>$master_data->full_name,
                  'file_number'       =>$master_data->file_number,
                  'dob'               => $master_data->dob,
                  'date_of_application'=>$master_data->date_of_application,
                  'is_verified'       =>'1',
                  'is_passport_exist' =>'1',
                  'price'             =>$checkprice_db!=NULL?$checkprice_db->price:$price,
                  'used_by'           => 'customer',
                  'user_id'            => $user_id,
                  'created_at'        =>date('Y-m-d H:i:s')
                  ];

                  DB::table('passport_checks')->insert($log_data);
                  // update the status
                  DB::table('jaf_form_data')->where(['id'=>$item_id])
                  ->update(['is_api_checked'=>'1','is_api_verified'=>'1','verification_status'=>'success','verified_at'=>date('Y-m-d H:i:s'),'is_insufficiency'=>'0','clear_insuff_notes'=>$request->comment,'clear_insuff_attachment' => $zipname!=NULL?$zipname:NULL,'clear_insuff_attachment_file_platform'=>$c_file_platform,'is_all_insuff_cleared' => 1,'insuff_cleared_by'=>Auth::user()->id,'updated_at'=>date('Y-m-d H:i:s')]); 
                  $is_updated=TRUE;

                  $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->first();

                      if($ver_insuff!=NULL)
                      {
                          $ver_insuff_data=[
                            'notes' => $request->comment,
                            'updated_by' => Auth::user()->id,
                            'attachment'  => $zipname!=""?$zipname:NULL, 
                            'attachment_file_platform' => $c_file_platform,
                            'updated_at' => date('Y-m-d H:i:s')
                          ];

                          DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->update($ver_insuff_data);

                          $ver_id=$ver_insuff->id;
                      }
                      else
                      {
                        $ver_insuff_data=[
                          'parent_id' => $parent_id,
                          'business_id' => $business_id,
                          'coc_id' => $jaf_passport->business_id,
                          'candidate_id' => $candidate_id,
                          'service_id'  => $jaf_passport->service_id,
                          'jaf_form_data_id' => $jaf_passport->id,
                          'item_number' => $jaf_passport->check_item_number,
                          'activity_type'=> 'jaf-insuff',
                          'status'=>'removed',
                          'notes' => $request->comment,
                          'attachment' => $zipname!=NULL?$zipname:NULL,
                          'attachment_file_platform' => $c_file_platform,
                          'created_by'   => Auth::user()->id,
                          'created_at'   => date('Y-m-d H:i:s'),
                          'updated_at' => date('Y-m-d H:i:s')
                        ];
                  
                        $ver_id=DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);

                      }

                      $insuff_log_data=[
                        'parent_id' => $parent_id,
                        'business_id' => $business_id,
                        'coc_id' => $jaf_passport->business_id,
                        'candidate_id' => $candidate_id,
                        'service_id'  => $service_id,
                        'jaf_form_data_id' => $jaf_passport->id,
                        'item_number' => $jaf_passport->check_item_number,
                        'activity_type'=> 'jaf-insuff',
                        'status'=>'removed',
                        'notes' => $request->comment,
                        'created_by'   => Auth::user()->id,
                        'attachment'  => $zipname!=""?$zipname:NULL, 
                        'attachment_file_platform' => $c_file_platform,
                        'created_at'   => date('Y-m-d H:i:s'),
                      ];
                
                      DB::table('insufficiency_logs')->insert($insuff_log_data);

                      if(count($attach_on_select)>0)
                      {
                          $file_data=DB::table('insufficiency_attachments')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->get();

                          if(count($file_data)>0)
                          {
                              $path=public_path().'/uploads/clear-insuff/';
                              foreach($file_data as $file)
                              {
                                  if(File::exists($path.$file->file_name))
                                  {
                                      File::delete($path.$file->file_name);
                                  }
                              }

                              DB::table('insufficiency_attachments')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->delete();

                          }

                          $i=0;
                          $file_platform= 'web';

                          if($s3_config!=NULL)
                          {
                            $s3filePath = 'uploads/clear-insuff/';

                            if(!Storage::disk('s3')->exists($s3filePath))
                            {
                                Storage::disk('s3')->makeDirectory($s3filePath,0777, true, true);
                            }

                            foreach($attach_on_select as $item)
                            {

                              $file_platform = 'web';
                              $path=public_path().'/uploads/clear-insuff/';

                              if(File::exists($path.$attach_on_select[$i]))
                              {
                                $file_platform = 's3';
                                $file = Helper::createFileObject($path.$attach_on_select[$i]);

                                Storage::disk('s3')->put($s3filePath.$attach_on_select[$i],file_get_contents($file));

                                File::delete($path.$attach_on_select[$i]);
                              }


                              $insuff_file=[
                                'parent_id' => $parent_id,
                                'business_id' => $business_id,
                                'coc_id' => $jaf_passport->business_id,
                                'candidate_id' => $candidate_id,
                                'service_id'  => $service_id,
                                'jaf_form_data_id' => $jaf_passport->id,
                                'item_number' => $jaf_passport->check_item_number,
                                'status'=>'removed',
                                'file_name' => $attach_on_select[$i],
                                'file_platform' => $file_platform,
                                'created_by'   => Auth::user()->id,
                                'created_at'   => date('Y-m-d H:i:s'),
                                'updated_at' => date('Y-m-d H:i:s')
                              ];
                        
                              $file_id = DB::table('insufficiency_attachments')->insertGetId($insuff_file);
  
                              $i++;

                              if(File::exists($path.'tmp-files/'))
                              {
                                  File::cleanDirectory($path.'tmp-files/');
                              }
                            }

                          }
                          else
                          {
                            foreach($attach_on_select as $item)
                            {
                              $insuff_file=[
                                'parent_id' => $parent_id,
                                'business_id' => $business_id,
                                'coc_id' => $jaf_passport->business_id,
                                'candidate_id' => $candidate_id,
                                'service_id'  => $service_id,
                                'jaf_form_data_id' => $jaf_passport->id,
                                'item_number' => $jaf_passport->check_item_number,
                                'status'=>'removed',
                                'file_name' => $attach_on_select[$i],
                                'file_platform' => $file_platform,
                                'created_by'   => Auth::user()->id,
                                'created_at'   => date('Y-m-d H:i:s'),
                                'updated_at' => date('Y-m-d H:i:s')
                              ];
                        
                              $file_id = DB::table('insufficiency_attachments')->insertGetId($insuff_file);
  
                              $i++;
                            }
                          }
                          
                      }

                      $ver_insuff=DB::table('verification_insufficiency')->where(['id'=>$ver_id])->first();

                      $candidates=DB::table('users as u')
                          ->select('u.*','j.business_id as coc_id','j.id as jaf_id','v.created_at as insuff_clear_date','v.created_by as insuff_clear_by','v.item_number','v.notes','s.verification_type','s.name as service_name','v.business_id as cust_id','v.attachment','v.updated_at','v.updated_by')
                          ->join('jaf_form_data as j','u.id','=','j.candidate_id')
                          ->join('verification_insufficiency as v','v.jaf_form_data_id','=','j.id')
                          ->join('services as s','s.id','=','v.service_id')
                          ->where(['u.user_type'=>'candidate','j.id'=>$item_id,'v.status'=>'removed','v.id'=>$ver_insuff->id])
                          ->first();

                      if($candidates!=NULL)
                      {
                        // $client=DB::table('users')->where(['id'=>$candidates->coc_id])->first();
                        // $name = $client->name;
                        // $email = $client->email;
                        // $msg= "Insufficiency Cleared For Candidate";
                        // $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                        // if($candidates->attachment!=NULL)
                        // {
                        //   $url = url('/').'/uploads/clear-insuff/'.$zipname;

                        //   if($s3_config!=NULL)
                        //   {
                        //     $filePath = 'uploads/clear-insuff/';

                        //     $disk = Storage::disk('s3');

                        //     $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                        //         'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                        //         'Key'                        => $filePath.$zipname,
                        //         'ResponseContentDisposition' => 'attachment;'//for download
                        //     ]);

                        //     $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');

                        //     $url = (string)$req->getUri();
                        //   }

                        //   $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>$url,'candidate'=>$candidates,'sender'=>$sender);
                        // }
                        // else
                        //   $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);
        
                        // Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email,$name) {
                        //   $message->to($email, $name)->subject
                        //       ('Clobminds Pvt Ltd - Insufficiency Notification');
                        //   $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                        // });

                        $kams = DB::table('key_account_managers')->where(['business_id'=>$candidates->business_id])->get();
                        if(count($kams)>0)
                        {
                          foreach($kams as $kam)
                          {
                              $user_data=DB::table('users')->where(['id'=>$kam->user_id])->first();

                              $name1 = $user_data->name;
                              $email1 = $user_data->email;
                              $msg= "Insufficiency Cleared For Candidate";
                              $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                              if($candidates->attachment!=NULL)
                              {
                                $url = url('/').'/uploads/clear-insuff/'.$zipname;

                                if($s3_config!=NULL)
                                {
                                  $filePath = 'uploads/clear-insuff/';

                                  $disk = Storage::disk('s3');

                                  $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                                      'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                                      'Key'                        => $filePath.$zipname,
                                      'ResponseContentDisposition' => 'attachment;'//for download
                                  ]);

                                  $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');

                                  $url = (string)$req->getUri();
                                }

                                $data  = array('name'=>$name1,'email'=>$email1,'msg'=>$msg,'link'=>$url,'candidate'=>$candidates,'sender'=>$sender);
                              }
                              else
                                $data  = array('name'=>$name1,'email'=>$email1,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);

                              Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email1,$name1) {
                                  $message->to($email1, $name1)->subject
                                      ('Clobminds Pvt Ltd - Insufficiency Notification');
                                  $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                              });

                          }
                        }

                        $ver_insuff_data=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$candidates->jaf_id,'status'=>'removed'])->first();

                        if($ver_insuff_data!=NULL)
                        {
                            $user_data=DB::table('users')->where(['id'=>$ver_insuff_data->created_by])->first();
                            $name = $user_data->name;
                            $email = $user_data->email;
                            $msg= "Insufficiency Cleared For Candidate";
                            $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();

                            if($candidates->attachment!=NULL)
                            {
                              $url = url('/').'/uploads/clear-insuff/'.$zipname;

                              if($s3_config!=NULL)
                              {
                                $filePath = 'uploads/clear-insuff/';

                                $disk = Storage::disk('s3');

                                $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                                    'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                                    'Key'                        => $filePath.$zipname,
                                    'ResponseContentDisposition' => 'attachment;'//for download
                                ]);

                                $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');

                                $url = (string)$req->getUri();
                              }

                              $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>$url,'candidate'=>$candidates,'sender'=>$sender);
                            }
                            else
                              $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);
                            
                            Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email,$name) {
                              $message->to($email, $name)->subject
                                  ('Clobminds Pvt Ltd - Insufficiency Notification');
                              $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                            }); 
                        }

                      }
                  
              }
              else{
                  //check from live API
                  // Setup request to send json via POST
                  $data = array(
                      'id_number' => $file_number,
                      'dob'       => date('Y-m-d',strtotime($dob)),
                      'async'         => true,
                  );
                  $payload = json_encode($data);
                  $apiURL = "https://kyc-api.aadhaarkyc.io/api/v1/passport/passport/passport-details";

                  $ch = curl_init();
                  curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);                
                  curl_setopt ($ch, CURLOPT_POST, 1);
                  $authorization = "Authorization: Bearer ".env('SUREPASS_PRODUCTION_TOKEN'); // Prepare the authorisation token
                  curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json' , $authorization )); // Inject the token into the header
                  curl_setopt($ch, CURLOPT_URL, $apiURL);
                  // Attach encoded JSON string to the POST fields
                  curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);
                  $resp = curl_exec ( $ch );
                  curl_close ( $ch );
                  $array_data =  json_decode($resp,true);
                  
                  if($array_data['success'])
                  {
                      //check if ID number is new then insert into DB
                      $checkIDInDB= DB::table('passport_check_masters')->where(['file_number'=>$file_number])->count();
                      if($checkIDInDB ==0)
                      {
                          
                          $data = [
                                  'api_client_id'     =>$array_data['data']['client_id'],
                                  'passport_number'   =>$array_data['data']['passport_number'],
                                  'full_name'         =>$array_data['data']['full_name'],
                                  'file_number'       =>$array_data['data']['file_number'],
                                  'date_of_application'=>$array_data['data']['date_of_application'],
                                  'is_api_verified'       =>'1',
                                  'is_passport_exist' =>'1',
                                  'created_at'        =>date('Y-m-d H:i:s')
                                  ];

                          DB::table('passport_check_masters')->insert($data);
                          
                          $master_data = DB::table('passport_check_masters')->select('*')->where(['file_number'=>$file_number])->first();

                          $log_data = [
                            'parent_id'         =>$parent_id,
                            'business_id'       =>$business_id,
                            'candidate_id' => $candidate_id,
                            'service_id'        =>$service_id,
                            'source_type'       =>'API',
                            'api_client_id'     =>$master_data->api_client_id,
                            'passport_number'   =>$master_data->passport_number,
                            'full_name'         =>$master_data->full_name,
                            'file_number'       =>$master_data->file_number,
                            'dob'               => $master_data->dob,
                            'date_of_application'=>$master_data->date_of_application,
                            'is_verified'       =>'1',
                            'is_passport_exist' =>'1',
                            'price'             =>$checkprice_db!=NULL?$checkprice_db->price:$price,
                            'used_by'           => 'customer',
                            'user_id'            => $user_id,
                            'created_at'        =>date('Y-m-d H:i:s')
                            ];
        
                        DB::table('passport_checks')->insert($log_data);
                      }
                      // update the status
                      DB::table('jaf_form_data')->where(['id'=>$item_id])
                      ->update(['is_api_checked'=>'1','is_api_verified'=>'1','verification_status'=>'success','verified_at'=>date('Y-m-d H:i:s'),'is_insufficiency'=>'0','clear_insuff_notes'=>$request->comment,'clear_insuff_attachment'=>$zipname!=NULL?$zipname:NULL,'clear_insuff_attachment_file_platform'=>$c_file_platform,'is_all_insuff_cleared' => 1,'insuff_cleared_by'=>Auth::user()->id,'updated_at'=>date('Y-m-d H:i:s')]); 
                      $is_updated=TRUE;

                      $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->first();

                      if($ver_insuff!=NULL)
                      {
                          $ver_insuff_data=[
                            'notes' => $request->comment,
                            'updated_by' => Auth::user()->id,
                            'attachment'  => $zipname!=""?$zipname:NULL, 
                            'attachment_file_platform' => $c_file_platform,
                            'updated_at' => date('Y-m-d H:i:s')
                          ];

                          DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->update($ver_insuff_data);

                          $ver_id=$ver_insuff->id;
                      }
                      else
                      {
                        $ver_insuff_data=[
                          'parent_id' => $parent_id,
                          'business_id' => $business_id,
                          'coc_id' => $jaf_passport->business_id,
                          'candidate_id' => $candidate_id,
                          'service_id'  => $jaf_passport->service_id,
                          'jaf_form_data_id' => $jaf_passport->id,
                          'item_number' => $jaf_passport->check_item_number,
                          'activity_type'=> 'jaf-insuff',
                          'status'=>'removed',
                          'notes' => $request->comment,
                          'attachment'=>$zipname!=NULL?$zipname:NULL,
                          'attachment_file_platform' => $c_file_platform,
                          'created_by'   => Auth::user()->id,
                          'created_at'   => date('Y-m-d H:i:s'),
                        ];
                  
                        $ver_id=DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);
    
                      }

                      $insuff_log_data=[
                        'parent_id' => $parent_id,
                        'business_id' => $business_id,
                        'coc_id' => $jaf_passport->business_id,
                        'candidate_id' => $candidate_id,
                        'service_id'  => $service_id,
                        'jaf_form_data_id' => $jaf_passport->id,
                        'item_number' => $jaf_passport->check_item_number,
                        'activity_type'=> 'jaf-insuff',
                        'status'=>'removed',
                        'notes' => $request->comment,
                        'created_by'   => Auth::user()->id,
                        'attachment'  => $zipname!=""?$zipname:NULL, 
                        'attachment_file_platform' => $c_file_platform,
                        'created_at'   => date('Y-m-d H:i:s'),
                      ];
                
                      DB::table('insufficiency_logs')->insert($insuff_log_data);

                      if(count($attach_on_select)>0)
                      {
                          $file_data=DB::table('insufficiency_attachments')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->get();

                          if(count($file_data)>0)
                          {
                              $path=public_path().'/uploads/clear-insuff/';
                              foreach($file_data as $file)
                              {
                                  if(File::exists($path.$file->file_name))
                                  {
                                      File::delete($path.$file->file_name);
                                  }
                              }

                              DB::table('insufficiency_attachments')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->delete();

                          }

                          $i=0;
                          $file_platform = 'web';
                          if($s3_config!=NULL)
                          {
                            $s3filePath = 'uploads/clear-insuff/';

                            if(!Storage::disk('s3')->exists($s3filePath))
                            {
                                Storage::disk('s3')->makeDirectory($s3filePath,0777, true, true);
                            }

                            foreach($attach_on_select as $item)
                            {
                              $file_platform = 'web';
                              $path=public_path().'/uploads/clear-insuff/';

                              if(File::exists($path.$attach_on_select[$i]))
                              {
                                $file_platform = 's3';
                                $file = Helper::createFileObject($path.$attach_on_select[$i]);

                                Storage::disk('s3')->put($s3filePath.$attach_on_select[$i],file_get_contents($file));

                                File::delete($path.$attach_on_select[$i]);
                              }


                              $insuff_file=[
                                'parent_id' => $parent_id,
                                'business_id' => $business_id,
                                'coc_id' => $jaf_passport->business_id,
                                'candidate_id' => $candidate_id,
                                'service_id'  => $service_id,
                                'jaf_form_data_id' => $jaf_passport->id,
                                'item_number' => $jaf_passport->check_item_number,
                                'status'=>'removed',
                                'file_name' => $attach_on_select[$i],
                                'file_platform' => $file_platform,
                                'created_by'   => Auth::user()->id,
                                'created_at'   => date('Y-m-d H:i:s'),
                                'updated_at' => date('Y-m-d H:i:s')
                              ];
                        
                              $file_id = DB::table('insufficiency_attachments')->insertGetId($insuff_file);
  
                              $i++;

                              if(File::exists($path.'tmp-files/'))
                              {
                                  File::cleanDirectory($path.'tmp-files/');
                              }
                            }

                          }
                          else
                          {
                              foreach($attach_on_select as $item)
                              {
                                $insuff_file=[
                                  'parent_id' => $parent_id,
                                  'business_id' => $business_id,
                                  'coc_id' => $jaf_passport->business_id,
                                  'candidate_id' => $candidate_id,
                                  'service_id'  => $service_id,
                                  'jaf_form_data_id' => $jaf_passport->id,
                                  'item_number' => $jaf_passport->check_item_number,
                                  'status'=>'removed',
                                  'file_name' => $attach_on_select[$i],
                                  'file_platform' => $file_platform,
                                  'created_by'   => Auth::user()->id,
                                  'created_at'   => date('Y-m-d H:i:s'),
                                  'updated_at' => date('Y-m-d H:i:s')
                                ];
                          
                                $file_id = DB::table('insufficiency_attachments')->insertGetId($insuff_file);
    
                                $i++;
                              }
                          }
                          
                      }

                      $ver_insuff=DB::table('verification_insufficiency')->where(['id'=>$ver_id])->first();

                      $candidates=DB::table('users as u')
                          ->select('u.*','j.business_id as coc_id','j.id as jaf_id','v.created_at as insuff_clear_date','v.created_by as insuff_clear_by','v.item_number','v.notes','s.verification_type','s.name as service_name','v.business_id as cust_id','v.attachment','v.updated_at','v.updated_by')
                          ->join('jaf_form_data as j','u.id','=','j.candidate_id')
                          ->join('verification_insufficiency as v','v.jaf_form_data_id','=','j.id')
                          ->join('services as s','s.id','=','v.service_id')
                          ->where(['u.user_type'=>'candidate','j.id'=>$item_id,'v.status'=>'removed','v.id'=>$ver_insuff->id])
                          ->first();

                      if($candidates!=NULL)
                      {
                        // $client=DB::table('users')->where(['id'=>$candidates->coc_id])->first();
                        // $name = $client->name;
                        // $email = $client->email;
                        // $msg= "Insufficiency Cleared For Candidate";
                        // $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                        // if($candidates->attachment!=NULL)
                        // {
                        //   $url = url('/').'/uploads/clear-insuff/'.$zipname;
  
                        //   if($s3_config!=NULL)
                        //   {
                        //     $filePath = 'uploads/clear-insuff/';
  
                        //     $disk = Storage::disk('s3');
  
                        //     $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                        //         'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                        //         'Key'                        => $filePath.$zipname,
                        //         'ResponseContentDisposition' => 'attachment;'//for download
                        //     ]);
  
                        //     $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');
  
                        //     $url = (string)$req->getUri();
                        //   }
  
                        //   $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>$url,'candidate'=>$candidates,'sender'=>$sender);
                        // }
                        // else
                        //   $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);
        
                        // Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email,$name) {
                        //   $message->to($email, $name)->subject
                        //       ('Clobminds Pvt Ltd - Insufficiency Notification');
                        //   $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                        // });

                        $kams = DB::table('key_account_managers')->where(['business_id'=>$candidates->business_id])->get();
                        if(count($kams)>0)
                        {
                          foreach($kams as $kam)
                          {
                              $user_data=DB::table('users')->where(['id'=>$kam->user_id])->first();

                              $name1 = $user_data->name;
                              $email1 = $user_data->email;
                              $msg= "Insufficiency Cleared For Candidate";
                              $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();

                              if($candidates->attachment!=NULL)
                              {
                                $url = url('/').'/uploads/clear-insuff/'.$zipname;
        
                                if($s3_config!=NULL)
                                {
                                  $filePath = 'uploads/clear-insuff/';
        
                                  $disk = Storage::disk('s3');
        
                                  $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                                      'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                                      'Key'                        => $filePath.$zipname,
                                      'ResponseContentDisposition' => 'attachment;'//for download
                                  ]);
        
                                  $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');
        
                                  $url = (string)$req->getUri();
                                }
        
                                $data  = array('name'=>$name1,'email'=>$email1,'msg'=>$msg,'link'=>$url,'candidate'=>$candidates,'sender'=>$sender);
                              }
                              else
                                $data  = array('name'=>$name1,'email'=>$email1,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);

                              Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email1,$name1) {
                                  $message->to($email1, $name1)->subject
                                      ('Clobminds Pvt Ltd - Insufficiency Notification');
                                  $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                              });

                          }
                        }

                        $ver_insuff_data=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$candidates->jaf_id,'status'=>'removed'])->first();

                        if($ver_insuff_data!=NULL)
                        {
                            $user_data=DB::table('users')->where(['id'=>$ver_insuff_data->created_by])->first();
                            $name = $user_data->name;
                            $email = $user_data->email;
                            $msg= "Insufficiency Cleared For Candidate";
                            $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();

                            if($candidates->attachment!=NULL)
                            {
                              $url = url('/').'/uploads/clear-insuff/'.$zipname;
      
                              if($s3_config!=NULL)
                              {
                                $filePath = 'uploads/clear-insuff/';
      
                                $disk = Storage::disk('s3');
      
                                $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                                    'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                                    'Key'                        => $filePath.$zipname,
                                    'ResponseContentDisposition' => 'attachment;'//for download
                                ]);
      
                                $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');
      
                                $url = (string)$req->getUri();
                              }
      
                              $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>$url,'candidate'=>$candidates,'sender'=>$sender);
                            }
                            else
                              $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);

                            
                            Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email,$name) {
                              $message->to($email, $name)->subject
                                  ('Clobminds Pvt Ltd - Insufficiency Notification');
                              $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                            }); 
                        }

                      }

                      
                  }
                  else{
                      //update insuff
                      DB::table('jaf_form_data')->where(['id'=>$item_id])->update(['is_api_checked'=>'1','is_api_verified'=>'0','is_insufficiency'=>'1','verification_status'=>'failed','verified_at'=>date('Y-m-d H:i:s')]); 

                      $jaf_data=DB::table('jaf_form_data')->where(['id'=>$item_id])->first();
                      $insuff_log_data=[
                        'parent_id' => $parent_id,
                        'business_id' => $business_id,
                        'coc_id' => $jaf_passport->business_id,
                        'candidate_id' => $candidate_id,
                        'service_id'  => $service_id,
                        'jaf_form_data_id' => $jaf_passport->id,
                        'item_number' => $jaf_passport->check_item_number,
                        'activity_type'=> 'jaf-insuff',
                        'status'=>'failed',
                        'notes' => 'BGV Failed',
                        'created_by'   => Auth::user()->id,
                        'attachment'  => $zipname!=""?$zipname:NULL,
                        'attachment_file_platform' => $c_file_platform, 
                        'created_at'   => date('Y-m-d H:i:s'),
                      ];
                
                      DB::table('insufficiency_logs')->insert($insuff_log_data);

                      $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'raised'])->first();

                              if($ver_insuff!=NULL)
                              {
                                  $ver_insuff_data=[
                                    'notes' => 'BGV Failed',
                                    'updated_by' => Auth::user()->id,
                                    'updated_at' => date('Y-m-d H:i:s')
                                  ];

                                  DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'raised'])->update($ver_insuff_data);

                                  $ver_id=$ver_insuff->id;
                              }
                              else
                              {
                                $ver_insuff_data=[
                                  'parent_id' => $parent_id,
                                  'business_id' => $business_id,
                                  'coc_id' => $jaf_data->business_id,
                                  'candidate_id' => $candidate_id,
                                  'service_id'  => $service_id,
                                  'jaf_form_data_id' => $jaf_data->id,
                                  'item_number' => $jaf_data->check_item_number,
                                  'activity_type'=> 'jaf-insuff',
                                  'status'=>'raised',
                                  'notes' => 'BGV Failed',
                                  'created_by'   => Auth::user()->id,
                                  'created_at'   => date('Y-m-d H:i:s'),
                                ];
                          
                                $ver_id = DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);
                              }
                  }
              }

              if($is_updated){  
                //generate report here 
                // $this->generateCandidateReport($candidate_id);
                DB::commit();
                return response()->json([
                'fail' => false,
                'status'=>'ok',
                'message' => 'updated',                
                ], 200);
              }
              else{
                  DB::commit();
                  return response()->json([
                  'fail' => true,
                  'status' =>'no',
                  ], 200);
              }

            }
            // ./service
            else if($service_id==12){
              $jaf_bank = DB::table('jaf_form_data')->select('id','business_id','form_data','service_id','check_item_number')->where(['id'=>$item_id])->first();

              // $passport_file_no = $request->input('id_number');
              $account_no="";
              $ifsc_code = "";
              // $business_id = $jaf_bank->business_id; 
              $jaf_array = json_decode($jaf_bank->form_data, true);
              // print_r($jaf_array);
                foreach($jaf_array as $input){
                    if(array_key_exists('Account Number',$input)){
                      $account_no = $input['Account Number'];
                    }

                    if(array_key_exists('IFSC Code',$input) ){
                      $ifsc_code = $input['IFSC Code'];
                    }
                }

                $s3_config=NULL;
                $c_file_platform = 'web';
                $attach_on_select=[];
                $allowedextension=['jpg','jpeg','png','svg','pdf'];
                $zipname="";
                if($request->hasFile('attachment') && $request->file('attachment') !="")
                {
                    $filePath = public_path('/uploads/clear-insuff/'); 
                    $files= $request->file('attachment');
                    foreach($files as $file)
                    {
                            $extension = $file->getClientOriginalExtension();

                            $check = in_array($extension,$allowedextension);

                            $file_size = number_format(File::size($file) / 1048576, 2);

                            if(!$check)
                            {
                                return response()->json([
                                  'fail' => true,
                                  'errors' => ['attachment' => 'Only jpg,jpeg,png,pdf are allowed !'],
                                  'error_type'=>'validation'
                                ]);                        
                            }

                            if($file_size > 10)
                            {
                                return response()->json([
                                  'fail' => true,
                                  'error_type'=>'validation',
                                  'errors' => ['attachment' => 'The document size must be less than only 10mb Upload !'],
                                ]);                        
                            }
                    }

                    $zipname = 'clear-insuff-'.date('Ymdhis').'.zip';
                    $zip = new \ZipArchive();      
                    $zip->open(public_path().'/uploads/clear-insuff/'.$zipname, \ZipArchive::CREATE | \ZipArchive::OVERWRITE);

                    foreach($files as $file)
                    {
                        $file_data = $file->getClientOriginalName();
                        $tmp_data  = $candidate_id.'-'.date('mdYHis').'-'.$file_data; 
                        $data = $file->move($filePath, $tmp_data);       
                        $attach_on_select[]=$tmp_data;

                        $path=public_path()."/uploads/clear-insuff/".$tmp_data;
                        $zip->addFile($path, '/clear-insuff/'.basename($path));  
                    }

                    $zip->close();
                }

                $s3_config = S3ConfigTrait::s3Config();

                $path=public_path().'/uploads/clear-insuff/';

                if($s3_config!=NULL && $zipname!='')
                {
                  if(File::exists($path.$zipname))
                  {
                      $c_file_platform = 's3';

                      $s3filePath = 'uploads/clear-insuff/';
      
                      if(!Storage::disk('s3')->exists($s3filePath))
                      {
                          Storage::disk('s3')->makeDirectory($s3filePath,0777, true, true);
                      }
      
                      $file = Helper::createFileObject($path.$zipname);
      
                      Storage::disk('s3')->put($s3filePath.$zipname,file_get_contents($file));

                      File::delete($path.$zipname);
                  }

                }

                if(File::exists($path.'tmp-files/'))
                {
                    File::cleanDirectory($path.'tmp-files/');
                }

                $master_data = DB::table('bank_account_check_masters')->select('*')->where(['account_number'=>$account_no])->first();
                if($master_data !=null){

                  $log_data = [
                    'parent_id'         =>$parent_id,
                    'business_id'       =>$business_id,
                    'service_id'        =>$service_id,
                    'candidate_id' => $candidate_id,
                    'source_type'       =>'SystemDb',
                    'api_client_id'     =>$master_data->api_client_id,
                    'account_number'    =>$master_data->account_number,
                    'full_name'         =>$master_data->full_name,
                    'ifsc_code'         =>$master_data->ifsc_code,
                    'is_verified'       =>'1',
                    'is_account_exist' =>'1',
                    'price'             =>$checkprice_db!=NULL?$checkprice_db->price:$price,
                    'used_by'           =>'customer',
                    'user_id'            => $user_id,
                    'created_at'        =>date('Y-m-d H:i:s')
                    ];

                  DB::table('bank_account_checks')->insert($log_data);

                  DB::table('jaf_form_data')->where(['id'=>$item_id])
                                          ->update(['is_api_checked'=>'1','is_api_verified'=>'1','verification_status'=>'success','verified_at'=>date('Y-m-d H:i:s'),'is_insufficiency'=>'0','clear_insuff_notes'=>$request->comment,'clear_insuff_attachment' => $zipname!=NULL?$zipname:NULL,'clear_insuff_attachment_file_platform'=>$c_file_platform,'is_all_insuff_cleared' => 1,'insuff_cleared_by'=>Auth::user()->id,'updated_at'=>date('Y-m-d H:i:s')]); 
                  $is_updated=TRUE;

                  $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->first();

                  if($ver_insuff!=NULL)
                  {
                      $ver_insuff_data=[
                        'notes' => $request->comment,
                        'updated_by' => Auth::user()->id,
                        'attachment'  => $zipname!=""?$zipname:NULL, 
                        'attachment_file_platform' => $c_file_platform,
                        'updated_at' => date('Y-m-d H:i:s')
                      ];

                      DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->update($ver_insuff_data);

                      $ver_id=$ver_insuff->id;
                  }
                  else
                  {
                    $ver_insuff_data=[
                      'parent_id' => $parent_id,
                      'business_id' => $business_id,
                      'coc_id' => $jaf_bank->business_id,
                      'candidate_id' => $candidate_id,
                      'service_id'  => $jaf_bank->service_id,
                      'jaf_form_data_id' => $jaf_bank->id,
                      'item_number' => $jaf_bank->check_item_number,
                      'activity_type'=> 'jaf-insuff',
                      'status'=>'removed',
                      'notes' => $request->comment,
                      'attachment' => $zipname!=NULL?$zipname:NULL,
                      'attachment_file_platform' => $c_file_platform,
                      'created_by'   => Auth::user()->id,
                      'created_at'   => date('Y-m-d H:i:s'),
                    ];
              
                    $ver_id=DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);
                  } 

                  $insuff_log_data=[
                    'parent_id' => $parent_id,
                    'business_id' => $business_id,
                    'coc_id' => $jaf_bank->business_id,
                    'candidate_id' => $candidate_id,
                    'service_id'  => $service_id,
                    'jaf_form_data_id' => $jaf_bank->id,
                    'item_number' => $jaf_bank->check_item_number,
                    'activity_type'=> 'jaf-insuff',
                    'status'=>'removed',
                    'notes' => $request->comment,
                    'created_by'   => Auth::user()->id,
                    'attachment'  => $zipname!=""?$zipname:NULL,
                    'attachment_file_platform' => $c_file_platform, 
                    'created_at'   => date('Y-m-d H:i:s'),
                  ];
            
                  DB::table('insufficiency_logs')->insert($insuff_log_data);

                  if(count($attach_on_select)>0)
                  {
                      $file_data=DB::table('insufficiency_attachments')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->get();

                      if(count($file_data)>0)
                      {
                          $path=public_path().'/uploads/clear-insuff/';
                          foreach($file_data as $file)
                          {
                              if(File::exists($path.$file->file_name))
                              {
                                  File::delete($path.$file->file_name);
                              }
                          }

                          DB::table('insufficiency_attachments')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->delete();

                      }

                      $i=0;
                      $file_platform = 'web';

                      if($s3_config!=NULL)
                      {
                          $s3filePath = 'uploads/clear-insuff/';

                          if(!Storage::disk('s3')->exists($s3filePath))
                          {
                              Storage::disk('s3')->makeDirectory($s3filePath,0777, true, true);
                          }

                          foreach($attach_on_select as $item)
                          {

                            $file_platform = 'web';
                            $path=public_path().'/uploads/clear-insuff/';

                            if(File::exists($path.$attach_on_select[$i]))
                            {
                              $file_platform = 's3';
                              $file = Helper::createFileObject($path.$attach_on_select[$i]);

                              Storage::disk('s3')->put($s3filePath.$attach_on_select[$i],file_get_contents($file));

                              File::delete($path.$attach_on_select[$i]);
                            }

                            $insuff_file=[
                              'parent_id' => $parent_id,
                              'business_id' => $business_id,
                              'coc_id' => $jaf_bank->business_id,
                              'candidate_id' => $candidate_id,
                              'service_id'  => $service_id,
                              'jaf_form_data_id' => $jaf_bank->id,
                              'item_number' => $jaf_bank->check_item_number,
                              'status'=>'removed',
                              'file_name' => $attach_on_select[$i],
                              'file_platform' => $file_platform,
                              'created_by'   => Auth::user()->id,
                              'created_at'   => date('Y-m-d H:i:s'),
                              'updated_at' => date('Y-m-d H:i:s')
                            ];
                      
                            $file_id = DB::table('insufficiency_attachments')->insertGetId($insuff_file);
    
                            $i++;

                            if(File::exists($path.'tmp-files/'))
                            {
                                File::cleanDirectory($path.'tmp-files/');
                            }
                          }
                      }
                      else
                      {
                          foreach($attach_on_select as $item)
                          {
                            $insuff_file=[
                              'parent_id' => $parent_id,
                              'business_id' => $business_id,
                              'coc_id' => $jaf_bank->business_id,
                              'candidate_id' => $candidate_id,
                              'service_id'  => $service_id,
                              'jaf_form_data_id' => $jaf_bank->id,
                              'item_number' => $jaf_bank->check_item_number,
                              'status'=>'removed',
                              'file_name' => $attach_on_select[$i],
                              'file_platform' => $file_platform,
                              'created_by'   => Auth::user()->id,
                              'created_at'   => date('Y-m-d H:i:s'),
                              'updated_at' => date('Y-m-d H:i:s')
                            ];
                      
                            $file_id = DB::table('insufficiency_attachments')->insertGetId($insuff_file);
    
                            $i++;
                          }
                      }

                  }

                  $ver_insuff=DB::table('verification_insufficiency')->where(['id'=>$ver_id])->first();

                  $candidates=DB::table('users as u')
                      ->select('u.*','j.business_id as coc_id','j.id as jaf_id','v.created_at as insuff_clear_date','v.created_by as insuff_clear_by','v.item_number','v.notes','s.verification_type','s.name as service_name','v.business_id as cust_id','v.attachment','v.updated_at','v.updated_by')
                      ->join('jaf_form_data as j','u.id','=','j.candidate_id')
                      ->join('verification_insufficiency as v','v.jaf_form_data_id','=','j.id')
                      ->join('services as s','s.id','=','v.service_id')
                      ->where(['u.user_type'=>'candidate','j.id'=>$item_id,'v.status'=>'removed','v.id'=>$ver_insuff->id])
                      ->first();

                      if($candidates!=NULL)
                      {
                        // $client=DB::table('users')->where(['id'=>$candidates->coc_id])->first();
                        // $name = $client->name;
                        // $email = $client->email;
                        // $msg= "Insufficiency Cleared For Candidate";
                        // $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                        // if($candidates->attachment!=NULL)
                        // {
                        //   $url = url('/').'/uploads/clear-insuff/'.$zipname;

                        //   if($s3_config!=NULL)
                        //   {
                        //     $filePath = 'uploads/clear-insuff/';

                        //     $disk = Storage::disk('s3');

                        //     $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                        //         'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                        //         'Key'                        => $filePath.$zipname,
                        //         'ResponseContentDisposition' => 'attachment;'//for download
                        //     ]);

                        //     $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');

                        //     $url = (string)$req->getUri();
                        //   }

                        //   $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>$url,'candidate'=>$candidates,'sender'=>$sender);
                        // }
                        // else
                        //   $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);
        
                        // Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email,$name) {
                        //   $message->to($email, $name)->subject
                        //       ('Clobminds Pvt Ltd - Insufficiency Notification');
                        //   $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                        // });

                        $kams = DB::table('key_account_managers')->where(['business_id'=>$candidates->business_id])->get();
                        if(count($kams)>0)
                        {
                          foreach($kams as $kam)
                          {
                              $user_data=DB::table('users')->where(['id'=>$kam->user_id])->first();

                              $name1 = $user_data->name;
                              $email1 = $user_data->email;
                              $msg= "Insufficiency Cleared For Candidate";
                              $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();

                              if($candidates->attachment!=NULL)
                              {
                                $url = url('/').'/uploads/clear-insuff/'.$zipname;

                                if($s3_config!=NULL)
                                {
                                  $filePath = 'uploads/clear-insuff/';

                                  $disk = Storage::disk('s3');

                                  $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                                      'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                                      'Key'                        => $filePath.$zipname,
                                      'ResponseContentDisposition' => 'attachment;'//for download
                                  ]);

                                  $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');

                                  $url = (string)$req->getUri();
                                }

                                $data  = array('name'=>$name1,'email'=>$email1,'msg'=>$msg,'link'=>$url,'candidate'=>$candidates,'sender'=>$sender);
                              }
                              else
                                $data  = array('name'=>$name1,'email'=>$email1,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);

                              Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email1,$name1) {
                                  $message->to($email1, $name1)->subject
                                      ('Clobminds Pvt Ltd - Insufficiency Notification');
                                  $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                              });

                          }
                        }

                        $ver_insuff_data=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$candidates->jaf_id,'status'=>'removed'])->first();

                        if($ver_insuff_data!=NULL)
                        {
                            $user_data=DB::table('users')->where(['id'=>$ver_insuff_data->created_by])->first();
                            $name = $user_data->name;
                            $email = $user_data->email;
                            $msg= "Insufficiency Cleared For Candidate";
                            $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();

                            if($candidates->attachment!=NULL)
                            {
                              $url = url('/').'/uploads/clear-insuff/'.$zipname;

                              if($s3_config!=NULL)
                              {
                                $filePath = 'uploads/clear-insuff/';

                                $disk = Storage::disk('s3');

                                $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                                    'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                                    'Key'                        => $filePath.$zipname,
                                    'ResponseContentDisposition' => 'attachment;'//for download
                                ]);

                                $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');

                                $url = (string)$req->getUri();
                              }

                              $data  = array('name'=>$name1,'email'=>$email1,'msg'=>$msg,'link'=>$url,'candidate'=>$candidates,'sender'=>$sender);
                            }
                            else
                              $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);
                            
                            Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email,$name) {
                              $message->to($email, $name)->subject
                                  ('Clobminds Pvt Ltd - Insufficiency Notification');
                              $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                            }); 
                        }

                      }

                }
                else{
                  //check from live API
                  // Setup request to send json via POST
                  $data = array(
                    'id_number' => $account_no,
                    'ifsc'      => $ifsc_code,
                    'async'         => true,
                    );
                    $payload = json_encode($data);
                    $apiURL = "https://kyc-api.aadhaarkyc.io/api/v1/bank-verification/";

                    $ch = curl_init();
                    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);                
                    curl_setopt ($ch, CURLOPT_POST, 1);
                    $authorization = "Authorization: Bearer ".env('SUREPASS_PRODUCTION_TOKEN'); // Prepare the authorisation token
                    curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json' , $authorization )); // Inject the token into the header
                    curl_setopt($ch, CURLOPT_URL, $apiURL);
                    // Attach encoded JSON string to the POST fields
                    curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);
                    $resp = curl_exec ( $ch );
                    curl_close ( $ch );
                    $array_data =  json_decode($resp,true);
                    // var_dump($resp); die;
                    if($array_data['success'])
                    {
                      //check if ID number is new then insert into DB
                      $checkIDInDB= DB::table('bank_account_check_masters')->where(['account_number'=>$account_no])->count();
                      if($checkIDInDB ==0)
                      {
                          
                          $data = [
                                  'api_client_id'     =>$array_data['data']['client_id'],
                                  'account_number'    =>$account_no,
                                  'full_name'         =>$array_data['data']['full_name'],
                                  'ifsc_code'         =>$request->input('ifsc'),
                                  'is_verified'       =>'1',
                                  'is_account_exist' =>'1',
                                  'created_at'        =>date('Y-m-d H:i:s')
                                  ];

                          DB::table('bank_account_check_masters')->insert($data);
                          
                          $master_data = DB::table('bank_account_check_masters')->select('*')->where(['account_number'=>$account_no])->first();

                          $log_data = [
                            'parent_id'         =>$parent_id,
                            'business_id'       =>$business_id,
                            'service_id'        =>$service_id,
                            'candidate_id' => $candidate_id,
                            'source_type'       =>'API',
                            'api_client_id'     =>$master_data->api_client_id,
                            'account_number'    =>$master_data->account_number,
                            'full_name'         =>$master_data->full_name,
                            'ifsc_code'         =>$master_data->ifsc_code,
                            'is_verified'       =>'1',
                            'is_account_exist' =>'1',
                            'price'             =>$checkprice_db!=NULL?$checkprice_db->price:$price,
                            'used_by'           =>'customer',
                            'user_id'            => $user_id,
                            'created_at'        =>date('Y-m-d H:i:s')
                            ];
        
                        DB::table('bank_account_checks')->insert($log_data);
                      }
                      // update the status
                      DB::table('jaf_form_data')->where(['id'=>$item_id])
                                          ->update(['is_api_checked'=>'1','is_api_verified'=>'1','verification_status'=>'success','verified_at'=>date('Y-m-d H:i:s'),'is_insufficiency'=>'0','clear_insuff_notes'=>$request->comment,'clear_insuff_attachment' => $zipname!=NULL?$zipname:NULL,'clear_insuff_attachment_file_platform'=>$c_file_platform,'is_all_insuff_cleared' => 1,'insuff_cleared_by'=>Auth::user()->id,'updated_at'=>date('Y-m-d H:i:s')]); 
                      $is_updated=TRUE;

                      $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->first();

                      if($ver_insuff!=NULL)
                      {
                          $ver_insuff_data=[
                            'notes' => $request->comment,
                            'updated_by' => Auth::user()->id,
                            'attachment'  => $zipname!=""?$zipname:NULL,
                            'attachment_file_platform' => $c_file_platform, 
                            'updated_at' => date('Y-m-d H:i:s')
                          ];

                          DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->update($ver_insuff_data);

                          $ver_id=$ver_insuff->id;
                      }
                      else
                      {
                        $ver_insuff_data=[
                          'parent_id' => $parent_id,
                          'business_id' => $business_id,
                          'coc_id' => $jaf_bank->business_id,
                          'candidate_id' => $candidate_id,
                          'service_id'  => $jaf_bank->service_id,
                          'jaf_form_data_id' => $jaf_bank->id,
                          'item_number' => $jaf_bank->check_item_number,
                          'activity_type'=> 'jaf-insuff',
                          'status'=>'removed',
                          'notes' => $request->comment,
                          'attachment' => $zipname!=NULL?$zipname:NULL,
                          'attachment_file_platform' => $c_file_platform,
                          'created_by'   => Auth::user()->id,
                          'created_at'   => date('Y-m-d H:i:s'),
                        ];
                  
                        $ver_id=DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);
                      }

                      $insuff_log_data=[
                        'parent_id' => $parent_id,
                        'business_id' => $business_id,
                        'coc_id' => $jaf_bank->business_id,
                        'candidate_id' => $candidate_id,
                        'service_id'  => $service_id,
                        'jaf_form_data_id' => $jaf_bank->id,
                        'item_number' => $jaf_bank->check_item_number,
                        'activity_type'=> 'jaf-insuff',
                        'status'=>'removed',
                        'notes' => $request->comment,
                        'created_by'   => Auth::user()->id,
                        'attachment'  => $zipname!=""?$zipname:NULL, 
                        'attachment_file_platform' => $c_file_platform,
                        'created_at'   => date('Y-m-d H:i:s'),
                      ];
                
                      DB::table('insufficiency_logs')->insert($insuff_log_data);

                      if(count($attach_on_select)>0)
                      {
                          $file_data=DB::table('insufficiency_attachments')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->get();

                          if(count($file_data)>0)
                          {
                              $path=public_path().'/uploads/clear-insuff/';
                              foreach($file_data as $file)
                              {
                                  if(File::exists($path.$file->file_name))
                                  {
                                      File::delete($path.$file->file_name);
                                  }
                              }

                              DB::table('insufficiency_attachments')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->delete();

                          }

                          $i=0;
                          $file_platform = 'web';

                          if($s3_config!=NULL)
                          {
                              $s3filePath = 'uploads/clear-insuff/';

                              if(!Storage::disk('s3')->exists($s3filePath))
                              {
                                  Storage::disk('s3')->makeDirectory($s3filePath,0777, true, true);
                              }

                              foreach($attach_on_select as $item)
                              {

                                $file_platform = 'web';
                                $path=public_path().'/uploads/clear-insuff/';

                                if(File::exists($path.$attach_on_select[$i]))
                                {
                                  $file_platform = 's3';
                                  $file = Helper::createFileObject($path.$attach_on_select[$i]);

                                  Storage::disk('s3')->put($s3filePath.$attach_on_select[$i],file_get_contents($file));

                                  File::delete($path.$attach_on_select[$i]);
                                }

                                $insuff_file=[
                                  'parent_id' => $parent_id,
                                  'business_id' => $business_id,
                                  'coc_id' => $jaf_bank->business_id,
                                  'candidate_id' => $candidate_id,
                                  'service_id'  => $service_id,
                                  'jaf_form_data_id' => $jaf_bank->id,
                                  'item_number' => $jaf_bank->check_item_number,
                                  'status'=>'removed',
                                  'file_name' => $attach_on_select[$i],
                                  'file_platform' => $file_platform,
                                  'created_by'   => Auth::user()->id,
                                  'created_at'   => date('Y-m-d H:i:s'),
                                  'updated_at' => date('Y-m-d H:i:s')
                                ];
                          
                                $file_id = DB::table('insufficiency_attachments')->insertGetId($insuff_file);
    
                                $i++;

                                if(File::exists($path.'tmp-files/'))
                                {
                                  File::cleanDirectory($path.'tmp-files/');
                                }
                              }
                          }
                          else
                          {
                              foreach($attach_on_select as $item)
                              {
                                $insuff_file=[
                                  'parent_id' => $parent_id,
                                  'business_id' => $business_id,
                                  'coc_id' => $jaf_bank->business_id,
                                  'candidate_id' => $candidate_id,
                                  'service_id'  => $service_id,
                                  'jaf_form_data_id' => $jaf_bank->id,
                                  'item_number' => $jaf_bank->check_item_number,
                                  'status'=>'removed',
                                  'file_name' => $attach_on_select[$i],
                                  'file_platform' => $file_platform,
                                  'created_by'   => Auth::user()->id,
                                  'created_at'   => date('Y-m-d H:i:s'),
                                  'updated_at' => date('Y-m-d H:i:s')
                                ];
                          
                                $file_id = DB::table('insufficiency_attachments')->insertGetId($insuff_file);
    
                                $i++;
                              }
                          }
                      }

                      $ver_insuff=DB::table('verification_insufficiency')->where(['id'=>$ver_id])->first();

                      $candidates=DB::table('users as u')
                          ->select('u.*','j.business_id as coc_id','j.id as jaf_id','v.created_at as insuff_clear_date','v.created_by as insuff_clear_by','v.item_number','v.notes','s.verification_type','s.name as service_name','v.business_id as cust_id','v.attachment','v.updated_at','v.updated_by')
                          ->join('jaf_form_data as j','u.id','=','j.candidate_id')
                          ->join('verification_insufficiency as v','v.jaf_form_data_id','=','j.id')
                          ->join('services as s','s.id','=','v.service_id')
                          ->where(['u.user_type'=>'candidate','j.id'=>$item_id,'v.status'=>'removed','v.id'=>$ver_insuff->id])
                          ->first();

                      if($candidates!=NULL)
                      {
                        // $client=DB::table('users')->where(['id'=>$candidates->coc_id])->first();
                        // $name = $client->name;
                        // $email = $client->email;
                        // $msg= "Insufficiency Cleared For Candidate";
                        // $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                        // if($candidates->attachment!=NULL)
                        // {
                        //   $url = url('/').'/uploads/clear-insuff/'.$zipname;

                        //   if($s3_config!=NULL)
                        //   {
                        //     $filePath = 'uploads/clear-insuff/';

                        //     $disk = Storage::disk('s3');

                        //     $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                        //         'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                        //         'Key'                        => $filePath.$zipname,
                        //         'ResponseContentDisposition' => 'attachment;'//for download
                        //     ]);

                        //     $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');

                        //     $url = (string)$req->getUri();
                        //   }

                        //   $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>$url,'candidate'=>$candidates,'sender'=>$sender);
                        // }
                        // else
                        //   $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);
        
                        // Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email,$name) {
                        //   $message->to($email, $name)->subject
                        //       ('Clobminds Pvt Ltd - Insufficiency Notification');
                        //   $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                        // });

                        $kams = DB::table('key_account_managers')->where(['business_id'=>$candidates->business_id])->get();
                        if(count($kams)>0)
                        {
                          foreach($kams as $kam)
                          {
                              $user_data=DB::table('users')->where(['id'=>$kam->user_id])->first();

                              $name1 = $user_data->name;
                              $email1 = $user_data->email;
                              $msg= "Insufficiency Cleared For Candidate";
                              $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();

                              if($candidates->attachment!=NULL)
                              {
                                $url = url('/').'/uploads/clear-insuff/'.$zipname;

                                if($s3_config!=NULL)
                                {
                                  $filePath = 'uploads/clear-insuff/';

                                  $disk = Storage::disk('s3');

                                  $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                                      'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                                      'Key'                        => $filePath.$zipname,
                                      'ResponseContentDisposition' => 'attachment;'//for download
                                  ]);

                                  $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');

                                  $url = (string)$req->getUri();
                                }

                                $data  = array('name'=>$name1,'email'=>$email1,'msg'=>$msg,'link'=>$url,'candidate'=>$candidates,'sender'=>$sender);
                              }
                              else
                                $data  = array('name'=>$name1,'email'=>$email1,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);

                              Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email1,$name1) {
                                  $message->to($email1, $name1)->subject
                                      ('Clobminds Pvt Ltd - Insufficiency Notification');
                                  $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                              });

                          }
                        }

                        $ver_insuff_data=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$candidates->jaf_id,'status'=>'removed'])->first();

                        if($ver_insuff_data!=NULL)
                        {
                            $user_data=DB::table('users')->where(['id'=>$ver_insuff_data->created_by])->first();
                            $name = $user_data->name;
                            $email = $user_data->email;
                            $msg= "Insufficiency Cleared For Candidate";
                            $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();

                            if($candidates->attachment!=NULL)
                            {
                              $url = url('/').'/uploads/clear-insuff/'.$zipname;

                              if($s3_config!=NULL)
                              {
                                $filePath = 'uploads/clear-insuff/';

                                $disk = Storage::disk('s3');

                                $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                                    'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                                    'Key'                        => $filePath.$zipname,
                                    'ResponseContentDisposition' => 'attachment;'//for download
                                ]);

                                $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');

                                $url = (string)$req->getUri();
                              }

                              $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>$url,'candidate'=>$candidates,'sender'=>$sender);
                            }
                            else
                              $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);

                            
                            Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email,$name) {
                              $message->to($email, $name)->subject
                                  ('Clobminds Pvt Ltd - Insufficiency Notification');
                              $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                            }); 
                        }

                      }

                    }
                    else{
                      //update insuff

                      DB::table('jaf_form_data')->where(['id'=>$item_id])->update(['is_api_checked'=>'1','is_api_verified'=>'0','is_insufficiency'=>'1','verification_status'=>'failed','verified_at'=>date('Y-m-d H:i:s')]); 

                      $jaf_data=DB::table('jaf_form_data')->where(['id'=>$item_id])->first();
                      
                      $insuff_log_data=[
                        'parent_id' => $parent_id,
                        'business_id' => $business_id,
                        'coc_id' => $jaf_data->business_id,
                        'candidate_id' => $candidate_id,
                        'service_id'  => $service_id,
                        'jaf_form_data_id' => $jaf_data->id,
                        'item_number' => $jaf_data->check_item_number,
                        'activity_type'=> 'jaf-insuff',
                        'status'=>'failed',
                        'notes' => 'BGV Failed',
                        'created_by'   => Auth::user()->id,
                        'attachment'  => $zipname!=""?$zipname:NULL, 
                        'attachment_file_platform' => $c_file_platform,
                        'created_at'   => date('Y-m-d H:i:s'),
                      ];
                
                      DB::table('insufficiency_logs')->insert($insuff_log_data);

                      $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'raised'])->first();

                              if($ver_insuff!=NULL)
                              {
                                  $ver_insuff_data=[
                                    'notes' => 'BGV Failed',
                                    'updated_by' => Auth::user()->id,
                                    'updated_at' => date('Y-m-d H:i:s')
                                  ];

                                  DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'raised'])->update($ver_insuff_data);

                                  $ver_id=$ver_insuff->id;
                              }
                              else
                              {
                                $ver_insuff_data=[
                                  'parent_id' => $parent_id,
                                  'business_id' => $business_id,
                                  'coc_id' => $jaf_data->business_id,
                                  'candidate_id' => $candidate_id,
                                  'service_id'  => $service_id,
                                  'jaf_form_data_id' => $jaf_data->id,
                                  'item_number' => $jaf_data->check_item_number,
                                  'activity_type'=> 'jaf-insuff',
                                  'status'=>'raised',
                                  'notes' => 'BGV Failed',
                                  'created_by'   => Auth::user()->id,
                                  'created_at'   => date('Y-m-d H:i:s'),
                                ];
                          
                                $ver_id = DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);
                              }

                    }

                }
                
                if($is_updated){  
                  //generate report here 
                  // $this->generateCandidateReport($candidate_id);
                  DB::commit();
                  return response()->json([
                  'fail' => false,
                  'status'=>'ok',
                  'message' => 'updated',                
                  ], 200);
                }
                else{
                    DB::commit();
                    return response()->json([
                      'fail' => true,
                    'status' =>'no',
                    ], 200);
                }
            }

            // ./service 
            else if($service_d->type_name == 'cin')
            {
              //dd('hi');

              $jaf_cin = DB::table('jaf_form_data')->select('id','business_id','form_data','service_id','check_item_number')->where(['id'=>$item_id])->first();
              
              // $passport_file_no = $request->input('id_number');
              $ciin_number="";
              // $business_id = $jaf_bank->business_id; 
              $jaf_array = json_decode($jaf_cin->form_data, true);
              // print_r($jaf_array);
                foreach($jaf_array as $input){
                    if(array_key_exists('CIN Number',$input) ){
                      $ciin_number = $input['CIN Number'];
                    }
                }

                $s3_config=NULL;
                $c_file_platform = 'web';
                $attach_on_select=[];
                $allowedextension=['jpg','jpeg','png','svg','pdf'];
                $zipname="";
                if($request->hasFile('attachment') && $request->file('attachment') !="")
                {
                    $filePath = public_path('/uploads/clear-insuff/'); 
                    $files= $request->file('attachment');
                    foreach($files as $file)
                    {
                            $extension = $file->getClientOriginalExtension();

                            $check = in_array($extension,$allowedextension);
                            $file_size = number_format(File::size($file) / 1048576, 2);

                            if(!$check)
                            {
                                return response()->json([
                                  'fail' => true,
                                  'errors' => ['attachment' => 'Only jpg,jpeg,png,pdf are allowed !'],
                                  'error_type'=>'validation'
                                ]);                        
                            }

                            if($file_size > 10)
                            {
                                return response()->json([
                                  'fail' => true,
                                  'error_type'=>'validation',
                                  'errors' => ['attachment' => 'The document size must be less than only 10mb Upload !'],
                                ]);                        
                            }
                    }

                    $zipname = 'clear-insuff-'.date('Ymdhis').'.zip';
                    $zip = new \ZipArchive();      
                    $zip->open(public_path().'/uploads/clear-insuff/'.$zipname, \ZipArchive::CREATE | \ZipArchive::OVERWRITE);

                    foreach($files as $file)
                    {
                        $file_data = $file->getClientOriginalName();
                        $tmp_data  = $candidate_id.'-'.date('mdYHis').'-'.$file_data; 
                        $data = $file->move($filePath, $tmp_data);       
                        $attach_on_select[]=$tmp_data;

                        $path=public_path()."/uploads/clear-insuff/".$tmp_data;
                        $zip->addFile($path, '/clear-insuff/'.basename($path));  
                    }

                    $zip->close();
                }

                $s3_config = S3ConfigTrait::s3Config();

                $path=public_path().'/uploads/clear-insuff/';

                if($s3_config!=NULL && $zipname!='')
                {
                  if(File::exists($path.$zipname))
                  {
                      $c_file_platform = 's3';

                      $s3filePath = 'uploads/clear-insuff/';
      
                      if(!Storage::disk('s3')->exists($s3filePath))
                      {
                          Storage::disk('s3')->makeDirectory($s3filePath,0777, true, true);
                      }
      
                      $file = Helper::createFileObject($path.$zipname);
      
                      Storage::disk('s3')->put($s3filePath.$zipname,file_get_contents($file));

                      File::delete($path.$zipname);
                  }

                }

                if(File::exists($path.'tmp-files/'))
                {
                    File::cleanDirectory($path.'tmp-files/');
                }

                $data = array(
                  'id_number'    => $ciin_number,
                );
                $payload = json_encode($data);
                $apiURL = "https://kyc-api.aadhaarkyc.io/api/v1/corporate/company-details";

                $ch = curl_init();
                curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);                
                curl_setopt ($ch, CURLOPT_POST, 1);
                $token_key = env('SUREPASS_PRODUCTION_TOKEN');
                curl_setopt($ch, CURLOPT_HTTPHEADER, array('Authorization: Bearer '.$token_key, 'Content-Type: application/json'));
                curl_setopt($ch, CURLOPT_URL, $apiURL);
                curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);
                $resp = curl_exec ( $ch );
                $response_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
                curl_close ( $ch );
                $array_data =  json_decode($resp,true);
                // var_dump($resp); die;
            
                if($response_code==200)
                {
                  $data = [
                    'parent_id'                 => $parent_id,
                    'business_id'               => $business_id,
                    'cin_number'                => $array_data['data']['details']['company_info']['cin'],
                    'registration_number'       => $array_data['data']['details']['company_info']['registration_number'],
                    'company_name'              => $array_data['data']['company_name'],
                    'registered_address'        =>$array_data['data']['details']['company_info']['registered_address'],
                    'date_of_incorporation'     =>$array_data['data']['details']['company_info']['date_of_incorporation']!=NULL ? date('Y-m-d',strtotime($array_data['data']['details']['company_info']['date_of_incorporation'])) : NULL,
                    'email_id'                  =>$array_data['data']['details']['company_info']['email_id'],
                    'paid_up_capital_in_rupees' =>$array_data['data']['details']['company_info']['paid_up_capital'],
                    'authorised_capital'        =>$array_data['data']['details']['company_info']['authorized_capital'],
                    'company_category'          =>$array_data['data']['details']['company_info']['company_category'],
                    'company_subcategory'       =>$array_data['data']['details']['company_info']['company_sub_category'],
                    //'company_class'             =>$array_data['data']['details']['company_info']['company_class'],
                    //'whether_company_is_listed' =>$array_data['data']['details']['company_info']['whether_company_is_listed'],
                    //'company_efilling_status'   =>$array_data['data']['details']['company_info']['company_efilling_status'],
                    'date_of_last_AGM'          =>$array_data['data']['details']['company_info']['last_agm_date']!=NULL ? date('Y-m-d',strtotime($array_data['data']['details']['company_info']['last_agm_date'])) : NULL,
                    //'date_of_balance_sheet'     =>$array_data['data']['details']['company_info']['date_of_balance_sheet']!=NULL ? date('Y-m-d',strtotime($array_data['data']['details']['company_info']['date_of_balance_sheet'])) : NULL,
                    //'another_maintained_address' =>$array_data['data']['details']['company_info']['another_maintained_address'],
                    'directors'                => $array_data['data']['details']['directors']!=NULL && count($array_data['data']['details']['directors']) > 0 ? json_encode($array_data['data']['details']['directors']) : NULL,
                    'created_by'                => $user_id,
                    'created_at'                =>date('Y-m-d H:i:s')
                    ];
                  //dd($data);
                  DB::table('cin_check_masters')->insert($data);

                  $master_data = DB::table('cin_check_masters')->select('*')->where(['cin_number'=>$ciin_number])->latest()->first();
                           

                  $cin_data = 
                  [
                    'parent_id'         =>$parent_id,
                    'business_id'       =>$business_id,
                    'service_id'         => $serviceId->id,
                    'source_type'       =>'API',
                    'cin_number'                => $array_data['data']['details']['company_info']['cin'],
                    'registration_number'       => $array_data['data']['details']['company_info']['registration_number'],
                    'company_name'              => $array_data['data']['company_name'],
                    'registered_address'        =>$array_data['data']['details']['company_info']['registered_address'],
                    'date_of_incorporation'     =>$array_data['data']['details']['company_info']['date_of_incorporation']!=NULL ? date('Y-m-d',strtotime($array_data['data']['details']['company_info']['date_of_incorporation'])) : NULL,
                    'email_id'                  =>$array_data['data']['details']['company_info']['email_id'],
                    'paid_up_capital_in_rupees' =>$array_data['data']['details']['company_info']['paid_up_capital'],
                    'authorised_capital'        =>$array_data['data']['details']['company_info']['authorized_capital'],
                    'company_category'          =>$array_data['data']['details']['company_info']['company_category'],
                    'company_subcategory'       =>$array_data['data']['details']['company_info']['company_sub_category'],
                    'date_of_last_AGM'          =>$array_data['data']['details']['company_info']['last_agm_date']!=NULL ? date('Y-m-d',strtotime($array_data['data']['details']['company_info']['last_agm_date'])) : NULL,
                    'directors'                 =>$array_data['data']['details']['directors']!=NULL && count($array_data['data']['details']['directors']) > 0 ? json_encode($array_data['data']['details']['directors']) : NULL,
                    'is_verified'                =>'1',
                    'price'                     =>$price,
                    'user_type'                   =>'customer',
                    'user_id'                     =>$user_id,
                    'created_at'                  =>date('Y-m-d H:i:s')
                  ];
                  //dd($cin_data);
                  DB::table('cin_checks')->insert($cin_data);

                    
                    DB::table('jaf_form_data')->where(['id'=>$item_id])
                      ->update(['is_api_checked'=>'1','is_api_verified'=>'1','verification_status'=>'success','verified_at'=>date('Y-m-d H:i:s'),'is_insufficiency'=>'0','clear_insuff_notes'=>$request->comment,'clear_insuff_attachment'=>$zipname!=NULL?$zipname:NULL,'clear_insuff_attachment_file_platform'=>$c_file_platform,'is_all_insuff_cleared' => 1,'insuff_cleared_by'=>Auth::user()->id,'updated_at'=>date('Y-m-d H:i:s')]); 
                      $is_updated=TRUE;

                      $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->first();

                      if($ver_insuff!=NULL)
                      {
                          $ver_insuff_data=[
                            'notes' => $request->comment,
                            'updated_by' => Auth::user()->id,
                            'attachment'  => $zipname!=""?$zipname:NULL, 
                            'attachment_file_platform' => $c_file_platform,
                            'updated_at' => date('Y-m-d H:i:s')
                          ];

                          DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->update($ver_insuff_data);

                          $ver_id=$ver_insuff->id;
                      }
                      else
                      {
                        $ver_insuff_data=[
                          'parent_id' => $parent_id,
                          'business_id' => $business_id,
                          'coc_id' => $jaf_cin->business_id,
                          'candidate_id' => $candidate_id,
                          'service_id'  => $jaf_cin->service_id,
                          'jaf_form_data_id' => $jaf_cin->id,
                          'item_number' => $jaf_cin->check_item_number,
                          'activity_type'=> 'jaf-insuff',
                          'status'=>'removed',
                          'notes' => $request->comment,
                          'attachment'=>$zipname!=NULL?$zipname:NULL,
                          'attachment_file_platform' => $c_file_platform,
                          'created_by'   => Auth::user()->id,
                          'created_at'   => date('Y-m-d H:i:s'),
                        ];
                  
                        $ver_id=DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);
    
                      }

                      $insuff_log_data=[
                        'parent_id' => $parent_id,
                        'business_id' => $business_id,
                        'coc_id' => $jaf_cin->business_id,
                        'candidate_id' => $candidate_id,
                        'service_id'  => $service_id,
                        'jaf_form_data_id' => $jaf_cin->id,
                        'item_number' => $jaf_cin->check_item_number,
                        'activity_type'=> 'jaf-insuff',
                        'status'=>'removed',
                        'notes' => $request->comment,
                        'created_by'   => Auth::user()->id,
                        'attachment'  => $zipname!=""?$zipname:NULL,
                        'attachment_file_platform' => $c_file_platform, 
                        'created_at'   => date('Y-m-d H:i:s'),
                      ];
                
                      DB::table('insufficiency_logs')->insert($insuff_log_data);

                      if(count($attach_on_select)>0)
                      {
                          $file_data=DB::table('insufficiency_attachments')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->get();

                          if(count($file_data)>0)
                          {
                              $path=public_path().'/uploads/clear-insuff/';
                              foreach($file_data as $file)
                              {
                                  if(File::exists($path.$file->file_name))
                                  {
                                      File::delete($path.$file->file_name);
                                  }
                              }

                              DB::table('insufficiency_attachments')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->delete();

                          }

                          $i=0;
                          $file_platform = 'web';

                          if($s3_config!=NULL)
                          {
                            $s3filePath = 'uploads/clear-insuff/';

                            if(!Storage::disk('s3')->exists($s3filePath))
                            {
                                Storage::disk('s3')->makeDirectory($s3filePath,0777, true, true);
                            }


                            foreach($attach_on_select as $item)
                            {

                              $file_platform = 'web';
                              $path=public_path().'/uploads/clear-insuff/';

                              if(File::exists($path.$attach_on_select[$i]))
                              {
                                $file_platform = 's3';
                                $file = Helper::createFileObject($path.$attach_on_select[$i]);

                                Storage::disk('s3')->put($s3filePath.$attach_on_select[$i],file_get_contents($file));

                                File::delete($path.$attach_on_select[$i]);
                              }

                              $insuff_file=[
                                'parent_id' => $parent_id,
                                'business_id' => $business_id,
                                'coc_id' => $jaf_cin->business_id,
                                'candidate_id' => $candidate_id,
                                'service_id'  => $service_id,
                                'jaf_form_data_id' => $jaf_cin->id,
                                'item_number' => $jaf_cin->check_item_number,
                                'status'=>'removed',
                                'file_name' => $attach_on_select[$i],
                                'file_platform' => $file_platform,
                                'created_by'   => Auth::user()->id,
                                'created_at'   => date('Y-m-d H:i:s'),
                                'updated_at' => date('Y-m-d H:i:s')
                              ];
                        
                              $file_id = DB::table('insufficiency_attachments')->insertGetId($insuff_file);
  
                              $i++;

                              if(File::exists($path.'tmp-files/'))
                              {
                                  File::cleanDirectory($path.'tmp-files/');
                              }
                            }


                          }
                          else
                          {
                              foreach($attach_on_select as $item)
                              {
                                $insuff_file=[
                                  'parent_id' => $parent_id,
                                  'business_id' => $business_id,
                                  'coc_id' => $jaf_cin->business_id,
                                  'candidate_id' => $candidate_id,
                                  'service_id'  => $service_id,
                                  'jaf_form_data_id' => $jaf_cin->id,
                                  'item_number' => $jaf_cin->check_item_number,
                                  'status'=>'removed',
                                  'file_name' => $attach_on_select[$i],
                                  'file_platform' => $file_platform,
                                  'created_by'   => Auth::user()->id,
                                  'created_at'   => date('Y-m-d H:i:s'),
                                  'updated_at' => date('Y-m-d H:i:s')
                                ];
                          
                                $file_id = DB::table('insufficiency_attachments')->insertGetId($insuff_file);
    
                                $i++;
                              }
                          }
                          
                          
                      }

                      $ver_insuff=DB::table('verification_insufficiency')->where(['id'=>$ver_id])->first();

                      $candidates=DB::table('users as u')
                          ->select('u.*','j.business_id as coc_id','j.id as jaf_id','v.created_at as insuff_clear_date','v.created_by as insuff_clear_by','v.item_number','v.notes','s.verification_type','s.name as service_name','v.business_id as cust_id','v.attachment','v.updated_at','v.updated_by')
                          ->join('jaf_form_data as j','u.id','=','j.candidate_id')
                          ->join('verification_insufficiency as v','v.jaf_form_data_id','=','j.id')
                          ->join('services as s','s.id','=','v.service_id')
                          ->where(['u.user_type'=>'candidate','j.id'=>$item_id,'v.status'=>'removed','v.id'=>$ver_insuff->id])
                          ->first();

                      if($candidates!=NULL)
                      {
                        // $client=DB::table('users')->where(['id'=>$candidates->coc_id])->first();
                        // $name = $client->name;
                        // $email = $client->email;
                        // $msg= "Insufficiency Cleared For Candidate";
                        // $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                        // if($candidates->attachment!=NULL)
                        // {
                        //   $url = url('/').'/uploads/clear-insuff/'.$zipname;
  
                        //   if($s3_config!=NULL)
                        //   {
                        //     $filePath = 'uploads/clear-insuff/';
  
                        //     $disk = Storage::disk('s3');
  
                        //     $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                        //         'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                        //         'Key'                        => $filePath.$zipname,
                        //         'ResponseContentDisposition' => 'attachment;'//for download
                        //     ]);
  
                        //     $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');
  
                        //     $url = (string)$req->getUri();
                        //   }
  
                        //   $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>$url,'candidate'=>$candidates,'sender'=>$sender);
                        // }
                        // else
                        //   $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);
        
                        // Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email,$name) {
                        //   $message->to($email, $name)->subject
                        //       ('Clobminds Pvt Ltd - Insufficiency Notification');
                        //   $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                        // });

                        $kams = DB::table('key_account_managers')->where(['business_id'=>$candidates->business_id])->get();
                        if(count($kams)>0)
                        {
                          foreach($kams as $kam)
                          {
                              $user_data=DB::table('users')->where(['id'=>$kam->user_id])->first();

                              $name1 = $user_data->name;
                              $email1 = $user_data->email;
                              $msg= "Insufficiency Cleared For Candidate";
                              $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();

                              if($candidates->attachment!=NULL)
                              {
                                $url = url('/').'/uploads/clear-insuff/'.$zipname;
        
                                if($s3_config!=NULL)
                                {
                                  $filePath = 'uploads/clear-insuff/';
        
                                  $disk = Storage::disk('s3');
        
                                  $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                                      'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                                      'Key'                        => $filePath.$zipname,
                                      'ResponseContentDisposition' => 'attachment;'//for download
                                  ]);
        
                                  $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');
        
                                  $url = (string)$req->getUri();
                                }
        
                                $data  = array('name'=>$name1,'email'=>$email1,'msg'=>$msg,'link'=>$url,'candidate'=>$candidates,'sender'=>$sender);
                              }
                              else
                                $data  = array('name'=>$name1,'email'=>$email1,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);

                              Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email1,$name1) {
                                  $message->to($email1, $name1)->subject
                                      ('Clobminds Pvt Ltd - Insufficiency Notification');
                                  $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                              });

                          }
                        }

                        $ver_insuff_data=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$candidates->jaf_id,'status'=>'removed'])->first();

                        if($ver_insuff_data!=NULL)
                        {
                            $user_data=DB::table('users')->where(['id'=>$ver_insuff_data->created_by])->first();
                            $name = $user_data->name;
                            $email = $user_data->email;
                            $msg= "Insufficiency Cleared For Candidate";
                            $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();

                            if($candidates->attachment!=NULL)
                            {
                              $url = url('/').'/uploads/clear-insuff/'.$zipname;
      
                              if($s3_config!=NULL)
                              {
                                $filePath = 'uploads/clear-insuff/';
      
                                $disk = Storage::disk('s3');
      
                                $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                                    'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                                    'Key'                        => $filePath.$zipname,
                                    'ResponseContentDisposition' => 'attachment;'//for download
                                ]);
      
                                $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');
      
                                $url = (string)$req->getUri();
                              }
      
                              $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>$url,'candidate'=>$candidates,'sender'=>$sender);
                            }
                            else
                              $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);

                            
                            Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email,$name) {
                              $message->to($email, $name)->subject
                                  ('Clobminds Pvt Ltd - Insufficiency Notification');
                              $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                            }); 
                        }

                      }
                    

                }else{

                    //update insuff

                  DB::table('jaf_form_data')->where(['id'=>$item_id])->update(['is_api_checked'=>'1','is_api_verified'=>'0','is_insufficiency'=>'1','verification_status'=>'failed','verified_at'=>date('Y-m-d H:i:s')]); 

                  $jaf_data=DB::table('jaf_form_data')->where(['id'=>$item_id])->first();
                  
                  $insuff_log_data=[
                    'parent_id' => $parent_id,
                    'business_id' => $business_id,
                    'coc_id' => $jaf_data->business_id,
                    'candidate_id' => $candidate_id,
                    'service_id'  => $service_id,
                    'jaf_form_data_id' => $jaf_data->id,
                    'item_number' => $jaf_data->check_item_number,
                    'activity_type'=> 'jaf-insuff',
                    'status'=>'failed',
                    'notes' => 'BGV Failed',
                    'created_by'   => Auth::user()->id,
                    'attachment'  => $zipname!=""?$zipname:NULL,
                    'attachment_file_platform' => $c_file_platform, 
                    'created_at'   => date('Y-m-d H:i:s'),
                  ];
            
                  DB::table('insufficiency_logs')->insert($insuff_log_data);

                  $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'raised'])->first();

                   if($ver_insuff!=NULL)
                   {
                       $ver_insuff_data=[
                         'notes' => 'BGV Failed',
                         'updated_by' => Auth::user()->id,
                         'updated_at' => date('Y-m-d H:i:s')
                       ];

                       DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'raised'])->update($ver_insuff_data);

                       $ver_id=$ver_insuff->id;
                   }
                   else
                   {
                     $ver_insuff_data=[
                       'parent_id' => $parent_id,
                       'business_id' => $business_id,
                       'coc_id' => $jaf_data->business_id,
                       'candidate_id' => $candidate_id,
                       'service_id'  => $service_id,
                       'jaf_form_data_id' => $jaf_data->id,
                       'item_number' => $jaf_data->check_item_number,
                       'activity_type'=> 'jaf-insuff',
                       'status'=>'raised',
                       'notes' => 'BGV Failed',
                       'created_by'   => Auth::user()->id,
                       'created_at'   => date('Y-m-d H:i:s'),
                     ];
               
                     $ver_id = DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);
                   }
                }

                if($is_updated){  
                  //generate report here 
                  // $this->generateCandidateReport($candidate_id);
                  DB::commit();
                  return response()->json([
                  'fail' => false,
                  'status'=>'ok',
                  'message' => 'updated',                
                  ], 200);
                }
                else{
                    DB::commit();
                    return response()->json([
                      'fail' => true,
                    'status' =>'no',
                    ], 200);
                }
            }

            // service start 
            else if($service_d->type_name == 'upi')
            {
          
              $jaf_cin = DB::table('jaf_form_data')->select('id','business_id','form_data','service_id','check_item_number')->where(['id'=>$item_id])->first();
              
              $upi_number="";
              $jaf_array = json_decode($jaf_cin->form_data, true);
              // print_r($jaf_array);
                foreach($jaf_array as $input){

                    if(array_key_exists('UPI ID',$input) ){
                      $upi_number = $input['UPI ID'];
                    }
                }

                $s3_config=NULL;
                $c_file_platform = 'web';
                $attach_on_select=[];
                $allowedextension=['jpg','jpeg','png','svg','pdf'];
                $zipname="";
                if($request->hasFile('attachment') && $request->file('attachment') !="")
                {
                    $filePath = public_path('/uploads/clear-insuff/'); 
                    $files= $request->file('attachment');
                    foreach($files as $file)
                    {
                            $extension = $file->getClientOriginalExtension();

                            $check = in_array($extension,$allowedextension);
                            $file_size = number_format(File::size($file) / 1048576, 2);

                            if(!$check)
                            {
                                return response()->json([
                                  'fail' => true,
                                  'errors' => ['attachment' => 'Only jpg,jpeg,png,pdf are allowed !'],
                                  'error_type'=>'validation'
                                ]);                        
                            }

                            if($file_size > 10)
                            {
                                return response()->json([
                                  'fail' => true,
                                  'error_type'=>'validation',
                                  'errors' => ['attachment' => 'The document size must be less than only 10mb Upload !'],
                                ]);                        
                            }
                    }

                    $zipname = 'clear-insuff-'.date('Ymdhis').'.zip';
                    $zip = new \ZipArchive();      
                    $zip->open(public_path().'/uploads/clear-insuff/'.$zipname, \ZipArchive::CREATE | \ZipArchive::OVERWRITE);

                    foreach($files as $file)
                    {
                        $file_data = $file->getClientOriginalName();
                        $tmp_data  = $candidate_id.'-'.date('mdYHis').'-'.$file_data; 
                        $data = $file->move($filePath, $tmp_data);       
                        $attach_on_select[]=$tmp_data;

                        $path=public_path()."/uploads/clear-insuff/".$tmp_data;
                        $zip->addFile($path, '/clear-insuff/'.basename($path));  
                    }

                    $zip->close();
                }

                $s3_config = S3ConfigTrait::s3Config();

                $path=public_path().'/uploads/clear-insuff/';

                if($s3_config!=NULL && $zipname!='')
                {
                  if(File::exists($path.$zipname))
                  {
                      $c_file_platform = 's3';

                      $s3filePath = 'uploads/clear-insuff/';
      
                      if(!Storage::disk('s3')->exists($s3filePath))
                      {
                          Storage::disk('s3')->makeDirectory($s3filePath,0777, true, true);
                      }
      
                      $file = Helper::createFileObject($path.$zipname);
      
                      Storage::disk('s3')->put($s3filePath.$zipname,file_get_contents($file));

                      File::delete($path.$zipname);
                  }

                }

                if(File::exists($path.'tmp-files/'))
                {
                    File::cleanDirectory($path.'tmp-files/');
                }

                $data = array(
                  'upi_id'    => $upi_number,
                );
              // dd($data);
              $payload = json_encode($data);

              $apiURL = "https://kyc-api.aadhaarkyc.io/api/v1/bank-verification/upi-verification";
          
              $ch = curl_init();
              curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);                
              curl_setopt ($ch, CURLOPT_POST, 1);
              $token_key = env('SUREPASS_PRODUCTION_TOKEN');
              curl_setopt($ch, CURLOPT_HTTPHEADER, array('Authorization: Bearer '.$token_key, 'Content-Type: application/json'));
              curl_setopt($ch, CURLOPT_URL, $apiURL);
              curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);
              $resp = curl_exec ( $ch );
              //dd($resp);
              $response_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
              curl_close ( $ch );
              $array_data =  json_decode($resp,true);
              //dd($array_data);

                if($response_code==200)
                {
                      $data = 
                      [
                          'parent_id'     => $parent_id,
                          'business_id'   => $business_id,
                          'client_id'     => $array_data['data']['client_id'],
                          'upi_id'        =>$upi_number,
                          'name'          =>$array_data['data']['full_name'],
                          'is_api_verified' =>'1',
                          'created_by'    => $user_id,
                          'created_at'    =>date('Y-m-d H:i:s')
                      ];
                      DB::table('upi_check_masters')->insert($data);

                    $master_data = DB::table('upi_check_masters')->select('*')->where(['upi_id'=>$upi_number])->first();

                        $log_data = 
                            [
                                'parent_id'         =>$parent_id,
                                'business_id'       =>$business_id,
                                'service_id'         => $serviceId->id,
                                'source_type'       =>'API',
                                'client_id'         => $array_data['data']['client_id'],
                                'upi_id'            =>$upi_number,
                                'name'              =>$array_data['data']['full_name'],
                                'is_verified'       =>'1',
                                'price'             =>$price,
                                'user_type'           =>'customer',
                                'user_id'            =>$user_id,
                                'created_at'        =>date('Y-m-d H:i:s')
                            ];
                            //dd($log_data);
                          DB::table('upi_checks')->insert($log_data);
                    
                    DB::table('jaf_form_data')->where(['id'=>$item_id])
                      ->update(['is_api_checked'=>'1','is_api_verified'=>'1','verification_status'=>'success','verified_at'=>date('Y-m-d H:i:s'),'is_insufficiency'=>'0','clear_insuff_notes'=>$request->comment,'clear_insuff_attachment'=>$zipname!=NULL?$zipname:NULL,'clear_insuff_attachment_file_platform'=>$c_file_platform,'is_all_insuff_cleared' => 1,'insuff_cleared_by'=>Auth::user()->id,'updated_at'=>date('Y-m-d H:i:s')]); 
                      $is_updated=TRUE;

                      $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->first();

                      if($ver_insuff!=NULL)
                      {
                          $ver_insuff_data=[
                            'notes' => $request->comment,
                            'updated_by' => Auth::user()->id,
                            'attachment'  => $zipname!=""?$zipname:NULL, 
                            'attachment_file_platform' => $c_file_platform,
                            'updated_at' => date('Y-m-d H:i:s')
                          ];

                          DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->update($ver_insuff_data);

                          $ver_id=$ver_insuff->id;
                      }
                      else
                      {
                        $ver_insuff_data=[
                          'parent_id' => $parent_id,
                          'business_id' => $business_id,
                          'coc_id' => $jaf_cin->business_id,
                          'candidate_id' => $candidate_id,
                          'service_id'  => $jaf_cin->service_id,
                          'jaf_form_data_id' => $jaf_cin->id,
                          'item_number' => $jaf_cin->check_item_number,
                          'activity_type'=> 'jaf-insuff',
                          'status'=>'removed',
                          'notes' => $request->comment,
                          'attachment'=>$zipname!=NULL?$zipname:NULL,
                          'attachment_file_platform' => $c_file_platform,
                          'created_by'   => Auth::user()->id,
                          'created_at'   => date('Y-m-d H:i:s'),
                        ];
                  
                        $ver_id=DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);
    
                      }

                      $insuff_log_data=[
                        'parent_id' => $parent_id,
                        'business_id' => $business_id,
                        'coc_id' => $jaf_cin->business_id,
                        'candidate_id' => $candidate_id,
                        'service_id'  => $service_id,
                        'jaf_form_data_id' => $jaf_cin->id,
                        'item_number' => $jaf_cin->check_item_number,
                        'activity_type'=> 'jaf-insuff',
                        'status'=>'removed',
                        'notes' => $request->comment,
                        'created_by'   => Auth::user()->id,
                        'attachment'  => $zipname!=""?$zipname:NULL,
                        'attachment_file_platform' => $c_file_platform, 
                        'created_at'   => date('Y-m-d H:i:s'),
                      ];
                
                      DB::table('insufficiency_logs')->insert($insuff_log_data);

                      if(count($attach_on_select)>0)
                      {
                          $file_data=DB::table('insufficiency_attachments')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->get();

                          if(count($file_data)>0)
                          {
                              $path=public_path().'/uploads/clear-insuff/';
                              foreach($file_data as $file)
                              {
                                  if(File::exists($path.$file->file_name))
                                  {
                                      File::delete($path.$file->file_name);
                                  }
                              }

                              DB::table('insufficiency_attachments')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->delete();

                          }

                          $i=0;
                          $file_platform = 'web';

                          if($s3_config!=NULL)
                          {
                            $s3filePath = 'uploads/clear-insuff/';

                            if(!Storage::disk('s3')->exists($s3filePath))
                            {
                                Storage::disk('s3')->makeDirectory($s3filePath,0777, true, true);
                            }


                            foreach($attach_on_select as $item)
                            {

                              $file_platform = 'web';
                              $path=public_path().'/uploads/clear-insuff/';

                              if(File::exists($path.$attach_on_select[$i]))
                              {
                                $file_platform = 's3';
                                $file = Helper::createFileObject($path.$attach_on_select[$i]);

                                Storage::disk('s3')->put($s3filePath.$attach_on_select[$i],file_get_contents($file));

                                File::delete($path.$attach_on_select[$i]);
                              }

                              $insuff_file=[
                                'parent_id' => $parent_id,
                                'business_id' => $business_id,
                                'coc_id' => $jaf_cin->business_id,
                                'candidate_id' => $candidate_id,
                                'service_id'  => $service_id,
                                'jaf_form_data_id' => $jaf_cin->id,
                                'item_number' => $jaf_cin->check_item_number,
                                'status'=>'removed',
                                'file_name' => $attach_on_select[$i],
                                'file_platform' => $file_platform,
                                'created_by'   => Auth::user()->id,
                                'created_at'   => date('Y-m-d H:i:s'),
                                'updated_at' => date('Y-m-d H:i:s')
                              ];
                        
                              $file_id = DB::table('insufficiency_attachments')->insertGetId($insuff_file);
  
                              $i++;

                              if(File::exists($path.'tmp-files/'))
                              {
                                  File::cleanDirectory($path.'tmp-files/');
                              }
                            }


                          }
                          else
                          {
                              foreach($attach_on_select as $item)
                              {
                                $insuff_file=[
                                  'parent_id' => $parent_id,
                                  'business_id' => $business_id,
                                  'coc_id' => $jaf_cin->business_id,
                                  'candidate_id' => $candidate_id,
                                  'service_id'  => $service_id,
                                  'jaf_form_data_id' => $jaf_cin->id,
                                  'item_number' => $jaf_cin->check_item_number,
                                  'status'=>'removed',
                                  'file_name' => $attach_on_select[$i],
                                  'file_platform' => $file_platform,
                                  'created_by'   => Auth::user()->id,
                                  'created_at'   => date('Y-m-d H:i:s'),
                                  'updated_at' => date('Y-m-d H:i:s')
                                ];
                          
                                $file_id = DB::table('insufficiency_attachments')->insertGetId($insuff_file);
    
                                $i++;
                              }
                          }
                          
                          
                      }

                      $ver_insuff=DB::table('verification_insufficiency')->where(['id'=>$ver_id])->first();

                      $candidates=DB::table('users as u')
                          ->select('u.*','j.business_id as coc_id','j.id as jaf_id','v.created_at as insuff_clear_date','v.created_by as insuff_clear_by','v.item_number','v.notes','s.verification_type','s.name as service_name','v.business_id as cust_id','v.attachment','v.updated_at','v.updated_by')
                          ->join('jaf_form_data as j','u.id','=','j.candidate_id')
                          ->join('verification_insufficiency as v','v.jaf_form_data_id','=','j.id')
                          ->join('services as s','s.id','=','v.service_id')
                          ->where(['u.user_type'=>'candidate','j.id'=>$item_id,'v.status'=>'removed','v.id'=>$ver_insuff->id])
                          ->first();

                      if($candidates!=NULL)
                      {
                        // $client=DB::table('users')->where(['id'=>$candidates->coc_id])->first();
                        // $name = $client->name;
                        // $email = $client->email;
                        // $msg= "Insufficiency Cleared For Candidate";
                        // $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                        // if($candidates->attachment!=NULL)
                        // {
                        //   $url = url('/').'/uploads/clear-insuff/'.$zipname;
  
                        //   if($s3_config!=NULL)
                        //   {
                        //     $filePath = 'uploads/clear-insuff/';
  
                        //     $disk = Storage::disk('s3');
  
                        //     $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                        //         'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                        //         'Key'                        => $filePath.$zipname,
                        //         'ResponseContentDisposition' => 'attachment;'//for download
                        //     ]);
  
                        //     $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');
  
                        //     $url = (string)$req->getUri();
                        //   }
  
                        //   $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>$url,'candidate'=>$candidates,'sender'=>$sender);
                        // }
                        // else
                        //   $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);
        
                        // Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email,$name) {
                        //   $message->to($email, $name)->subject
                        //       ('Clobminds Pvt Ltd - Insufficiency Notification');
                        //   $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                        // });

                        $kams = DB::table('key_account_managers')->where(['business_id'=>$candidates->business_id])->get();
                        if(count($kams)>0)
                        {
                          foreach($kams as $kam)
                          {
                              $user_data=DB::table('users')->where(['id'=>$kam->user_id])->first();

                              $name1 = $user_data->name;
                              $email1 = $user_data->email;
                              $msg= "Insufficiency Cleared For Candidate";
                              $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();

                              if($candidates->attachment!=NULL)
                              {
                                $url = url('/').'/uploads/clear-insuff/'.$zipname;
        
                                if($s3_config!=NULL)
                                {
                                  $filePath = 'uploads/clear-insuff/';
        
                                  $disk = Storage::disk('s3');
        
                                  $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                                      'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                                      'Key'                        => $filePath.$zipname,
                                      'ResponseContentDisposition' => 'attachment;'//for download
                                  ]);
        
                                  $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');
        
                                  $url = (string)$req->getUri();
                                }
        
                                $data  = array('name'=>$name1,'email'=>$email1,'msg'=>$msg,'link'=>$url,'candidate'=>$candidates,'sender'=>$sender);
                              }
                              else
                                $data  = array('name'=>$name1,'email'=>$email1,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);

                              Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email1,$name1) {
                                  $message->to($email1, $name1)->subject
                                      ('Clobminds Pvt Ltd - Insufficiency Notification');
                                  $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                              });

                          }
                        }

                        $ver_insuff_data=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$candidates->jaf_id,'status'=>'removed'])->first();

                        if($ver_insuff_data!=NULL)
                        {
                            $user_data=DB::table('users')->where(['id'=>$ver_insuff_data->created_by])->first();
                            $name = $user_data->name;
                            $email = $user_data->email;
                            $msg= "Insufficiency Cleared For Candidate";
                            $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();

                            if($candidates->attachment!=NULL)
                            {
                              $url = url('/').'/uploads/clear-insuff/'.$zipname;
      
                              if($s3_config!=NULL)
                              {
                                $filePath = 'uploads/clear-insuff/';
      
                                $disk = Storage::disk('s3');
      
                                $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                                    'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                                    'Key'                        => $filePath.$zipname,
                                    'ResponseContentDisposition' => 'attachment;'//for download
                                ]);
      
                                $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');
      
                                $url = (string)$req->getUri();
                              }
      
                              $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>$url,'candidate'=>$candidates,'sender'=>$sender);
                            }
                            else
                              $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);

                            
                            Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email,$name) {
                              $message->to($email, $name)->subject
                                  ('Clobminds Pvt Ltd - Insufficiency Notification');
                              $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                            }); 
                        }

                      }
                    

                }else{

                    //update insuff

                  DB::table('jaf_form_data')->where(['id'=>$item_id])->update(['is_api_checked'=>'1','is_api_verified'=>'0','is_insufficiency'=>'1','verification_status'=>'failed','verified_at'=>date('Y-m-d H:i:s')]); 

                  $jaf_data=DB::table('jaf_form_data')->where(['id'=>$item_id])->first();
                  
                  $insuff_log_data=[
                    'parent_id' => $parent_id,
                    'business_id' => $business_id,
                    'coc_id' => $jaf_data->business_id,
                    'candidate_id' => $candidate_id,
                    'service_id'  => $service_id,
                    'jaf_form_data_id' => $jaf_data->id,
                    'item_number' => $jaf_data->check_item_number,
                    'activity_type'=> 'jaf-insuff',
                    'status'=>'failed',
                    'notes' => 'BGV Failed',
                    'created_by'   => Auth::user()->id,
                    'attachment'  => $zipname!=""?$zipname:NULL,
                    'attachment_file_platform' => $c_file_platform, 
                    'created_at'   => date('Y-m-d H:i:s'),
                  ];
            
                  DB::table('insufficiency_logs')->insert($insuff_log_data);

                  $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'raised'])->first();

                   if($ver_insuff!=NULL)
                   {
                       $ver_insuff_data=[
                         'notes' => 'BGV Failed',
                         'updated_by' => Auth::user()->id,
                         'updated_at' => date('Y-m-d H:i:s')
                       ];

                       DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'raised'])->update($ver_insuff_data);

                       $ver_id=$ver_insuff->id;
                   }
                   else
                   {
                     $ver_insuff_data=[
                       'parent_id' => $parent_id,
                       'business_id' => $business_id,
                       'coc_id' => $jaf_data->business_id,
                       'candidate_id' => $candidate_id,
                       'service_id'  => $service_id,
                       'jaf_form_data_id' => $jaf_data->id,
                       'item_number' => $jaf_data->check_item_number,
                       'activity_type'=> 'jaf-insuff',
                       'status'=>'raised',
                       'notes' => 'BGV Failed',
                       'created_by'   => Auth::user()->id,
                       'created_at'   => date('Y-m-d H:i:s'),
                     ];
               
                     $ver_id = DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);
                   }
                }

                if($is_updated){  
                  //generate report here 
                  // $this->generateCandidateReport($candidate_id);
                  DB::commit();
                  return response()->json([
                  'fail' => false,
                  'status'=>'ok',
                  'message' => 'updated',                
                  ], 200);
                }
                else{
                    DB::commit();
                    return response()->json([
                      'fail' => true,
                    'status' =>'no',
                    ], 200);
                }
            }

            // service start 
            else if($service_d->type_name == 'uan-number')
            {
          
              $jaf_uan = DB::table('jaf_form_data')->select('id','business_id','form_data','service_id','check_item_number')->where(['id'=>$item_id])->first();
              
              $uan_number="";
              $jaf_array = json_decode($jaf_uan->form_data, true);
              // print_r($jaf_array);
                foreach($jaf_array as $input){

                    if(array_key_exists('UAN Number',$input) ){
                      $uan_number = $input['UAN Number'];
                    }
                }

                $s3_config=NULL;
                $c_file_platform = 'web';
                $attach_on_select=[];
                $allowedextension=['jpg','jpeg','png','svg','pdf'];
                $zipname="";
                if($request->hasFile('attachment') && $request->file('attachment') !="")
                {
                    $filePath = public_path('/uploads/clear-insuff/'); 
                    $files= $request->file('attachment');
                    foreach($files as $file)
                    {
                            $extension = $file->getClientOriginalExtension();

                            $check = in_array($extension,$allowedextension);
                            $file_size = number_format(File::size($file) / 1048576, 2);

                            if(!$check)
                            {
                                return response()->json([
                                  'fail' => true,
                                  'errors' => ['attachment' => 'Only jpg,jpeg,png,pdf are allowed !'],
                                  'error_type'=>'validation'
                                ]);                        
                            }

                            if($file_size > 10)
                            {
                                return response()->json([
                                  'fail' => true,
                                  'error_type'=>'validation',
                                  'errors' => ['attachment' => 'The document size must be less than only 10mb Upload !'],
                                ]);                        
                            }
                    }

                    $zipname = 'clear-insuff-'.date('Ymdhis').'.zip';
                    $zip = new \ZipArchive();      
                    $zip->open(public_path().'/uploads/clear-insuff/'.$zipname, \ZipArchive::CREATE | \ZipArchive::OVERWRITE);

                    foreach($files as $file)
                    {
                        $file_data = $file->getClientOriginalName();
                        $tmp_data  = $candidate_id.'-'.date('mdYHis').'-'.$file_data; 
                        $data = $file->move($filePath, $tmp_data);       
                        $attach_on_select[]=$tmp_data;

                        $path=public_path()."/uploads/clear-insuff/".$tmp_data;
                        $zip->addFile($path, '/clear-insuff/'.basename($path));  
                    }

                    $zip->close();
                }

                $s3_config = S3ConfigTrait::s3Config();

                $path=public_path().'/uploads/clear-insuff/';

                if($s3_config!=NULL && $zipname!='')
                {
                  if(File::exists($path.$zipname))
                  {
                      $c_file_platform = 's3';

                      $s3filePath = 'uploads/clear-insuff/';
      
                      if(!Storage::disk('s3')->exists($s3filePath))
                      {
                          Storage::disk('s3')->makeDirectory($s3filePath,0777, true, true);
                      }
      
                      $file = Helper::createFileObject($path.$zipname);
      
                      Storage::disk('s3')->put($s3filePath.$zipname,file_get_contents($file));

                      File::delete($path.$zipname);
                  }

                }

                if(File::exists($path.'tmp-files/'))
                {
                    File::cleanDirectory($path.'tmp-files/');
                }

                $master_data = DB::table('uan_check_masters')->select('*')->where(['uan_number'=>$uan_number])->first();
                 
                if($master_data != null)
                {
                   DB::table('jaf_form_data')->where(['id'=>$item_id])
                     ->update(['is_api_checked'=>'1','is_api_verified'=>'1','verification_status'=>'success','verified_at'=>date('Y-m-d H:i:s'),'is_insufficiency'=>'0','clear_insuff_notes'=>$request->comment,'clear_insuff_attachment' => $zipname!=NULL?$zipname:NULL,'clear_insuff_attachment_file_platform'=>$c_file_platform,'is_all_insuff_cleared' => 1,'insuff_cleared_by'=>Auth::user()->id,'updated_at'=>date('Y-m-d H:i:s')]); 
                     $is_updated=TRUE;

                  $log_data = 
                  [
                      'parent_id'            =>$parent_id,
                      'business_id'          =>$business_id,
                      'service_id'           => $serviceId->id,
                      'source_type'          =>'API',
                      'client_id'            => $master_data->client_id,
                      'uan_number'           =>$uan_number,
                      'employment_history'   =>$master_data->employment_history,
                      'is_verified'          =>'1',
                      'price'                =>$price,
                      'user_type'            =>'customer',
                      'user_id'              =>$user_id,
                      'created_at'           =>date('Y-m-d H:i:s')
                  ];
                   //dd($log_data);
                  DB::table('uan_checks')->insert($log_data);

                  $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->first();
  
                        if($ver_insuff!=NULL)
                        {
                            $ver_insuff_data=[
                              'notes' => $request->comment,
                              'updated_by' => Auth::user()->id,
                              'attachment'  => $zipname!=""?$zipname:NULL, 
                              'attachment_file_platform' => $c_file_platform,
                              'updated_at' => date('Y-m-d H:i:s')
                            ];
  
                            DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->update($ver_insuff_data);
  
                            $ver_id=$ver_insuff->id;
                        }
                        else
                        {
                          $ver_insuff_data=[
                            'parent_id' => $parent_id,
                            'business_id' => $business_id,
                            'coc_id' => $jaf_uan->business_id,
                            'candidate_id' => $candidate_id,
                            'service_id'  => $jaf_uan->service_id,
                            'jaf_form_data_id' => $jaf_uan->id,
                            'item_number' => $jaf_uan->check_item_number,
                            'activity_type'=> 'jaf-insuff',
                            'status'=>'removed',
                            'notes' => $request->comment,
                            'attachment'=>$zipname!=NULL?$zipname:NULL,
                            'attachment_file_platform' => $c_file_platform,
                            'created_by'   => Auth::user()->id,
                            'created_at'   => date('Y-m-d H:i:s'),
                          ];
                    
                          $ver_id=DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);
      
                        }
  
                        $insuff_log_data=[
                          'parent_id' => $parent_id,
                          'business_id' => $business_id,
                          'coc_id' => $jaf_uan->business_id,
                          'candidate_id' => $candidate_id,
                          'service_id'  => $service_id,
                          'jaf_form_data_id' => $jaf_uan->id,
                          'item_number' => $jaf_uan->check_item_number,
                          'activity_type'=> 'jaf-insuff',
                          'status'=>'removed',
                          'notes' => $request->comment,
                          'created_by'   => Auth::user()->id,
                          'attachment'  => $zipname!=""?$zipname:NULL,
                          'attachment_file_platform' => $c_file_platform, 
                          'created_at'   => date('Y-m-d H:i:s'),
                        ];
                  
                        DB::table('insufficiency_logs')->insert($insuff_log_data);
  
                        if(count($attach_on_select)>0)
                        {
                            $file_data=DB::table('insufficiency_attachments')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->get();
  
                            if(count($file_data)>0)
                            {
                                $path=public_path().'/uploads/clear-insuff/';
                                foreach($file_data as $file)
                                {
                                    if(File::exists($path.$file->file_name))
                                    {
                                        File::delete($path.$file->file_name);
                                    }
                                }
  
                                DB::table('insufficiency_attachments')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->delete();
  
                            }
  
                            $i=0;
                            $file_platform = 'web';
  
                            if($s3_config!=NULL)
                            {
                              $s3filePath = 'uploads/clear-insuff/';
  
                              if(!Storage::disk('s3')->exists($s3filePath))
                              {
                                  Storage::disk('s3')->makeDirectory($s3filePath,0777, true, true);
                              }
  
  
                              foreach($attach_on_select as $item)
                              {
  
                                $file_platform = 'web';
                                $path=public_path().'/uploads/clear-insuff/';
  
                                if(File::exists($path.$attach_on_select[$i]))
                                {
                                  $file_platform = 's3';
                                  $file = Helper::createFileObject($path.$attach_on_select[$i]);
  
                                  Storage::disk('s3')->put($s3filePath.$attach_on_select[$i],file_get_contents($file));
  
                                  File::delete($path.$attach_on_select[$i]);
                                }
  
                                $insuff_file=[
                                  'parent_id' => $parent_id,
                                  'business_id' => $business_id,
                                  'coc_id' => $jaf_uan->business_id,
                                  'candidate_id' => $candidate_id,
                                  'service_id'  => $service_id,
                                  'jaf_form_data_id' => $jaf_uan->id,
                                  'item_number' => $jaf_uan->check_item_number,
                                  'status'=>'removed',
                                  'file_name' => $attach_on_select[$i],
                                  'file_platform' => $file_platform,
                                  'created_by'   => Auth::user()->id,
                                  'created_at'   => date('Y-m-d H:i:s'),
                                  'updated_at' => date('Y-m-d H:i:s')
                                ];
                          
                                $file_id = DB::table('insufficiency_attachments')->insertGetId($insuff_file);
    
                                $i++;

                                if(File::exists($path.'tmp-files/'))
                                {
                                    File::cleanDirectory($path.'tmp-files/');
                                }
                              }
  
  
                            }
                            else
                            {
                                foreach($attach_on_select as $item)
                                {
                                  $insuff_file=[
                                    'parent_id' => $parent_id,
                                    'business_id' => $business_id,
                                    'coc_id' => $jaf_uan->business_id,
                                    'candidate_id' => $candidate_id,
                                    'service_id'  => $service_id,
                                    'jaf_form_data_id' => $jaf_uan->id,
                                    'item_number' => $jaf_uan->check_item_number,
                                    'status'=>'removed',
                                    'file_name' => $attach_on_select[$i],
                                    'file_platform' => $file_platform,
                                    'created_by'   => Auth::user()->id,
                                    'created_at'   => date('Y-m-d H:i:s'),
                                    'updated_at' => date('Y-m-d H:i:s')
                                  ];
                            
                                  $file_id = DB::table('insufficiency_attachments')->insertGetId($insuff_file);
      
                                  $i++;
                                }
                            }
                            
                            
                        }
  
                        $ver_insuff=DB::table('verification_insufficiency')->where(['id'=>$ver_id])->first();
  
                        $candidates=DB::table('users as u')
                            ->select('u.*','j.business_id as coc_id','j.id as jaf_id','v.created_at as insuff_clear_date','v.created_by as insuff_clear_by','v.item_number','v.notes','s.verification_type','s.name as service_name','v.business_id as cust_id','v.attachment','v.updated_at','v.updated_by')
                            ->join('jaf_form_data as j','u.id','=','j.candidate_id')
                            ->join('verification_insufficiency as v','v.jaf_form_data_id','=','j.id')
                            ->join('services as s','s.id','=','v.service_id')
                            ->where(['u.user_type'=>'candidate','j.id'=>$item_id,'v.status'=>'removed','v.id'=>$ver_insuff->id])
                            ->first();
  
                        if($candidates!=NULL)
                        {
                          // $client=DB::table('users')->where(['id'=>$candidates->coc_id])->first();
                          // $name = $client->name;
                          // $email = $client->email;
                          // $msg= "Insufficiency Cleared For Candidate";
                          // $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                          // if($candidates->attachment!=NULL)
                          // {
                          //   $url = url('/').'/uploads/clear-insuff/'.$zipname;
    
                          //   if($s3_config!=NULL)
                          //   {
                          //     $filePath = 'uploads/clear-insuff/';
    
                          //     $disk = Storage::disk('s3');
    
                          //     $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                          //         'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                          //         'Key'                        => $filePath.$zipname,
                          //         'ResponseContentDisposition' => 'attachment;'//for download
                          //     ]);
    
                          //     $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');
    
                          //     $url = (string)$req->getUri();
                          //   }
    
                          //   $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>$url,'candidate'=>$candidates,'sender'=>$sender);
                          // }
                          // else
                          //   $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);
          
                          // Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email,$name) {
                          //   $message->to($email, $name)->subject
                          //       ('Clobminds Pvt Ltd - Insufficiency Notification');
                          //   $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                          // });
  
                          $kams = DB::table('key_account_managers')->where(['business_id'=>$candidates->business_id])->get();
                          if(count($kams)>0)
                          {
                            foreach($kams as $kam)
                            {
                                $user_data=DB::table('users')->where(['id'=>$kam->user_id])->first();
  
                                $name1 = $user_data->name;
                                $email1 = $user_data->email;
                                $msg= "Insufficiency Cleared For Candidate";
                                $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
  
                                if($candidates->attachment!=NULL)
                                {
                                  $url = url('/').'/uploads/clear-insuff/'.$zipname;
          
                                  if($s3_config!=NULL)
                                  {
                                    $filePath = 'uploads/clear-insuff/';
          
                                    $disk = Storage::disk('s3');
          
                                    $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                                        'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                                        'Key'                        => $filePath.$zipname,
                                        'ResponseContentDisposition' => 'attachment;'//for download
                                    ]);
          
                                    $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');
          
                                    $url = (string)$req->getUri();
                                  }
          
                                  $data  = array('name'=>$name1,'email'=>$email1,'msg'=>$msg,'link'=>$url,'candidate'=>$candidates,'sender'=>$sender);
                                }
                                else
                                  $data  = array('name'=>$name1,'email'=>$email1,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);
  
                                Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email1,$name1) {
                                    $message->to($email1, $name1)->subject
                                        ('Clobminds Pvt Ltd - Insufficiency Notification');
                                    $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                                });
  
                            }
                          }
  
                          $ver_insuff_data=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$candidates->jaf_id,'status'=>'removed'])->first();
  
                          if($ver_insuff_data!=NULL)
                          {
                              $user_data=DB::table('users')->where(['id'=>$ver_insuff_data->created_by])->first();
                              $name = $user_data->name;
                              $email = $user_data->email;
                              $msg= "Insufficiency Cleared For Candidate";
                              $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
  
                              if($candidates->attachment!=NULL)
                              {
                                $url = url('/').'/uploads/clear-insuff/'.$zipname;
        
                                if($s3_config!=NULL)
                                {
                                  $filePath = 'uploads/clear-insuff/';
        
                                  $disk = Storage::disk('s3');
        
                                  $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                                      'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                                      'Key'                        => $filePath.$zipname,
                                      'ResponseContentDisposition' => 'attachment;'//for download
                                  ]);
        
                                  $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');
        
                                  $url = (string)$req->getUri();
                                }
        
                                $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>$url,'candidate'=>$candidates,'sender'=>$sender);
                              }
                              else
                                $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);
  
                              
                              Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email,$name) {
                                $message->to($email, $name)->subject
                                    ('Clobminds Pvt Ltd - Insufficiency Notification');
                                $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                              }); 
                          }
  
                        }
                }
                else
                {
                  $data = array(
                    'id_number'    => $uan_number,
                  );
                  // dd($data);
                  $payload = json_encode($data);
    
                  $apiURL = "https://kyc-api.aadhaarkyc.io/api/v1/income/employment-history-uan";
              
                  $ch = curl_init();
                  curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);                
                  curl_setopt ($ch, CURLOPT_POST, 1);
                  $token_key = env('SUREPASS_PRODUCTION_TOKEN');
                  curl_setopt($ch, CURLOPT_HTTPHEADER, array('Authorization: Bearer '.$token_key, 'Content-Type: application/json'));
                  curl_setopt($ch, CURLOPT_URL, $apiURL);
                  curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);
                  $resp = curl_exec ( $ch );
                  //dd($resp);
                  $response_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
                  curl_close ( $ch );
                  $array_data =  json_decode($resp,true);
                  //dd($array_data);
  
                  if($response_code==200)
                  {
                        $data = 
                        [
                          'parent_id'            => $parent_id,
                          'business_id'          => $business_id,
                          'client_id'            => $array_data['data']['client_id'],
                          'uan_number'           => $uan_number,
                          'employment_history'   =>$array_data['data']['employment_history']!=NULL && count($array_data['data']['employment_history']) > 0 ? json_encode($array_data['data']['employment_history']) : NULL,
                          'is_api_verified'      =>'1',
                          'created_by'           => $user_id,
                          'created_at'           =>date('Y-m-d H:i:s')
                        ];
                        DB::table('uan_check_masters')->insert($data);
  
                      $master_data = DB::table('uan_check_masters')->select('*')->where(['uan_number'=>$uan_number])->first();
                      //dd($master_data);
                        $log_data = 
                              [
                                  'parent_id'            =>$parent_id,
                                  'business_id'          =>$business_id,
                                  'service_id'           => $serviceId->id,
                                  'source_type'          =>'API',
                                  'client_id'            => $array_data['data']['client_id'],
                                  'uan_number'               =>$uan_number,
                                  'employment_history'   =>$array_data['data']['employment_history']!=NULL && count($array_data['data']['employment_history']) > 0 ? json_encode($array_data['data']['employment_history']) : NULL,
                                  'is_verified'          =>'1',
                                  'price'                =>$price,
                                  'user_type'            =>'customer',
                                  'user_id'              =>$user_id,
                                  'created_at'           =>date('Y-m-d H:i:s')
                              ];
                          //dd($log_data);
                          DB::table('uan_checks')->insert($log_data);
                      
                      DB::table('jaf_form_data')->where(['id'=>$item_id])
                        ->update(['is_api_checked'=>'1','is_api_verified'=>'1','verification_status'=>'success','verified_at'=>date('Y-m-d H:i:s'),'is_insufficiency'=>'0','clear_insuff_notes'=>$request->comment,'clear_insuff_attachment'=>$zipname!=NULL?$zipname:NULL,'clear_insuff_attachment_file_platform'=>$c_file_platform,'is_all_insuff_cleared' => 1,'insuff_cleared_by'=>Auth::user()->id,'updated_at'=>date('Y-m-d H:i:s')]); 
                        $is_updated=TRUE;
  
                        $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->first();
  
                        if($ver_insuff!=NULL)
                        {
                            $ver_insuff_data=[
                              'notes' => $request->comment,
                              'updated_by' => Auth::user()->id,
                              'attachment'  => $zipname!=""?$zipname:NULL, 
                              'attachment_file_platform' => $c_file_platform,
                              'updated_at' => date('Y-m-d H:i:s')
                            ];
  
                            DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->update($ver_insuff_data);
  
                            $ver_id=$ver_insuff->id;
                        }
                        else
                        {
                          $ver_insuff_data=[
                            'parent_id' => $parent_id,
                            'business_id' => $business_id,
                            'coc_id' => $jaf_uan->business_id,
                            'candidate_id' => $candidate_id,
                            'service_id'  => $jaf_uan->service_id,
                            'jaf_form_data_id' => $jaf_uan->id,
                            'item_number' => $jaf_uan->check_item_number,
                            'activity_type'=> 'jaf-insuff',
                            'status'=>'removed',
                            'notes' => $request->comment,
                            'attachment'=>$zipname!=NULL?$zipname:NULL,
                            'attachment_file_platform' => $c_file_platform,
                            'created_by'   => Auth::user()->id,
                            'created_at'   => date('Y-m-d H:i:s'),
                          ];
                    
                          $ver_id=DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);
      
                        }
  
                        $insuff_log_data=[
                          'parent_id' => $parent_id,
                          'business_id' => $business_id,
                          'coc_id' => $jaf_uan->business_id,
                          'candidate_id' => $candidate_id,
                          'service_id'  => $service_id,
                          'jaf_form_data_id' => $jaf_uan->id,
                          'item_number' => $jaf_uan->check_item_number,
                          'activity_type'=> 'jaf-insuff',
                          'status'=>'removed',
                          'notes' => $request->comment,
                          'created_by'   => Auth::user()->id,
                          'attachment'  => $zipname!=""?$zipname:NULL,
                          'attachment_file_platform' => $c_file_platform, 
                          'created_at'   => date('Y-m-d H:i:s'),
                        ];
                  
                        DB::table('insufficiency_logs')->insert($insuff_log_data);
  
                        if(count($attach_on_select)>0)
                        {
                            $file_data=DB::table('insufficiency_attachments')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->get();
  
                            if(count($file_data)>0)
                            {
                                $path=public_path().'/uploads/clear-insuff/';
                                foreach($file_data as $file)
                                {
                                    if(File::exists($path.$file->file_name))
                                    {
                                        File::delete($path.$file->file_name);
                                    }
                                }
  
                                DB::table('insufficiency_attachments')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->delete();
  
                            }
  
                            $i=0;
                            $file_platform = 'web';
  
                            if($s3_config!=NULL)
                            {
                              $s3filePath = 'uploads/clear-insuff/';
  
                              if(!Storage::disk('s3')->exists($s3filePath))
                              {
                                  Storage::disk('s3')->makeDirectory($s3filePath,0777, true, true);
                              }
  
  
                              foreach($attach_on_select as $item)
                              {
  
                                $file_platform = 'web';
                                $path=public_path().'/uploads/clear-insuff/';
  
                                if(File::exists($path.$attach_on_select[$i]))
                                {
                                  $file_platform = 's3';
                                  $file = Helper::createFileObject($path.$attach_on_select[$i]);
  
                                  Storage::disk('s3')->put($s3filePath.$attach_on_select[$i],file_get_contents($file));
  
                                  File::delete($path.$attach_on_select[$i]);
                                }
  
                                $insuff_file=[
                                  'parent_id' => $parent_id,
                                  'business_id' => $business_id,
                                  'coc_id' => $jaf_uan->business_id,
                                  'candidate_id' => $candidate_id,
                                  'service_id'  => $service_id,
                                  'jaf_form_data_id' => $jaf_uan->id,
                                  'item_number' => $jaf_uan->check_item_number,
                                  'status'=>'removed',
                                  'file_name' => $attach_on_select[$i],
                                  'file_platform' => $file_platform,
                                  'created_by'   => Auth::user()->id,
                                  'created_at'   => date('Y-m-d H:i:s'),
                                  'updated_at' => date('Y-m-d H:i:s')
                                ];
                          
                                $file_id = DB::table('insufficiency_attachments')->insertGetId($insuff_file);
    
                                $i++;

                                if(File::exists($path.'tmp-files/'))
                                {
                                    File::cleanDirectory($path.'tmp-files/');
                                }
                              }
  
  
                            }
                            else
                            {
                                foreach($attach_on_select as $item)
                                {
                                  $insuff_file=[
                                    'parent_id' => $parent_id,
                                    'business_id' => $business_id,
                                    'coc_id' => $jaf_uan->business_id,
                                    'candidate_id' => $candidate_id,
                                    'service_id'  => $service_id,
                                    'jaf_form_data_id' => $jaf_uan->id,
                                    'item_number' => $jaf_uan->check_item_number,
                                    'status'=>'removed',
                                    'file_name' => $attach_on_select[$i],
                                    'file_platform' => $file_platform,
                                    'created_by'   => Auth::user()->id,
                                    'created_at'   => date('Y-m-d H:i:s'),
                                    'updated_at' => date('Y-m-d H:i:s')
                                  ];
                            
                                  $file_id = DB::table('insufficiency_attachments')->insertGetId($insuff_file);
      
                                  $i++;
                                }
                            }
                            
                            
                        }
  
                        $ver_insuff=DB::table('verification_insufficiency')->where(['id'=>$ver_id])->first();
  
                        $candidates=DB::table('users as u')
                            ->select('u.*','j.business_id as coc_id','j.id as jaf_id','v.created_at as insuff_clear_date','v.created_by as insuff_clear_by','v.item_number','v.notes','s.verification_type','s.name as service_name','v.business_id as cust_id','v.attachment','v.updated_at','v.updated_by')
                            ->join('jaf_form_data as j','u.id','=','j.candidate_id')
                            ->join('verification_insufficiency as v','v.jaf_form_data_id','=','j.id')
                            ->join('services as s','s.id','=','v.service_id')
                            ->where(['u.user_type'=>'candidate','j.id'=>$item_id,'v.status'=>'removed','v.id'=>$ver_insuff->id])
                            ->first();
  
                        if($candidates!=NULL)
                        {
                          // $client=DB::table('users')->where(['id'=>$candidates->coc_id])->first();
                          // $name = $client->name;
                          // $email = $client->email;
                          // $msg= "Insufficiency Cleared For Candidate";
                          // $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                          // if($candidates->attachment!=NULL)
                          // {
                          //   $url = url('/').'/uploads/clear-insuff/'.$zipname;
    
                          //   if($s3_config!=NULL)
                          //   {
                          //     $filePath = 'uploads/clear-insuff/';
    
                          //     $disk = Storage::disk('s3');
    
                          //     $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                          //         'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                          //         'Key'                        => $filePath.$zipname,
                          //         'ResponseContentDisposition' => 'attachment;'//for download
                          //     ]);
    
                          //     $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');
    
                          //     $url = (string)$req->getUri();
                          //   }
    
                          //   $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>$url,'candidate'=>$candidates,'sender'=>$sender);
                          // }
                          // else
                          //   $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);
          
                          // Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email,$name) {
                          //   $message->to($email, $name)->subject
                          //       ('Clobminds Pvt Ltd - Insufficiency Notification');
                          //   $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                          // });
  
                          $kams = DB::table('key_account_managers')->where(['business_id'=>$candidates->business_id])->get();
                          if(count($kams)>0)
                          {
                            foreach($kams as $kam)
                            {
                                $user_data=DB::table('users')->where(['id'=>$kam->user_id])->first();
  
                                $name1 = $user_data->name;
                                $email1 = $user_data->email;
                                $msg= "Insufficiency Cleared For Candidate";
                                $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
  
                                if($candidates->attachment!=NULL)
                                {
                                  $url = url('/').'/uploads/clear-insuff/'.$zipname;
          
                                  if($s3_config!=NULL)
                                  {
                                    $filePath = 'uploads/clear-insuff/';
          
                                    $disk = Storage::disk('s3');
          
                                    $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                                        'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                                        'Key'                        => $filePath.$zipname,
                                        'ResponseContentDisposition' => 'attachment;'//for download
                                    ]);
          
                                    $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');
          
                                    $url = (string)$req->getUri();
                                  }
          
                                  $data  = array('name'=>$name1,'email'=>$email1,'msg'=>$msg,'link'=>$url,'candidate'=>$candidates,'sender'=>$sender);
                                }
                                else
                                  $data  = array('name'=>$name1,'email'=>$email1,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);
  
                                Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email1,$name1) {
                                    $message->to($email1, $name1)->subject
                                        ('Clobminds Pvt Ltd - Insufficiency Notification');
                                    $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                                });
  
                            }
                          }
  
                          $ver_insuff_data=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$candidates->jaf_id,'status'=>'removed'])->first();
  
                          if($ver_insuff_data!=NULL)
                          {
                              $user_data=DB::table('users')->where(['id'=>$ver_insuff_data->created_by])->first();
                              $name = $user_data->name;
                              $email = $user_data->email;
                              $msg= "Insufficiency Cleared For Candidate";
                              $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
  
                              if($candidates->attachment!=NULL)
                              {
                                $url = url('/').'/uploads/clear-insuff/'.$zipname;
        
                                if($s3_config!=NULL)
                                {
                                  $filePath = 'uploads/clear-insuff/';
        
                                  $disk = Storage::disk('s3');
        
                                  $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                                      'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                                      'Key'                        => $filePath.$zipname,
                                      'ResponseContentDisposition' => 'attachment;'//for download
                                  ]);
        
                                  $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');
        
                                  $url = (string)$req->getUri();
                                }
        
                                $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>$url,'candidate'=>$candidates,'sender'=>$sender);
                              }
                              else
                                $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);
  
                              
                              Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email,$name) {
                                $message->to($email, $name)->subject
                                    ('Clobminds Pvt Ltd - Insufficiency Notification');
                                $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                              }); 
                          }
  
                        }
                      
  
                  }else{
  
                      //update insuff
  
                    DB::table('jaf_form_data')->where(['id'=>$item_id])->update(['is_api_checked'=>'1','is_api_verified'=>'0','is_insufficiency'=>'1','verification_status'=>'failed','verified_at'=>date('Y-m-d H:i:s')]); 
  
                    $jaf_data=DB::table('jaf_form_data')->where(['id'=>$item_id])->first();
                    
                    $insuff_log_data=[
                      'parent_id' => $parent_id,
                      'business_id' => $business_id,
                      'coc_id' => $jaf_data->business_id,
                      'candidate_id' => $candidate_id,
                      'service_id'  => $service_id,
                      'jaf_form_data_id' => $jaf_data->id,
                      'item_number' => $jaf_data->check_item_number,
                      'activity_type'=> 'jaf-insuff',
                      'status'=>'failed',
                      'notes' => 'BGV Failed',
                      'created_by'   => Auth::user()->id,
                      'attachment'  => $zipname!=""?$zipname:NULL,
                      'attachment_file_platform' => $c_file_platform, 
                      'created_at'   => date('Y-m-d H:i:s'),
                    ];
              
                    DB::table('insufficiency_logs')->insert($insuff_log_data);
  
                    $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'raised'])->first();
  
                     if($ver_insuff!=NULL)
                     {
                         $ver_insuff_data=[
                           'notes' => 'BGV Failed',
                           'updated_by' => Auth::user()->id,
                           'updated_at' => date('Y-m-d H:i:s')
                         ];
  
                         DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'raised'])->update($ver_insuff_data);
  
                         $ver_id=$ver_insuff->id;
                     }
                     else
                     {
                       $ver_insuff_data=[
                         'parent_id' => $parent_id,
                         'business_id' => $business_id,
                         'coc_id' => $jaf_data->business_id,
                         'candidate_id' => $candidate_id,
                         'service_id'  => $service_id,
                         'jaf_form_data_id' => $jaf_data->id,
                         'item_number' => $jaf_data->check_item_number,
                         'activity_type'=> 'jaf-insuff',
                         'status'=>'raised',
                         'notes' => 'BGV Failed',
                         'created_by'   => Auth::user()->id,
                         'created_at'   => date('Y-m-d H:i:s'),
                       ];
                 
                       $ver_id = DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);
                     }
                  }
                }
                

                if($is_updated){  
                  //generate report here 
                  // $this->generateCandidateReport($candidate_id);
                  DB::commit();
                  return response()->json([
                  'fail' => false,
                  'status'=>'ok',
                  'message' => 'updated',                
                  ], 200);
                }
                else{
                    DB::commit();
                    return response()->json([
                      'fail' => true,
                    'status' =>'no',
                    ], 200);
                }
            }

           // service start 
            else if($service_d->type_name == 'cibil')
            {
          
              $jaf_cibil = DB::table('jaf_form_data')->select('id','business_id','candidate_id','form_data','service_id','check_item_number')->where(['id'=>$item_id])->first();
              //dd($jaf_cibil);
              //$username = DB::table('users')->where(['id'=>$jaf_cibil->candidate_id])->first();
              //dd($username);
            
              $jaf_array = json_decode($jaf_cibil->form_data, true);
              // print_r($jaf_array);
              $pan_number ="";
              $first_name ="";
              $full_name ="";
              $contact_number ="";
              foreach($jaf_array as $input){
                  if(array_key_exists('First Name',$input)){
                    $first_name = $input['First Name'];
                  }
                  if(array_key_exists('Full Name',$input)){
                    $first_name = $input['Full Name'];
                  }
                  if(array_key_exists('PAN Number',$input)){
                    $pan_number = $input['PAN Number'];
                  }
                  if(array_key_exists('Contact Number',$input)){
                    $contact_number = $input['Contact Number'];
                  }
              }

                $s3_config=NULL;
                $c_file_platform = 'web';
                $attach_on_select=[];
                $allowedextension=['jpg','jpeg','png','svg','pdf'];
                $zipname="";
                if($request->hasFile('attachment') && $request->file('attachment') !="")
                {
                    $filePath = public_path('/uploads/clear-insuff/'); 
                    $files= $request->file('attachment');
                    foreach($files as $file)
                    {
                            $extension = $file->getClientOriginalExtension();

                            $check = in_array($extension,$allowedextension);

                            if(!$check)
                            {
                                return response()->json([
                                  'fail' => true,
                                  'errors' => ['attachment' => 'Only jpg,jpeg,png,pdf are allowed !'],
                                  'error_type'=>'validation'
                                ]);                        
                            }
                    }

                    $zipname = 'clear-insuff-'.date('Ymdhis').'.zip';
                    $zip = new \ZipArchive();      
                    $zip->open(public_path().'/uploads/clear-insuff/'.$zipname, \ZipArchive::CREATE | \ZipArchive::OVERWRITE);

                    foreach($files as $file)
                    {
                        $file_data = $file->getClientOriginalName();
                        $tmp_data  = $candidate_id.'-'.date('mdYHis').'-'.$file_data; 
                        $data = $file->move($filePath, $tmp_data);       
                        $attach_on_select[]=$tmp_data;

                        $path=public_path()."/uploads/clear-insuff/".$tmp_data;
                        $zip->addFile($path, '/clear-insuff/'.basename($path));  
                    }

                    $zip->close();
                }

                $s3_config = S3ConfigTrait::s3Config();

                $path=public_path().'/uploads/clear-insuff/';

                if($s3_config!=NULL && $zipname!='')
                {
                  if(File::exists($path.$zipname))
                  {
                      $c_file_platform = 's3';

                      $s3filePath = 'uploads/clear-insuff/';
      
                      if(!Storage::disk('s3')->exists($s3filePath))
                      {
                          Storage::disk('s3')->makeDirectory($s3filePath,0777, true, true);
                      }
      
                      $file = Helper::createFileObject($path.$zipname);
      
                      Storage::disk('s3')->put($s3filePath.$zipname,file_get_contents($file));

                      File::delete($path.$zipname);
                  }

                }

                if(File::exists($path.'tmp-files/'))
                {
                    File::cleanDirectory($path.'tmp-files/');
                }

                $master_data = DB::table('cibil_check_masters')->select('*')->where(['pan_number'=>$pan_number])->latest()->first();

                if($master_data != null)
                {

                  DB::table('jaf_form_data')->where(['id'=>$item_id])
                  ->update(['is_api_checked'=>'1','is_api_verified'=>'1','verification_status'=>'success','verified_at'=>date('Y-m-d H:i:s'),'is_insufficiency'=>'0','clear_insuff_notes'=>$request->comment,'clear_insuff_attachment' => $zipname!=NULL?$zipname:NULL,'clear_insuff_attachment_file_platform'=>$c_file_platform,'is_all_insuff_cleared' => 1,'insuff_cleared_by'=>Auth::user()->id,'updated_at'=>date('Y-m-d H:i:s')]); 
                  $is_updated=TRUE;

                  $log_data = 
                  [
                      'parent_id'              => $parent_id,
                      'business_id'          => $business_id,
                      'service_id'           => $serviceId->id,
                      'source_type'          => 'API', 
                      'client_id'            => $master_data->client_id,
                      'pan_number'           => $master_data->pan_number,
                      'mobile_number'        => $master_data->mobile_number,
                      'name'                 => $master_data->name,
                      'consent'              => 'Y',
                      'credit_score'         => $master_data->credit_score,
                      'report_type'          => 'html',
                      'credit_report_link'   => $master_data->credit_report_link,
                      'is_verified'          => '1',
                      'price'                => $price,
                      'user_type'            => 'customer',
                      'user_id'              => $user_id,
                      'created_at'           => date('Y-m-d H:i:s')
                  ];
                  //dd($log_data);
                  DB::table('cibil_checks')->insert($log_data);

                  $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->first();

                  if($ver_insuff!=NULL)
                  {
                      $ver_insuff_data=[
                        'notes' => $request->comment,
                        'updated_by' => Auth::user()->id,
                        'attachment'  => $zipname!=""?$zipname:NULL, 
                        'attachment_file_platform' => $c_file_platform,
                        'updated_at' => date('Y-m-d H:i:s')
                      ];

                      DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->update($ver_insuff_data);

                      $ver_id=$ver_insuff->id;
                  }
                  else
                  {
                    $ver_insuff_data=[
                      'parent_id' => $parent_id,
                      'business_id' => $business_id,
                      'coc_id' => $jaf_cibil->business_id,
                      'candidate_id' => $candidate_id,
                      'service_id'  => $jaf_cibil->service_id,
                      'jaf_form_data_id' => $jaf_cibil->id,
                      'item_number' => $jaf_cibil->check_item_number,
                      'activity_type'=> 'jaf-insuff',
                      'status'=>'removed',
                      'notes' => $request->comment,
                      'attachment'=>$zipname!=NULL?$zipname:NULL,
                      'attachment_file_platform' => $c_file_platform,
                      'created_by'   => Auth::user()->id,
                      'created_at'   => date('Y-m-d H:i:s'),
                    ];
              
                    $ver_id=DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);

                  }

                  $insuff_log_data=[
                    'parent_id' => $parent_id,
                    'business_id' => $business_id,
                    'coc_id' => $jaf_cibil->business_id,
                    'candidate_id' => $candidate_id,
                    'service_id'  => $service_id,
                    'jaf_form_data_id' => $jaf_cibil->id,
                    'item_number' => $jaf_cibil->check_item_number,
                    'activity_type'=> 'jaf-insuff',
                    'status'=>'removed',
                    'notes' => $request->comment,
                    'created_by'   => Auth::user()->id,
                    'attachment'  => $zipname!=""?$zipname:NULL,
                    'attachment_file_platform' => $c_file_platform, 
                    'created_at'   => date('Y-m-d H:i:s'),
                  ];
            
                  DB::table('insufficiency_logs')->insert($insuff_log_data);

                  if(count($attach_on_select)>0)
                  {
                      $file_data=DB::table('insufficiency_attachments')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->get();

                      if(count($file_data)>0)
                      {
                          $path=public_path().'/uploads/clear-insuff/';
                          foreach($file_data as $file)
                          {
                              if(File::exists($path.$file->file_name))
                              {
                                  File::delete($path.$file->file_name);
                              }
                          }

                          DB::table('insufficiency_attachments')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->delete();

                      }

                      $i=0;
                      $file_platform = 'web';

                      if($s3_config!=NULL)
                      {
                        $s3filePath = 'uploads/clear-insuff/';

                        if(!Storage::disk('s3')->exists($s3filePath))
                        {
                            Storage::disk('s3')->makeDirectory($s3filePath,0777, true, true);
                        }


                        foreach($attach_on_select as $item)
                        {

                          $file_platform = 'web';
                          $path=public_path().'/uploads/clear-insuff/';

                          if(File::exists($path.$attach_on_select[$i]))
                          {
                            $file_platform = 's3';
                            $file = Helper::createFileObject($path.$attach_on_select[$i]);

                            Storage::disk('s3')->put($s3filePath.$attach_on_select[$i],file_get_contents($file));

                            File::delete($path.$attach_on_select[$i]);
                          }

                          $insuff_file=[
                            'parent_id' => $parent_id,
                            'business_id' => $business_id,
                            'coc_id' => $jaf_cibil->business_id,
                            'candidate_id' => $candidate_id,
                            'service_id'  => $service_id,
                            'jaf_form_data_id' => $jaf_cibil->id,
                            'item_number' => $jaf_cibil->check_item_number,
                            'status'=>'removed',
                            'file_name' => $attach_on_select[$i],
                            'file_platform' => $file_platform,
                            'created_by'   => Auth::user()->id,
                            'created_at'   => date('Y-m-d H:i:s'),
                            'updated_at' => date('Y-m-d H:i:s')
                          ];
                    
                          $file_id = DB::table('insufficiency_attachments')->insertGetId($insuff_file);

                          $i++;

                          if(File::exists($path.'tmp-files/'))
                          {
                              File::cleanDirectory($path.'tmp-files/');
                          }
                        }


                      }
                      else
                      {
                          foreach($attach_on_select as $item)
                          {
                            $insuff_file=[
                              'parent_id' => $parent_id,
                              'business_id' => $business_id,
                              'coc_id' => $jaf_cibil->business_id,
                              'candidate_id' => $candidate_id,
                              'service_id'  => $service_id,
                              'jaf_form_data_id' => $jaf_cibil->id,
                              'item_number' => $jaf_cibil->check_item_number,
                              'status'=>'removed',
                              'file_name' => $attach_on_select[$i],
                              'file_platform' => $file_platform,
                              'created_by'   => Auth::user()->id,
                              'created_at'   => date('Y-m-d H:i:s'),
                              'updated_at' => date('Y-m-d H:i:s')
                            ];
                      
                            $file_id = DB::table('insufficiency_attachments')->insertGetId($insuff_file);

                            $i++;
                          }
                      }
                      
                      
                  }

                  $ver_insuff=DB::table('verification_insufficiency')->where(['id'=>$ver_id])->first();

                  $candidates=DB::table('users as u')
                      ->select('u.*','j.business_id as coc_id','j.id as jaf_id','v.created_at as insuff_clear_date','v.created_by as insuff_clear_by','v.item_number','v.notes','s.verification_type','s.name as service_name','v.business_id as cust_id','v.attachment','v.updated_at','v.updated_by')
                      ->join('jaf_form_data as j','u.id','=','j.candidate_id')
                      ->join('verification_insufficiency as v','v.jaf_form_data_id','=','j.id')
                      ->join('services as s','s.id','=','v.service_id')
                      ->where(['u.user_type'=>'candidate','j.id'=>$item_id,'v.status'=>'removed','v.id'=>$ver_insuff->id])
                      ->first();

                  if($candidates!=NULL)
                  {
                    // $client=DB::table('users')->where(['id'=>$candidates->coc_id])->first();
                    // $name = $client->name;
                    // $email = $client->email;
                    // $msg= "Insufficiency Cleared For Candidate";
                    // $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                    // if($candidates->attachment!=NULL)
                    // {
                    //   $url = url('/').'/uploads/clear-insuff/'.$zipname;

                    //   if($s3_config!=NULL)
                    //   {
                    //     $filePath = 'uploads/clear-insuff/';

                    //     $disk = Storage::disk('s3');

                    //     $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                    //         'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                    //         'Key'                        => $filePath.$zipname,
                    //         'ResponseContentDisposition' => 'attachment;'//for download
                    //     ]);

                    //     $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');

                    //     $url = (string)$req->getUri();
                    //   }

                    //   $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>$url,'candidate'=>$candidates,'sender'=>$sender);
                    // }
                    // else
                    //   $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);
    
                    // Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email,$name) {
                    //   $message->to($email, $name)->subject
                    //       ('Clobminds Pvt Ltd - Insufficiency Notification');
                    //   $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                    // });

                    $kams = DB::table('key_account_managers')->where(['business_id'=>$candidates->business_id])->get();
                    if(count($kams)>0)
                    {
                      foreach($kams as $kam)
                      {
                          $user_data=DB::table('users')->where(['id'=>$kam->user_id])->first();

                          $name1 = $user_data->name;
                          $email1 = $user_data->email;
                          $msg= "Insufficiency Cleared For Candidate";
                          $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();

                          if($candidates->attachment!=NULL)
                          {
                            $url = url('/').'/uploads/clear-insuff/'.$zipname;
    
                            if($s3_config!=NULL)
                            {
                              $filePath = 'uploads/clear-insuff/';
    
                              $disk = Storage::disk('s3');
    
                              $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                                  'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                                  'Key'                        => $filePath.$zipname,
                                  'ResponseContentDisposition' => 'attachment;'//for download
                              ]);
    
                              $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');
    
                              $url = (string)$req->getUri();
                            }
    
                            $data  = array('name'=>$name1,'email'=>$email1,'msg'=>$msg,'link'=>$url,'candidate'=>$candidates,'sender'=>$sender);
                          }
                          else
                            $data  = array('name'=>$name1,'email'=>$email1,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);

                          Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email1,$name1) {
                              $message->to($email1, $name1)->subject
                                  ('Clobminds Pvt Ltd - Insufficiency Notification');
                              $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                          });

                      }
                    }

                    $ver_insuff_data=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$candidates->jaf_id,'status'=>'removed'])->first();

                    if($ver_insuff_data!=NULL)
                    {
                        $user_data=DB::table('users')->where(['id'=>$ver_insuff_data->created_by])->first();
                        $name = $user_data->name;
                        $email = $user_data->email;
                        $msg= "Insufficiency Cleared For Candidate";
                        $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();

                        if($candidates->attachment!=NULL)
                        {
                          $url = url('/').'/uploads/clear-insuff/'.$zipname;
  
                          if($s3_config!=NULL)
                          {
                            $filePath = 'uploads/clear-insuff/';
  
                            $disk = Storage::disk('s3');
  
                            $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                                'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                                'Key'                        => $filePath.$zipname,
                                'ResponseContentDisposition' => 'attachment;'//for download
                            ]);
  
                            $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');
  
                            $url = (string)$req->getUri();
                          }
  
                          $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>$url,'candidate'=>$candidates,'sender'=>$sender);
                        }
                        else
                          $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);

                        
                        Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email,$name) {
                          $message->to($email, $name)->subject
                              ('Clobminds Pvt Ltd - Insufficiency Notification');
                          $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                        }); 
                    }

                  }
                  $this->autoCheckAttachment('cibil',$master_data,$jaf_cibil->id);


                }
                else
                {
                    $data = array(
                      'name'    => $first_name,
                      'pan'    => $pan_number,
                      'mobile' => $contact_number,
                      'consent' => 'Y'
                  );
                  //dd($data);
                  $payload = json_encode($data);

                  $apiURL = "https://kyc-api.surepass.io/api/v1/credit-report-v2/fetch-report";
                    
                  $ch = curl_init();
                  curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);                
                  curl_setopt ($ch, CURLOPT_POST, 1);
                  $token_key = env('SUREPASS_PRODUCTION_TOKEN');
                  curl_setopt($ch, CURLOPT_HTTPHEADER, array('Authorization: Bearer '.$token_key, 'Content-Type: application/json'));
                  curl_setopt($ch, CURLOPT_URL, $apiURL);
                  curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);
                  $resp = curl_exec ( $ch );
                  //dd($resp);
                  $response_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
                  curl_close ( $ch );
                  $array_data =  json_decode($resp,true);
                  //dd($array_data);

                  if($response_code==200 || $response_code==422)
                  {
                    $data = 
                    [
                      'parent_id'            => $parent_id,
                      'business_id'          => $business_id,
                      'client_id'            => $array_data['data']['client_id'],
                      'pan_number'           =>$array_data['data']['pan'],
                      'mobile_number'        =>$array_data['data']['mobile'],
                      'name'                 =>$array_data['data']['name'],
                      'consent'              => 'Y',
                      'credit_score'         => $array_data['data']['credit_score'],
                      'report_type'          => 'html',
                      'credit_report_link'   =>$array_data['data']['credit_report']!=NULL && count($array_data['data']['credit_report']) > 0 ? json_encode($array_data['data']['credit_report']) : NULL,
                      'is_api_verified'      =>$response_code==422 ? '0' : '1',
                      'created_by'           => $user_id,
                      'created_at'           =>date('Y-m-d H:i:s')
                    ];

                    DB::table('cibil_check_masters')->insert($data);
                    $master_data = DB::table('cibil_check_masters')->select('*')->where(['pan_number'=>$pan_number])->latest()->first();
                    //dd($master_data);
                  
                      $log_data = 
                      [
                        'parent_id'            =>$parent_id,
                        'business_id'          =>$business_id,
                        'service_id'           => $serviceId->id,
                        'source_type'          =>'API',
                        'client_id'            => $array_data['data']['client_id'],
                        'pan_number'           =>$array_data['data']['pan'],
                        'mobile_number'        =>$array_data['data']['mobile'],
                        'name'                 =>$array_data['data']['name'],
                        'consent'              => 'Y',
                        'credit_score'         => $array_data['data']['credit_score'],
                        'report_type'          => 'html',
                        'credit_report_link'   =>$array_data['data']['credit_report']!=NULL && count($array_data['data']['credit_report']) > 0 ? json_encode($array_data['data']['credit_report']) : NULL,
                        'is_verified'          =>$response_code==422 ? '0' : '1',
                        'price'                =>$price,
                        'user_type'            =>'customer',
                        'user_id'              =>$user_id,
                        'created_at'           =>date('Y-m-d H:i:s')
                      ];
                      //dd($log_data);
                      DB::table('cibil_checks')->insert($log_data);
                      
                      DB::table('jaf_form_data')->where(['id'=>$item_id])
                        ->update(['is_api_checked'=>'1','is_api_verified'=>'1','verification_status'=>'success','verified_at'=>date('Y-m-d H:i:s'),'is_insufficiency'=>'0','clear_insuff_notes'=>$request->comment,'clear_insuff_attachment'=>$zipname!=NULL?$zipname:NULL,'clear_insuff_attachment_file_platform'=>$c_file_platform,'is_all_insuff_cleared' => 1,'insuff_cleared_by'=>Auth::user()->id,'updated_at'=>date('Y-m-d H:i:s')]); 
                        $is_updated=TRUE;

                        $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->first();

                        if($ver_insuff!=NULL)
                        {
                            $ver_insuff_data=[
                              'notes' => $request->comment,
                              'updated_by' => Auth::user()->id,
                              'attachment'  => $zipname!=""?$zipname:NULL, 
                              'attachment_file_platform' => $c_file_platform,
                              'updated_at' => date('Y-m-d H:i:s')
                            ];

                            DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->update($ver_insuff_data);

                            $ver_id=$ver_insuff->id;
                        }
                        else
                        {
                          $ver_insuff_data=[
                            'parent_id' => $parent_id,
                            'business_id' => $business_id,
                            'coc_id' => $jaf_cibil->business_id,
                            'candidate_id' => $candidate_id,
                            'service_id'  => $jaf_cibil->service_id,
                            'jaf_form_data_id' => $jaf_cibil->id,
                            'item_number' => $jaf_cibil->check_item_number,
                            'activity_type'=> 'jaf-insuff',
                            'status'=>'removed',
                            'notes' => $request->comment,
                            'attachment'=>$zipname!=NULL?$zipname:NULL,
                            'attachment_file_platform' => $c_file_platform,
                            'created_by'   => Auth::user()->id,
                            'created_at'   => date('Y-m-d H:i:s'),
                          ];
                    
                          $ver_id=DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);
      
                        }

                        $insuff_log_data=[
                          'parent_id' => $parent_id,
                          'business_id' => $business_id,
                          'coc_id' => $jaf_cibil->business_id,
                          'candidate_id' => $candidate_id,
                          'service_id'  => $service_id,
                          'jaf_form_data_id' => $jaf_cibil->id,
                          'item_number' => $jaf_cibil->check_item_number,
                          'activity_type'=> 'jaf-insuff',
                          'status'=>'removed',
                          'notes' => $request->comment,
                          'created_by'   => Auth::user()->id,
                          'attachment'  => $zipname!=""?$zipname:NULL,
                          'attachment_file_platform' => $c_file_platform, 
                          'created_at'   => date('Y-m-d H:i:s'),
                        ];
                  
                        DB::table('insufficiency_logs')->insert($insuff_log_data);

                        if(count($attach_on_select)>0)
                        {
                            $file_data=DB::table('insufficiency_attachments')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->get();

                            if(count($file_data)>0)
                            {
                                $path=public_path().'/uploads/clear-insuff/';
                                foreach($file_data as $file)
                                {
                                    if(File::exists($path.$file->file_name))
                                    {
                                        File::delete($path.$file->file_name);
                                    }
                                }

                                DB::table('insufficiency_attachments')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->delete();

                            }

                            $i=0;
                            $file_platform = 'web';

                            if($s3_config!=NULL)
                            {
                              $s3filePath = 'uploads/clear-insuff/';

                              if(!Storage::disk('s3')->exists($s3filePath))
                              {
                                  Storage::disk('s3')->makeDirectory($s3filePath,0777, true, true);
                              }


                              foreach($attach_on_select as $item)
                              {

                                $file_platform = 'web';
                                $path=public_path().'/uploads/clear-insuff/';

                                if(File::exists($path.$attach_on_select[$i]))
                                {
                                  $file_platform = 's3';
                                  $file = Helper::createFileObject($path.$attach_on_select[$i]);

                                  Storage::disk('s3')->put($s3filePath.$attach_on_select[$i],file_get_contents($file));

                                  File::delete($path.$attach_on_select[$i]);
                                }

                                $insuff_file=[
                                  'parent_id' => $parent_id,
                                  'business_id' => $business_id,
                                  'coc_id' => $jaf_cibil->business_id,
                                  'candidate_id' => $candidate_id,
                                  'service_id'  => $service_id,
                                  'jaf_form_data_id' => $jaf_cibil->id,
                                  'item_number' => $jaf_cibil->check_item_number,
                                  'status'=>'removed',
                                  'file_name' => $attach_on_select[$i],
                                  'file_platform' => $file_platform,
                                  'created_by'   => Auth::user()->id,
                                  'created_at'   => date('Y-m-d H:i:s'),
                                  'updated_at' => date('Y-m-d H:i:s')
                                ];
                          
                                $file_id = DB::table('insufficiency_attachments')->insertGetId($insuff_file);

                                $i++;

                                if(File::exists($path.'tmp-files/'))
                                {
                                    File::cleanDirectory($path.'tmp-files/');
                                }
                              }


                            }
                            else
                            {
                                foreach($attach_on_select as $item)
                                {
                                  $insuff_file=[
                                    'parent_id' => $parent_id,
                                    'business_id' => $business_id,
                                    'coc_id' => $jaf_cibil->business_id,
                                    'candidate_id' => $candidate_id,
                                    'service_id'  => $service_id,
                                    'jaf_form_data_id' => $jaf_cibil->id,
                                    'item_number' => $jaf_cibil->check_item_number,
                                    'status'=>'removed',
                                    'file_name' => $attach_on_select[$i],
                                    'file_platform' => $file_platform,
                                    'created_by'   => Auth::user()->id,
                                    'created_at'   => date('Y-m-d H:i:s'),
                                    'updated_at' => date('Y-m-d H:i:s')
                                  ];
                            
                                  $file_id = DB::table('insufficiency_attachments')->insertGetId($insuff_file);
      
                                  $i++;
                                }
                            }
                            
                            
                        }

                        $ver_insuff=DB::table('verification_insufficiency')->where(['id'=>$ver_id])->first();

                        $candidates=DB::table('users as u')
                            ->select('u.*','j.business_id as coc_id','j.id as jaf_id','v.created_at as insuff_clear_date','v.created_by as insuff_clear_by','v.item_number','v.notes','s.verification_type','s.name as service_name','v.business_id as cust_id','v.attachment','v.updated_at','v.updated_by')
                            ->join('jaf_form_data as j','u.id','=','j.candidate_id')
                            ->join('verification_insufficiency as v','v.jaf_form_data_id','=','j.id')
                            ->join('services as s','s.id','=','v.service_id')
                            ->where(['u.user_type'=>'candidate','j.id'=>$item_id,'v.status'=>'removed','v.id'=>$ver_insuff->id])
                            ->first();

                        if($candidates!=NULL)
                        {
                          // $client=DB::table('users')->where(['id'=>$candidates->coc_id])->first();
                          // $name = $client->name;
                          // $email = $client->email;
                          // $msg= "Insufficiency Cleared For Candidate";
                          // $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                          // if($candidates->attachment!=NULL)
                          // {
                          //   $url = url('/').'/uploads/clear-insuff/'.$zipname;

                          //   if($s3_config!=NULL)
                          //   {
                          //     $filePath = 'uploads/clear-insuff/';

                          //     $disk = Storage::disk('s3');

                          //     $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                          //         'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                          //         'Key'                        => $filePath.$zipname,
                          //         'ResponseContentDisposition' => 'attachment;'//for download
                          //     ]);

                          //     $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');

                          //     $url = (string)$req->getUri();
                          //   }

                          //   $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>$url,'candidate'=>$candidates,'sender'=>$sender);
                          // }
                          // else
                          //   $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);
          
                          // Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email,$name) {
                          //   $message->to($email, $name)->subject
                          //       ('Clobminds Pvt Ltd - Insufficiency Notification');
                          //   $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                          // });

                          $kams = DB::table('key_account_managers')->where(['business_id'=>$candidates->business_id])->get();
                          if(count($kams)>0)
                          {
                            foreach($kams as $kam)
                            {
                                $user_data=DB::table('users')->where(['id'=>$kam->user_id])->first();

                                $name1 = $user_data->name;
                                $email1 = $user_data->email;
                                $msg= "Insufficiency Cleared For Candidate";
                                $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();

                                if($candidates->attachment!=NULL)
                                {
                                  $url = url('/').'/uploads/clear-insuff/'.$zipname;
          
                                  if($s3_config!=NULL)
                                  {
                                    $filePath = 'uploads/clear-insuff/';
          
                                    $disk = Storage::disk('s3');
          
                                    $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                                        'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                                        'Key'                        => $filePath.$zipname,
                                        'ResponseContentDisposition' => 'attachment;'//for download
                                    ]);
          
                                    $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');
          
                                    $url = (string)$req->getUri();
                                  }
          
                                  $data  = array('name'=>$name1,'email'=>$email1,'msg'=>$msg,'link'=>$url,'candidate'=>$candidates,'sender'=>$sender);
                                }
                                else
                                  $data  = array('name'=>$name1,'email'=>$email1,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);

                                Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email1,$name1) {
                                    $message->to($email1, $name1)->subject
                                        ('Clobminds Pvt Ltd - Insufficiency Notification');
                                    $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                                });

                            }
                          }

                          $ver_insuff_data=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$candidates->jaf_id,'status'=>'removed'])->first();

                          if($ver_insuff_data!=NULL)
                          {
                              $user_data=DB::table('users')->where(['id'=>$ver_insuff_data->created_by])->first();
                              $name = $user_data->name;
                              $email = $user_data->email;
                              $msg= "Insufficiency Cleared For Candidate";
                              $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();

                              if($candidates->attachment!=NULL)
                              {
                                $url = url('/').'/uploads/clear-insuff/'.$zipname;
        
                                if($s3_config!=NULL)
                                {
                                  $filePath = 'uploads/clear-insuff/';
        
                                  $disk = Storage::disk('s3');
        
                                  $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                                      'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                                      'Key'                        => $filePath.$zipname,
                                      'ResponseContentDisposition' => 'attachment;'//for download
                                  ]);
        
                                  $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');
        
                                  $url = (string)$req->getUri();
                                }
        
                                $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>$url,'candidate'=>$candidates,'sender'=>$sender);
                              }
                              else
                                $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);

                              
                              Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email,$name) {
                                $message->to($email, $name)->subject
                                    ('Clobminds Pvt Ltd - Insufficiency Notification');
                                $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                              }); 
                          }

                        }
                        $this->autoCheckAttachment('cibil',$master_data,$jaf_cibil->id);
                      

                  }
                  else{

                      //update insuff

                    DB::table('jaf_form_data')->where(['id'=>$item_id])->update(['is_api_checked'=>'1','is_api_verified'=>'0','is_insufficiency'=>'1','verification_status'=>'failed','verified_at'=>date('Y-m-d H:i:s')]); 

                    $jaf_data=DB::table('jaf_form_data')->where(['id'=>$item_id])->first();
                    
                    $insuff_log_data=[
                      'parent_id' => $parent_id,
                      'business_id' => $business_id,
                      'coc_id' => $jaf_data->business_id,
                      'candidate_id' => $candidate_id,
                      'service_id'  => $service_id,
                      'jaf_form_data_id' => $jaf_data->id,
                      'item_number' => $jaf_data->check_item_number,
                      'activity_type'=> 'jaf-insuff',
                      'status'=>'failed',
                      'notes' => 'BGV Failed',
                      'created_by'   => Auth::user()->id,
                      'attachment'  => $zipname!=""?$zipname:NULL,
                      'attachment_file_platform' => $c_file_platform, 
                      'created_at'   => date('Y-m-d H:i:s'),
                    ];
              
                    DB::table('insufficiency_logs')->insert($insuff_log_data);

                    $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'raised'])->first();

                    if($ver_insuff!=NULL)
                    {
                        $ver_insuff_data=[
                          'notes' => 'BGV Failed',
                          'updated_by' => Auth::user()->id,
                          'updated_at' => date('Y-m-d H:i:s')
                        ];

                        DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'raised'])->update($ver_insuff_data);

                        $ver_id=$ver_insuff->id;
                    }
                    else
                    {
                      $ver_insuff_data=[
                        'parent_id' => $parent_id,
                        'business_id' => $business_id,
                        'coc_id' => $jaf_data->business_id,
                        'candidate_id' => $candidate_id,
                        'service_id'  => $service_id,
                        'jaf_form_data_id' => $jaf_data->id,
                        'item_number' => $jaf_data->check_item_number,
                        'activity_type'=> 'jaf-insuff',
                        'status'=>'raised',
                        'notes' => 'BGV Failed',
                        'created_by'   => Auth::user()->id,
                        'created_at'   => date('Y-m-d H:i:s'),
                      ];
                
                      $ver_id = DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);
                    }
                  }

                }

                  
                if($is_updated){  
                  //generate report here 
                  // $this->generateCandidateReport($candidate_id);
                  DB::commit();
                  return response()->json([
                  'fail' => false,
                  'status'=>'ok',
                  'message' => 'updated',                
                  ], 200);
                }
                else{
                    DB::commit();
                    return response()->json([
                      'fail' => true,
                    'status' =>'no',
                    ], 200);
                }
            }

            else if(stripos($service_d->type_name,'e_court'))
            {
              $jaf_e_court = DB::table('jaf_form_data')->select('id','business_id','form_data','service_id','check_item_number')->where(['id'=>$item_id])->first();

              // $passport_file_no = $request->input('id_number');
              $name="";
              $father_name = "";
              $address="";
              // $business_id = $jaf_bank->business_id; 
              $jaf_array = json_decode($jaf_e_court->form_data, true);
              // print_r($jaf_array);
                foreach($jaf_array as $input){
                    if(array_key_exists('Name',$input)){
                      $name = $input['Name'];
                    }

                    if(array_key_exists('Father Name',$input) ){
                      $father_name = $input['Father Name'];
                    }

                    if(array_key_exists('Address',$input) ){
                      $address = $input['Address'];
                    }
                }

                $s3_config=NULL;
                $c_file_platform = 'web';
                $attach_on_select=[];
                $allowedextension=['jpg','jpeg','png','svg','pdf'];
                $zipname="";
                if($request->hasFile('attachment') && $request->file('attachment') !="")
                {
                    $filePath = public_path('/uploads/clear-insuff/'); 
                    $files= $request->file('attachment');
                    foreach($files as $file)
                    {
                            $extension = $file->getClientOriginalExtension();

                            $check = in_array($extension,$allowedextension);
                            $file_size = number_format(File::size($file) / 1048576, 2); 

                            if(!$check)
                            {
                                return response()->json([
                                  'fail' => true,
                                  'errors' => ['attachment' => 'Only jpg,jpeg,png,pdf are allowed !'],
                                  'error_type'=>'validation'
                                ]);                        
                            }

                            if($file_size > 10)
                            {
                                return response()->json([
                                  'fail' => true,
                                  'error_type'=>'validation',
                                  'errors' => ['attachment' => 'The document size must be less than only 10mb Upload !'],
                                ]);                        
                            }
                    }

                    $zipname = 'clear-insuff-'.date('Ymdhis').'.zip';
                    $zip = new \ZipArchive();      
                    $zip->open(public_path().'/uploads/clear-insuff/'.$zipname, \ZipArchive::CREATE | \ZipArchive::OVERWRITE);

                    foreach($files as $file)
                    {
                        $file_data = $file->getClientOriginalName();
                        $tmp_data  = $candidate_id.'-'.date('mdYHis').'-'.$file_data; 
                        $data = $file->move($filePath, $tmp_data);       
                        $attach_on_select[]=$tmp_data;

                        $path=public_path()."/uploads/clear-insuff/".$tmp_data;
                        $zip->addFile($path, '/clear-insuff/'.basename($path));  
                    }

                    $zip->close();
                }

                $s3_config = S3ConfigTrait::s3Config();

                $path=public_path().'/uploads/clear-insuff/';

                if($s3_config!=NULL && $zipname!='')
                {
                  if(File::exists($path.$zipname))
                  {
                      $c_file_platform = 's3';

                      $s3filePath = 'uploads/clear-insuff/';
      
                      if(!Storage::disk('s3')->exists($s3filePath))
                      {
                          Storage::disk('s3')->makeDirectory($s3filePath,0777, true, true);
                      }
      
                      $file = Helper::createFileObject($path.$zipname);
      
                      Storage::disk('s3')->put($s3filePath.$zipname,file_get_contents($file));

                      File::delete($path.$zipname);
                  }

                }

                if(File::exists($path.'tmp-files/'))
                {
                    File::cleanDirectory($path.'tmp-files/');
                }

                //check from live API
                // Setup request to send json via POST
                $data = array(
                  'name' => $name,
                  'fatherName' => $father_name,
                  'address' => $address
              );
              $payload = json_encode($data);
              $apiURL = "https://api.springscan.springverify.com/criminal/searchDirect";

              $ch = curl_init();
              curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);                
              curl_setopt ($ch, CURLOPT_POST, 1);
              $token_key = 'tokenKey: '.env('SPRING_TOKEN_KEY');
              curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json' , $token_key)); // Inject the token into the header
              curl_setopt($ch, CURLOPT_URL, $apiURL);
              // Attach encoded JSON string to the POST fields
              curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);
              $resp = curl_exec ( $ch );
              $response_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
              curl_close ( $ch );
              $array_data =  json_decode($resp,true);

              if($response_code==200)
              {
                  $score_status = 0;
                  
                  //Check where any report score is greater than or equal to 90%
                  if(count($array_data['reports'])>0)
                  {
                      foreach($array_data['reports'] as $key => $value)
                      {
                          if($value['score'] >= 90)
                          {
                              $score_status = 1;
                          }
                      }
                  }

                  if($score_status==1)
                  {
                      $master_data_id = DB::table('e_court_check_masters')->insertGetId([
                          'name' => $name,
                          'father_name' =>$father_name,
                          'address' => $address,
                          'created_at' =>date('Y-m-d H:i:s')
                      ]);
      
                      if(count($array_data['reports'])>0)
                      {
                          foreach($array_data['reports'] as $key => $value)
                          {
                              if($value['score'] >= 90)
                              {
                                  DB::table('e_court_check_master_items')->insert([
                                      'e_court_master_id' => $master_data_id,
                                      'name_as_per_court_record' => $value['name'],
                                      'case_id' => $value['case_no'],
                                      'detail_link' => $value['link']
                                  ]);
                              }
                          }
                      }
      
                      $check_data_id = DB::table('e_court_checks')->insertGetId([
                          'parent_id' => $parent_id,
                          'business_id' => $business_id,
                          'service_id' => $service_id,
                          'source_type' =>  'API',
                          'name' => $name,
                          'father_name' =>$father_name,
                          'address' => $address,
                          'price' => $price,
                          'user_id' => $user_id,
                          'user_type' => 'customer',
                          'created_at' =>date('Y-m-d H:i:s')
                      ]);
                      
                      if(count($array_data['reports'])>0)
                      {
                          foreach($array_data['reports'] as $key => $value)
                          {
                              if($value['score'] >= 90)
                              {
                                  DB::table('e_court_check_items')->insert([
                                      'e_court_check_id' => $check_data_id,
                                      'parent_id' => $parent_id,
                                      'business_id' => $business_id,
                                      'service_id' => $service_id,
                                      'name_as_per_court_record' => $value['name'],
                                      'case_id' => $value['case_no'],
                                      'detail_link' => $value['link'],
                                      'user_id' => $user_id,
                                      'user_type' => 'customer',
                                      'created_at' =>date('Y-m-d H:i:s')
                                  ]);
                              }
                          }
                      }
      
                      $master_data = DB::table('e_court_check_masters')->where(['id'=>$master_data_id])->first();

                      DB::table('jaf_form_data')->where(['id'=>$item_id])
                      ->update(['is_api_checked'=>'1','is_api_verified'=>'1','verification_status'=>'success','verified_at'=>date('Y-m-d H:i:s'),'is_insufficiency'=>'0','clear_insuff_notes'=>$request->comment,'clear_insuff_attachment'=>$zipname!=NULL?$zipname:NULL,'clear_insuff_attachment_file_platform'=> $c_file_platform,'is_all_insuff_cleared' => 1,'insuff_cleared_by'=>Auth::user()->id,'updated_at'=>date('Y-m-d H:i:s')]); 
                      $is_updated=TRUE;

                      $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->first();

                      if($ver_insuff!=NULL)
                      {
                          $ver_insuff_data=[
                            'notes' => $request->comment,
                            'updated_by' => Auth::user()->id,
                            'attachment'  => $zipname!=""?$zipname:NULL, 
                            'attachment_file_platform' => $c_file_platform,
                            'updated_at' => date('Y-m-d H:i:s')
                          ];

                          DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->update($ver_insuff_data);

                          $ver_id=$ver_insuff->id;
                      }
                      else
                      {
                        $ver_insuff_data=[
                          'parent_id' => $parent_id,
                          'business_id' => $business_id,
                          'coc_id' => $jaf_e_court->business_id,
                          'candidate_id' => $candidate_id,
                          'service_id'  => $jaf_e_court->service_id,
                          'jaf_form_data_id' => $jaf_e_court->id,
                          'item_number' => $jaf_e_court->check_item_number,
                          'activity_type'=> 'jaf-insuff',
                          'status'=>'removed',
                          'notes' => $request->comment,
                          'attachment'=>$zipname!=NULL?$zipname:NULL,
                          'attachment_file_platform' => $c_file_platform,
                          'created_by'   => Auth::user()->id,
                          'created_at'   => date('Y-m-d H:i:s'),
                        ];
                  
                        $ver_id=DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);
    
                      }

                      $insuff_log_data=[
                        'parent_id' => $parent_id,
                        'business_id' => $business_id,
                        'coc_id' => $jaf_e_court->business_id,
                        'candidate_id' => $candidate_id,
                        'service_id'  => $service_id,
                        'jaf_form_data_id' => $jaf_e_court->id,
                        'item_number' => $jaf_e_court->check_item_number,
                        'activity_type'=> 'jaf-insuff',
                        'status'=>'removed',
                        'notes' => $request->comment,
                        'created_by'   => Auth::user()->id,
                        'attachment'  => $zipname!=""?$zipname:NULL, 
                        'attachment_file_platform' => $c_file_platform,
                        'created_at'   => date('Y-m-d H:i:s'),
                      ];
                
                      DB::table('insufficiency_logs')->insert($insuff_log_data);

                      if(count($attach_on_select)>0)
                      {
                          $file_data=DB::table('insufficiency_attachments')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->get();

                          if(count($file_data)>0)
                          {
                              $path=public_path().'/uploads/clear-insuff/';
                              foreach($file_data as $file)
                              {
                                  if(File::exists($path.$file->file_name))
                                  {
                                      File::delete($path.$file->file_name);
                                  }
                              }

                              DB::table('insufficiency_attachments')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->delete();

                          }

                          $i=0;
                          $file_platform = 'web';

                          if($s3_config!=NULL)
                          {
                            $s3filePath = 'uploads/clear-insuff/';

                            if(!Storage::disk('s3')->exists($s3filePath))
                            {
                                Storage::disk('s3')->makeDirectory($s3filePath,0777, true, true);
                            }

                            foreach($attach_on_select as $item)
                            {
                              $file_platform = 'web';

                              $path=public_path().'/uploads/clear-insuff/';

                              if(File::exists($path.$attach_on_select[$i]))
                              {
                                $file_platform = 's3';
                                $file = Helper::createFileObject($path.$attach_on_select[$i]);

                                Storage::disk('s3')->put($s3filePath.$attach_on_select[$i],file_get_contents($file));

                                File::delete($path.$attach_on_select[$i]);
                              }

                              $insuff_file=[
                                'parent_id' => $parent_id,
                                'business_id' => $business_id,
                                'coc_id' => $jaf_e_court->business_id,
                                'candidate_id' => $candidate_id,
                                'service_id'  => $service_id,
                                'jaf_form_data_id' => $jaf_e_court->id,
                                'item_number' => $jaf_e_court->check_item_number,
                                'status'=>'removed',
                                'file_name' => $attach_on_select[$i],
                                'file_platform' => $file_platform,
                                'created_by'   => Auth::user()->id,
                                'created_at'   => date('Y-m-d H:i:s'),
                                'updated_at' => date('Y-m-d H:i:s')
                              ];
                        
                              $file_id = DB::table('insufficiency_attachments')->insertGetId($insuff_file);
  
                              $i++;

                              if(File::exists($path.'tmp-files/'))
                              {
                                File::cleanDirectory($path.'tmp-files/');
                              }
                            }

                          }
                          else
                          {
                              foreach($attach_on_select as $item)
                              {
                                $insuff_file=[
                                  'parent_id' => $parent_id,
                                  'business_id' => $business_id,
                                  'coc_id' => $jaf_e_court->business_id,
                                  'candidate_id' => $candidate_id,
                                  'service_id'  => $service_id,
                                  'jaf_form_data_id' => $jaf_e_court->id,
                                  'item_number' => $jaf_e_court->check_item_number,
                                  'status'=>'removed',
                                  'file_name' => $attach_on_select[$i],
                                  'file_platform' => $file_platform,
                                  'created_by'   => Auth::user()->id,
                                  'created_at'   => date('Y-m-d H:i:s'),
                                  'updated_at' => date('Y-m-d H:i:s')
                                ];
                          
                                $file_id = DB::table('insufficiency_attachments')->insertGetId($insuff_file);
    
                                $i++;
                              }
                          }
                      }

                      $ver_insuff=DB::table('verification_insufficiency')->where(['id'=>$ver_id])->first();

                      $candidates=DB::table('users as u')
                          ->select('u.*','j.business_id as coc_id','j.id as jaf_id','v.created_at as insuff_clear_date','v.created_by as insuff_clear_by','v.item_number','v.notes','s.verification_type','s.name as service_name','v.business_id as cust_id','v.attachment','v.updated_at','v.updated_by')
                          ->join('jaf_form_data as j','u.id','=','j.candidate_id')
                          ->join('verification_insufficiency as v','v.jaf_form_data_id','=','j.id')
                          ->join('services as s','s.id','=','v.service_id')
                          ->where(['u.user_type'=>'candidate','j.id'=>$item_id,'v.status'=>'removed','v.id'=>$ver_insuff->id])
                          ->first();

                      if($candidates!=NULL)
                      {
                        // $client=DB::table('users')->where(['id'=>$candidates->coc_id])->first();
                        // $name = $client->name;
                        // $email = $client->email;
                        // $msg= "Insufficiency Cleared For Candidate";
                        // $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                        // if($candidates->attachment!=NULL)
                        // {
                        //   $url = url('/').'/uploads/clear-insuff/'.$zipname;

                        //   if($s3_config!=NULL)
                        //   {
                        //     $filePath = 'uploads/clear-insuff/';

                        //     $disk = Storage::disk('s3');

                        //     $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                        //         'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                        //         'Key'                        => $filePath.$zipname,
                        //         'ResponseContentDisposition' => 'attachment;'//for download
                        //     ]);

                        //     $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');

                        //     $url = (string)$req->getUri();
                        //   }

                        //   $data  = array('name'=>$name1,'email'=>$email1,'msg'=>$msg,'link'=>$url,'candidate'=>$candidates,'sender'=>$sender);
                        // }
                        // else
                        //   $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);
        
                        // Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email,$name) {
                        //   $message->to($email, $name)->subject
                        //       ('Clobminds Pvt Ltd - Insufficiency Notification');
                        //   $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                        // });

                        $kams = DB::table('key_account_managers')->where(['business_id'=>$candidates->business_id])->get();
                        if(count($kams)>0)
                        {
                          foreach($kams as $kam)
                          {
                              $user_data=DB::table('users')->where(['id'=>$kam->user_id])->first();

                              $name1 = $user_data->name;
                              $email1 = $user_data->email;
                              $msg= "Insufficiency Cleared For Candidate";
                              $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                              if($candidates->attachment!=NULL)
                              {
                                $url = url('/').'/uploads/clear-insuff/'.$zipname;

                                if($s3_config!=NULL)
                                {
                                  $filePath = 'uploads/clear-insuff/';

                                  $disk = Storage::disk('s3');

                                  $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                                      'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                                      'Key'                        => $filePath.$zipname,
                                      'ResponseContentDisposition' => 'attachment;'//for download
                                  ]);

                                  $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');

                                  $url = (string)$req->getUri();
                                }

                                $data  = array('name'=>$name1,'email'=>$email1,'msg'=>$msg,'link'=>$url,'candidate'=>$candidates,'sender'=>$sender);
                              }
                              else
                                $data  = array('name'=>$name1,'email'=>$email1,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);

                              Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email1,$name1) {
                                  $message->to($email1, $name1)->subject
                                      ('Clobminds Pvt Ltd - Insufficiency Notification');
                                  $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                              });

                          }
                        }

                        $ver_insuff_data=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$candidates->jaf_id,'status'=>'removed'])->first();

                        if($ver_insuff_data!=NULL)
                        {
                            $user_data=DB::table('users')->where(['id'=>$ver_insuff_data->created_by])->first();
                            $name = $user_data->name;
                            $email = $user_data->email;
                            $msg= "Insufficiency Cleared For Candidate";
                            $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();

                            if($candidates->attachment!=NULL)
                            {
                              $url = url('/').'/uploads/clear-insuff/'.$zipname;

                              if($s3_config!=NULL)
                              {
                                $filePath = 'uploads/clear-insuff/';

                                $disk = Storage::disk('s3');

                                $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                                    'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                                    'Key'                        => $filePath.$zipname,
                                    'ResponseContentDisposition' => 'attachment;'//for download
                                ]);

                                $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');

                                $url = (string)$req->getUri();
                              }

                              $data  = array('name'=>$name1,'email'=>$email1,'msg'=>$msg,'link'=>$url,'candidate'=>$candidates,'sender'=>$sender);
                            }
                            else
                              $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);
                            
                            Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email,$name) {
                              $message->to($email, $name)->subject
                                  ('Clobminds Pvt Ltd - Insufficiency Notification');
                              $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                            }); 
                        }

                      }

                  }
                  else
                  {
                       //update insuff

                       DB::table('jaf_form_data')->where(['id'=>$item_id])->update(['is_api_checked'=>'1','is_api_verified'=>'0','is_insufficiency'=>'1','verification_status'=>'failed','verified_at'=>date('Y-m-d H:i:s')]); 

                       $jaf_data=DB::table('jaf_form_data')->where(['id'=>$item_id])->first();
                       
                       $insuff_log_data=[
                         'parent_id' => $parent_id,
                         'business_id' => $business_id,
                         'coc_id' => $jaf_data->business_id,
                         'candidate_id' => $candidate_id,
                         'service_id'  => $service_id,
                         'jaf_form_data_id' => $jaf_data->id,
                         'item_number' => $jaf_data->check_item_number,
                         'activity_type'=> 'jaf-insuff',
                         'status'=>'failed',
                         'notes' => 'BGV Failed',
                         'created_by'   => Auth::user()->id,
                         'attachment'  => $zipname!=""?$zipname:NULL, 
                         'attachment_file_platform' => $c_file_platform,
                         'created_at'   => date('Y-m-d H:i:s'),
                       ];
                 
                       DB::table('insufficiency_logs')->insert($insuff_log_data);
 
                       $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'raised'])->first();
 
                        if($ver_insuff!=NULL)
                        {
                            $ver_insuff_data=[
                              'notes' => 'BGV Failed',
                              'updated_by' => Auth::user()->id,
                              'updated_at' => date('Y-m-d H:i:s')
                            ];

                            DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'raised'])->update($ver_insuff_data);

                            $ver_id=$ver_insuff->id;
                        }
                        else
                        {
                          $ver_insuff_data=[
                            'parent_id' => $parent_id,
                            'business_id' => $business_id,
                            'coc_id' => $jaf_data->business_id,
                            'candidate_id' => $candidate_id,
                            'service_id'  => $service_id,
                            'jaf_form_data_id' => $jaf_data->id,
                            'item_number' => $jaf_data->check_item_number,
                            'activity_type'=> 'jaf-insuff',
                            'status'=>'raised',
                            'notes' => 'BGV Failed',
                            'created_by'   => Auth::user()->id,
                            'created_at'   => date('Y-m-d H:i:s'),
                          ];
                    
                          $ver_id = DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);
                        }
                  }

              }else{

                  //update insuff

                  DB::table('jaf_form_data')->where(['id'=>$item_id])->update(['is_api_checked'=>'1','is_api_verified'=>'0','is_insufficiency'=>'1','verification_status'=>'failed','verified_at'=>date('Y-m-d H:i:s')]); 

                  $jaf_data=DB::table('jaf_form_data')->where(['id'=>$item_id])->first();
                  
                  $insuff_log_data=[
                    'parent_id' => $parent_id,
                    'business_id' => $business_id,
                    'coc_id' => $jaf_data->business_id,
                    'candidate_id' => $candidate_id,
                    'service_id'  => $service_id,
                    'jaf_form_data_id' => $jaf_data->id,
                    'item_number' => $jaf_data->check_item_number,
                    'activity_type'=> 'jaf-insuff',
                    'status'=>'failed',
                    'notes' => 'BGV Failed',
                    'created_by'   => Auth::user()->id,
                    'attachment'  => $zipname!=""?$zipname:NULL, 
                    'attachment_file_platform' => $c_file_platform,
                    'created_at'   => date('Y-m-d H:i:s'),
                  ];
            
                  DB::table('insufficiency_logs')->insert($insuff_log_data);

                  $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'raised'])->first();

                   if($ver_insuff!=NULL)
                   {
                       $ver_insuff_data=[
                         'notes' => 'BGV Failed',
                         'updated_by' => Auth::user()->id,
                         'updated_at' => date('Y-m-d H:i:s')
                       ];

                       DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'raised'])->update($ver_insuff_data);

                       $ver_id=$ver_insuff->id;
                   }
                   else
                   {
                     $ver_insuff_data=[
                       'parent_id' => $parent_id,
                       'business_id' => $business_id,
                       'coc_id' => $jaf_data->business_id,
                       'candidate_id' => $candidate_id,
                       'service_id'  => $service_id,
                       'jaf_form_data_id' => $jaf_data->id,
                       'item_number' => $jaf_data->check_item_number,
                       'activity_type'=> 'jaf-insuff',
                       'status'=>'raised',
                       'notes' => 'BGV Failed',
                       'created_by'   => Auth::user()->id,
                       'created_at'   => date('Y-m-d H:i:s'),
                     ];
               
                     $ver_id = DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);
                   }
              }

              if($is_updated){  
                //generate report here 
                // $this->generateCandidateReport($candidate_id);
                DB::commit();
                return response()->json([
                'fail' => false,
                'status'=>'ok',
                'message' => 'updated',                
                ], 200);
              }
              else{
                  DB::commit();
                  return response()->json([
                    'fail' => true,
                  'status' =>'no',
                  ], 200);
              }


            }

            
            // else if(stripos($service_d->type_name,'upi'))
            // {
            //   $jaf_cin = DB::table('jaf_form_data')->select('id','business_id','form_data','service_id','check_item_number')->where(['id'=>$item_id])->first();

            //   // $passport_file_no = $request->input('id_number');
            //   $upi_id="";
            //   // $business_id = $jaf_bank->business_id; 
            //   $jaf_array = json_decode($jaf_cin->form_data, true);
            //   // print_r($jaf_array);
            //     foreach($jaf_array as $input){

            //         if(array_key_exists('UPI ID',$input) ){
            //           $upi_id = $input['UPI ID'];
            //         }
            //     }

            //     $s3_config=NULL;
            //     $c_file_platform = 'web';
            //     $attach_on_select=[];
            //     $allowedextension=['jpg','jpeg','png','svg','pdf'];
            //     $zipname="";
            //     if($request->hasFile('attachment') && $request->file('attachment') !="")
            //     {
            //         $filePath = public_path('/uploads/clear-insuff/'); 
            //         $files= $request->file('attachment');
            //         foreach($files as $file)
            //         {
            //                 $extension = $file->getClientOriginalExtension();

            //                 $check = in_array($extension,$allowedextension);

            //                 if(!$check)
            //                 {
            //                     return response()->json([
            //                       'fail' => true,
            //                       'errors' => ['attachment' => 'Only jpg,jpeg,png,pdf are allowed !'],
            //                       'error_type'=>'validation'
            //                     ]);                        
            //                 }
            //         }

            //         $zipname = 'clear-insuff-'.date('Ymdhis').'.zip';
            //         $zip = new \ZipArchive();      
            //         $zip->open(public_path().'/uploads/clear-insuff/'.$zipname, \ZipArchive::CREATE | \ZipArchive::OVERWRITE);

            //         foreach($files as $file)
            //         {
            //             $file_data = $file->getClientOriginalName();
            //             $tmp_data  = $candidate_id.'-'.date('mdYHis').'-'.$file_data; 
            //             $data = $file->move($filePath, $tmp_data);       
            //             $attach_on_select[]=$tmp_data;

            //             $path=public_path()."/uploads/clear-insuff/".$tmp_data;
            //             $zip->addFile($path, '/clear-insuff/'.basename($path));  
            //         }

            //         $zip->close();
            //     }

            //     $s3_config = S3ConfigTrait::s3Config();

            //     $path=public_path().'/uploads/clear-insuff/';

            //     if($s3_config!=NULL && $zipname!='')
            //     {
            //       if(File::exists($path.$zipname))
            //       {
            //           $c_file_platform = 's3';

            //           $s3filePath = 'uploads/clear-insuff/';
      
            //           if(!Storage::disk('s3')->exists($s3filePath))
            //           {
            //               Storage::disk('s3')->makeDirectory($s3filePath,0777, true, true);
            //           }
      
            //           $file = Helper::createFileObject($path.$zipname);
      
            //           Storage::disk('s3')->put($s3filePath.$zipname,file_get_contents($file));

            //           File::delete($path.$zipname);
            //       }

            //     }

            //     //check from live API
            //     // Setup request to send json via GET
            //     // $data = array(
            //     //     'vpa' => $upi_id,
            //     // );
            //     // $payload = json_encode($data);
            //     $apiURL = "https://api.springscan.springverify.com/v2/user/person/validation/upiID/6156ac22899fc7001815b42a?vpa=".$upi_id;

            //     $ch = curl_init();
            //     curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);                
            //     // curl_setopt ($ch, CURLOPT_POST, 0);
            //     $token_key = 'tokenKey: '.env('SPRING_TOKEN_KEY');
            //     curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json' , $token_key)); // Inject the token into the header
            //     curl_setopt($ch, CURLOPT_URL, $apiURL);
            //     // Attach encoded JSON string to the POST fields
            //     // curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);
            //     $resp = curl_exec ( $ch );
            //     $response_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
            //     curl_close ( $ch );
            //     $array_data =  json_decode($resp,true);
            //     // var_dump($resp); die;
            //     // dd(env('SPRING_TOKEN_KEY'));

            //     if($response_code==200)
            //     {
            //         $data = [
            //             'upi_id'     =>$upi_id,
            //             'name'    =>$array_data['db_output']['name'],
            //             'created_at'        =>date('Y-m-d H:i:s')
            //             ];

            //         DB::table('upi_check_masters')->insert($data);
                    
            //         $master_data = DB::table('upi_check_masters')->select('*')->where(['upi_id'=>$upi_id])->first();

            //         $log_data = [
            //             'parent_id'         =>$parent_id,
            //             'business_id'       =>$business_id,
            //             'service_id'         => $service_id,
            //             'source_type'       =>'API',
            //             'upi_id'            =>$upi_id,
            //             'name'              =>$array_data['db_output']['name'],
            //             'is_verified'       =>'1',
            //             'price'             =>$price,
            //             'user_type'           =>'customer',
            //             'user_id'            =>$user_id,
            //             'created_at'        =>date('Y-m-d H:i:s')
            //             ];

            //         DB::table('upi_checks')->insert($log_data);
                    
            //         DB::table('jaf_form_data')->where(['id'=>$item_id])
            //           ->update(['is_api_checked'=>'1','is_api_verified'=>'1','verification_status'=>'success','verified_at'=>date('Y-m-d H:i:s'),'is_insufficiency'=>'0','clear_insuff_notes'=>$request->comment,'clear_insuff_attachment'=>$zipname!=NULL?$zipname:NULL,'clear_insuff_attachment_file_platform'=>$c_file_platform,'is_all_insuff_cleared' => 1,'insuff_cleared_by'=>Auth::user()->id,'updated_at'=>date('Y-m-d H:i:s')]); 
            //           $is_updated=TRUE;

            //           $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->first();

            //           if($ver_insuff!=NULL)
            //           {
            //               $ver_insuff_data=[
            //                 'notes' => $request->comment,
            //                 'updated_by' => Auth::user()->id,
            //                 'attachment'  => $zipname!=""?$zipname:NULL, 
            //                 'attachment_file_platform' => $c_file_platform,
            //                 'updated_at' => date('Y-m-d H:i:s')
            //               ];

            //               DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->update($ver_insuff_data);

            //               $ver_id=$ver_insuff->id;
            //           }
            //           else
            //           {
            //             $ver_insuff_data=[
            //               'parent_id' => $parent_id,
            //               'business_id' => $business_id,
            //               'coc_id' => $jaf_cin->business_id,
            //               'candidate_id' => $candidate_id,
            //               'service_id'  => $jaf_cin->service_id,
            //               'jaf_form_data_id' => $jaf_cin->id,
            //               'item_number' => $jaf_cin->check_item_number,
            //               'activity_type'=> 'jaf-insuff',
            //               'status'=>'removed',
            //               'notes' => $request->comment,
            //               'attachment'=>$zipname!=NULL?$zipname:NULL,
            //               'attachment_file_platform' => $c_file_platform,
            //               'created_by'   => Auth::user()->id,
            //               'created_at'   => date('Y-m-d H:i:s'),
            //             ];
                  
            //             $ver_id=DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);
    
            //           }

            //           $insuff_log_data=[
            //             'parent_id' => $parent_id,
            //             'business_id' => $business_id,
            //             'coc_id' => $jaf_cin->business_id,
            //             'candidate_id' => $candidate_id,
            //             'service_id'  => $service_id,
            //             'jaf_form_data_id' => $jaf_cin->id,
            //             'item_number' => $jaf_cin->check_item_number,
            //             'activity_type'=> 'jaf-insuff',
            //             'status'=>'removed',
            //             'notes' => $request->comment,
            //             'created_by'   => Auth::user()->id,
            //             'attachment'  => $zipname!=""?$zipname:NULL,
            //             'attachment_file_platform' => $c_file_platform, 
            //             'created_at'   => date('Y-m-d H:i:s'),
            //           ];
                
            //           DB::table('insufficiency_logs')->insert($insuff_log_data);

            //           if(count($attach_on_select)>0)
            //           {
            //               $file_data=DB::table('insufficiency_attachments')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->get();

            //               if(count($file_data)>0)
            //               {
            //                   $path=public_path().'/uploads/clear-insuff/';
            //                   foreach($file_data as $file)
            //                   {
            //                       if(File::exists($path.$file->file_name))
            //                       {
            //                           File::delete($path.$file->file_name);
            //                       }
            //                   }

            //                   DB::table('insufficiency_attachments')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->delete();

            //               }

            //               $i=0;
            //               $file_platform = 'web';

            //               if($s3_config!=NULL)
            //               {
            //                 $s3filePath = 'uploads/clear-insuff/';

            //                 if(!Storage::disk('s3')->exists($s3filePath))
            //                 {
            //                     Storage::disk('s3')->makeDirectory($s3filePath,0777, true, true);
            //                 }


            //                 foreach($attach_on_select as $item)
            //                 {

            //                   $file_platform = 'web';
            //                   $path=public_path().'/uploads/clear-insuff/';

            //                   if(File::exists($path.$attach_on_select[$i]))
            //                   {
            //                     $file_platform = 's3';
            //                     $file = Helper::createFileObject($path.$attach_on_select[$i]);

            //                     Storage::disk('s3')->put($s3filePath.$attach_on_select[$i],file_get_contents($file));

            //                     File::delete($path.$attach_on_select[$i]);
            //                   }

            //                   $insuff_file=[
            //                     'parent_id' => $parent_id,
            //                     'business_id' => $business_id,
            //                     'coc_id' => $jaf_cin->business_id,
            //                     'candidate_id' => $candidate_id,
            //                     'service_id'  => $service_id,
            //                     'jaf_form_data_id' => $jaf_cin->id,
            //                     'item_number' => $jaf_cin->check_item_number,
            //                     'status'=>'removed',
            //                     'file_name' => $attach_on_select[$i],
            //                     'file_platform' => $file_platform,
            //                     'created_by'   => Auth::user()->id,
            //                     'created_at'   => date('Y-m-d H:i:s'),
            //                     'updated_at' => date('Y-m-d H:i:s')
            //                   ];
                        
            //                   $file_id = DB::table('insufficiency_attachments')->insertGetId($insuff_file);
  
            //                   $i++;
            //                 }


            //               }
            //               else
            //               {
            //                   foreach($attach_on_select as $item)
            //                   {
            //                     $insuff_file=[
            //                       'parent_id' => $parent_id,
            //                       'business_id' => $business_id,
            //                       'coc_id' => $jaf_cin->business_id,
            //                       'candidate_id' => $candidate_id,
            //                       'service_id'  => $service_id,
            //                       'jaf_form_data_id' => $jaf_cin->id,
            //                       'item_number' => $jaf_cin->check_item_number,
            //                       'status'=>'removed',
            //                       'file_name' => $attach_on_select[$i],
            //                       'file_platform' => $file_platform,
            //                       'created_by'   => Auth::user()->id,
            //                       'created_at'   => date('Y-m-d H:i:s'),
            //                       'updated_at' => date('Y-m-d H:i:s')
            //                     ];
                          
            //                     $file_id = DB::table('insufficiency_attachments')->insertGetId($insuff_file);
    
            //                     $i++;
            //                   }
            //               }
                          
                          
            //           }

            //           $ver_insuff=DB::table('verification_insufficiency')->where(['id'=>$ver_id])->first();

            //           $candidates=DB::table('users as u')
            //               ->select('u.*','j.business_id as coc_id','j.id as jaf_id','v.created_at as insuff_clear_date','v.created_by as insuff_clear_by','v.item_number','v.notes','s.verification_type','s.name as service_name','v.business_id as cust_id','v.attachment','v.updated_at','v.updated_by')
            //               ->join('jaf_form_data as j','u.id','=','j.candidate_id')
            //               ->join('verification_insufficiency as v','v.jaf_form_data_id','=','j.id')
            //               ->join('services as s','s.id','=','v.service_id')
            //               ->where(['u.user_type'=>'candidate','j.id'=>$item_id,'v.status'=>'removed','v.id'=>$ver_insuff->id])
            //               ->first();

            //           if($candidates!=NULL)
            //           {
            //             // $client=DB::table('users')->where(['id'=>$candidates->coc_id])->first();
            //             // $name = $client->name;
            //             // $email = $client->email;
            //             // $msg= "Insufficiency Cleared For Candidate";
            //             // $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
            //             // if($candidates->attachment!=NULL)
            //             // {
            //             //   $url = url('/').'/uploads/clear-insuff/'.$zipname;
  
            //             //   if($s3_config!=NULL)
            //             //   {
            //             //     $filePath = 'uploads/clear-insuff/';
  
            //             //     $disk = Storage::disk('s3');
  
            //             //     $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
            //             //         'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
            //             //         'Key'                        => $filePath.$zipname,
            //             //         'ResponseContentDisposition' => 'attachment;'//for download
            //             //     ]);
  
            //             //     $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');
  
            //             //     $url = (string)$req->getUri();
            //             //   }
  
            //             //   $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>$url,'candidate'=>$candidates,'sender'=>$sender);
            //             // }
            //             // else
            //             //   $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);
        
            //             // Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email,$name) {
            //             //   $message->to($email, $name)->subject
            //             //       ('Clobminds Pvt Ltd - Insufficiency Notification');
            //             //   $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
            //             // });

            //             $kams = DB::table('key_account_managers')->where(['business_id'=>$candidates->business_id])->get();
            //             if(count($kams)>0)
            //             {
            //               foreach($kams as $kam)
            //               {
            //                   $user_data=DB::table('users')->where(['id'=>$kam->user_id])->first();

            //                   $name1 = $user_data->name;
            //                   $email1 = $user_data->email;
            //                   $msg= "Insufficiency Cleared For Candidate";
            //                   $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();

            //                   if($candidates->attachment!=NULL)
            //                   {
            //                     $url = url('/').'/uploads/clear-insuff/'.$zipname;
        
            //                     if($s3_config!=NULL)
            //                     {
            //                       $filePath = 'uploads/clear-insuff/';
        
            //                       $disk = Storage::disk('s3');
        
            //                       $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
            //                           'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
            //                           'Key'                        => $filePath.$zipname,
            //                           'ResponseContentDisposition' => 'attachment;'//for download
            //                       ]);
        
            //                       $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');
        
            //                       $url = (string)$req->getUri();
            //                     }
        
            //                     $data  = array('name'=>$name1,'email'=>$email1,'msg'=>$msg,'link'=>$url,'candidate'=>$candidates,'sender'=>$sender);
            //                   }
            //                   else
            //                     $data  = array('name'=>$name1,'email'=>$email1,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);

            //                   Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email1,$name1) {
            //                       $message->to($email1, $name1)->subject
            //                           ('Clobminds Pvt Ltd - Insufficiency Notification');
            //                       $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
            //                   });

            //               }
            //             }

            //             $ver_insuff_data=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$candidates->jaf_id,'status'=>'removed'])->first();

            //             if($ver_insuff_data!=NULL)
            //             {
            //                 $user_data=DB::table('users')->where(['id'=>$ver_insuff_data->created_by])->first();
            //                 $name = $user_data->name;
            //                 $email = $user_data->email;
            //                 $msg= "Insufficiency Cleared For Candidate";
            //                 $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();

            //                 if($candidates->attachment!=NULL)
            //                 {
            //                   $url = url('/').'/uploads/clear-insuff/'.$zipname;
      
            //                   if($s3_config!=NULL)
            //                   {
            //                     $filePath = 'uploads/clear-insuff/';
      
            //                     $disk = Storage::disk('s3');
      
            //                     $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
            //                         'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
            //                         'Key'                        => $filePath.$zipname,
            //                         'ResponseContentDisposition' => 'attachment;'//for download
            //                     ]);
      
            //                     $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');
      
            //                     $url = (string)$req->getUri();
            //                   }
      
            //                   $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>$url,'candidate'=>$candidates,'sender'=>$sender);
            //                 }
            //                 else
            //                   $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);

                            
            //                 Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email,$name) {
            //                   $message->to($email, $name)->subject
            //                       ('Clobminds Pvt Ltd - Insufficiency Notification');
            //                   $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
            //                 }); 
            //             }

            //           }
                    

            //     }else{

            //         //update insuff

            //       DB::table('jaf_form_data')->where(['id'=>$item_id])->update(['is_api_checked'=>'1','is_api_verified'=>'0','is_insufficiency'=>'1','verification_status'=>'failed','verified_at'=>date('Y-m-d H:i:s')]); 

            //       $jaf_data=DB::table('jaf_form_data')->where(['id'=>$item_id])->first();
                  
            //       $insuff_log_data=[
            //         'parent_id' => $parent_id,
            //         'business_id' => $business_id,
            //         'coc_id' => $jaf_data->business_id,
            //         'candidate_id' => $candidate_id,
            //         'service_id'  => $service_id,
            //         'jaf_form_data_id' => $jaf_data->id,
            //         'item_number' => $jaf_data->check_item_number,
            //         'activity_type'=> 'jaf-insuff',
            //         'status'=>'failed',
            //         'notes' => 'BGV Failed',
            //         'created_by'   => Auth::user()->id,
            //         'attachment'  => $zipname!=""?$zipname:NULL,
            //         'attachment_file_platform' => $c_file_platform, 
            //         'created_at'   => date('Y-m-d H:i:s'),
            //       ];
            
            //       DB::table('insufficiency_logs')->insert($insuff_log_data);

            //       $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'raised'])->first();

            //        if($ver_insuff!=NULL)
            //        {
            //            $ver_insuff_data=[
            //              'notes' => 'BGV Failed',
            //              'updated_by' => Auth::user()->id,
            //              'updated_at' => date('Y-m-d H:i:s')
            //            ];

            //            DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'raised'])->update($ver_insuff_data);

            //            $ver_id=$ver_insuff->id;
            //        }
            //        else
            //        {
            //          $ver_insuff_data=[
            //            'parent_id' => $parent_id,
            //            'business_id' => $business_id,
            //            'coc_id' => $jaf_data->business_id,
            //            'candidate_id' => $candidate_id,
            //            'service_id'  => $service_id,
            //            'jaf_form_data_id' => $jaf_data->id,
            //            'item_number' => $jaf_data->check_item_number,
            //            'activity_type'=> 'jaf-insuff',
            //            'status'=>'raised',
            //            'notes' => 'BGV Failed',
            //            'created_by'   => Auth::user()->id,
            //            'created_at'   => date('Y-m-d H:i:s'),
            //          ];
               
            //          $ver_id = DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);
            //        }
            //     }

            //     if($is_updated){  
            //       //generate report here 
            //       // $this->generateCandidateReport($candidate_id);
            //       DB::commit();
            //       return response()->json([
            //       'fail' => false,
            //       'status'=>'ok',
            //       'message' => 'updated',                
            //       ], 200);
            //     }
            //     else{
            //         DB::commit();
            //         return response()->json([
            //           'fail' => true,
            //         'status' =>'no',
            //         ], 200);
            //     }
            // }
            else{
              
              //if manual checks
              // update the status
              $s3_config=NULL;
              $c_file_platform = 'web';
              $attach_on_select=[];
              $allowedextension=['jpg','jpeg','png','svg','pdf'];
              $zipname="";
              if($request->hasFile('attachment') && $request->file('attachment') !="")
              {
                  $filePath = public_path('/uploads/clear-insuff/'); 
                  $files= $request->file('attachment');
                  foreach($files as $file)
                  {
                          $extension = $file->getClientOriginalExtension();

                          $check = in_array($extension,$allowedextension);
                          $file_size = number_format(File::size($file) / 1048576, 2);
 
                          if(!$check)
                          {
                              return response()->json([
                                'fail' => true,
                                'errors' => ['attachment' => 'Only jpg,jpeg,png,pdf are allowed !'],
                                'error_type'=>'validation'
                              ]);                        
                          }

                          if($file_size > 10)
                          {
                              return response()->json([
                                'fail' => true,
                                'error_type'=>'validation',
                                'errors' => ['attachment' => 'The document size must be less than only 10mb Upload !'],
                              ]);                        
                          }
                  }

                  $zipname = 'clear-insuff-'.date('Ymdhis').'.zip';
                  $zip = new \ZipArchive();      
                  $zip->open(public_path().'/uploads/clear-insuff/'.$zipname, \ZipArchive::CREATE | \ZipArchive::OVERWRITE);

                  foreach($files as $file)
                  {
                      $file_data = $file->getClientOriginalName();
                      $tmp_data  = $candidate_id.'-'.date('mdYHis').'-'.$file_data; 
                      $data = $file->move($filePath, $tmp_data);       
                      $attach_on_select[]=$tmp_data;

                      $path=public_path()."/uploads/clear-insuff/".$tmp_data;
                      $zip->addFile($path, '/clear-insuff/'.basename($path));  
                  }

                  $zip->close();
              }

              $s3_config = S3ConfigTrait::s3Config();

              $path=public_path().'/uploads/clear-insuff/';

              if($s3_config!=NULL && $zipname!='')
              {
                if(File::exists($path.$zipname))
                {
                    $c_file_platform = 's3';

                    $s3filePath = 'uploads/clear-insuff/';
    
                    if(!Storage::disk('s3')->exists($s3filePath))
                    {
                        Storage::disk('s3')->makeDirectory($s3filePath,0777, true, true);
                    }
    
                    $file = Helper::createFileObject($path.$zipname);
    
                    Storage::disk('s3')->put($s3filePath.$zipname,file_get_contents($file));

                    File::delete($path.$zipname);
                }

              }

              if(File::exists($path.'tmp-files/'))
              {
                  File::cleanDirectory($path.'tmp-files/');
              }

              DB::table('jaf_form_data')->where(['id'=>$item_id])
                                      ->update(['is_insufficiency'=>'0','clear_insuff_notes'=>$request->comment,'clear_insuff_attachment' => $zipname!=NULL?$zipname:NULL,'clear_insuff_attachment_file_platform'=>$c_file_platform,'verification_status'=>'success','verified_at'=>date('Y-m-d H:i:s'),'updated_at'=>date('Y-m-d H:i:s')]); 
              $is_updated=TRUE;

              $jaf_data=DB::table('jaf_form_data')->where(['id'=>$item_id])->first();

                $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->first();
                if($ver_insuff!=NULL)
                {
                    $ver_insuff_data=[
                      'notes' => $request->comment,
                      'updated_by' => Auth::user()->id,
                      'attachment'  => $zipname!=""?$zipname:NULL, 
                      'attachment_file_platform' => $c_file_platform,
                      'updated_at' => date('Y-m-d H:i:s')
                    ];

                    DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->update($ver_insuff_data);

                    $ver_id=$ver_insuff->id;
                }
                else
                {
                    $ver_insuff_data=[
                      'parent_id' => $parent_id,
                      'business_id' => $business_id,
                      'coc_id' => $jaf_data->business_id,
                      'candidate_id' => $candidate_id,
                      'service_id'  => $jaf_data->service_id,
                      'jaf_form_data_id' => $jaf_data->id,
                      'item_number' => $jaf_data->check_item_number,
                      'activity_type'=> 'jaf-insuff',
                      'status'=>'removed',
                      'notes' => $request->comment,
                      'attachment' => $zipname!=NULL?$zipname:NULL,
                      'attachment_file_platform' => $c_file_platform,
                      'created_by'   => Auth::user()->id,
                      'created_at'   => date('Y-m-d H:i:s'),
                  ];
            
                  $ver_id=DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);
                }

                $insuff_log_data=[
                  'parent_id' => $parent_id,
                  'business_id' => $business_id,
                  'coc_id' => $jaf_data->business_id,
                  'candidate_id' => $candidate_id,
                  'service_id'  => $service_id,
                  'jaf_form_data_id' => $jaf_data->id,
                  'item_number' => $jaf_data->check_item_number,
                  'activity_type'=> 'jaf-insuff',
                  'status'=>'removed',
                  'notes' => $request->comment,
                  'created_by'   => Auth::user()->id,
                  'attachment'  => $zipname!=""?$zipname:NULL, 
                  'attachment_file_platform' => $c_file_platform,
                  'created_at'   => date('Y-m-d H:i:s'),
                ];
          
                DB::table('insufficiency_logs')->insert($insuff_log_data);

                if(count($attach_on_select)>0)
                {
                    $file_data=DB::table('insufficiency_attachments')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->get();

                    if(count($file_data)>0)
                    {
                        $path=public_path().'/uploads/clear-insuff/';
                        foreach($file_data as $file)
                        {
                            if(File::exists($path.$file->file_name))
                            {
                                File::delete($path.$file->file_name);
                            }
                        }

                        DB::table('insufficiency_attachments')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'removed'])->delete();

                    }

                    $i=0;
                    $file_platform = 'web';

                    if($s3_config!=NULL)
                    {
                      
                      $s3filePath = 'uploads/clear-insuff/';

                      if(!Storage::disk('s3')->exists($s3filePath))
                      {
                          Storage::disk('s3')->makeDirectory($s3filePath,0777, true, true);
                      }

                      foreach($attach_on_select as $item)
                      {

                        $file_platform = 'web';
                        $path=public_path().'/uploads/clear-insuff/';

                        if(File::exists($path.$attach_on_select[$i]))
                        {
                          $file_platform = 's3';
                          $file = Helper::createFileObject($path.$attach_on_select[$i]);

                          Storage::disk('s3')->put($s3filePath.$attach_on_select[$i],file_get_contents($file));

                          File::delete($path.$attach_on_select[$i]);
                        }

                        $insuff_file=[
                          'parent_id' => $parent_id,
                          'business_id' => $business_id,
                          'coc_id' => $jaf_data->business_id,
                          'candidate_id' => $candidate_id,
                          'service_id'  => $service_id,
                          'jaf_form_data_id' => $jaf_data->id,
                          'item_number' => $jaf_data->check_item_number,
                          'status'=>'removed',
                          'file_name' => $attach_on_select[$i],
                          'file_platform' => $file_platform,
                          'created_by'   => Auth::user()->id,
                          'created_at'   => date('Y-m-d H:i:s'),
                          'updated_at' => date('Y-m-d H:i:s')
                        ];
                  
                        $file_id = DB::table('insufficiency_attachments')->insertGetId($insuff_file);
  
                        $i++;

                        if(File::exists($path.'tmp-files/'))
                        {
                            File::cleanDirectory($path.'tmp-files/');
                        }
                      }

                    } 
                    else
                    {
                        foreach($attach_on_select as $item)
                        {

                          $insuff_file=[
                            'parent_id' => $parent_id,
                            'business_id' => $business_id,
                            'coc_id' => $jaf_data->business_id,
                            'candidate_id' => $candidate_id,
                            'service_id'  => $service_id,
                            'jaf_form_data_id' => $jaf_data->id,
                            'item_number' => $jaf_data->check_item_number,
                            'status'=>'removed',
                            'file_name' => $attach_on_select[$i],
                            'file_platform' => $file_platform,
                            'created_by'   => Auth::user()->id,
                            'created_at'   => date('Y-m-d H:i:s'),
                            'updated_at' => date('Y-m-d H:i:s')
                          ];
                    
                          $file_id = DB::table('insufficiency_attachments')->insertGetId($insuff_file);
    
                          $i++;
                        }
                    }
                }

                $ver_insuff=DB::table('verification_insufficiency')->where(['id'=>$ver_id])->first();

                $candidates=DB::table('users as u')
                    ->select('u.*','j.business_id as coc_id','j.id as jaf_id','v.created_at as insuff_clear_date','v.created_by as insuff_clear_by','v.item_number','v.notes','s.verification_type','s.name as service_name','v.business_id as cust_id','v.attachment','v.updated_at','v.updated_by')
                    ->join('jaf_form_data as j','u.id','=','j.candidate_id')
                    ->join('verification_insufficiency as v','v.jaf_form_data_id','=','j.id')
                    ->join('services as s','s.id','=','v.service_id')
                    ->where(['u.user_type'=>'candidate','j.id'=>$item_id,'v.status'=>'removed','v.id'=>$ver_insuff->id])
                    ->first();

                  if($candidates!=NULL)
                  {
                    // $client=DB::table('users')->where(['id'=>$candidates->coc_id])->first();
                    // $name = $client->name;
                    // $email = $client->email;
                    // $msg= "Insufficiency Cleared For Candidate";
                    // $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                    // if($candidates->attachment!=NULL)
                    // {
                    //   $url = url('/').'/uploads/clear-insuff/'.$zipname;

                    //   if($s3_config!=NULL)
                    //   {
                    //     $filePath = 'uploads/clear-insuff/';

                    //     $disk = Storage::disk('s3');

                    //     $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                    //         'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                    //         'Key'                        => $filePath.$zipname,
                    //         'ResponseContentDisposition' => 'attachment;'//for download
                    //     ]);

                    //     $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');

                    //     $url = (string)$req->getUri();
                    //   }

                    //   $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>$url,'candidate'=>$candidates,'sender'=>$sender);
                    // }
                    // else
                    //   $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);
    
                    // Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email,$name) {
                    //   $message->to($email, $name)->subject
                    //       ('Clobminds Pvt Ltd - Insufficiency Notification');
                    //   $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                    // });

                    $kams = DB::table('key_account_managers')->where(['business_id'=>$candidates->business_id])->get();
                    if(count($kams)>0)
                    {
                      foreach($kams as $kam)
                      {
                          $user_data=DB::table('users')->where(['id'=>$kam->user_id])->first();
                          // dd($user_data);
                          $name1 = $user_data->name ?? "";
                          $email1 = $user_data->email ?? "";
                          // dd($email1);
                          $msg= "Insufficiency Cleared For Candidate";
                          $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                          if($candidates->attachment!=NULL)
                          {
                            $url = url('/').'/uploads/clear-insuff/'.$zipname;

                            if($s3_config!=NULL)
                            {
                              $filePath = 'uploads/clear-insuff/';

                              $disk = Storage::disk('s3');

                              $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                                  'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                                  'Key'                        => $filePath.$zipname,
                                  'ResponseContentDisposition' => 'attachment;'//for download
                              ]);

                              $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');

                              $url = (string)$req->getUri();
                            }

                            $data  = array('name'=>$name1,'email'=>$email1,'msg'=>$msg,'link'=>$url,'candidate'=>$candidates,'sender'=>$sender);
                          }
                          else
                            $data  = array('name'=>$name1,'email'=>$email1,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);

                          Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email1,$name1) {
                              $message->to($email1, $name1)->subject
                                  ('Clobminds Pvt Ltd- Insufficiency Notification');
                              $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                          });

                      }
                    }

                    $ver_insuff_data=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$candidates->jaf_id,'status'=>'removed'])->first();

                    if($ver_insuff_data!=NULL)
                    {
                        $user_data=DB::table('users')->where(['id'=>$ver_insuff_data->created_by])->first();
                        $name = $user_data->name;
                        $email = $user_data->email;
                        $msg= "Insufficiency Cleared For Candidate";
                        $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                        if($candidates->attachment!=NULL)
                        {
                          $url = url('/').'/uploads/clear-insuff/'.$zipname;

                          if($s3_config!=NULL)
                          {
                            $filePath = 'uploads/clear-insuff/';

                            $disk = Storage::disk('s3');

                            $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                                'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                                'Key'                        => $filePath.$zipname,
                                'ResponseContentDisposition' => 'attachment;'//for download
                            ]);

                            $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');

                            $url = (string)$req->getUri();
                          }

                          $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>$url,'candidate'=>$candidates,'sender'=>$sender);
                        }
                        else
                          $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);
                          
                        Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email,$name) {
                          $message->to($email, $name)->subject
                              ('Clobminds Pvt Ltd- Insufficiency Notification');
                          $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                        }); 
                    }

                  }

                if($is_updated){  
                  //generate report here 
                  // $this->generateCandidateReport($candidate_id);
                  DB::commit();
                  return response()->json([
                  'fail' => false,
                  'status'=>'ok',
                  'message' => 'updated',                
                  ], 200);
                }
                else{
                    DB::commit();
                    return response()->json([
                    'fail' => true,
                    'status' =>'no',
                    ], 200);
                }

            }
            
          }
          else{   
              return response()->json([
                  'fail'  => true,
                  'status' =>'error',
                ], 200);
          }
        }
        catch (\Exception $e) {
            DB::rollback();
            // something went wrong
            return $e;
        }    

    }


    public function autoCheckAttachment($type,$data,$jaf_id)
    {
        $file_platform = 'web';

        $is_temp   = 0;

        $jaf_data = DB::table('jaf_form_data as jf')
                    ->select('jf.id','u.parent_id','jf.business_id','jf.candidate_id','jf.form_data','jf.sla_id','jf.service_id','jf.check_item_number','jf.verification_status')
                    ->leftJoin('users as u','jf.candidate_id','=','u.id')
                    ->where('jf.id',$jaf_id)
                    ->first();
        $services_id=DB::table('service_attachment_types')->where(['service_id'=>$jaf_data->service_id,'attachment_name'=>'Other'])->first();
          $folderPath = public_path('uploads/auto-check');

          if(!File::exists($folderPath))
          {
              File::makeDirectory($folderPath, $mode = 0777, true, true);
          }

          if(File::exists($folderPath))
          {
            File::cleanDirectory($folderPath);
          }

          if($type=='cibil')
          {
              $master_data = $data;

              $file_name='cibil-verification-'.date('Ymdhis').'.pdf';

              $file_name = preg_replace('/\s+/','',$file_name);

              $pdf = PDF::loadView('admin.verifications.pdf.cibil', compact('master_data'))->save($folderPath.$file_name);

              $report_dir  = public_path('/uploads/report-files/');

              $jaf_dir  = public_path('/uploads/jaf-files/');

              $fileName = 'cibil-verification-'.date('Ymdhis');

              $pdf_file_name = $fileName.'-'.time();

              $pdf_file_name = preg_replace('/\s+/','',$pdf_file_name);
          
              $imagick = new Imagick();

              $imagick->setResolution(300, 300);

              $imagick->readImage($folderPath.$file_name);

              $imagick->setImageFormat("png");

              $pages = $imagick->getNumberImages();

              // JAF Attachment

              $imagick->writeImages($jaf_dir.$pdf_file_name.'.png', false);

              // Report Attachment

              $imagick->writeImages($report_dir.$pdf_file_name.'.png', false);

              if($pages)
              {
                  $s3_config = S3ConfigTrait::s3Config();

                  if($pages==1)
                  {
                      if($s3_config!=NULL)
                      {
                          $file_platform = 's3';

                          $file_name = $pdf_file_name.'.png';

                          // JAF Attachment
                          
                          $jaf_path = 'uploads/jaf-files/';

                          if(!Storage::disk('s3')->exists($jaf_path))
                          {
                              Storage::disk('s3')->makeDirectory($jaf_path,0777, true, true);
                          }
    
                          $file = Helper::createFileObject($jaf_path.$file_name);
    
                          Storage::disk('s3')->put($jaf_path.$file_name, file_get_contents($file));

                          // Report Attachment

                          $report_path = 'uploads/report-files/';

                          if(!Storage::disk('s3')->exists($report_path))
                          {
                              Storage::disk('s3')->makeDirectory($report_path,0777, true, true);
                          }

                          $file = Helper::createFileObject($report_path.$file_name);

                          Storage::disk('s3')->put($report_path.$file_name, file_get_contents($file)); 
                      }

                      $jaf_attach_id = DB::table('jaf_item_attachments')
                              ->insertGetId([
                                  'jaf_id'        => $jaf_data->id, 
                                  'business_id'   => Auth::user()->business_id,
                                  'candidate_id' => $jaf_data->candidate_id,
                                  'file_name'        => $pdf_file_name.'.png',
                                  'attachment_type'  => 'main',
                                  'service_attachment_id'=>$services_id->id,
                                  'service_attachment_name'=>'CIBIL Report',
                                  'file_platform'     => $file_platform,
                                  'file_type' => 'auto-verify',
                                  'created_by'       => Auth::user()->id,
                                  'created_at'       => date('Y-m-d H:i:s'),
                                  'is_temp'          => $is_temp,
                              ]);

                      $report_data = DB::table('reports')->where('candidate_id',$jaf_data->candidate_id)->first();

                      if($report_data==null)
                      {
                          $d = 
                          [
                            'parent_id'     =>$jaf_data->parent_id,
                            'business_id'   =>$jaf_data->business_id,
                            'candidate_id'  =>$jaf_data->candidate_id,
                            'sla_id'        =>$jaf_data->sla_id,       
                            'created_at'    =>date('Y-m-d H:i:s')
                          ];
                          
                          $report_id = DB::table('reports')->insertGetId($d);
                      }
                      else
                      {
                          $report_id = $report_data->id;
                      }

                      $report_item = DB::table('report_items')->where('jaf_id',$jaf_id)->first();

                      if($report_item==null)
                      {
                          if ($jaf_data->verification_status == 'success') {
                              $d = 
                              [
                                'report_id'     =>$report_id,
                                'service_id'    =>$jaf_data->service_id,
                                'service_item_number'=>$jaf_data->check_item_number,
                                'candidate_id'  =>$jaf_data->candidate_id,      
                                'jaf_data'      =>$jaf_data->form_data,
                                'jaf_id'        =>$jaf_data->id,
                                // 'reference_type' =>  $reference_type,
                                'created_at'    =>date('Y-m-d H:i:s')
                              ];
                          } 
                          else {
                              $d = 
                              [
                                'report_id'     =>$report_id,
                                'service_id'    =>$jaf_data->service_id,
                                'service_item_number'=>$jaf_data->check_item_number,
                                'candidate_id'  =>$jaf_data->candidate_id,      
                                'jaf_data'      =>$jaf_data->form_data,
                                'jaf_id'        =>$jaf_data->id,
                                'is_report_output' => '0',
                                // 'reference_type' =>  $reference_type,
                                'created_at'    =>date('Y-m-d H:i:s')
                              ]; 
                          }

                          $report_item_id = DB::table('report_items')->insertGetId($d);
                      }
                      else
                      {
                        $report_item_id = $report_item->id;
                      }

                      $rowID = DB::table('report_item_attachments')            
                      ->insertGetId([
                          'report_id'        => $report_id, 
                          'report_item_id'   => $report_item_id,  
                          'jaf_item_attachment_id'=>$jaf_attach_id,                    
                          'file_name'        => $pdf_file_name.'.png',
                          'attachment_type'  => 'main',
                          'service_attachment_id'=>$services_id->id,
                          'service_attachment_name'=>'CIBIL Report',
                          'file_platform'    => $file_platform,
                          'file_type' => 'auto-verify',
                          'created_by'       => Auth::user()->id,
                          'created_at'       => date('Y-m-d H:i:s'),
                          'is_temp'          => $is_temp,
                      ]);

                      
                      if(stripos($file_platform,'s3')!==false)
                      {

                        $filePath = 'uploads/jaf-files/';

                        if(File::exists(public_path('/uploads/jaf-files/'.$pdf_file_name.'.png')))
                        {
                          File::delete(public_path('/uploads/jaf-files/'.$pdf_file_name.'.png'));
                        }


                        $filePath = 'uploads/report-files/';

                        if(File::exists(public_path('/uploads/report-files/'.$pdf_file_name.'.png')))
                        {
                          File::delete(public_path('/uploads/report-files/'.$pdf_file_name.'.png'));
                        }
                      }
                  }
                  else
                  {
                      $report_data = DB::table('reports')->where('candidate_id',$jaf_data->candidate_id)->first();

                      if($report_data==null)
                      {
                          $d = 
                          [
                            'parent_id'     =>$jaf_data->parent_id,
                            'business_id'   =>$jaf_data->business_id,
                            'candidate_id'  =>$jaf_data->candidate_id,
                            'sla_id'        =>$jaf_data->sla_id,       
                            'created_at'    =>date('Y-m-d H:i:s')
                          ];
                          
                          $report_id = DB::table('reports')->insertGetId($d);
                      }
                      else
                      {
                          $report_id = $report_data->id;
                      }

                      $report_item = DB::table('report_items')->where('jaf_id',$jaf_id)->first();

                      if($report_item==null)
                      {
                          if ($jaf_data->verification_status == 'success') {
                              $d = 
                              [
                                'report_id'     =>$report_id,
                                'service_id'    =>$jaf_data->service_id,
                                'service_item_number'=>$jaf_data->check_item_number,
                                'candidate_id'  =>$jaf_data->candidate_id,      
                                'jaf_data'      =>$jaf_data->form_data,
                                'jaf_id'        =>$jaf_data->id,
                                // 'reference_type' =>  $reference_type,
                                'created_at'    =>date('Y-m-d H:i:s')
                              ];
                          } 
                          else {
                              $d = 
                              [
                                'report_id'     =>$report_id,
                                'service_id'    =>$jaf_data->service_id,
                                'service_item_number'=>$jaf_data->check_item_number,
                                'candidate_id'  =>$jaf_data->candidate_id,      
                                'jaf_data'      =>$jaf_data->form_data,
                                'jaf_id'        =>$jaf_data->id,
                                'is_report_output' => '0',
                                // 'reference_type' =>  $reference_type,
                                'created_at'    =>date('Y-m-d H:i:s')
                              ]; 
                          }

                          $report_item_id = DB::table('report_items')->insertGetId($d);
                      }
                      else
                      {
                        $report_item_id = $report_item->id;
                      }

                      for($i=0;$i<$pages;$i++)
                      {
                          $file_platform = 'web';

                          if($s3_config!=NULL)
                          {
                              $file_platform = 's3';

                              $file_name = $pdf_file_name.'-'.$i.'.png';

                              // JAF Attachment
                          
                              $jaf_path = 'uploads/jaf-files/';

                              if(!Storage::disk('s3')->exists($jaf_path))
                              {
                                  Storage::disk('s3')->makeDirectory($jaf_path,0777, true, true);
                              }
        
                              $file = Helper::createFileObject($jaf_path.$file_name);
        
                              Storage::disk('s3')->put($jaf_path.$file_name, file_get_contents($file));

                              // Report Attachment

                              $report_path = 'uploads/report-files/';

                              if(!Storage::disk('s3')->exists($report_path))
                              {
                                  Storage::disk('s3')->makeDirectory($report_path,0777, true, true);
                              }

                              $file = Helper::createFileObject($report_path.$file_name);

                              Storage::disk('s3')->put($report_path.$file_name, file_get_contents($file));

                          }

                          $jaf_attach_id = DB::table('jaf_item_attachments')
                              ->insertGetId([
                                  'jaf_id'        => $jaf_data->id, 
                                  'business_id'   => Auth::user()->business_id,
                                  'candidate_id' => $jaf_data->candidate_id,
                                  'file_name'        => $pdf_file_name.'-'.$i.'.png',
                                  'attachment_type'  => 'main',
                                  'service_attachment_id'=>$services_id->id,
                                  'service_attachment_name'=>'Cibil Report',
                                  'file_platform'     => $file_platform,
                                  'file_type' => 'auto-verify',
                                  'created_by'       => Auth::user()->id,
                                  'created_at'       => date('Y-m-d H:i:s'),
                                  'is_temp'          => $is_temp,
                              ]);

                          $rowID = DB::table('report_item_attachments')            
                              ->insertGetId([
                                  'report_id'        => $report_id, 
                                  'report_item_id'   => $report_item_id,  
                                  'jaf_item_attachment_id'=>$jaf_attach_id,                    
                                  'file_name'        => $pdf_file_name.'-'.$i.'.png',
                                  'attachment_type'  => 'main',
                                  'service_attachment_id'=>$services_id->id,
                                  'service_attachment_name'=>'Cibil Report',
                                  'file_platform'    => $file_platform,
                                  'file_type' => 'auto-verify',
                                  'created_by'       => Auth::user()->id,
                                  'created_at'       => date('Y-m-d H:i:s'),
                                  'is_temp'          => $is_temp,
                              ]);
                              
                          if(stripos($file_platform,'s3')!==false)
                          {
      
                            $filePath = 'uploads/jaf-files/';
      
                            if(File::exists(public_path('/uploads/jaf-files/'.$pdf_file_name.'-'.$i.'.png')))
                            {
                              File::delete(public_path('/uploads/jaf-files/'.$pdf_file_name.'-'.$i.'.png'));
                            }
      
      
                            $filePath = 'uploads/report-files/';
      
                            if(File::exists(public_path('/uploads/report-files/'.$pdf_file_name.'-'.$i.'.png')))
                            {
                              File::delete(public_path('/uploads/report-files/'.$pdf_file_name.'-'.$i.'.png'));
                            }
      
                            
                          }

                      }
                  }
              }

              if(File::exists($jaf_dir.'tmp-files/'))
              {
                  File::cleanDirectory($jaf_dir.'tmp-files/');
              }

              if(File::exists($report_dir.'tmp-files/'))
              {
                  File::cleanDirectory($report_dir.'tmp-files/');
              }

          }

    }

     /**
     * raise check item insuff
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
    */

    public function raiseInsuff(Request $request)
    {   
      // dd($request->get('candidate_id'));

       $rules= [
        'comments'  => 'required',
        ];

        

        $candidate_id = base64_decode($request->can_id); 
        $service_id   = base64_decode($request->ser_id); 
        $item_id = base64_decode($request->jaf_id);
       
        // $item_id      = base64_decode($request->jaf_id); 

        $business_id = Auth::user()->business_id;
        // $is_updated= FALSE;

        $parent_id=Auth::user()->parent_id;
        if(Auth::user()->user_type=='user' || Auth::user()->user_type=='User')
        {
          $users=DB::table('users')->select('parent_id')->where('id',$business_id)->first();
          $parent_id=$users->parent_id;
        }
      
      $validator = Validator::make($request->all(), $rules);
      
      if ($validator->fails()){
            return response()->json([
                'fail' => true,
                'errors' => $validator->errors(),
                'error_type'=>'validation'
            ]);
        }
      DB::beginTransaction();
      try
      {
              $s3_config=NULL;
              $attach_on_select=[];
              $allowedextension=['jpg','jpeg','png','svg','pdf'];
              $zipname="";
              $file_platform = 'web';
              if($request->hasFile('attachments') && $request->file('attachments') !="")
              {
                  $filePath = public_path('/uploads/raise-insuff/'); 
                  $files= $request->file('attachments');
                  foreach($files as $file)
                  {
                          $extension = $file->getClientOriginalExtension();

                          $check = in_array($extension,$allowedextension);
                          $file_size = number_format(File::size($file) / 1048576, 2);
                          //dd($file_size);
                          if(!$check)
                          {
                              return response()->json([
                                'fail' => true,
                                'errors' => ['attachments' => 'Only jpg,jpeg,png,pdf are allowed !'],
                                'error_type'=>'validation'
                              ]);                        
                          }

                          if($file_size > 10)
                          {
                              return response()->json([
                                'fail' => true,
                                'error_type'=>'validation',
                                'errors' => ['attachments' => 'The document size must be less than only 10mb Upload !'],
                              ]);                        
                          }
                  }

                  $zipname = 'raise-insuff-'.date('Ymdhis').'.zip';
                  $zip = new \ZipArchive();      
                  $zip->open(public_path().'/uploads/raise-insuff/'.$zipname, \ZipArchive::CREATE | \ZipArchive::OVERWRITE);

                  foreach($files as $file)
                  {
                      $file_data = $file->getClientOriginalName();
                      $tmp_data  = $candidate_id.'-'.date('mdYHis').'-'.$file_data; 
                      $data = $file->move($filePath, $tmp_data);       
                      $attach_on_select[]=$tmp_data;

                      $path=public_path()."/uploads/raise-insuff/".$tmp_data;
                      $zip->addFile($path, '/raise-insuff/'.basename($path));  
                  }

                  $zip->close();


              }

              $s3_config = S3ConfigTrait::s3Config();

              $path=public_path().'/uploads/raise-insuff/';

              if($s3_config!=NULL && $zipname!='')
              {
                if(File::exists($path.$zipname))
                {
                    $file_platform = 's3';

                    $s3filePath = 'uploads/raise-insuff/';
    
                    if(!Storage::disk('s3')->exists($s3filePath))
                    {
                        Storage::disk('s3')->makeDirectory($s3filePath,0777, true, true);
                    }
    
                    $file = Helper::createFileObject($path.$zipname);
    
                    Storage::disk('s3')->put($s3filePath.$zipname,file_get_contents($file));

                    File::delete($path.$zipname);
                }

              }

              if(File::exists($path.'tmp-files/'))
              {
                  File::cleanDirectory($path.'tmp-files/');
              }

            // dd($request->attachments);

            
            $jaf_form_data=[
              'is_insufficiency' => '1',
              'insufficiency_notes' => $request->comments,
              'insuff_attachment' => $zipname!=NULL?$zipname:NULL,
              'insuff_attachment_file_platform' => $file_platform,
              'updated_at' => date('Y-m-d H:i:s')
            ];

            DB::table('jaf_form_data')->where(['id'=>$item_id])->update($jaf_form_data);

            $jaf_data= DB::table('jaf_form_data')->where(['id'=>$item_id])->first();

            $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'raised'])->first();

            if($ver_insuff!=NULL)
            {
                $ver_insuff_data=[
                  'notes' => $request->comments,
                  'updated_by' => Auth::user()->id,
                  'attachment'  => $zipname!=""?$zipname:NULL, 
                  'attachment_file_platform' => $file_platform,
                  'updated_at' => date('Y-m-d H:i:s')
                ];

                DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'raised'])->update($ver_insuff_data);

                $ver_id=$ver_insuff->id;
            }
            else
            {
              $ver_insuff_data=[
                'parent_id' => $parent_id,
                'business_id' => $business_id,
                'coc_id' => $jaf_data->business_id,
                'candidate_id' => $candidate_id,
                'service_id'  => $service_id,
                'jaf_form_data_id' => $jaf_data->id,
                'item_number' => $jaf_data->check_item_number,
                'activity_type'=> 'jaf-raise',
                'status'=>'raised',
                'notes' => $request->comments,
                'created_by'   => Auth::user()->id,
                'attachment'  => $zipname!=""?$zipname:NULL, 
                'attachment_file_platform' => $file_platform,
                'created_at'   => date('Y-m-d H:i:s'),
              ];
        
              $ver_id = DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);
            }

            $insuff_log_data=[
              'parent_id' => $parent_id,
              'business_id' => $business_id,
              'coc_id' => $jaf_data->business_id,
              'candidate_id' => $candidate_id,
              'service_id'  => $service_id,
              'jaf_form_data_id' => $jaf_data->id,
              'item_number' => $jaf_data->check_item_number,
              'activity_type'=> 'jaf-raise',
              'status'=>'raised',
              'notes' => $request->comments,
              'created_by'   => Auth::user()->id,
              'attachment'  => $zipname!=""?$zipname:NULL, 
              'attachment_file_platform' => $file_platform,
              'created_at'   => date('Y-m-d H:i:s'),
            ];

            DB::table('insufficiency_logs')->insert($insuff_log_data);

            if(count($attach_on_select)>0)
            {
                $file_data=DB::table('insufficiency_attachments')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'raise'])->get();

                if(count($file_data)>0)
                {
                    $path=public_path().'/uploads/raise-insuff/';
                    foreach($file_data as $file)
                    {
                        if(File::exists($path.$file->file_name))
                        {
                            File::delete($path.$file->file_name);
                        }
                    }

                    DB::table('insufficiency_attachments')->where(['jaf_form_data_id'=>$item_id,'service_id'=>$service_id,'status'=>'raise'])->delete();

                }

                $i=0;
                $file_platform = 'web';
                
                if($s3_config!=NULL)
                {
                    $s3filePath = 'uploads/raise-insuff/';

                    if(!Storage::disk('s3')->exists($s3filePath))
                    {
                        Storage::disk('s3')->makeDirectory($s3filePath,0777, true, true);
                    }

                    
                    foreach($attach_on_select as $item)
                    {
                      $path=public_path().'/uploads/raise-insuff/';

                      $file_platform = 'web';

                      if(File::exists($path.$attach_on_select[$i]))
                      {
                         $file_platform = 's3';
                         $file = Helper::createFileObject($path.$attach_on_select[$i]);

                         Storage::disk('s3')->put($s3filePath.$attach_on_select[$i],file_get_contents($file));

                         File::delete($path.$attach_on_select[$i]);
                      }

                      $insuff_file=[
                        'parent_id' => $parent_id,
                        'business_id' => $business_id,
                        'coc_id' => $jaf_data->business_id,
                        'candidate_id' => $candidate_id,
                        'service_id'  => $service_id,
                        'jaf_form_data_id' => $jaf_data->id,
                        'item_number' => $jaf_data->check_item_number,
                        'status'=>'raise',
                        'file_name' => $attach_on_select[$i],
                        'file_platform' => $file_platform,
                        'created_by'   => Auth::user()->id,
                        'created_at'   => date('Y-m-d H:i:s'),
                        'updated_at' => date('Y-m-d H:i:s')
                      ];
                
                      $file_id = DB::table('insufficiency_attachments')->insertGetId($insuff_file);
    
                      $i++;

                      if(File::exists($path.'tmp-files/'))
                      {
                        File::cleanDirectory($path.'tmp-files/');
                      }
                    }
                }
                else
                {
                    foreach($attach_on_select as $item)
                    {
                      $insuff_file=[
                        'parent_id' => $parent_id,
                        'business_id' => $business_id,
                        'coc_id' => $jaf_data->business_id,
                        'candidate_id' => $candidate_id,
                        'service_id'  => $service_id,
                        'jaf_form_data_id' => $jaf_data->id,
                        'item_number' => $jaf_data->check_item_number,
                        'status'=>'raise',
                        'file_name' => $attach_on_select[$i],
                        'file_platform' => $file_platform,
                        'created_by'   => Auth::user()->id,
                        'created_at'   => date('Y-m-d H:i:s'),
                        'updated_at' => date('Y-m-d H:i:s')
                      ];
                
                      $file_id = DB::table('insufficiency_attachments')->insertGetId($insuff_file);
    
                      $i++;
                    }
                }
                
            }
            // dd($ver_id);
            $ver_insuff=DB::table('verification_insufficiency')->where(['id' => $ver_id,'status'=>'raised'])->first();

            $candidates=DB::table('users as u')
                        ->select('u.*','j.business_id as coc_id','j.id as jaf_id','v.created_at as insuff_date','v.created_by as insuff_by','v.updated_by','v.updated_at','v.item_number','v.notes','s.verification_type','s.name as service_name','v.business_id as cust_id','v.attachment')
                        ->join('jaf_form_data as j','u.id','=','j.candidate_id')
                        ->join('verification_insufficiency as v','v.jaf_form_data_id','=','j.id')
                        ->join('services as s','s.id','=','v.service_id')
                        ->where(['u.user_type'=>'candidate','j.id'=>$item_id,'v.status'=>'raised','v.id'=>$ver_insuff->id])
                        ->first();
            // dd($candidates);
            
            if($candidates!=NULL)
              $client=DB::table('users')->where(['id'=>$candidates->coc_id])->first();
            else{
              return response()->json([
                'fail' => false,
                'success'=>false
              ]);
            }
                
            
            // $name = $client->name;
            // $email = $client->email;
            // $msg= "Insufficiency Raised For Candidate";
            
            // dd($data);
            
              if($candidates!=NULL)
              {
                // $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                //   if($candidates->attachment!=NULL)
                // {
                //   $url = url('/').'/uploads/raise-insuff/'.$zipname;

                //   if($s3_config!=NULL)
                //   {
                //     $filePath = 'uploads/raise-insuff/';

                //     $disk = Storage::disk('s3');

                //     $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                //         'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                //         'Key'                        => $filePath.$zipname,
                //         'ResponseContentDisposition' => 'attachment;'//for download
                //     ]);

                //     $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');

                //     $url = (string)$req->getUri();
                //   }

                //   $data  = array('name'=>$name1,'email'=>$email1,'msg'=>$msg,'link'=>$url,'candidate'=>$candidates,'sender'=>$sender);
                // }
                //   else
                //     $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);

                //   Mail::send(['html'=>'mails.insuff-notify'], $data, function($message) use($email,$name) {
                //     $message->to($email, $name)->subject
                //         ('Clobminds Pvt Ltd - Insufficiency Notification');
                //     $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                // });

                // Notification for Insufficiency to Client
                
                $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                
                $companyname=Helper::company_name($candidates->parent_id);
                $case_id=$candidates->display_id;
                $notification_controls = DB::table('notification_control_configs as nc')
                                            ->select('nc.*')
                                            ->join('notification_controls as n','n.business_id','=','nc.business_id')
                                            ->where(['n.status'=>1,'nc.status'=>1,'n.business_id'=>$candidates->business_id,'n.type'=>'case-insuff-raise','nc.type'=>'case-insuff-raise'])
                                            ->get();
                  
                if(count($notification_controls)>0)
                {
                  foreach($notification_controls as $item)
                  {
                        $name = $item->name;
                        // dd($name);
                        $email =  $item->email;
                        $msg= "Insufficiency Adddressed by " .$name. " following are details:";

                        if($candidates->attachment!=NULL)
                        {
                          $url = url('/').'/uploads/raise-insuff/'.$zipname;

                          if($s3_config!=NULL)
                          {
                            $filePath = 'uploads/raise-insuff/';

                            $disk = Storage::disk('s3');

                            $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                                'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                                'Key'                        => $filePath.$zipname,
                                'ResponseContentDisposition' => 'attachment;'//for download
                            ]);

                            $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');

                            $url = (string)$req->getUri();

                          }

                          $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>$url,'candidate'=>$candidates,'sender'=>$sender,'companyname'=>$comapnyname,'case_id'=>$case_id);
                        }
                        else
                          $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender,'companyname'=>$companyname,'case_id'=>$case_id);
                        Mail::send(['html'=>'mails.insuff-notify'], $data, function($message) use($email,$name,$companyname,$case_id) {
                            $message->to($email, $name)->subject
                                ('Insufficiency raised for Case Ref.No: '.$case_id. ' by '.$companyname);
                            $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                        });
                      
                  }
                }


                // Notification for Insufficiency to Candidate

                $notify_candidate = DB::table('notification_controls as n')
                                    ->select('n.*')
                                    ->where(['n.status'=>1,'n.business_id'=>$candidates->business_id,'n.type'=>'case-insuff-raise','n.is_send_candidate'=>1])
                                    ->first();

                    if($notify_candidate!=NULL && $candidates->email!=NULL)
                    {
                      $name = $candidates->name;
                      $email =  $candidates->email;
                      $msg= "Insufficiency Raised For Candidate";

                      if($candidates->attachment!=NULL)
                      {
                        $url = url('/').'/uploads/raise-insuff/'.$zipname;

                        if($s3_config!=NULL)
                        {
                          $filePath = 'uploads/raise-insuff/';
                          $disk = Storage::disk('s3');

                          $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                              'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                              'Key'                        => $filePath.$zipname,
                              'ResponseContentDisposition' => 'attachment;'//for download
                          ]);
                          $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');
                          $url = (string)$req->getUri();
                        }

                        $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>$url,'candidate'=>$candidates,'sender'=>$sender,'companyname'=>$companyname,'case_id'=>$case_id);

                      }
                      else{
                        $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender,'companyname'=>$companyname,'case_id'=>$case_id);

                      }

                      Mail::send(['html'=>'mails.insuff-notify'], $data, function($message) use($email,$name,$companyname,$case_id) {
                          $message->to($email, $name)->subject
                          ('Insufficiency raised for Case Ref.No: '.$case_id. ' by '.$companyname);
                          $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                      });

                    }
                
                $kams = DB::table('key_account_managers')->where(['business_id'=>$candidates->business_id])->get();
                if(count($kams)>0)
                {
                  foreach($kams as $kam)
                  {
                      $user_data=DB::table('users')->where(['id'=>$kam->user_id])->first();

                      $name1 = $user_data->name;
                      $email1 = $user_data->email;
                      $msg= "Insufficiency Raised For Candidate";
                      $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                      if($candidates->attachment!=NULL)
                      {
                        $url = url('/').'/uploads/raise-insuff/'.$zipname;

                        if($s3_config!=NULL)
                        {
                          $filePath = 'uploads/raise-insuff/';

                          $disk = Storage::disk('s3');

                          $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                              'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                              'Key'                        => $filePath.$zipname,
                              'ResponseContentDisposition' => 'attachment;'//for download
                          ]);

                          $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');

                          $url = (string)$req->getUri();
                        }

                        $data  = array('name'=>$name1,'email'=>$email1,'msg'=>$msg,'link'=>$url,'candidate'=>$candidates,'sender'=>$sender,'companyname'=>$companyname,'case_id'=>$case_id);
                      }
                      else
                        $data  = array('name'=>$name1,'email'=>$email1,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender,'companyname'=>$companyname,'case_id'=>$case_id);

                      Mail::send(['html'=>'mails.insuff-notify'], $data, function($message) use($email1,$name1,$companyname,$case_id) {
                          $message->to($email1, $name1)->subject
                          ('Insufficiency raised for Case Ref.No: '.$case_id. ' by '.$companyname);
                          $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                      });

                  }
                }
              }
              $res=$candidates!=NULL?true:false;    
              
              DB::commit();
              return response()->json([
                'fail' => false,
                'success'=>$res
              ]); 

      }
      catch (\Exception $e) {
          DB::rollback();
          // something went wrong
          return $e;
      }    

    }

    

    /**
     * clear all insuff
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
    */

    public function clearAllChecksInsuff(Request $request)
    {   
        $candidate_id = base64_decode($request->get('candidate_id')); 
        $user_id=Auth::user()->id;
        $business_id = Auth::user()->business_id;
        $jaf_data = FALSE;
        //dd('h');
      
        $parent_id=Auth::user()->parent_id;
        if(Auth::user()->user_type=='user' || Auth::user()->user_type=='User')
        {
          $users=DB::table('users')->select('parent_id')->where('id',$business_id)->first();
          $parent_id=$users->parent_id;
        }
        DB::beginTransaction();
        try{
          if(Auth::check()){

            $jaf_record = DB::table('jaf_form_data as j')
            ->select('s.verification_type','j.service_id','j.business_id','j.id','j.check_item_number','j.form_data')
            ->join('services as s','j.service_id','=','s.id')
            ->where('candidate_id',$candidate_id)
            ->get();

            $jaf_record_success=DB::table('jaf_form_data as j')
                                ->where(['j.candidate_id'=>$candidate_id,'verification_status'=>'success'])
                                ->get();

            if(count($jaf_record) == count($jaf_record_success))
            {
                DB::table('job_items')
                ->where('candidate_id', $candidate_id)
                ->update(['is_all_insuff_cleared' => 1,'insuff_cleared_at'=>date('Y-m-d H:i:s'),'insuff_cleared_by'=>Auth::user()->id,'updated_at'=>date('Y-m-d H:i:s')]);
                $is_updated=TRUE;
                if($is_updated){
                  //generate report here 
                  $this->generateCandidateReport($candidate_id);
                  DB::commit();
                  return response()->json([
                  'status'=>'ok',
                  'check' =>'yes',
                  'message' => 'updated',                
                  ], 200);
                }
                else{
                  return response()->json([
                    'status' =>'no',
                    ], 200);
                }
            }

            foreach($jaf_record as $jaf)
            {
              $price=20;
              $checkprice_db=DB::table('check_price_masters')
                              ->select('price')
                              ->where(['business_id'=>$parent_id,'service_id'=>$jaf->service_id])->first();

              $serviceId = DB::table('services')->select('id','name','type_name')->where('id',$jaf->service_id)->first();
              //dd($serviceId);          
              // check service type 
              if($jaf->service_id == 2){

                $jaf_aadhaar = DB::table('jaf_form_data')->select('id','business_id','form_data','service_id','check_item_number')->where(['candidate_id'=>$candidate_id,'service_id'=>$jaf->service_id])->first();
                $jaf_array = json_decode($jaf_aadhaar->form_data, true);
                // print_r($jaf_array);
                $aaddhaar_number ="";
                foreach($jaf_array as $input){
                    if(array_key_exists('Aadhar Number',$input)){
                      $aaddhaar_number = $input['Aadhar Number'];
                    }
                }
                //check first into master table
                $master_data = DB::table('aadhar_check_masters')->select('*')->where(['aadhar_number'=>$aaddhaar_number])->first();
                // dd($master_data);
                if($master_data !=null){
                  //update case
                  $jaf_data=  DB::table('jaf_form_data')->where(['candidate_id'=>$candidate_id,'service_id'=>$jaf->service_id])->update(['is_insufficiency'=>'0','is_api_checked'=>'1','is_api_verified'=>'1','verification_status'=>'success','verified_at'=>date('Y-m-d H:i:s'),'is_all_insuff_cleared' => 1,'insuff_cleared_by'=>Auth::user()->id,'updated_at'=>date('Y-m-d H:i:s')]); 

                  $jaf_data=TRUE; 
                  

                  $check_data = [
                    'parent_id'   =>    $parent_id,
                    'business_id'       =>$business_id,
                    'candidate_id'      =>$candidate_id,
                    'service_id'        =>$jaf->service_id,
                    'aadhar_number'     =>$master_data->aadhar_number,
                    'age_range'         =>$master_data->age_range,
                    'gender'            =>$master_data->gender,
                    'state'             =>$master_data->state,
                    'last_digit'        =>$master_data->last_digit,
                    'is_verified'       =>'1',
                    'is_aadhar_exist'   =>'1',
                    'price'             =>$checkprice_db!=NULL?$checkprice_db->price:$price,
                    'used_by'           =>'customer',
                    'user_id'            => $user_id,
                    'created_at'        =>date('Y-m-d H:i:s')
                    ];

                    DB::table('aadhar_checks')->insert($check_data);

                    $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf->id,'service_id'=>$jaf->service_id,'status'=>'removed'])->first();

                    if($ver_insuff!=NULL)
                    {
                        $ver_insuff_data=[
                          'notes' => 'BGV Cleared',
                          'updated_by' => Auth::user()->id,
                          'updated_at' => date('Y-m-d H:i:s')
                        ];

                        DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf->id,'service_id'=>$jaf->service_id,'status'=>'removed'])->update($ver_insuff_data);

                        $ver_id=$ver_insuff->id;
                    }
                    else
                    {
                      $ver_insuff_data=[
                        'parent_id' => $parent_id,
                        'business_id' => $business_id,
                        'coc_id' => $jaf_aadhaar->business_id,
                        'candidate_id' => $candidate_id,
                        'service_id'  => $jaf_aadhaar->service_id,
                        'jaf_form_data_id' => $jaf_aadhaar->id,
                        'item_number' => $jaf_aadhaar->check_item_number,
                        'activity_type'=> 'jaf-insuff',
                        'status'=>'removed',
                        'notes' => 'BGV Cleared',
                        'created_by'   => Auth::user()->id,
                        'created_at'   => date('Y-m-d H:i:s'),
                        'updated_at' => date('Y-m-d H:i:s')
                      ];
                
                      DB::table('verification_insufficiency')->insert($ver_insuff_data);

                    }

                    $insuff_log_data=[
                      'parent_id' => $parent_id,
                      'business_id' => $business_id,
                      'coc_id' => $jaf_aadhaar->business_id,
                      'candidate_id' => $candidate_id,
                      'service_id'  => $jaf_aadhaar->service_id,
                      'jaf_form_data_id' => $jaf_aadhaar->id,
                      'item_number' => $jaf_aadhaar->check_item_number,
                      'activity_type'=> 'jaf-insuff',
                      'status'=>'removed',
                      'notes' => 'BGV Cleared',
                      'created_by'   => Auth::user()->id,
                      'created_at'   => date('Y-m-d H:i:s'),
                    ];
              
                    DB::table('insufficiency_logs')->insert($insuff_log_data);
              

                }else{
                  //check from live API
                  $api_check_status = false;
                  // Setup request to send json via POST
                  $data = array(
                      'id_number'    => $aaddhaar_number,
                      'async'         => true,
                  );
                  $payload = json_encode($data);
                  $apiURL = "https://kyc-api.aadhaarkyc.io/api/v1/aadhaar-validation/aadhaar-validation";

                  $ch = curl_init();
                  curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);                
                  curl_setopt ( $ch, CURLOPT_POST, 1 );
                  $authorization = "Authorization: Bearer ".env('SUREPASS_PRODUCTION_TOKEN');
                  //$authorization = "Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTY3NTQxMTcwMywianRpIjoiMTA5ZDNkNWMtOTE4NC00MTJkLTg3YTMtYzhiNmYzZWQyYjQ3IiwidHlwZSI6ImFjY2VzcyIsImlkZW50aXR5IjoiZGV2LnRlY2hzYWdhQHN1cmVwYXNzLmlvIiwibmJmIjoxNjc1NDExNzAzLCJleHAiOjE5OTA3NzE3MDMsInVzZXJfY2xhaW1zIjp7InNjb3BlcyI6WyJ1c2VyIl19fQ.r4XeIMOFEdnb52_xCspvLyiu6ciS5wx4YeIMv8ZyHKI"; // Prepare the authorisation token
                  curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json' , $authorization )); // Inject the token into the header
                  curl_setopt($ch, CURLOPT_URL, $apiURL);
                  // Attach encoded JSON string to the POST fields
                  curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);
                  $resp = curl_exec ( $ch );
                  curl_close ( $ch );
                  
                  $array_data =  json_decode($resp,true);

                  if($array_data['success'])
                  {
                      $master_data ="";
                      //check if ID number is new then insert into DB
                      $checkIDInDB= DB::table('aadhar_check_masters')->where(['aadhar_number'=>$aaddhaar_number])->count();
                      if($checkIDInDB ==0)
                      {
                          $gender = 'Male';
                          if($array_data['data']['gender'] == 'F'){
                              $gender = 'Female';
                          }
                          $data = ['aadhar_number'    =>$array_data['data']['aadhaar_number'],
                                  'age_range'         =>$array_data['data']['age_range'],
                                  'gender'            =>$gender,
                                  'state'             =>$array_data['data']['state'],
                                  'last_digit'        =>$array_data['data']['last_digits'],
                                  'is_api_verified'       =>'1',
                                  'is_aadhar_exist'   =>'1',
                                  'created_at'        =>date('Y-m-d H:i:s')
                                  ];

                          DB::table('aadhar_check_masters')->insert($data);
                                  
                          //insert into business table
                          $check_data = [
                                  'parent_id'   =>    $parent_id,
                                  'business_id'       =>$business_id,
                                  'candidate_id'      =>$candidate_id,
                                  'service_id'        =>$jaf->service_id,
                                  'candidate_id'      =>$candidate_id,
                                  'aadhar_number'     =>$array_data['data']['aadhaar_number'],
                                  'age_range'         =>$array_data['data']['age_range'],
                                  'gender'            =>$gender,
                                  'state'             =>$array_data['data']['state'],
                                  'last_digit'        =>$array_data['data']['last_digits'],
                                  'is_verified'       =>'1',
                                  'is_aadhar_exist'   =>'1',
                                  'price'             =>$checkprice_db!=NULL?$checkprice_db->price:$price,
                                  'used_by'           =>'customer',
                                  'user_id'            => $user_id,
                                  'created_at'        =>date('Y-m-d H:i:s')
                                  ];

                          DB::table('aadhar_checks')->insert($check_data);
                          
                          $master_data = DB::table('aadhar_check_masters')->select('*')->where(['aadhar_number'=>$aaddhaar_number])->first();
                          // update the status
                        $jaf_data=  DB::table('jaf_form_data')->where(['candidate_id'=>$candidate_id,'service_id'=>$jaf->service_id])->update(['is_api_checked'=>'1','is_api_verified'=>'1','is_insufficiency'=>'0','verification_status'=>'success','verified_at'=>date('Y-m-d H:i:s'),'is_all_insuff_cleared' => 1,'insuff_cleared_by'=>Auth::user()->id,'updated_at'=>date('Y-m-d H:i:s')]); 

                        $jaf_data=TRUE; 

                        $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf->id,'service_id'=>$jaf->service_id,'status'=>'removed'])->first();

                        if($ver_insuff!=NULL)
                        {
                            $ver_insuff_data=[
                              'notes' => 'BGV Cleared',
                              'updated_by' => Auth::user()->id,
                              'updated_at' => date('Y-m-d H:i:s')
                            ];

                            DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf->id,'service_id'=>$jaf->service_id,'status'=>'removed'])->update($ver_insuff_data);

                            $ver_id=$ver_insuff->id;
                        }
                        else
                        {
                          $ver_insuff_data=[
                            'parent_id' => $parent_id,
                            'business_id' => $business_id,
                            'coc_id' => $jaf_aadhaar->business_id,
                            'candidate_id' => $candidate_id,
                            'service_id'  => $jaf_aadhaar->service_id,
                            'jaf_form_data_id' => $jaf_aadhaar->id,
                            'item_number' => $jaf_aadhaar->check_item_number,
                            'activity_type'=> 'jaf-insuff',
                            'status'=>'removed',
                            'notes' => NULL,
                            'created_by'   => Auth::user()->id,
                            'created_at'   => date('Y-m-d H:i:s'),
                            'updated_at' => date('Y-m-d H:i:s')
                          ];
                    
                          DB::table('verification_insufficiency')->insert($ver_insuff_data);
                        }

                        $insuff_log_data=[
                          'parent_id' => $parent_id,
                          'business_id' => $business_id,
                          'coc_id' => $jaf_aadhaar->business_id,
                          'candidate_id' => $candidate_id,
                          'service_id'  => $jaf_aadhaar->service_id,
                          'jaf_form_data_id' => $jaf_aadhaar->id,
                          'item_number' => $jaf_aadhaar->check_item_number,
                          'activity_type'=> 'jaf-insuff',
                          'status'=>'removed',
                          'notes' => 'BGV Cleared',
                          'created_by'   => Auth::user()->id, 
                          'created_at'   => date('Y-m-d H:i:s'),
                        ];
                  
                        DB::table('insufficiency_logs')->insert($insuff_log_data);

                      }
                  
                  }else{
                      //update insuff
                      $jaf_data=DB::table('jaf_form_data')->where(['candidate_id'=>$candidate_id,'service_id'=>$jaf->service_id])->update(['is_api_checked'=>'1','is_api_verified'=>'0','is_insufficiency'=>'1','verification_status'=>'failed','verified_at'=>date('Y-m-d H:i:s')]); 
                      // $jaf_data=TRUE; 

                      $jaf_data_s=DB::table('jaf_form_data')->where(['candidate_id'=>$candidate_id,'service_id'=>$jaf->service_id])->first();
                      
                      $insuff_log_data=[
                        'parent_id' => $parent_id,
                        'business_id' => $business_id,
                        'coc_id' => $jaf_aadhaar->business_id,
                        'candidate_id' => $candidate_id,
                        'service_id'  => $jaf->service_id,
                        'jaf_form_data_id' => $jaf_aadhaar->id,
                        'item_number' => $jaf_aadhaar->check_item_number,
                        'activity_type'=> 'jaf-insuff',
                        'status'=>'failed',
                        'notes' => 'BGV Failed',
                        'created_by'   => Auth::user()->id,
                        'created_at'   => date('Y-m-d H:i:s'),
                      ];
                
                      DB::table('insufficiency_logs')->insert($insuff_log_data);

                      $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf->id,'service_id'=>$jaf->service_id,'status'=>'raised'])->first();

                      if($ver_insuff!=NULL)
                      {
                          $ver_insuff_data=[
                            'notes' => 'BGV Failed',
                            'updated_by' => Auth::user()->id,
                            'updated_at' => date('Y-m-d H:i:s')
                          ];

                          DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf->id,'service_id'=>$jaf->service_id,'status'=>'raised'])->update($ver_insuff_data);

                          $ver_id=$ver_insuff->id;
                      }
                      else
                      {
                        $ver_insuff_data=[
                          'parent_id' => $parent_id,
                          'business_id' => $business_id,
                          'coc_id' => $jaf->business_id,
                          'candidate_id' => $candidate_id,
                          'service_id'  => $jaf->service_id,
                          'jaf_form_data_id' => $jaf->id,
                          'item_number' => $jaf->check_item_number,
                          'activity_type'=> 'jaf-insuff',
                          'status'=>'raised',
                          'notes' => 'BGV Failed',
                          'created_by'   => Auth::user()->id,
                          'created_at'   => date('Y-m-d H:i:s'),
                        ];
                  
                        $ver_id = DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);
                      }
                      
                  }

                }
              }
              // service start
              else if($jaf->service_id == 3){
                $jaf_pan = DB::table('jaf_form_data')->select('id','business_id','form_data','service_id','check_item_number')->where(['candidate_id'=>$candidate_id,'service_id'=>$jaf->service_id])->first();
                
                      $pan_number = "";
                      // $business_id = $jaf_pan->business_id; 
                      $jaf_array = json_decode($jaf_pan->form_data, true);
                      // print_r($jaf_array);
                      foreach($jaf_array as $input){
                          if(array_key_exists('PAN Number',$input)){
                            $pan_number = $input['PAN Number'];
                          }
                      }

                      //check first into master table
                      $master_data = DB::table('pan_check_masters')->select('*')->where(['pan_number'=>$pan_number])->first();
                      
                      if($master_data !=null){

                          //store log
                            $data = [
                              'parent_id'   =>    $parent_id,
                              'category'          =>$master_data->category,
                              'pan_number'        =>$master_data->pan_number,
                              'full_name'         =>$master_data->full_name,
                              'is_verified'       =>'1',
                              'is_pan_exist'      =>'1',
                              'price'             =>$checkprice_db!=NULL?$checkprice_db->price:$price,
                              'business_id'       => $business_id,
                              'candidate_id' => $candidate_id,
                              'service_id'        =>$jaf->service_id,
                              'source_type'       =>'SystemDb',
                              'used_by'           =>'customer',
                              'user_id'            => $user_id,
                              'created_at'=>date('Y-m-d H:i:s')
                              ];
                      
                          DB::table('pan_checks')->insert($data);
                          // update the status
                          $jaf_data=  DB::table('jaf_form_data')->where(['candidate_id'=>$candidate_id,'service_id'=>$jaf->service_id])->update(['is_api_checked'=>'1','is_api_verified'=>'1','verification_status'=>'success','verified_at'=>date('Y-m-d H:i:s'),'is_insufficiency'=>'0','is_all_insuff_cleared' => 1,'insuff_cleared_by'=>Auth::user()->id,'updated_at'=>date('Y-m-d H:i:s')]);

                          $jaf_data=TRUE;
                          
                          $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf->id,'service_id'=>$jaf->service_id,'status'=>'removed'])->first();

                          if($ver_insuff!=NULL)
                          {
                              $ver_insuff_data=[
                                'notes' => 'BGV Cleared',
                                'updated_by' => Auth::user()->id,
                                'updated_at' => date('Y-m-d H:i:s')
                              ];

                              DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf->id,'service_id'=>$jaf->service_id,'status'=>'removed'])->update($ver_insuff_data);

                              $ver_id=$ver_insuff->id;
                          }
                          else
                          {
                            $ver_insuff_data=[
                              'parent_id' => $parent_id,
                              'business_id' => $business_id,
                              'coc_id' => $jaf_pan->business_id,
                              'candidate_id' => $candidate_id,
                              'service_id'  => $jaf_pan->service_id,
                              'jaf_form_data_id' => $jaf_pan->id,
                              'item_number' => $jaf_pan->check_item_number,
                              'activity_type'=> 'jaf-insuff',
                              'status'=>'removed',
                              'notes' => 'BGV Cleared',
                              'created_by'   => Auth::user()->id,
                              'created_at'   => date('Y-m-d H:i:s'),
                              'updated_at' => date('Y-m-d H:i:s')
                            ];
                      
                            DB::table('verification_insufficiency')->insert($ver_insuff_data);
                          }

                          $insuff_log_data=[
                            'parent_id' => $parent_id,
                            'business_id' => $business_id,
                            'coc_id' => $jaf_pan->business_id,
                            'candidate_id' => $candidate_id,
                            'service_id'  => $jaf->service_id,
                            'jaf_form_data_id' => $jaf_pan->id,
                            'item_number' => $jaf_pan->check_item_number,
                            'activity_type'=> 'jaf-insuff',
                            'status'=>'removed',
                            'notes' => 'BGV Cleared',
                            'created_by'   => Auth::user()->id,
                            'created_at'   => date('Y-m-d H:i:s'),
                          ];
                    
                          DB::table('insufficiency_logs')->insert($insuff_log_data);

                      }
                      else{
                          //check from live API
                          $api_check_status = false;
                          // Setup request to send json via POST
                          $data = array(
                              'id_number'    => $pan_number,
                              'async'         => true,
                          );
                          $payload = json_encode($data);
                          $apiURL = "https://kyc-api.aadhaarkyc.io/api/v1/pan/pan";
          
                          $ch = curl_init();                
                          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);                
                          curl_setopt ( $ch, CURLOPT_POST, 1 );
                          $authorization = "Authorization: Bearer ".env('SUREPASS_PRODUCTION_TOKEN');
                          //$authorization = "Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTY3NTQxMTcwMywianRpIjoiMTA5ZDNkNWMtOTE4NC00MTJkLTg3YTMtYzhiNmYzZWQyYjQ3IiwidHlwZSI6ImFjY2VzcyIsImlkZW50aXR5IjoiZGV2LnRlY2hzYWdhQHN1cmVwYXNzLmlvIiwibmJmIjoxNjc1NDExNzAzLCJleHAiOjE5OTA3NzE3MDMsInVzZXJfY2xhaW1zIjp7InNjb3BlcyI6WyJ1c2VyIl19fQ.r4XeIMOFEdnb52_xCspvLyiu6ciS5wx4YeIMv8ZyHKI"; // Prepare the authorisation token
                          curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json' , $authorization )); // Inject the token into the header
                          curl_setopt($ch, CURLOPT_URL, $apiURL);
                          // Attach encoded JSON string to the POST fields
                          curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);
          
                          $resp = curl_exec ( $ch );
                          curl_close ( $ch );
                          
                          $array_data =  json_decode($resp,true);
                          // print_r($array_data); die;
                          if($array_data['success'])
                          {
                              //check if ID number is new then insert into DB
                              $checkIDInDB= DB::table('pan_check_masters')->where(['pan_number'=>$pan_number])->count();
                              if($checkIDInDB ==0)
                              {
                                  $data = [
                                          'category'=>$array_data['data']['category'],
                                          'pan_number'=>$array_data['data']['pan_number'],
                                          'full_name'=>$array_data['data']['full_name'],
                                          'is_api_verified'=>'1',
                                          'is_pan_exist'=>'1',
                                          'created_at'=>date('Y-m-d H:i:s')
                                          ];
                                  DB::table('pan_check_masters')->insert($data);

                                  $log_data = [
                                    'parent_id'   =>    $parent_id,
                                    'category'          =>$array_data['data']['category'],
                                    'pan_number'        =>$array_data['data']['pan_number'],
                                    'full_name'         =>$array_data['data']['full_name'],
                                    'is_verified'       =>'1',
                                    'is_pan_exist'      =>'1',
                                    'price'             =>$checkprice_db!=NULL?$checkprice_db->price:$price,
                                    'business_id'       =>$business_id,
                                    'candidate_id' => $candidate_id,
                                    'service_id'        =>$jaf->service_id,
                                    'source_type'       =>'API',
                                    'used_by'           =>'customer',
                                    'user_id'            => $user_id,
                                    'created_at'=>date('Y-m-d H:i:s')
                                    ];
                            
                                DB::table('pan_checks')->insert($log_data);
                                  
                              }
          
                              // update the status
                              $jaf_data=  DB::table('jaf_form_data')->where(['candidate_id'=>$candidate_id,'service_id'=>$jaf->service_id])->update(['is_api_checked'=>'1','is_api_verified'=>'1','verification_status'=>'success','verified_at'=>date('Y-m-d H:i:s'),'is_insufficiency'=>'0','is_all_insuff_cleared' => 1,'insuff_cleared_by'=>Auth::user()->id,'updated_at'=>date('Y-m-d H:i:s')]); 

                              $jaf_data=TRUE; 

                              $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf->id,'service_id'=>$jaf->service_id,'status'=>'removed'])->first();

                              if($ver_insuff!=NULL)
                              {
                                  $ver_insuff_data=[
                                    'notes' => 'BGV Cleared',
                                    'updated_by' => Auth::user()->id,
                                    'updated_at' => date('Y-m-d H:i:s')
                                  ];

                                  DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf->id,'service_id'=>$jaf->service_id,'status'=>'removed'])->update($ver_insuff_data);

                                  $ver_id=$ver_insuff->id;
                              }
                              else
                              {
                                $ver_insuff_data=[
                                  'parent_id' => $parent_id,
                                  'business_id' => $business_id,
                                  'coc_id' => $jaf_pan->business_id,
                                  'candidate_id' => $candidate_id,
                                  'service_id'  => $jaf_pan->service_id,
                                  'jaf_form_data_id' => $jaf_pan->id,
                                  'item_number' => $jaf_pan->check_item_number,
                                  'activity_type'=> 'jaf-insuff',
                                  'status'=>'removed',
                                  'notes' => 'BGV Cleared',
                                  'created_by'   => Auth::user()->id,
                                  'created_at'   => date('Y-m-d H:i:s'),
                                  'updated_at' => date('Y-m-d H:i:s')
                                ];
                          
                                DB::table('verification_insufficiency')->insert($ver_insuff_data);
                              }

                              $insuff_log_data=[
                                'parent_id' => $parent_id,
                                'business_id' => $business_id,
                                'coc_id' => $jaf_pan->business_id,
                                'candidate_id' => $candidate_id,
                                'service_id'  => $jaf->service_id,
                                'jaf_form_data_id' => $jaf_pan->id,
                                'item_number' => $jaf_pan->check_item_number,
                                'activity_type'=> 'jaf-insuff',
                                'status'=>'removed',
                                'notes' => 'BGV Cleared',
                                'created_by'   => Auth::user()->id,
                                'created_at'   => date('Y-m-d H:i:s'),
                              ];
                        
                              DB::table('insufficiency_logs')->insert($insuff_log_data);
          
                          }else{
                              //update insuff
                              $jaf_data=  DB::table('jaf_form_data')->where(['candidate_id'=>$candidate_id,'service_id'=>$jaf->service_id])->update(['is_api_checked'=>'1','is_api_verified'=>'0','is_insufficiency'=>'1','verification_status'=>'failed','verified_at'=>date('Y-m-d H:i:s')]); 

                              // $jaf_data=TRUE; 

                              $jaf_data_s=DB::table('jaf_form_data')->where(['candidate_id'=>$candidate_id,'service_id'=>$jaf->service_id])->first();
                              $insuff_log_data=[
                                'parent_id' => $parent_id,
                                'business_id' => $business_id,
                                'coc_id' => $jaf_pan->business_id,
                                'candidate_id' => $candidate_id,
                                'service_id'  => $jaf->service_id,
                                'jaf_form_data_id' => $jaf_pan->id,
                                'item_number' => $jaf_pan->check_item_number,
                                'activity_type'=> 'jaf-insuff',
                                'status'=>'failed',
                                'notes' => 'BGV Failed',
                                'created_by'   => Auth::user()->id,
                                'created_at'   => date('Y-m-d H:i:s'),
                              ];
                        
                              DB::table('insufficiency_logs')->insert($insuff_log_data);

                              $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf->id,'service_id'=>$jaf->service_id,'status'=>'raised'])->first();

                              if($ver_insuff!=NULL)
                              {
                                  $ver_insuff_data=[
                                    'notes' => 'BGV Failed',
                                    'updated_by' => Auth::user()->id,
                                    'updated_at' => date('Y-m-d H:i:s')
                                  ];

                                  DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf->id,'service_id'=>$jaf->service_id,'status'=>'raised'])->update($ver_insuff_data);

                                  $ver_id=$ver_insuff->id;
                              }
                              else
                              {
                                $ver_insuff_data=[
                                  'parent_id' => $parent_id,
                                  'business_id' => $business_id,
                                  'coc_id' => $jaf->business_id,
                                  'candidate_id' => $candidate_id,
                                  'service_id'  => $jaf->service_id,
                                  'jaf_form_data_id' => $jaf->id,
                                  'item_number' => $jaf->check_item_number,
                                  'activity_type'=> 'jaf-insuff',
                                  'status'=>'raised',
                                  'notes' => 'BGV Failed',
                                  'created_by'   => Auth::user()->id,
                                  'created_at'   => date('Y-m-d H:i:s'),
                                ];
                          
                                $ver_id = DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);
                              }

                              
                          }
                      }
          
              }
              // ./service
                // service start
              else if($jaf->service_id == 4){

                $jaf_voterid = DB::table('jaf_form_data')->select('id','business_id','form_data','service_id','check_item_number')->where(['candidate_id'=>$candidate_id,'service_id'=>$jaf->service_id])->first();

                      $voterid_number = "";
                      // $business_id = $jaf_voterid->business_id; 
                      $jaf_array = json_decode($jaf_voterid->form_data, true);
                      // print_r($jaf_array);
                      foreach($jaf_array as $input){
                          if(array_key_exists('Voter ID Number',$input)){
                            $voterid_number = $input['Voter ID Number'];
                          }
                      }
                  
                      //check first into master table
                      $master_data = DB::table('voter_id_check_masters')->select('*')->where(['voter_id_number'=>$voterid_number])->first();
                      if($master_data !=null){
                          $data = $master_data;

                          //store log
                        $log_data = [
                          'parent_id'   =>    $parent_id,
                          'api_client_id'     =>$master_data->api_client_id,
                          'relation_type'     =>$master_data->relation_type,
                          'voter_id_number'   =>$master_data->voter_id_number,
                          'relation_name'     =>$master_data->relation_name,
                          'full_name'         =>$master_data->full_name,
                          'gender'            =>$master_data->gender,
                          'age'               =>$master_data->age,
                          'dob'               =>$master_data->dob,
                          'house_no'          =>$master_data->house_no,
                          'area'              =>$master_data->area,
                          'state'             =>$master_data->state,
                          'is_verified'       =>'1',
                          'is_voter_id_exist' =>'1',
                          'price'             =>$checkprice_db!=NULL?$checkprice_db->price:$price,
                          'business_id'       =>$business_id,
                          'candidate_id' => $candidate_id,
                          'service_id'        =>$jaf->service_id,
                          'source_reference'  =>'SystemDb',
                          'used_by'           =>'customer',
                          'user_id'            => $user_id,
                          'created_at'        =>date('Y-m-d H:i:s')
                          ];

                          DB::table('voter_id_checks')->insert($log_data);
                          // update the status
                          $jaf_data=  DB::table('jaf_form_data')->where(['candidate_id'=>$candidate_id,'service_id'=>$jaf->service_id])->update(['is_api_checked'=>'1','is_api_verified'=>'1','verification_status'=>'success','verified_at'=>date('Y-m-d H:i:s'),'is_insufficiency'=>'0','is_all_insuff_cleared' => 1,'insuff_cleared_by'=>Auth::user()->id,'updated_at'=>date('Y-m-d H:i:s')]); 

                          $jaf_data=TRUE; 

                          $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf->id,'service_id'=>$jaf->service_id,'status'=>'removed'])->first();

                          if($ver_insuff!=NULL)
                          {
                              $ver_insuff_data=[
                                'notes' => 'BGV Cleared',
                                'updated_by' => Auth::user()->id,
                                'updated_at' => date('Y-m-d H:i:s')
                              ];

                              DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf->id,'service_id'=>$jaf->service_id,'status'=>'removed'])->update($ver_insuff_data);

                              $ver_id=$ver_insuff->id;
                          }
                          else
                          {
                            $ver_insuff_data=[
                              'parent_id' => $parent_id,
                              'business_id' => $business_id,
                              'coc_id' => $jaf_voterid->business_id,
                              'candidate_id' => $candidate_id,
                              'service_id'  => $jaf_voterid->service_id,
                              'jaf_form_data_id' => $jaf_voterid->id,
                              'item_number' => $jaf_voterid->check_item_number,
                              'activity_type'=> 'jaf-insuff',
                              'status'=>'removed',
                              'notes' => 'BGV Cleared',
                              'created_by'   => Auth::user()->id,
                              'created_at'   => date('Y-m-d H:i:s'),
                              'updated_at' => date('Y-m-d H:i:s')
                            ];
                      
                            DB::table('verification_insufficiency')->insert($ver_insuff_data);
                          }

                          $insuff_log_data=[
                            'parent_id' => $parent_id,
                            'business_id' => $business_id,
                            'coc_id' => $jaf_voterid->business_id,
                            'candidate_id' => $candidate_id,
                            'service_id'  => $jaf->service_id,
                            'jaf_form_data_id' => $jaf_voterid->id,
                            'item_number' => $jaf_voterid->check_item_number,
                            'activity_type'=> 'jaf-insuff',
                            'status'=>'removed',
                            'notes' => 'BGV Cleared',
                            'created_by'   => Auth::user()->id,
                            'created_at'   => date('Y-m-d H:i:s'),
                          ];
                    
                          DB::table('insufficiency_logs')->insert($insuff_log_data);

                          // return response()->json([
                          //     'fail'      =>false,
                          //     'data'      =>$master_data 
                          // ]);
                      }
                      else{
                          //check from live API
                          // Setup request to send json via POST
                          $data = array(
                              'id_number'    => $voterid_number,
                              'async'         => true,
                          );
                          $payload = json_encode($data);
                          $apiURL = "https://kyc-api.aadhaarkyc.io/api/v1/voter-id/voter-id";
          
                          $ch = curl_init();
                          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);                
                          curl_setopt ( $ch, CURLOPT_POST, 1 );
                          $authorization = "Authorization: Bearer ".env('SUREPASS_PRODUCTION_TOKEN');
                         // $authorization = "Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTY3NTQxMTcwMywianRpIjoiMTA5ZDNkNWMtOTE4NC00MTJkLTg3YTMtYzhiNmYzZWQyYjQ3IiwidHlwZSI6ImFjY2VzcyIsImlkZW50aXR5IjoiZGV2LnRlY2hzYWdhQHN1cmVwYXNzLmlvIiwibmJmIjoxNjc1NDExNzAzLCJleHAiOjE5OTA3NzE3MDMsInVzZXJfY2xhaW1zIjp7InNjb3BlcyI6WyJ1c2VyIl19fQ.r4XeIMOFEdnb52_xCspvLyiu6ciS5wx4YeIMv8ZyHKI"; // Prepare the authorisation token
                          curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json' , $authorization )); // Inject the token into the header
                          curl_setopt($ch, CURLOPT_URL, $apiURL);
                          // Attach encoded JSON string to the POST fields
                          curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);
                          $resp = curl_exec ( $ch );
                          curl_close ( $ch );
                          $array_data =  json_decode($resp,true);
                          // print_r($array_data); die;
          
                          if($array_data['success'])
                          {
                              //check if ID number is new then insert into DB
                              $checkIDInDB= DB::table('voter_id_check_masters')->where(['voter_id_number'=>$voterid_number])->count();
                              if($checkIDInDB ==0)
                              {
                                  $gender = 'Male';
                                  if($array_data['data']['gender'] == 'F'){
                                      $gender = 'Female';
                                  }
                                  //
                                  $relation_type = NULL;
                                  if($array_data['data']['relation_type'] == 'M'){
                                      $relation_type = 'Mother';
                                  }
                                  if($array_data['data']['relation_type'] == 'F'){
                                      $relation_type = 'Father';
                                  }
                                  if($array_data['data']['relation_type'] == 'W'){
                                      $relation_type = 'Wife';
                                  }
                                  if($array_data['data']['relation_type'] == 'H'){
                                      $relation_type = 'Husband';
                                  }
          
                                  $data = [
                                          'api_client_id'     =>$array_data['data']['client_id'],
                                          'relation_type'     =>$relation_type,
                                          'voter_id_number'   =>$array_data['data']['epic_no'],
                                          'relation_name'     =>$array_data['data']['relation_name'],
                                          'full_name'         =>$array_data['data']['name'],
                                          'gender'            =>$gender,
                                          'age'               =>$array_data['data']['age'],
                                          'dob'               =>$array_data['data']['dob'],
                                          'house_no'          =>$array_data['data']['house_no'],
                                          'area'              =>$array_data['data']['area'],
                                          'state'             =>$array_data['data']['state'],
                                          'is_api_verified'   =>'1',
                                          'is_voter_id_exist' =>'1',
                                          'created_at'        =>date('Y-m-d H:i:s')
                                          ];
                                  DB::table('voter_id_check_masters')->insert($data);
                                  
                                  $master_data = DB::table('voter_id_check_masters')->select('*')->where(['voter_id_number'=>$voterid_number])->first();

                                  //store log
                                  $log_data = [
                                    'parent_id'   =>    $parent_id,
                                    'api_client_id'     =>$array_data['data']['client_id'],
                                    'relation_type'     =>$relation_type,
                                    'voter_id_number'   =>$array_data['data']['epic_no'],
                                    'relation_name'     =>$array_data['data']['relation_name'],
                                    'full_name'         =>$array_data['data']['name'],
                                    'gender'            =>$gender,
                                    'age'               =>$array_data['data']['age'],
                                    'dob'               =>$array_data['data']['dob'],
                                    'house_no'          =>$array_data['data']['house_no'],
                                    'area'              =>$array_data['data']['area'],
                                    'state'             =>$array_data['data']['state'],
                                    'is_verified'       =>'1',
                                    'is_voter_id_exist' =>'1',
                                    'price'             =>$checkprice_db!=NULL?$checkprice_db->price:$price,
                                    'business_id'       =>$business_id,
                                    'candidate_id' => $candidate_id,
                                    'service_id'        =>$jaf->service_id,
                                    'source_reference'  =>'API',
                                    'used_by'           =>'customer',
                                    'user_id'            => $user_id,
                                    'created_at'        =>date('Y-m-d H:i:s')
                                    ];

                                DB::table('voter_id_checks')->insert($log_data);
                              }
          
                              // update the status
                              $jaf_data=DB::table('jaf_form_data')->where(['candidate_id'=>$candidate_id,'service_id'=>$jaf->service_id])->update(['is_api_checked'=>'1','is_api_verified'=>'1','verification_status'=>'success','verified_at'=>date('Y-m-d H:i:s'),'is_insufficiency'=>'0','is_all_insuff_cleared' => 1,'insuff_cleared_by'=>Auth::user()->id,'updated_at'=>date('Y-m-d H:i:s')]); 
                              $jaf_data=TRUE; 

                              $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf->id,'service_id'=>$jaf->service_id,'status'=>'removed'])->first();

                              if($ver_insuff!=NULL)
                              {
                                  $ver_insuff_data=[
                                    'notes' => 'BGV Cleared',
                                    'updated_by' => Auth::user()->id,
                                    'updated_at' => date('Y-m-d H:i:s')
                                  ];

                                  DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf->id,'service_id'=>$jaf->service_id,'status'=>'removed'])->update($ver_insuff_data);

                                  $ver_id=$ver_insuff->id;
                              }
                              else
                              {
                                $ver_insuff_data=[
                                  'parent_id' => $parent_id,
                                  'business_id' => $business_id,
                                  'coc_id' => $jaf_voterid->business_id,
                                  'candidate_id' => $candidate_id,
                                  'service_id'  => $jaf_voterid->service_id,
                                  'jaf_form_data_id' => $jaf_voterid->id,
                                  'item_number' => $jaf_voterid->check_item_number,
                                  'activity_type'=> 'jaf-insuff',
                                  'status'=>'removed',
                                  'notes' => 'BGV Cleared',
                                  'created_by'   => Auth::user()->id,
                                  'created_at'   => date('Y-m-d H:i:s'),
                                  'updated_at' => date('Y-m-d H:i:s')
                                ];
                          
                                DB::table('verification_insufficiency')->insert($ver_insuff_data);
                              }

                              $insuff_log_data=[
                                'parent_id' => $parent_id,
                                'business_id' => $business_id,
                                'coc_id' => $jaf_voterid->business_id,
                                'candidate_id' => $candidate_id,
                                'service_id'  => $jaf->service_id,
                                'jaf_form_data_id' => $jaf_voterid->id,
                                'item_number' => $jaf_voterid->check_item_number,
                                'activity_type'=> 'jaf-insuff',
                                'status'=>'removed',
                                'notes' => 'BGV Cleared',
                                'created_by'   => Auth::user()->id,
                                'created_at'   => date('Y-m-d H:i:s'),
                              ];
                        
                              DB::table('insufficiency_logs')->insert($insuff_log_data);

                          }else{
                              //update insuff
                              $jaf_data=DB::table('jaf_form_data')->where(['candidate_id'=>$candidate_id,'service_id'=>$jaf->service_id])->update(['is_api_checked'=>'1','is_api_verified'=>'0','is_insufficiency'=>'1','verification_status'=>'failed','verified_at'=>date('Y-m-d H:i:s')]);    

                              // $jaf_data=TRUE; 

                              $jaf_data_s=DB::table('jaf_form_data')->where(['candidate_id'=>$candidate_id,'service_id'=>$jaf->service_id])->first();
                              $insuff_log_data=[
                                'parent_id' => $parent_id,
                                'business_id' => $business_id,
                                'coc_id' => $jaf_voterid->business_id,
                                'candidate_id' => $candidate_id,
                                'service_id'  => $jaf->service_id,
                                'jaf_form_data_id' => $jaf_voterid->id,
                                'item_number' => $jaf_voterid->check_item_number,
                                'activity_type'=> 'jaf-insuff',
                                'status'=>'failed',
                                'notes' => 'BGV Failed',
                                'created_by'   => Auth::user()->id,
                                'created_at'   => date('Y-m-d H:i:s'),
                              ];
                        
                              DB::table('insufficiency_logs')->insert($insuff_log_data);

                              $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf->id,'service_id'=>$jaf->service_id,'status'=>'raised'])->first();

                              if($ver_insuff!=NULL)
                              {
                                  $ver_insuff_data=[
                                    'notes' => 'BGV Failed',
                                    'updated_by' => Auth::user()->id,
                                    'updated_at' => date('Y-m-d H:i:s')
                                  ];

                                  DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf->id,'service_id'=>$jaf->service_id,'status'=>'raised'])->update($ver_insuff_data);

                                  $ver_id=$ver_insuff->id;
                              }
                              else
                              {
                                $ver_insuff_data=[
                                  'parent_id' => $parent_id,
                                  'business_id' => $business_id,
                                  'coc_id' => $jaf->business_id,
                                  'candidate_id' => $candidate_id,
                                  'service_id'  => $jaf->service_id,
                                  'jaf_form_data_id' => $jaf->id,
                                  'item_number' => $jaf->check_item_number,
                                  'activity_type'=> 'jaf-insuff',
                                  'status'=>'raised',
                                  'notes' => 'BGV Failed',
                                  'created_by'   => Auth::user()->id,
                                  'created_at'   => date('Y-m-d H:i:s'),
                                ];
                          
                                $ver_id = DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);
                              }


                          }
                      
                  }
              }
              // ./service
              else if($jaf->service_id == 7){

                $jaf_rc = DB::table('jaf_form_data')->select('id','business_id','form_data','service_id','check_item_number')->where(['candidate_id'=>$candidate_id,'service_id'=>$jaf->service_id])->first();

                    $rc_number = "";
                    // $business_id = $jaf_rc->business_id; 
                    $jaf_array = json_decode($jaf_rc->form_data, true);
                    // print_r($jaf_array);
                    foreach($jaf_array as $input){
                        if(array_key_exists('RC Number',$input)){
                          $rc_number = $input['RC Number'];
                        }
                    }
                
                    //check first into master table
                    $master_data = DB::table('rc_check_masters')->select('*')->where(['rc_number'=>$rc_number])->first();
                    if($master_data !=null){

                      $log_data = [
                        'parent_id'   =>    $parent_id,
                        'business_id'       => $business_id,
                        'candidate_id' => $candidate_id,
                        'service_id'        =>$jaf->service_id,
                        'source_type'       => 'SystemDb',
                        'api_client_id'     =>$master_data->api_client_id,
                        'rc_number'         =>$master_data->rc_number,
                        'registration_date' =>$master_data->registration_date,
                        'owner_name'        =>$master_data->owner_name,
                        'present_address'   =>$master_data->present_address,
                        'permanent_address'    =>$master_data->permanent_address,
                        'mobile_number'        =>$master_data->mobile_number,
                        'vehicle_category'     =>$master_data->vehicle_category,
                        'vehicle_chasis_number' =>$master_data->vehicle_chasis_number,
                        'vehicle_engine_number' =>$master_data->vehicle_engine_number,
                        'maker_description'     =>$master_data->maker_description,
                        'maker_model'           =>$master_data->maker_model,
                        'body_type'             =>$master_data->body_type,
                        'fuel_type'             =>$master_data->fuel_type,
                        'color'                 =>$master_data->color,
                        'norms_type'            =>$master_data->norms_type,
                        'fit_up_to'             =>$master_data->fit_up_to,
                        'financer'              =>$master_data->financer,
                        'insurance_company'     =>$master_data->insurance_company,
                        'insurance_policy_number'=>$master_data->insurance_policy_number,
                        'insurance_upto'         =>$master_data->insurance_upto,
                        'manufacturing_date'     =>$master_data->manufacturing_date,
                        'registered_at'          =>$master_data->registered_at,
                        'latest_by'              =>$master_data->latest_by,
                        'less_info'              =>$master_data->less_info,
                        'tax_upto'               =>$master_data->tax_upto,
                        'cubic_capacity'         =>$master_data->cubic_capacity,
                        'vehicle_gross_weight'   =>$master_data->vehicle_gross_weight,
                        'no_cylinders'           =>$master_data->no_cylinders,
                        'seat_capacity'          =>$master_data->seat_capacity,
                        'sleeper_capacity'       =>$master_data->sleeper_capacity,
                        'standing_capacity'      =>$master_data->standing_capacity,
                        'wheelbase'              =>$master_data->wheelbase,
                        'unladen_weight'         =>$master_data->unladen_weight,
                        'vehicle_category_description'         =>$master_data->vehicle_category_description,
                        'pucc_number'               =>$master_data->pucc_number,
                        'pucc_upto'                 =>$master_data->pucc_upto,
                        'masked_name'           =>$master_data->masked_name,
                        'is_verified'           =>'1',
                        'is_rc_exist'           =>'1',
                        'price'             =>$checkprice_db!=NULL?$checkprice_db->price:$price,
                        'used_by'               =>'customer',
                        'user_id'            => $user_id,
                        'created_at'            =>date('Y-m-d H:i:s')
                        ];
    
                        DB::table('rc_checks')->insert($log_data);
                        // update the status
                        $jaf_data=  DB::table('jaf_form_data')->where(['candidate_id'=>$candidate_id,'service_id'=>$jaf->service_id])->update(['is_api_checked'=>'1','is_api_verified'=>'1','verification_status'=>'success','verified_at'=>date('Y-m-d H:i:s'),'is_insufficiency'=>'0','is_all_insuff_cleared' => 1,'insuff_cleared_by'=>Auth::user()->id,'updated_at'=>date('Y-m-d H:i:s')]); 
                        $data = $master_data;

                        $jaf_data=TRUE; 

                        $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf->id,'service_id'=>$jaf->service_id,'status'=>'removed'])->first();

                        if($ver_insuff!=NULL)
                        {
                            $ver_insuff_data=[
                              'notes' => 'BGV Cleared',
                              'updated_by' => Auth::user()->id,
                              'updated_at' => date('Y-m-d H:i:s')
                            ];

                            DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf->id,'service_id'=>$jaf->service_id,'status'=>'removed'])->update($ver_insuff_data);

                            $ver_id=$ver_insuff->id;
                        }
                        else
                        {
                          $ver_insuff_data=[
                            'parent_id' => $parent_id,
                            'business_id' => $business_id,
                            'coc_id' => $jaf_rc->business_id,
                            'candidate_id' => $candidate_id,
                            'service_id'  => $jaf_rc->service_id,
                            'jaf_form_data_id' => $jaf_rc->id,
                            'item_number' => $jaf_rc->check_item_number,
                            'activity_type'=> 'jaf-insuff',
                            'status'=>'removed',
                            'notes' => 'BGV Cleared',
                            'created_by'   => Auth::user()->id,
                            'created_at'   => date('Y-m-d H:i:s'),
                            'updated_at' => date('Y-m-d H:i:s')
                          ];
                    
                          DB::table('verification_insufficiency')->insert($ver_insuff_data);

                        }

                        $insuff_log_data=[
                          'parent_id' => $parent_id,
                          'business_id' => $business_id,
                          'coc_id' => $jaf_rc->business_id,
                          'candidate_id' => $candidate_id,
                          'service_id'  => $jaf->service_id,
                          'jaf_form_data_id' => $jaf_rc->id,
                          'item_number' => $jaf_rc->check_item_number,
                          'activity_type'=> 'jaf-insuff',
                          'status'=>'removed',
                          'notes' => 'BGV Cleared',
                          'created_by'   => Auth::user()->id,
                          'created_at'   => date('Y-m-d H:i:s'),
                        ];
                  
                        DB::table('insufficiency_logs')->insert($insuff_log_data);
    
                    }
                    else{
                        //check from live API
                        // Setup request to send json via POST
                        $data = array(
                            'id_number'    => $rc_number,
                            'async'         => true,
                        );
                        $payload = json_encode($data);
                        $apiURL = "https://kyc-api.aadhaarkyc.io/api/v1/rc/rc";
        
                        $ch = curl_init();
                        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);                
                        curl_setopt ( $ch, CURLOPT_POST, 1 );
                        $authorization = "Authorization: Bearer ".env('SUREPASS_PRODUCTION_TOKEN');
                        //$authorization = "Authorization: Bearer ".env('SUREPASS_PRODUCTION_TOKEN'); // Prepare the authorisation token
                        curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json' , $authorization )); // Inject the token into the header
                        curl_setopt($ch, CURLOPT_URL, $apiURL);
                        // Attach encoded JSON string to the POST fields
                        curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);
                        $resp = curl_exec ( $ch );
                        curl_close ( $ch );
                        $array_data =  json_decode($resp,true);
                        // print_r($array_data); die;
        
                        if($array_data['success'])
                        {
                            //check if ID number is new then insert into DB
                            $checkIDInDB= DB::table('rc_check_masters')->where(['rc_number'=>$rc_number])->count();
                            if($checkIDInDB ==0)
                            {
                            
                                $data = [
                                        'api_client_id'     =>$array_data['data']['client_id'],
                                        'rc_number'         =>$array_data['data']['rc_number'],
                                        'registration_date' =>$array_data['data']['registration_date'],
                                        'owner_name'        =>$array_data['data']['owner_name'],
                                        'present_address'   =>$array_data['data']['present_address'],
                                        'permanent_address'    =>$array_data['data']['permanent_address'],
                                        'mobile_number'        =>$array_data['data']['mobile_number'],
                                        'vehicle_category'     =>$array_data['data']['vehicle_category'],
                                        'vehicle_chasis_number' =>$array_data['data']['vehicle_chasi_number'],
                                        'vehicle_engine_number' =>$array_data['data']['vehicle_engine_number'],
                                        'maker_description'     =>$array_data['data']['maker_description'],
                                        'maker_model'           =>$array_data['data']['maker_model'],
                                        'body_type'             =>$array_data['data']['body_type'],
                                        'fuel_type'             =>$array_data['data']['fuel_type'],
                                        'color'                 =>$array_data['data']['color'],
                                        'norms_type'            =>$array_data['data']['norms_type'],
                                        'fit_up_to'             =>$array_data['data']['fit_up_to'],
                                        'financer'              =>$array_data['data']['financer'],
                                        'insurance_company'     =>$array_data['data']['insurance_company'],
                                        'insurance_policy_number'=>$array_data['data']['insurance_policy_number'],
                                        'insurance_upto'         =>$array_data['data']['insurance_upto'],
                                        'manufacturing_date'     =>$array_data['data']['manufacturing_date'],
                                        'registered_at'          =>$array_data['data']['registered_at'],
                                        'latest_by'              =>$array_data['data']['latest_by'],
                                        'less_info'              =>$array_data['data']['less_info'],
                                        'tax_upto'               =>$array_data['data']['tax_upto'],
                                        'cubic_capacity'         =>$array_data['data']['cubic_capacity'],
                                        'vehicle_gross_weight'   =>$array_data['data']['vehicle_gross_weight'],
                                        'no_cylinders'           =>$array_data['data']['no_cylinders'],
                                        'seat_capacity'          =>$array_data['data']['seat_capacity'],
                                        'sleeper_capacity'       =>$array_data['data']['sleeper_capacity'],
                                        'standing_capacity'      =>$array_data['data']['standing_capacity'],
                                        'wheelbase'              =>$array_data['data']['wheelbase'],
                                        'unladen_weight'         =>$array_data['data']['unladen_weight'],
                                        'vehicle_category_description'         =>$array_data['data']['vehicle_category_description'],
                                        'pucc_number'               =>$array_data['data']['pucc_number'],
                                        'pucc_upto'                 =>$array_data['data']['pucc_upto'],
                                        'masked_name'           =>$array_data['data']['masked_name'],
                                        'is_api_verified'           =>'1',
                                        'is_rc_exist'           =>'1',
                                        'created_at'            =>date('Y-m-d H:i:s')
                                        ];
        
                                DB::table('rc_check_masters')->insert($data);
                                
                                $master_data = DB::table('rc_check_masters')->select('*')->where(['rc_number'=>$rc_number])->first();

                                $log_data = [
                                  'parent_id'   =>    $parent_id,
                                  'business_id'       => $business_id,
                                  'candidate_id' => $candidate_id,
                                  'service_id'        =>$jaf->service_id,
                                  'source_type'       => 'API',
                                  'api_client_id'     =>$master_data->api_client_id,
                                  'rc_number'         =>$master_data->rc_number,
                                  'registration_date' =>$master_data->registration_date,
                                  'owner_name'        =>$master_data->owner_name,
                                  'present_address'   =>$master_data->present_address,
                                  'permanent_address'    =>$master_data->permanent_address,
                                  'mobile_number'        =>$master_data->mobile_number,
                                  'vehicle_category'     =>$master_data->vehicle_category,
                                  'vehicle_chasis_number' =>$master_data->vehicle_chasis_number,
                                  'vehicle_engine_number' =>$master_data->vehicle_engine_number,
                                  'maker_description'     =>$master_data->maker_description,
                                  'maker_model'           =>$master_data->maker_model,
                                  'body_type'             =>$master_data->body_type,
                                  'fuel_type'             =>$master_data->fuel_type,
                                  'color'                 =>$master_data->color,
                                  'norms_type'            =>$master_data->norms_type,
                                  'fit_up_to'             =>$master_data->fit_up_to,
                                  'financer'              =>$master_data->financer,
                                  'insurance_company'     =>$master_data->insurance_company,
                                  'insurance_policy_number'=>$master_data->insurance_policy_number,
                                  'insurance_upto'         =>$master_data->insurance_upto,
                                  'manufacturing_date'     =>$master_data->manufacturing_date,
                                  'registered_at'          =>$master_data->registered_at,
                                  'latest_by'              =>$master_data->latest_by,
                                  'less_info'              =>$master_data->less_info,
                                  'tax_upto'               =>$master_data->tax_upto,
                                  'cubic_capacity'         =>$master_data->cubic_capacity,
                                  'vehicle_gross_weight'   =>$master_data->vehicle_gross_weight,
                                  'no_cylinders'           =>$master_data->no_cylinders,
                                  'seat_capacity'          =>$master_data->seat_capacity,
                                  'sleeper_capacity'       =>$master_data->sleeper_capacity,
                                  'standing_capacity'      =>$master_data->standing_capacity,
                                  'wheelbase'              =>$master_data->wheelbase,
                                  'unladen_weight'         =>$master_data->unladen_weight,
                                  'vehicle_category_description'         =>$master_data->vehicle_category_description,
                                  'pucc_number'               =>$master_data->pucc_number,
                                  'pucc_upto'                 =>$master_data->pucc_upto,
                                  'masked_name'           =>$master_data->masked_name,
                                  'is_verified'           =>'1',
                                  'is_rc_exist'           =>'1',
                                  'price'             =>$checkprice_db!=NULL?$checkprice_db->price:$price,
                                  'used_by'               =>'customer',
                                  'user_id'            => $user_id,
                                  'created_at'            =>date('Y-m-d H:i:s')
                                  ];
              
                                  DB::table('rc_checks')->insert($log_data);
                            }
        
                            // update the status
                            $jaf_data=  DB::table('jaf_form_data')->where(['candidate_id'=>$candidate_id,'service_id'=>$jaf->service_id])->update(['is_api_checked'=>'1','is_api_verified'=>'1','verification_status'=>'success','verified_at'=>date('Y-m-d H:i:s'),'is_insufficiency'=>'0','is_all_insuff_cleared' => 1,'insuff_cleared_by'=>Auth::user()->id,'updated_at'=>date('Y-m-d H:i:s')]); 
                            
                            $jaf_data=TRUE; 

                            $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf->id,'service_id'=>$jaf->service_id,'status'=>'removed'])->first();

                            if($ver_insuff!=NULL)
                            {
                                $ver_insuff_data=[
                                  'notes' => 'BGV Cleared',
                                  'updated_by' => Auth::user()->id,
                                  'updated_at' => date('Y-m-d H:i:s')
                                ];

                                DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf->id,'service_id'=>$jaf->service_id,'status'=>'removed'])->update($ver_insuff_data);

                                $ver_id=$ver_insuff->id;
                            }
                            else
                            {
                              $ver_insuff_data=[
                                'parent_id' => $parent_id,
                                'business_id' => $business_id,
                                'coc_id' => $jaf_rc->business_id,
                                'candidate_id' => $candidate_id,
                                'service_id'  => $jaf_rc->service_id,
                                'jaf_form_data_id' => $jaf_rc->id,
                                'item_number' => $jaf_rc->check_item_number,
                                'activity_type'=> 'jaf-insuff',
                                'status'=>'removed',
                                'notes' => 'BGV Cleared',
                                'created_by'   => Auth::user()->id,
                                'created_at'   => date('Y-m-d H:i:s'),
                                'updated_at' => date('Y-m-d H:i:s')
                              ];
                        
                              DB::table('verification_insufficiency')->insert($ver_insuff_data);
                            }

                            $insuff_log_data=[
                              'parent_id' => $parent_id,
                              'business_id' => $business_id,
                              'coc_id' => $jaf_rc->business_id,
                              'candidate_id' => $candidate_id,
                              'service_id'  => $jaf->service_id,
                              'jaf_form_data_id' => $jaf_rc->id,
                              'item_number' => $jaf_rc->check_item_number,
                              'activity_type'=> 'jaf-insuff',
                              'status'=>'removed',
                              'notes' => 'BGV Cleared',
                              'created_by'   => Auth::user()->id,
                              'created_at'   => date('Y-m-d H:i:s'),
                            ];
                      
                            DB::table('insufficiency_logs')->insert($insuff_log_data);


                        }else{
                            //update insuff
                            $jaf_data=  DB::table('jaf_form_data')->where(['candidate_id'=>$candidate_id,'service_id'=>$jaf->service_id])->update(['is_api_checked'=>'1','is_api_verified'=>'0','is_insufficiency'=>'1','verification_status'=>'failed','verified_at'=>date('Y-m-d H:i:s')]); 

                            // $jaf_data=TRUE; 

                            $jaf_data_s=DB::table('jaf_form_data')->where(['candidate_id'=>$candidate_id,'service_id'=>$jaf->service_id])->first();
                            $insuff_log_data=[
                              'parent_id' => $parent_id,
                              'business_id' => $business_id,
                              'coc_id' => $jaf_rc->business_id,
                              'candidate_id' => $candidate_id,
                              'service_id'  => $jaf->service_id,
                              'jaf_form_data_id' => $jaf_rc->id,
                              'item_number' => $jaf_rc->check_item_number,
                              'activity_type'=> 'jaf-insuff',
                              'status'=>'failed',
                              'notes' => 'BGV Failed',
                              'created_by'   => Auth::user()->id,
                              'created_at'   => date('Y-m-d H:i:s'),
                            ];
                      
                            DB::table('insufficiency_logs')->insert($insuff_log_data);

                            $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf->id,'service_id'=>$jaf->service_id,'status'=>'raised'])->first();

                              if($ver_insuff!=NULL)
                              {
                                  $ver_insuff_data=[
                                    'notes' => 'BGV Failed',
                                    'updated_by' => Auth::user()->id,
                                    'updated_at' => date('Y-m-d H:i:s')
                                  ];

                                  DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf->id,'service_id'=>$jaf->service_id,'status'=>'raised'])->update($ver_insuff_data);

                                  $ver_id=$ver_insuff->id;
                              }
                              else
                              {
                                $ver_insuff_data=[
                                  'parent_id' => $parent_id,
                                  'business_id' => $business_id,
                                  'coc_id' => $jaf->business_id,
                                  'candidate_id' => $candidate_id,
                                  'service_id'  => $jaf->service_id,
                                  'jaf_form_data_id' => $jaf->id,
                                  'item_number' => $jaf->check_item_number,
                                  'activity_type'=> 'jaf-insuff',
                                  'status'=>'raised',
                                  'notes' => 'BGV Failed',
                                  'created_by'   => Auth::user()->id,
                                  'created_at'   => date('Y-m-d H:i:s'),
                                ];
                          
                                $ver_id = DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);
                              }
                        }
                      
                      // if($is_updated){  
                      //     //generate report here 
                      //     // $this->generateCandidateReport($candidate_id);
                      //     return response()->json([
                      //     'status'=>'ok',
                      //     'message' => 'updated',                
                      //     ], 200);
                      // }
                      // else{
                      //     return response()->json([
                      //     'status' =>'no',
                      //     ], 200);
                      // }
                    }

              }

              //service  
              else if($jaf->service_id == 9){
                $jaf_dl = DB::table('jaf_form_data')->select('id','business_id','form_data','service_id','check_item_number')->where(['candidate_id'=>$candidate_id,'service_id'=>$jaf->service_id])->first();

                $dl_number = "";
                // $business_id = $jaf_dl->business_id; 
                $jaf_array = json_decode($jaf_dl->form_data, true);
                // print_r($jaf_array);
                foreach($jaf_array as $input){
                    if(array_key_exists('DL Number',$input)){
                      $dl_number = $input['DL Number'];
                    }
                }
            
                $dl_number_input      = $dl_number;
                $dl_raw               = preg_replace('/[^A-Za-z0-9\ ]/', '', $dl_number_input);
                $final_dl_number      = str_replace(' ', '', $dl_raw);

                //check first into master table
                $master_data = DB::table('dl_check_masters')->select('*')->where(['dl_number'=>$final_dl_number])->first();
                
                if($master_data !=null){
                  $log_data = [
                    'parent_id'   =>    $parent_id,
                    'business_id'       => $business_id,
                    'candidate_id' => $candidate_id,
                    'service_id'        =>$jaf->service_id,
                    'source_type'       =>'SystemDb',
                    'api_client_id'     =>$master_data->api_client_id,
                    'dl_number'         =>$master_data->dl_number,
                    'name'              =>$master_data->name,
                    'permanent_address' =>$master_data->permanent_address,
                    'temporary_address' =>$master_data->temporary_address,
                    'permanent_zip'     =>$master_data->permanent_zip,
                    'temporary_zip'     =>$master_data->temporary_zip,
                    'state'             =>$master_data->state,
                    'citizenship'       =>$master_data->citizenship,
                    'ola_name'          =>$master_data->ola_name,
                    'ola_code'          =>$master_data->ola_code,
                    'gender'            =>$master_data->gender,
                    'father_or_husband_name' =>$master_data->father_or_husband_name,
                    'dob'               =>$master_data->dob,
                    'doe'               =>$master_data->doe,
                    'transport_doe'     =>$master_data->transport_doe,
                    'doi'               =>$master_data->doi,
                    'is_verified'       =>'1',
                    'is_rc_exist'       =>'1',
                    'price'             =>$checkprice_db!=NULL?$checkprice_db->price:$price,
                    'used_by'           =>'customer',
                    'user_id'            => $user_id,
                    'created_at'        =>date('Y-m-d H:i:s')
                    ];
                
                    DB::table('dl_checks')->insert($log_data);
                    // update the status
                    $jaf_data=DB::table('jaf_form_data')->where(['candidate_id'=>$candidate_id,'service_id'=>$jaf->service_id])->update(['is_api_checked'=>'1','is_api_verified'=>'1','verification_status'=>'success','verified_at'=>date('Y-m-d H:i:s'),'is_insufficiency'=>'0','is_all_insuff_cleared' => 1,'insuff_cleared_by'=>Auth::user()->id,'updated_at'=>date('Y-m-d H:i:s')]); 

                    $jaf_data=TRUE;

                    $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf->id,'service_id'=>$jaf->service_id,'status'=>'removed'])->first();

                    if($ver_insuff!=NULL)
                    {
                        $ver_insuff_data=[
                          'notes' => 'BGV Cleared',
                          'updated_by' => Auth::user()->id,
                          'updated_at' => date('Y-m-d H:i:s')
                        ];

                        DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf->id,'service_id'=>$jaf->service_id,'status'=>'removed'])->update($ver_insuff_data);

                        $ver_id=$ver_insuff->id;
                    }
                    else
                    {
                      $ver_insuff_data=[
                        'parent_id' => $parent_id,
                        'business_id' => $business_id,
                        'coc_id' => $jaf_dl->business_id,
                        'candidate_id' => $candidate_id,
                        'service_id'  => $jaf_dl->service_id,
                        'jaf_form_data_id' => $jaf_dl->id,
                        'item_number' => $jaf_dl->check_item_number,
                        'activity_type'=> 'jaf-insuff',
                        'status'=>'removed',
                        'notes' => 'BGV Cleared',
                        'created_by'   => Auth::user()->id,
                        'created_at'   => date('Y-m-d H:i:s'),
                        'updated_at' => date('Y-m-d H:i:s')
                      ];
                
                      DB::table('verification_insufficiency')->insert($ver_insuff_data);
                    }

                    $insuff_log_data=[
                      'parent_id' => $parent_id,
                      'business_id' => $business_id,
                      'coc_id' => $jaf_dl->business_id,
                      'candidate_id' => $candidate_id,
                      'service_id'  => $jaf->service_id,
                      'jaf_form_data_id' => $jaf_dl->id,
                      'item_number' => $jaf_dl->check_item_number,
                      'activity_type'=> 'jaf-insuff',
                      'status'=>'removed',
                      'notes' => 'BGV Cleared',
                      'created_by'   => Auth::user()->id,
                      'created_at'   => date('Y-m-d H:i:s'),
                    ];
              
                    DB::table('insufficiency_logs')->insert($insuff_log_data);

                }
                else{
                    //check from live API
                    // Setup request to send json via POST
                    $data = array(
                        'id_number'    => $dl_number,
                        'async'         => true,
                    );
                    $payload = json_encode($data);
                    $apiURL = "https://kyc-api.aadhaarkyc.io/api/v1/driving-license/driving-license";

                    $ch = curl_init();
                    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);                
                    curl_setopt ( $ch, CURLOPT_POST, 1 );
                    $authorization = "Authorization: Bearer ".env('SUREPASS_PRODUCTION_TOKEN'); // Prepare the authorisation token
                    curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json' , $authorization )); // Inject the token into the header
                    curl_setopt($ch, CURLOPT_URL, $apiURL);
                    // Attach encoded JSON string to the POST fields
                    curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);
                    $resp = curl_exec ( $ch );
                    curl_close ( $ch );
                    $array_data =  json_decode($resp,true);
                    // print_r($array_data); die;

                    if($array_data['success'])
                    {
                        //check if ID number is new then insert into DB
                        $checkIDInDB= DB::table('dl_check_masters')->where(['dl_number'=>$final_dl_number])->count();
                        if($checkIDInDB ==0)
                        {
                            $gender = 'Male';
                            if($array_data['data']['gender'] == 'F'){
                                $gender = 'Female';
                            }

                            $dl_number      = $array_data['data']['license_number'];
                            $dl_raw         = preg_replace('/[^A-Za-z0-9\ ]/', '', $dl_number);
                            $final_number   = str_replace(' ', '', $dl_raw);

                            //
                            $data = [
                                    'api_client_id'     =>$array_data['data']['client_id'],
                                    'dl_number'         =>$final_number,
                                    'name'              =>$array_data['data']['name'],
                                    'permanent_address' =>$array_data['data']['permanent_address'],
                                    'temporary_address' =>$array_data['data']['temporary_address'],
                                    'permanent_zip'     =>$array_data['data']['permanent_zip'],
                                    'temporary_zip'     =>$array_data['data']['temporary_zip'],
                                    'state'             =>$array_data['data']['state'],
                                    'citizenship'       =>$array_data['data']['citizenship'],
                                    'ola_name'          =>$array_data['data']['ola_name'],
                                    'ola_code'          =>$array_data['data']['ola_code'],
                                    'gender'            =>$gender,
                                    'father_or_husband_name' =>$array_data['data']['father_or_husband_name'],
                                    'dob'               =>$array_data['data']['dob'],
                                    'doe'               =>$array_data['data']['doe'],
                                    'transport_doe'     =>$array_data['data']['transport_doe'],
                                    'doi'               =>$array_data['data']['doi'],
                                    'is_api_verified'       =>'1',
                                    'is_rc_exist'       =>'1',
                                    'created_at'        =>date('Y-m-d H:i:s')
                                    ];
                                
                                DB::table('dl_check_masters')->insert($data);
                            
                            $master_data = DB::table('dl_check_masters')->select('*')->where(['dl_number'=>$final_dl_number])->first();

                            $log_data = [
                              'parent_id'   =>    $parent_id,
                              'business_id'       => $business_id,
                              'candidate_id' => $candidate_id,
                              'service_id'        =>$jaf->service_id,
                              'source_type'       =>'API',
                              'api_client_id'     =>$master_data->api_client_id,
                              'dl_number'         =>$master_data->dl_number,
                              'name'              =>$master_data->name,
                              'permanent_address' =>$master_data->permanent_address,
                              'temporary_address' =>$master_data->temporary_address,
                              'permanent_zip'     =>$master_data->permanent_zip,
                              'temporary_zip'     =>$master_data->temporary_zip,
                              'state'             =>$master_data->state,
                              'citizenship'       =>$master_data->citizenship,
                              'ola_name'          =>$master_data->ola_name,
                              'ola_code'          =>$master_data->ola_code,
                              'gender'            =>$master_data->gender,
                              'father_or_husband_name' =>$master_data->father_or_husband_name,
                              'dob'               =>$master_data->dob,
                              'doe'               =>$master_data->doe,
                              'transport_doe'     =>$master_data->transport_doe,
                              'doi'               =>$master_data->doi,
                              'is_verified'       =>'1',
                              'is_rc_exist'       =>'1',
                              'price'             =>$checkprice_db!=NULL?$checkprice_db->price:$price,
                              'used_by'           =>'customer',
                              'user_id'            => $user_id,
                              'created_at'        =>date('Y-m-d H:i:s')
                              ];
                          
                          DB::table('dl_checks')->insert($log_data);
                        }
                        // update the status
                        $jaf_data=DB::table('jaf_form_data')->where(['candidate_id'=>$candidate_id,'service_id'=>$jaf->service_id])->update(['is_api_checked'=>'1','is_api_verified'=>'1','verification_status'=>'success','verified_at'=>date('Y-m-d H:i:s'),'is_insufficiency'=>'0','is_all_insuff_cleared' => 1,'insuff_cleared_by'=>Auth::user()->id,'updated_at'=>date('Y-m-d H:i:s')]); 

                        $jaf_data=TRUE;
                        
                        $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf->id,'service_id'=>$jaf->service_id,'status'=>'removed'])->first();

                        if($ver_insuff!=NULL)
                        {
                            $ver_insuff_data=[
                              'notes' => 'BGV Cleared',
                              'updated_by' => Auth::user()->id,
                              'updated_at' => date('Y-m-d H:i:s')
                            ];

                            DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf->id,'service_id'=>$jaf->service_id,'status'=>'removed'])->update($ver_insuff_data);

                            $ver_id=$ver_insuff->id;
                        }
                        else
                        {
                          $ver_insuff_data=[
                            'parent_id' => $parent_id,
                            'business_id' => $business_id,
                            'coc_id' => $jaf_dl->business_id,
                            'candidate_id' => $candidate_id,
                            'service_id'  => $jaf_dl->service_id,
                            'jaf_form_data_id' => $jaf_dl->id,
                            'item_number' => $jaf_dl->check_item_number,
                            'activity_type'=> 'jaf-insuff',
                            'status'=>'removed',
                            'notes' => 'BGV Cleared',
                            'created_by'   => Auth::user()->id,
                            'created_at'   => date('Y-m-d H:i:s'),
                            'updated_at' => date('Y-m-d H:i:s')
                          ];
                    
                          DB::table('verification_insufficiency')->insert($ver_insuff_data);
                        }

                        $insuff_log_data=[
                          'parent_id' => $parent_id,
                          'business_id' => $business_id,
                          'coc_id' => $jaf_dl->business_id,
                          'candidate_id' => $candidate_id,
                          'service_id'  => $jaf->service_id,
                          'jaf_form_data_id' => $jaf_dl->id,
                          'item_number' => $jaf_dl->check_item_number,
                          'activity_type'=> 'jaf-insuff',
                          'status'=>'removed',
                          'notes' => 'BGV Cleared',
                          'created_by'   => Auth::user()->id,
                          'created_at'   => date('Y-m-d H:i:s'),
                        ];
                  
                        DB::table('insufficiency_logs')->insert($insuff_log_data);
                  
                  
                        
                    }else{
                        //update insuff
                        $jaf_data=DB::table('jaf_form_data')->where(['candidate_id'=>$candidate_id,'service_id'=>$jaf->service_id])->update(['is_api_checked'=>'1','is_api_verified'=>'0','is_insufficiency'=>'1','verification_status'=>'failed','verified_at'=>date('Y-m-d H:i:s')]); 

                        // $jaf_data=TRUE; 

                        $jaf_data_s=DB::table('jaf_form_data')->where(['candidate_id'=>$candidate_id,'service_id'=>$jaf->service_id])->first();
                        $insuff_log_data=[
                          'parent_id' => $parent_id,
                          'business_id' => $business_id,
                          'coc_id' => $jaf_dl->business_id,
                          'candidate_id' => $candidate_id,
                          'service_id'  => $jaf->service_id,
                          'jaf_form_data_id' => $jaf_dl->id,
                          'item_number' => $jaf_dl->check_item_number,
                          'activity_type'=> 'jaf-insuff',
                          'status'=>'failed',
                          'notes' => 'BGV Failed',
                          'created_by'   => Auth::user()->id,
                          'created_at'   => date('Y-m-d H:i:s'),
                        ];
                  
                        DB::table('insufficiency_logs')->insert($insuff_log_data);
                        
                    }

                    // if($is_updated){  
                    //   //generate report here 
                    //   // $this->generateCandidateReport($candidate_id);
                    //   return response()->json([
                    //   'status'=>'ok',
                    //   'message' => 'updated',                
                    //   ], 200);
                    // }
                    // else{
                    //     return response()->json([
                    //     'status' =>'no',
                    //     ], 200);
                    // }
                  
                }
              }
              // ./service

              // /service
              else if($jaf->service_id == 8){

                $jaf_passport = DB::table('jaf_form_data')->select('id','business_id','form_data','service_id','check_item_number')->where(['candidate_id'=>$candidate_id,'service_id'=>$jaf->service_id])->first();

                // $passport_file_no = $request->input('id_number');
                $passport_file_no="";
                $dob = "";
                // $business_id = $jaf_passport->business_id; 
                $jaf_array = json_decode($jaf_passport->form_data, true);
                // print_r($jaf_array);
                foreach($jaf_array as $input){
                    if(array_key_exists('File Number',$input)){
                      $passport_file_no = $input['File Number'];
                    }

                    if(array_key_exists('Date of Expire',$input) ){
                      $dob = $input['Date of Expire'];
                    }
                }

                //check first into master table
                $master_data = DB::table('passport_check_masters')->select('*')->where(['file_number'=>$passport_file_no])->first();
                if($master_data !=null){


                  $log_data = [
                    'parent_id'   =>    $parent_id,
                    'business_id'       =>$business_id,
                    'candidate_id' => $candidate_id,
                    'service_id'        =>$jaf->service_id,
                    'source_type'       =>'SystemDb',
                    'api_client_id'     =>$master_data->api_client_id,
                    'passport_number'   =>$master_data->passport_number,
                    'full_name'         =>$master_data->full_name,
                    'file_number'       =>$master_data->file_number,
                    'dob'               => $master_data->dob,
                    'date_of_application'=>$master_data->date_of_application,
                    'is_verified'       =>'1',
                    'is_passport_exist' =>'1',
                    'price'             =>$checkprice_db!=NULL?$checkprice_db->price:$price,
                    'used_by'           => 'customer',
                    'user_id'            => $user_id,
                    'created_at'        =>date('Y-m-d H:i:s')
                    ];

                    DB::table('passport_checks')->insert($log_data);
                    // update the status
                    $jaf_data =  DB::table('jaf_form_data')->where(['candidate_id'=>$candidate_id,'service_id'=>$jaf->service_id])->update(['is_api_checked'=>'1','is_api_verified'=>'1','verification_status'=>'success','verified_at'=>date('Y-m-d H:i:s'),'is_insufficiency'=>'0','is_all_insuff_cleared' => 1,'insuff_cleared_by'=>Auth::user()->id,'updated_at'=>date('Y-m-d H:i:s')]); 

                    $jaf_data=TRUE; 

                    $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf->id,'service_id'=>$jaf->service_id,'status'=>'removed'])->first();

                    if($ver_insuff!=NULL)
                    {
                        $ver_insuff_data=[
                          'notes' => 'BGV Cleared',
                          'updated_by' => Auth::user()->id,
                          'updated_at' => date('Y-m-d H:i:s')
                        ];

                        DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf->id,'service_id'=>$jaf->service_id,'status'=>'removed'])->update($ver_insuff_data);

                        $ver_id=$ver_insuff->id;
                    }
                    else
                    {
                      $ver_insuff_data=[
                        'parent_id' => $parent_id,
                        'business_id' => $business_id,
                        'coc_id' =>  $jaf_passport->business_id,
                        'candidate_id' => $candidate_id,
                        'service_id'  => $jaf_passport->service_id,
                        'jaf_form_data_id' => $jaf_passport->id,
                        'item_number' => $jaf_passport->check_item_number,
                        'activity_type'=> 'jaf-insuff',
                        'status'=>'removed',
                        'notes' => NULL,
                        'created_by'   => Auth::user()->id,
                        'created_at'   => date('Y-m-d H:i:s'),
                        'updated_at' => date('Y-m-d H:i:s')
                      ];
                
                      DB::table('verification_insufficiency')->insert($ver_insuff_data);
                    }

                    $insuff_log_data=[
                      'parent_id' => $parent_id,
                      'business_id' => $business_id,
                      'coc_id' => $jaf_passport->business_id,
                      'candidate_id' => $candidate_id,
                      'service_id'  => $jaf->service_id,
                      'jaf_form_data_id' => $jaf_passport->id,
                      'item_number' => $jaf_passport->check_item_number,
                      'activity_type'=> 'jaf-insuff',
                      'status'=>'removed',
                      'notes' => 'BGV Cleared',
                      'created_by'   => Auth::user()->id,
                      'created_at'   => date('Y-m-d H:i:s'),
                    ];
              
                    DB::table('insufficiency_logs')->insert($insuff_log_data);
                    
                }
                else{
                    //check from live API
                    // Setup request to send json via POST
                    $data = array(
                        'id_number' => $passport_file_no,
                        'dob'       => date('Y-m-d',strtotime($dob)),
                        'async'         => true,
                    );
                    $payload = json_encode($data);
                    $apiURL = "https://kyc-api.aadhaarkyc.io/api/v1/passport/passport/passport-details";

                    $ch = curl_init();
                    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);                
                    curl_setopt ($ch, CURLOPT_POST, 1);
                    $authorization = "Authorization: Bearer ".env('SUREPASS_PRODUCTION_TOKEN'); // Prepare the authorisation token
                    curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json' , $authorization )); // Inject the token into the header
                    curl_setopt($ch, CURLOPT_URL, $apiURL);
                    // Attach encoded JSON string to the POST fields
                    curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);
                    $resp = curl_exec ( $ch );
                    curl_close ( $ch );
                    $array_data =  json_decode($resp,true);
                    
                    if($array_data['success'])
                    {
                        //check if ID number is new then insert into DB
                        $checkIDInDB= DB::table('passport_check_masters')->where(['file_number'=>$passport_file_no])->count();
                        if($checkIDInDB ==0)
                        {
                            
                            $data = [
                                    'api_client_id'     =>$array_data['data']['client_id'],
                                    'passport_number'   =>$array_data['data']['passport_number'],
                                    'full_name'         =>$array_data['data']['full_name'],
                                    'file_number'       =>$array_data['data']['file_number'],
                                    'date_of_application'=>$array_data['data']['date_of_application'],
                                    'is_api_verified'       =>'1',
                                    'is_passport_exist' =>'1',
                                    'created_at'        =>date('Y-m-d H:i:s')
                                    ];

                            DB::table('passport_check_masters')->insert($data);
                            
                            $master_data = DB::table('passport_check_masters')->select('*')->where(['file_number'=>$passport_file_no])->first();

                            $log_data = [
                              'parent_id'   =>    $parent_id,
                              'business_id'       =>$business_id,
                              'candidate_id' => $candidate_id,
                              'service_id'        =>$jaf->service_id,
                              'source_type'       =>'API',
                              'api_client_id'     =>$master_data->api_client_id,
                              'passport_number'   =>$master_data->passport_number,
                              'full_name'         =>$master_data->full_name,
                              'file_number'       =>$master_data->file_number,
                              'date_of_application'=>$master_data->date_of_application,
                              'is_verified'       =>'1',
                              'is_passport_exist' =>'1',
                              'price'             =>$checkprice_db!=NULL?$checkprice_db->price:$price,
                              'used_by'           => 'customer',
                              'user_id'            => $user_id,
                              'created_at'        =>date('Y-m-d H:i:s')
                              ];
          
                          DB::table('passport_checks')->insert($log_data);
                        }
                        // update the status
                        $jaf_data = DB::table('jaf_form_data')->where(['candidate_id'=>$candidate_id,'service_id'=>$jaf->service_id])->update(['is_api_checked'=>'1','is_api_verified'=>'1','verification_status'=>'success','verified_at'=>date('Y-m-d H:i:s'),'is_insufficiency'=>'0','is_all_insuff_cleared' => 1,'insuff_cleared_by'=>Auth::user()->id,'updated_at'=>date('Y-m-d H:i:s')]); 

                        $jaf_data=TRUE; 

                        $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf->id,'service_id'=>$jaf->service_id,'status'=>'removed'])->first();

                        if($ver_insuff!=NULL)
                        {
                            $ver_insuff_data=[
                              'notes' => 'BGV Cleared',
                              'updated_by' => Auth::user()->id,
                              'updated_at' => date('Y-m-d H:i:s')
                            ];

                            DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf->id,'service_id'=>$jaf->service_id,'status'=>'removed'])->update($ver_insuff_data);

                            $ver_id=$ver_insuff->id;
                        }
                        else
                        {
                          $ver_insuff_data=[
                            'parent_id' => $parent_id,
                            'business_id' => $business_id,
                            'coc_id' =>  $jaf_passport->business_id,
                            'candidate_id' => $candidate_id,
                            'service_id'  => $jaf_passport->service_id,
                            'jaf_form_data_id' => $jaf_passport->id,
                            'item_number' => $jaf_passport->check_item_number,
                            'activity_type'=> 'jaf-insuff',
                            'status'=>'removed',
                            'notes' => 'BGV Cleared',
                            'created_by'   => Auth::user()->id,
                            'created_at'   => date('Y-m-d H:i:s'),
                            'updated_at' => date('Y-m-d H:i:s')
                          ];
                    
                          DB::table('verification_insufficiency')->insert($ver_insuff_data);
                        }

                        $insuff_log_data=[
                          'parent_id' => $parent_id,
                          'business_id' => $business_id,
                          'coc_id' => $jaf_passport->business_id,
                          'candidate_id' => $candidate_id,
                          'service_id'  => $jaf->service_id,
                          'jaf_form_data_id' => $jaf_passport->id,
                          'item_number' => $jaf_passport->check_item_number,
                          'activity_type'=> 'jaf-insuff',
                          'status'=>'removed',
                          'notes' => 'BGV Cleared',
                          'created_by'   => Auth::user()->id,
                          'created_at'   => date('Y-m-d H:i:s'),
                        ];
                  
                        DB::table('insufficiency_logs')->insert($insuff_log_data);
                        
                    }
                    else{

                      $jaf_data=DB::table('jaf_form_data')->where(['candidate_id'=>$candidate_id,'service_id'=>$jaf->service_id])->update(['is_api_checked'=>'1','is_api_verified'=>'0','is_insufficiency'=>'1','verification_status'=>'failed','verified_at'=>date('Y-m-d H:i:s')]); 
                      // $jaf_data=TRUE;

                      $jaf_data_s=DB::table('jaf_form_data')->where(['candidate_id'=>$candidate_id,'service_id'=>$jaf->service_id])->first();
                      $insuff_log_data=[
                        'parent_id' => $parent_id,
                        'business_id' => $business_id,
                        'coc_id' => $jaf_passport->business_id,
                        'candidate_id' => $candidate_id,
                        'service_id'  => $jaf->service_id,
                        'jaf_form_data_id' => $jaf_passport->id,
                        'item_number' => $jaf_passport->check_item_number,
                        'activity_type'=> 'jaf-insuff',
                        'status'=>'failed',
                        'notes' => 'BGV Failed',
                        'created_by'   => Auth::user()->id,
                        'created_at'   => date('Y-m-d H:i:s'),
                      ];
                
                      DB::table('insufficiency_logs')->insert($insuff_log_data);

                      $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf->id,'service_id'=>$jaf->service_id,'status'=>'raised'])->first();

                              if($ver_insuff!=NULL)
                              {
                                  $ver_insuff_data=[
                                    'notes' => 'BGV Failed',
                                    'updated_by' => Auth::user()->id,
                                    'updated_at' => date('Y-m-d H:i:s')
                                  ];

                                  DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf->id,'service_id'=>$jaf->service_id,'status'=>'raised'])->update($ver_insuff_data);

                                  $ver_id=$ver_insuff->id;
                              }
                              else
                              {
                                $ver_insuff_data=[
                                  'parent_id' => $parent_id,
                                  'business_id' => $business_id,
                                  'coc_id' => $jaf->business_id,
                                  'candidate_id' => $candidate_id,
                                  'service_id'  => $jaf->service_id,
                                  'jaf_form_data_id' => $jaf->id,
                                  'item_number' => $jaf->check_item_number,
                                  'activity_type'=> 'jaf-insuff',
                                  'status'=>'raised',
                                  'notes' => 'BGV Failed',
                                  'created_by'   => Auth::user()->id,
                                  'created_at'   => date('Y-m-d H:i:s'),
                                ];
                          
                                $ver_id = DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);
                              }

                    }
                }
                  // if($is_updated){  
                  //   //generate report here 
                  //   // $this->generateCandidateReport($candidate_id);
                  //   return response()->json([
                  //   'status'=>'ok',
                  //   'message' => 'updated',                
                  //   ], 200);
                  // }
                  // else{
                  //     return response()->json([
                  //     'status' =>'no',
                  //     ], 200);
                  // }

              }

              else if($jaf->service_id==12){
                $jaf_bank = DB::table('jaf_form_data')->select('id','business_id','form_data','service_id','check_item_number')->where(['candidate_id'=>$candidate_id,'service_id'=>$jaf->service_id])->first();

                // $passport_file_no = $request->input('id_number');
                $account_no="";
                $ifsc_code = "";
                // $business_id = $jaf_bank->business_id; 
                $jaf_array = json_decode($jaf_bank->form_data, true);
                // print_r($jaf_array);
                  foreach($jaf_array as $input){
                      if(array_key_exists('Account Number',$input)){
                        $account_no = $input['Account Number'];
                      }

                      if(array_key_exists('IFSC Code',$input) ){
                        $ifsc_code = $input['IFSC Code'];
                      }
                  }
                  $master_data = DB::table('bank_account_check_masters')->select('*')->where(['account_number'=>$account_no])->first();
                  if($master_data !=null){

                    $log_data = [
                      'parent_id'   =>    $parent_id,
                      'business_id'       =>$business_id,
                      'candidate_id' => $candidate_id,
                      'service_id'        =>$jaf->service_id,
                      'source_type'       =>'SystemDb',
                      'api_client_id'     =>$master_data->api_client_id,
                      'account_number'    =>$master_data->account_number,
                      'full_name'         =>$master_data->full_name,
                      'ifsc_code'         =>$master_data->ifsc_code,
                      'is_verified'       =>'1',
                      'is_account_exist' =>'1',
                      'price'             =>$checkprice_db!=NULL?$checkprice_db->price:$price,
                      'used_by'           =>'customer',
                      'user_id'            => $user_id,
                      'created_at'        =>date('Y-m-d H:i:s')
                      ];

                    DB::table('bank_account_checks')->insert($log_data);

                    $jaf_data =  DB::table('jaf_form_data')->where(['candidate_id'=>$candidate_id,'service_id'=>$jaf->service_id])->update(['is_api_checked'=>'1','is_api_verified'=>'1','verification_status'=>'success','verified_at'=>date('Y-m-d H:i:s'),'is_insufficiency'=>'0','is_all_insuff_cleared' => 1,'insuff_cleared_by'=>Auth::user()->id,'updated_at'=>date('Y-m-d H:i:s')]); 

                    $jaf_data=TRUE;
                    
                    $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf->id,'service_id'=>$jaf->service_id,'status'=>'removed'])->first();

                    if($ver_insuff!=NULL)
                    {
                        $ver_insuff_data=[
                          'notes' => 'BGV Cleared',
                          'updated_by' => Auth::user()->id,
                          'updated_at' => date('Y-m-d H:i:s')
                        ];

                        DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf->id,'service_id'=>$jaf->service_id,'status'=>'removed'])->update($ver_insuff_data);

                        $ver_id=$ver_insuff->id;
                    }
                    else
                    {
                      $ver_insuff_data=[
                        'parent_id' => $parent_id,
                        'business_id' => $business_id,
                        'coc_id' =>  $jaf_bank->business_id,
                        'candidate_id' => $candidate_id,
                        'service_id'  => $jaf_bank->service_id,
                        'jaf_form_data_id' => $jaf_bank->id,
                        'item_number' => $jaf_bank->check_item_number,
                        'activity_type'=> 'jaf-insuff',
                        'status'=>'removed',
                        'notes' => 'BGV Cleared',
                        'created_by'   => Auth::user()->id,
                        'created_at'   => date('Y-m-d H:i:s'),
                        'updated_at' => date('Y-m-d H:i:s')
                      ];
                
                      DB::table('verification_insufficiency')->insert($ver_insuff_data);
                    }

                    $insuff_log_data=[
                      'parent_id' => $parent_id,
                      'business_id' => $business_id,
                      'coc_id' => $jaf_bank->business_id,
                      'candidate_id' => $candidate_id,
                      'service_id'  => $jaf->service_id,
                      'jaf_form_data_id' => $jaf_bank->id,
                      'item_number' => $jaf_bank->check_item_number,
                      'activity_type'=> 'jaf-insuff',
                      'status'=>'removed',
                      'notes' => 'BGV Cleared',
                      'created_by'   => Auth::user()->id,
                      'created_at'   => date('Y-m-d H:i:s'),
                    ];
              
                    DB::table('insufficiency_logs')->insert($insuff_log_data);
              

                  }
                  else{
                    //check from live API
                    // Setup request to send json via POST
                    $data = array(
                      'id_number' => $account_no,
                      'ifsc'      => $ifsc_code,
                      'async'         => true,
                      );
                      $payload = json_encode($data);
                      $apiURL = "https://kyc-api.aadhaarkyc.io/api/v1/bank-verification/";

                      $ch = curl_init();
                      curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);                
                      curl_setopt ($ch, CURLOPT_POST, 1);
                      $authorization = "Authorization: Bearer ".env('SUREPASS_PRODUCTION_TOKEN'); // Prepare the authorisation token
                      curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json' , $authorization )); // Inject the token into the header
                      curl_setopt($ch, CURLOPT_URL, $apiURL);
                      // Attach encoded JSON string to the POST fields
                      curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);
                      $resp = curl_exec ( $ch );
                      curl_close ( $ch );
                      $array_data =  json_decode($resp,true);
                      // var_dump($resp); die;
                      if($array_data['success'])
                      {
                        //check if ID number is new then insert into DB
                        $checkIDInDB= DB::table('bank_account_check_masters')->where(['account_number'=>$account_no])->count();
                        if($checkIDInDB ==0)
                        {
                            
                            $data = [
                                    'api_client_id'     =>$array_data['data']['client_id'],
                                    'account_number'    =>$account_no,
                                    'full_name'         =>$array_data['data']['full_name'],
                                    'ifsc_code'         =>$request->input('ifsc'),
                                    'is_verified'       =>'1',
                                    'is_account_exist' =>'1',
                                    'created_at'        =>date('Y-m-d H:i:s')
                                    ];

                            DB::table('bank_account_check_masters')->insert($data);
                            
                            $master_data = DB::table('bank_account_check_masters')->select('*')->where(['account_number'=>$account_no])->first();

                            $log_data = [
                              'parent_id'   =>    $parent_id,
                              'business_id'       =>$business_id,
                              'candidate_id' => $candidate_id,
                              'service_id'        =>$jaf->service_id,
                              'source_type'       =>'API',
                              'api_client_id'     =>$master_data->api_client_id,
                              'account_number'    =>$master_data->account_number,
                              'full_name'         =>$master_data->full_name,
                              'ifsc_code'         =>$master_data->ifsc_code,
                              'is_verified'       =>'1',
                              'is_account_exist' =>'1',
                              'price'             =>$checkprice_db!=NULL?$checkprice_db->price:$price,
                              'used_by'           =>'customer',
                              'user_id'            => $user_id,
                              'created_at'        =>date('Y-m-d H:i:s')
                              ];
          
                          DB::table('bank_account_checks')->insert($log_data);
                        }
                        // update the status
                        $jaf_data=DB::table('jaf_form_data')->where(['candidate_id'=>$candidate_id,'service_id'=>$jaf->service_id])->update(['is_api_checked'=>'1','is_api_verified'=>'1','verification_status'=>'success','verified_at'=>date('Y-m-d H:i:s'),'is_insufficiency'=>'0','is_all_insuff_cleared' => 1,'insuff_cleared_by'=>Auth::user()->id,'updated_at'=>date('Y-m-d H:i:s')]); 

                        $jaf_data=TRUE; 

                        $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf->id,'service_id'=>$jaf->service_id,'status'=>'removed'])->first();

                        if($ver_insuff!=NULL)
                        {
                            $ver_insuff_data=[
                              'notes' => 'BGV Cleared',
                              'updated_by' => Auth::user()->id,
                              'updated_at' => date('Y-m-d H:i:s')
                            ];

                            DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf->id,'service_id'=>$jaf->service_id,'status'=>'removed'])->update($ver_insuff_data);

                            $ver_id=$ver_insuff->id;
                        }
                        else
                        {
                          $ver_insuff_data=[
                            'parent_id' => $parent_id,
                            'business_id' => $business_id,
                            'coc_id' =>  $jaf_bank->business_id,
                            'candidate_id' => $candidate_id,
                            'service_id'  => $jaf_bank->service_id,
                            'jaf_form_data_id' => $jaf_bank->id,
                            'item_number' => $jaf_bank->check_item_number,
                            'activity_type'=> 'jaf-insuff',
                            'status'=>'removed',
                            'notes' => 'BGV Cleared',
                            'created_by'   => Auth::user()->id,
                            'created_at'   => date('Y-m-d H:i:s'),
                            'updated_at' => date('Y-m-d H:i:s')
                          ];
                    
                          DB::table('verification_insufficiency')->insert($ver_insuff_data);
                        }

                        $insuff_log_data=[
                          'parent_id' => $parent_id,
                          'business_id' => $business_id,
                          'coc_id' => $jaf_bank->business_id,
                          'candidate_id' => $candidate_id,
                          'service_id'  => $jaf->service_id,
                          'jaf_form_data_id' => $jaf_bank->id,
                          'item_number' => $jaf_bank->check_item_number,
                          'activity_type'=> 'jaf-insuff',
                          'status'=>'removed',
                          'notes' => 'BGV Cleared',
                          'created_by'   => Auth::user()->id,
                          'created_at'   => date('Y-m-d H:i:s'),
                        ];
                  
                        DB::table('insufficiency_logs')->insert($insuff_log_data);

                      }
                      else{
                        //update insuff
                        $jaf_data=DB::table('jaf_form_data')->where(['candidate_id'=>$candidate_id,'service_id'=>$jaf->service_id])->update(['is_api_checked'=>'1','is_api_verified'=>'0','is_insufficiency'=>'1','verification_status'=>'failed','verified_at'=>date('Y-m-d H:i:s')]); 

                        // $jaf_data=TRUE; 

                        $jaf_data_s=DB::table('jaf_form_data')->where(['candidate_id'=>$candidate_id,'service_id'=>$jaf->service_id])->first();

                        $insuff_log_data=[
                          'parent_id' => $parent_id,
                          'business_id' => $business_id,
                          'coc_id' => $jaf_bank->business_id,
                          'candidate_id' => $candidate_id,
                          'service_id'  => $jaf->service_id,
                          'jaf_form_data_id' => $jaf_bank->id,
                          'item_number' => $jaf_bank->check_item_number,
                          'activity_type'=> 'jaf-insuff',
                          'status'=>'failed',
                          'notes' => 'BGV Failed',
                          'created_by'   => Auth::user()->id,
                          'created_at'   => date('Y-m-d H:i:s'),
                        ];
                  
                        DB::table('insufficiency_logs')->insert($insuff_log_data);

                        $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf->id,'service_id'=>$jaf->service_id,'status'=>'raised'])->first();

                              if($ver_insuff!=NULL)
                              {
                                  $ver_insuff_data=[
                                    'notes' => 'BGV Failed',
                                    'updated_by' => Auth::user()->id,
                                    'updated_at' => date('Y-m-d H:i:s')
                                  ];

                                  DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf->id,'service_id'=>$jaf->service_id,'status'=>'raised'])->update($ver_insuff_data);

                                  $ver_id=$ver_insuff->id;
                              }
                              else
                              {
                                $ver_insuff_data=[
                                  'parent_id' => $parent_id,
                                  'business_id' => $business_id,
                                  'coc_id' => $jaf->business_id,
                                  'candidate_id' => $candidate_id,
                                  'service_id'  => $jaf->service_id,
                                  'jaf_form_data_id' => $jaf->id,
                                  'item_number' => $jaf->check_item_number,
                                  'activity_type'=> 'jaf-insuff',
                                  'status'=>'raised',
                                  'notes' => 'BGV Failed',
                                  'created_by'   => Auth::user()->id,
                                  'created_at'   => date('Y-m-d H:i:s'),
                                ];
                          
                                $ver_id = DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);
                              }

                      }

                  }
              }

              else if($serviceId->type_name == 'cin'){

                    $jaf_cin = DB::table('jaf_form_data')->select('id','business_id','form_data','service_id','check_item_number')->where(['candidate_id'=>$candidate_id,'service_id'=>$jaf->service_id])->first();
              
                    $jaf_array = json_decode($jaf_cin->form_data, true);
                    //print_r($jaf_array);
                    $ciin_number ="";
                    foreach($jaf_array as $input){
                        if(array_key_exists('CIN Number',$input)){
                          $ciin_number = $input['CIN Number'];
                        }
                    }
                  
                    $api_check_status = false;
                    // Setup request to send json via POST
                    $data = array(
                        'id_number'    => $ciin_number,
                    );
                    //dd($data);
                    $payload = json_encode($data);
                    $apiURL = "https://kyc-api.aadhaarkyc.io/api/v1/corporate/company-details";
      
                    $ch = curl_init();
                    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);                
                    curl_setopt ($ch, CURLOPT_POST, 1);
                    $token_key = env('SUREPASS_PRODUCTION_TOKEN');
                    curl_setopt($ch, CURLOPT_HTTPHEADER, array('Authorization: Bearer '.$token_key, 'Content-Type: application/json'));
                    curl_setopt($ch, CURLOPT_URL, $apiURL);
                    curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);
                    $resp = curl_exec ( $ch );
                    $response_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
                    curl_close ( $ch );
                    $array_data =  json_decode($resp,true);

                    if($array_data['success'])
                    {
                        $data = 
                        [
                          'parent_id'                 => $parent_id,
                          'business_id'               => $business_id,
                          'cin_number'                => $array_data['data']['details']['company_info']['cin'],
                          'registration_number'       => $array_data['data']['details']['company_info']['registration_number'],
                          'company_name'              => $array_data['data']['company_name'],
                          'registered_address'        =>$array_data['data']['details']['company_info']['registered_address'],
                          'date_of_incorporation'     =>$array_data['data']['details']['company_info']['date_of_incorporation']!=NULL ? date('Y-m-d',strtotime($array_data['data']['details']['company_info']['date_of_incorporation'])) : NULL,
                          'email_id'                  =>$array_data['data']['details']['company_info']['email_id'],
                          'paid_up_capital_in_rupees' =>$array_data['data']['details']['company_info']['paid_up_capital'],
                          'authorised_capital'        =>$array_data['data']['details']['company_info']['authorized_capital'],
                          'company_category'          =>$array_data['data']['details']['company_info']['company_category'],
                          'company_subcategory'       =>$array_data['data']['details']['company_info']['company_sub_category'],
                          //'company_class'             =>$array_data['data']['details']['company_info']['company_class'],
                          //'whether_company_is_listed' =>$array_data['data']['details']['company_info']['whether_company_is_listed'],
                          //'company_efilling_status'   =>$array_data['data']['details']['company_info']['company_efilling_status'],
                          'date_of_last_AGM'          =>$array_data['data']['details']['company_info']['last_agm_date']!=NULL ? date('Y-m-d',strtotime($array_data['data']['details']['company_info']['last_agm_date'])) : NULL,
                          //'date_of_balance_sheet'     =>$array_data['data']['details']['company_info']['date_of_balance_sheet']!=NULL ? date('Y-m-d',strtotime($array_data['data']['details']['company_info']['date_of_balance_sheet'])) : NULL,
                          //'another_maintained_address' =>$array_data['data']['details']['company_info']['another_maintained_address'],
                          'directors'                => $array_data['data']['details']['directors']!=NULL && count($array_data['data']['details']['directors']) > 0 ? json_encode($array_data['data']['details']['directors']) : NULL,
                          'created_by'                => $user_id,
                          'created_at'                =>date('Y-m-d H:i:s')
                        ];
                        // dd($data);
                        DB::table('cin_check_masters')->insert($data);
                        $master_data = DB::table('cin_check_masters')->select('*')->where(['cin_number'=>$ciin_number])->latest()->first();
                        
                        //insert into business table
                        $cin_data = 
                        [
                          'parent_id'         =>$parent_id,
                          'business_id'       =>$business_id,
                          'service_id'         => $serviceId->id,
                          'source_type'       =>'API',
                          'cin_number'                => $array_data['data']['details']['company_info']['cin'],
                          'registration_number'       => $array_data['data']['details']['company_info']['registration_number'],
                          'company_name'              => $array_data['data']['company_name'],
                          'registered_address'        =>$array_data['data']['details']['company_info']['registered_address'],
                          'date_of_incorporation'     =>$array_data['data']['details']['company_info']['date_of_incorporation']!=NULL ? date('Y-m-d',strtotime($array_data['data']['details']['company_info']['date_of_incorporation'])) : NULL,
                          'email_id'                  =>$array_data['data']['details']['company_info']['email_id'],
                          'paid_up_capital_in_rupees' =>$array_data['data']['details']['company_info']['paid_up_capital'],
                          'authorised_capital'        =>$array_data['data']['details']['company_info']['authorized_capital'],
                          'company_category'          =>$array_data['data']['details']['company_info']['company_category'],
                          'company_subcategory'       =>$array_data['data']['details']['company_info']['company_sub_category'],
                          'date_of_last_AGM'          =>$array_data['data']['details']['company_info']['last_agm_date']!=NULL ? date('Y-m-d',strtotime($array_data['data']['details']['company_info']['last_agm_date'])) : NULL,
                          'directors'                 =>$array_data['data']['details']['directors']!=NULL && count($array_data['data']['details']['directors']) > 0 ? json_encode($array_data['data']['details']['directors']) : NULL,
                          'is_verified'                =>'1',
                          'price'                     =>$price,
                          'user_type'                   =>'customer',
                          'user_id'                     =>$user_id,
                          'created_at'                  =>date('Y-m-d H:i:s')
                        ];
                        // dd($cin_data);
                        DB::table('cin_checks')->insert($cin_data);
                        // update the status
                        $jaf_data=DB::table('jaf_form_data')->where(['candidate_id'=>$candidate_id,'service_id'=>$jaf->service_id])->update(['is_api_checked'=>'1','is_api_verified'=>'1','verification_status'=>'success','verified_at'=>date('Y-m-d H:i:s'),'is_insufficiency'=>'0','is_all_insuff_cleared' => 1,'insuff_cleared_by'=>Auth::user()->id,'updated_at'=>date('Y-m-d H:i:s')]); 

                        $jaf_data=TRUE; 

                        $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf->id,'service_id'=>$jaf->service_id,'status'=>'removed'])->first();

                        if($ver_insuff!=NULL)
                        {
                            $ver_insuff_data=[
                              'notes' => 'BGV Cleared',
                              'updated_by' => Auth::user()->id,
                              'updated_at' => date('Y-m-d H:i:s')
                            ];

                            DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf->id,'service_id'=>$jaf->service_id,'status'=>'removed'])->update($ver_insuff_data);

                            $ver_id=$ver_insuff->id;
                        }
                        else
                        {
                          $ver_insuff_data=[
                            'parent_id' => $parent_id,
                            'business_id' => $business_id,
                            'coc_id' =>  $jaf_cin->business_id,
                            'candidate_id' => $candidate_id,
                            'service_id'  => $jaf_cin->service_id,
                            'jaf_form_data_id' => $jaf_cin->id,
                            'item_number' => $jaf_cin->check_item_number,
                            'activity_type'=> 'jaf-insuff',
                            'status'=>'removed',
                            'notes' => 'BGV Cleared',
                            'created_by'   => Auth::user()->id,
                            'created_at'   => date('Y-m-d H:i:s'),
                            'updated_at' => date('Y-m-d H:i:s')
                          ];
                    
                          DB::table('verification_insufficiency')->insert($ver_insuff_data);
                        }

                        $insuff_log_data=[
                          'parent_id' => $parent_id,
                          'business_id' => $business_id,
                          'coc_id' => $jaf_cin->business_id,
                          'candidate_id' => $candidate_id,
                          'service_id'  => $jaf->service_id,
                          'jaf_form_data_id' => $jaf_cin->id,
                          'item_number' => $jaf_cin->check_item_number,
                          'activity_type'=> 'jaf-insuff',
                          'status'=>'removed',
                          'notes' => 'BGV Cleared',
                          'created_by'   => Auth::user()->id,
                          'created_at'   => date('Y-m-d H:i:s'),
                        ];
                  
                        DB::table('insufficiency_logs')->insert($insuff_log_data);

                      }
                      else{
                        //update insuff
                        $jaf_data=DB::table('jaf_form_data')->where(['candidate_id'=>$candidate_id,'service_id'=>$jaf->service_id])->update(['is_api_checked'=>'1','is_api_verified'=>'0','is_insufficiency'=>'1','verification_status'=>'failed','verified_at'=>date('Y-m-d H:i:s')]); 

                        // $jaf_data=TRUE; 

                        $jaf_data_s=DB::table('jaf_form_data')->where(['candidate_id'=>$candidate_id,'service_id'=>$jaf->service_id])->first();

                        $insuff_log_data=[
                          'parent_id' => $parent_id,
                          'business_id' => $business_id,
                          'coc_id' => $jaf_cin->business_id,
                          'candidate_id' => $candidate_id,
                          'service_id'  => $jaf->service_id,
                          'jaf_form_data_id' => $jaf_cin->id,
                          'item_number' => $jaf_cin->check_item_number,
                          'activity_type'=> 'jaf-insuff',
                          'status'=>'failed',
                          'notes' => 'BGV Failed',
                          'created_by'   => Auth::user()->id,
                          'created_at'   => date('Y-m-d H:i:s'),
                        ];
                  
                        DB::table('insufficiency_logs')->insert($insuff_log_data);

                        $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf->id,'service_id'=>$jaf->service_id,'status'=>'raised'])->first();

                              if($ver_insuff!=NULL)
                              {
                                  $ver_insuff_data=[
                                    'notes' => 'BGV Failed',
                                    'updated_by' => Auth::user()->id,
                                    'updated_at' => date('Y-m-d H:i:s')
                                  ];

                                  DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf->id,'service_id'=>$jaf->service_id,'status'=>'raised'])->update($ver_insuff_data);

                                  $ver_id=$ver_insuff->id;
                              }
                              else
                              {
                                $ver_insuff_data=[
                                  'parent_id' => $parent_id,
                                  'business_id' => $business_id,
                                  'coc_id' => $jaf->business_id,
                                  'candidate_id' => $candidate_id,
                                  'service_id'  => $jaf->service_id,
                                  'jaf_form_data_id' => $jaf->id,
                                  'item_number' => $jaf->check_item_number,
                                  'activity_type'=> 'jaf-insuff',
                                  'status'=>'raised',
                                  'notes' => 'BGV Failed',
                                  'created_by'   => Auth::user()->id,
                                  'created_at'   => date('Y-m-d H:i:s'),
                                ];
                          
                                $ver_id = DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);
                              }

                      }
              }

              // service
              else if($serviceId->type_name == 'upi'){
                //dd('hi');
                $jaf_uan = DB::table('jaf_form_data')->select('id','business_id','form_data','service_id','check_item_number')->where(['candidate_id'=>$candidate_id,'service_id'=>$jaf->service_id])->first();
          
                $jaf_array = json_decode($jaf_upi->form_data, true);
                //print_r($jaf_array);
                $upi_number ="";
                foreach($jaf_array as $input){
                    if(array_key_exists('UPI ID',$input)){
                      $upi_number = $input['UPI ID'];
                    }
                }
              
                $api_check_status = false;
                // Setup request to send json via POST
                $data = array(
                  'upi_id'    => $upi_number,
                );
                //dd($data);
                $payload = json_encode($data);

                $apiURL = "https://kyc-api.aadhaarkyc.io/api/v1/bank-verification/upi-verification";
            
                $ch = curl_init();
                curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);                
                curl_setopt ($ch, CURLOPT_POST, 1);
                $token_key = env('SUREPASS_PRODUCTION_TOKEN');
                curl_setopt($ch, CURLOPT_HTTPHEADER, array('Authorization: Bearer '.$token_key, 'Content-Type: application/json'));
                curl_setopt($ch, CURLOPT_URL, $apiURL);
                curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);
                $resp = curl_exec ( $ch );
                //dd($resp);
                $response_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
                curl_close ( $ch );
                $array_data =  json_decode($resp,true);

                if($array_data['success'])
                {
                  $data = 
                  [
                      'parent_id'     => $parent_id,
                      'business_id'   => $business_id,
                      'client_id'     => $array_data['data']['client_id'],
                      'upi_id'        =>$upi_number,
                      'name'          =>$array_data['data']['full_name'],
                      'is_api_verified' =>'1',
                      'created_by'    => $user_id,
                      'created_at'    =>date('Y-m-d H:i:s')
                  ];
                  //dd($data);
                  DB::table('upi_check_masters')->insert($data);
                  $master_data = DB::table('upi_check_masters')->select('*')->where(['upi_id'=>$upi_number])->first();
                  //dd($master_data);
                  $log_data = 
                  [
                      'parent_id'         =>$parent_id,
                      'business_id'       =>$business_id,
                      'service_id'         => $serviceId->id,
                      'source_type'       =>'API',
                      'client_id'         => $array_data['data']['client_id'],
                      'upi_id'            =>$upi_number,
                      'name'              =>$array_data['data']['full_name'],
                      'is_verified'       =>'1',
                      'price'             =>$price,
                      'user_type'           =>'customer',
                      'user_id'            =>$user_id,
                      'created_at'        =>date('Y-m-d H:i:s')
                  ];
                  //dd($log_data);
                  DB::table('upi_checks')->insert($log_data);

                    $jaf_data=DB::table('jaf_form_data')->where(['candidate_id'=>$candidate_id,'service_id'=>$jaf->service_id])->update(['is_api_checked'=>'1','is_api_verified'=>'1','verification_status'=>'success','verified_at'=>date('Y-m-d H:i:s'),'is_insufficiency'=>'0','is_all_insuff_cleared' => 1,'insuff_cleared_by'=>Auth::user()->id,'updated_at'=>date('Y-m-d H:i:s')]); 

                    $jaf_data=TRUE; 

                    $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf->id,'service_id'=>$jaf->service_id,'status'=>'removed'])->first();

                    if($ver_insuff!=NULL)
                    {
                        $ver_insuff_data=[
                          'notes' => 'BGV Cleared',
                          'updated_by' => Auth::user()->id,
                          'updated_at' => date('Y-m-d H:i:s')
                        ];

                        DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf->id,'service_id'=>$jaf->service_id,'status'=>'removed'])->update($ver_insuff_data);

                        $ver_id=$ver_insuff->id;
                    }
                    else
                    {
                      $ver_insuff_data=[
                        'parent_id' => $parent_id,
                        'business_id' => $business_id,
                        'coc_id' =>  $jaf_upi->business_id,
                        'candidate_id' => $candidate_id,
                        'service_id'  => $jaf_upi->service_id,
                        'jaf_form_data_id' => $jaf_upi->id,
                        'item_number' => $jaf_upi->check_item_number,
                        'activity_type'=> 'jaf-insuff',
                        'status'=>'removed',
                        'notes' => 'BGV Cleared',
                        'created_by'   => Auth::user()->id,
                        'created_at'   => date('Y-m-d H:i:s'),
                        'updated_at' => date('Y-m-d H:i:s')
                      ];
                
                      DB::table('verification_insufficiency')->insert($ver_insuff_data);
                    }

                    $insuff_log_data=[
                      'parent_id' => $parent_id,
                      'business_id' => $business_id,
                      'coc_id' => $jaf_upi->business_id,
                      'candidate_id' => $candidate_id,
                      'service_id'  => $jaf->service_id,
                      'jaf_form_data_id' => $jaf_upi->id,
                      'item_number' => $jaf_upi->check_item_number,
                      'activity_type'=> 'jaf-insuff',
                      'status'=>'removed',
                      'notes' => 'BGV Cleared',
                      'created_by'   => Auth::user()->id,
                      'created_at'   => date('Y-m-d H:i:s'),
                    ];
              
                    DB::table('insufficiency_logs')->insert($insuff_log_data);

                  }
                  else{
                    //update insuff
                    $jaf_data=DB::table('jaf_form_data')->where(['candidate_id'=>$candidate_id,'service_id'=>$jaf->service_id])->update(['is_api_checked'=>'1','is_api_verified'=>'0','is_insufficiency'=>'1','verification_status'=>'failed','verified_at'=>date('Y-m-d H:i:s')]); 

                    // $jaf_data=TRUE; 

                    $jaf_data_s=DB::table('jaf_form_data')->where(['candidate_id'=>$candidate_id,'service_id'=>$jaf->service_id])->first();

                    $insuff_log_data=[
                      'parent_id' => $parent_id,
                      'business_id' => $business_id,
                      'coc_id' => $jaf_upi->business_id,
                      'candidate_id' => $candidate_id,
                      'service_id'  => $jaf->service_id,
                      'jaf_form_data_id' => $jaf_upi->id,
                      'item_number' => $jaf_upi->check_item_number,
                      'activity_type'=> 'jaf-insuff',
                      'status'=>'failed',
                      'notes' => 'BGV Failed',
                      'created_by'   => Auth::user()->id,
                      'created_at'   => date('Y-m-d H:i:s'),
                    ];
              
                    DB::table('insufficiency_logs')->insert($insuff_log_data);

                    $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf->id,'service_id'=>$jaf->service_id,'status'=>'raised'])->first();

                          if($ver_insuff!=NULL)
                          {
                              $ver_insuff_data=[
                                'notes' => 'BGV Failed',
                                'updated_by' => Auth::user()->id,
                                'updated_at' => date('Y-m-d H:i:s')
                              ];

                              DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf->id,'service_id'=>$jaf->service_id,'status'=>'raised'])->update($ver_insuff_data);

                              $ver_id=$ver_insuff->id;
                          }
                          else
                          {
                            $ver_insuff_data=[
                              'parent_id' => $parent_id,
                              'business_id' => $business_id,
                              'coc_id' => $jaf->business_id,
                              'candidate_id' => $candidate_id,
                              'service_id'  => $jaf->service_id,
                              'jaf_form_data_id' => $jaf->id,
                              'item_number' => $jaf->check_item_number,
                              'activity_type'=> 'jaf-insuff',
                              'status'=>'raised',
                              'notes' => 'BGV Failed',
                              'created_by'   => Auth::user()->id,
                              'created_at'   => date('Y-m-d H:i:s'),
                            ];
                      
                            $ver_id = DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);
                          }

                  }
              }

               // service
               else if($serviceId->type_name == 'uan-number'){
                //dd('hi');
                $jaf_uan = DB::table('jaf_form_data')->select('id','business_id','form_data','service_id','check_item_number')->where(['candidate_id'=>$candidate_id,'service_id'=>$jaf->service_id])->first();
          
                $jaf_array = json_decode($jaf_uan->form_data, true);
                //print_r($jaf_array);
                $uan_number ="";
                foreach($jaf_array as $input){
                    if(array_key_exists('UAN Number',$input)){
                      $uan_number = $input['UAN Number'];
                    }
                }
              
                $api_check_status = false;
                // Setup request to send json via POST
                $data = array(
                  'id_number'    => $uan_number,
                );
                //dd($data);
                $payload = json_encode($data);

                $apiURL = "https://kyc-api.aadhaarkyc.io/api/v1/income/employment-history-uan";
            
                $ch = curl_init();
                curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);                
                curl_setopt ($ch, CURLOPT_POST, 1);
                $token_key = env('SUREPASS_PRODUCTION_TOKEN');
                curl_setopt($ch, CURLOPT_HTTPHEADER, array('Authorization: Bearer '.$token_key, 'Content-Type: application/json'));
                curl_setopt($ch, CURLOPT_URL, $apiURL);
                curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);
                $resp = curl_exec ( $ch );
                //dd($resp);
                $response_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
                curl_close ( $ch );
                $array_data =  json_decode($resp,true);

                if($array_data['success'])
                {
                    $data = 
                        [
                            'parent_id'            => $parent_id,
                            'business_id'          => $business_id,
                            'client_id'            => $array_data['data']['client_id'],
                            'uan_number'               =>$uan_number,
                            'employment_history'   =>$array_data['data']['employment_history']!=NULL && count($array_data['data']['employment_history']) > 0 ? json_encode($array_data['data']['employment_history']) : NULL,
                            'is_api_verified'      =>'1',
                            'created_by'           => $user_id,
                            'created_at'           =>date('Y-m-d H:i:s')
                        ];
                      //dd($data);
                        DB::table('uan_check_masters')->insert($data);
                        $master_data = DB::table('uan_check_masters')->select('*')->where(['uan_number'=>$uan_number])->first();
                        //dd($master_data);
                        $log_data = 
                            [
                                'parent_id'            =>$parent_id,
                                'business_id'          =>$business_id,
                                'service_id'           => $serviceId->id,
                                'source_type'          =>'API',
                                'client_id'            => $array_data['data']['client_id'],
                                'uan_number'               =>$uan_number,
                                'employment_history'   =>$array_data['data']['employment_history']!=NULL && count($array_data['data']['employment_history']) > 0 ? json_encode($array_data['data']['employment_history']) : NULL,
                                'is_verified'          =>'1',
                                'price'                =>$price,
                                'user_type'            =>'customer',
                                'user_id'              =>$user_id,
                                'created_at'           =>date('Y-m-d H:i:s')
                            ];
                          //dd($log_data);
                          DB::table('uan_checks')->insert($log_data);

                    $jaf_data=DB::table('jaf_form_data')->where(['candidate_id'=>$candidate_id,'service_id'=>$jaf->service_id])->update(['is_api_checked'=>'1','is_api_verified'=>'1','verification_status'=>'success','verified_at'=>date('Y-m-d H:i:s'),'is_insufficiency'=>'0','is_all_insuff_cleared' => 1,'insuff_cleared_by'=>Auth::user()->id,'updated_at'=>date('Y-m-d H:i:s')]); 

                    $jaf_data=TRUE; 

                    $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf->id,'service_id'=>$jaf->service_id,'status'=>'removed'])->first();

                    if($ver_insuff!=NULL)
                    {
                        $ver_insuff_data=[
                          'notes' => 'BGV Cleared',
                          'updated_by' => Auth::user()->id,
                          'updated_at' => date('Y-m-d H:i:s')
                        ];

                        DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf->id,'service_id'=>$jaf->service_id,'status'=>'removed'])->update($ver_insuff_data);

                        $ver_id=$ver_insuff->id;
                    }
                    else
                    {
                      $ver_insuff_data=[
                        'parent_id' => $parent_id,
                        'business_id' => $business_id,
                        'coc_id' =>  $jaf_uan->business_id,
                        'candidate_id' => $candidate_id,
                        'service_id'  => $jaf_uan->service_id,
                        'jaf_form_data_id' => $jaf_uan->id,
                        'item_number' => $jaf_uan->check_item_number,
                        'activity_type'=> 'jaf-insuff',
                        'status'=>'removed',
                        'notes' => 'BGV Cleared',
                        'created_by'   => Auth::user()->id,
                        'created_at'   => date('Y-m-d H:i:s'),
                        'updated_at' => date('Y-m-d H:i:s')
                      ];
                
                      DB::table('verification_insufficiency')->insert($ver_insuff_data);
                    }

                    $insuff_log_data=[
                      'parent_id' => $parent_id,
                      'business_id' => $business_id,
                      'coc_id' => $jaf_uan->business_id,
                      'candidate_id' => $candidate_id,
                      'service_id'  => $jaf->service_id,
                      'jaf_form_data_id' => $jaf_uan->id,
                      'item_number' => $jaf_uan->check_item_number,
                      'activity_type'=> 'jaf-insuff',
                      'status'=>'removed',
                      'notes' => 'BGV Cleared',
                      'created_by'   => Auth::user()->id,
                      'created_at'   => date('Y-m-d H:i:s'),
                    ];
              
                    DB::table('insufficiency_logs')->insert($insuff_log_data);

                  }
                  else{
                    //update insuff
                    $jaf_data=DB::table('jaf_form_data')->where(['candidate_id'=>$candidate_id,'service_id'=>$jaf->service_id])->update(['is_api_checked'=>'1','is_api_verified'=>'0','is_insufficiency'=>'1','verification_status'=>'failed','verified_at'=>date('Y-m-d H:i:s')]); 

                    // $jaf_data=TRUE; 

                    $jaf_data_s=DB::table('jaf_form_data')->where(['candidate_id'=>$candidate_id,'service_id'=>$jaf->service_id])->first();

                    $insuff_log_data=[
                      'parent_id' => $parent_id,
                      'business_id' => $business_id,
                      'coc_id' => $jaf_uan->business_id,
                      'candidate_id' => $candidate_id,
                      'service_id'  => $jaf->service_id,
                      'jaf_form_data_id' => $jaf_uan->id,
                      'item_number' => $jaf_uan->check_item_number,
                      'activity_type'=> 'jaf-insuff',
                      'status'=>'failed',
                      'notes' => 'BGV Failed',
                      'created_by'   => Auth::user()->id,
                      'created_at'   => date('Y-m-d H:i:s'),
                    ];
              
                    DB::table('insufficiency_logs')->insert($insuff_log_data);

                    $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf->id,'service_id'=>$jaf->service_id,'status'=>'raised'])->first();

                          if($ver_insuff!=NULL)
                          {
                              $ver_insuff_data=[
                                'notes' => 'BGV Failed',
                                'updated_by' => Auth::user()->id,
                                'updated_at' => date('Y-m-d H:i:s')
                              ];

                              DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf->id,'service_id'=>$jaf->service_id,'status'=>'raised'])->update($ver_insuff_data);

                              $ver_id=$ver_insuff->id;
                          }
                          else
                          {
                            $ver_insuff_data=[
                              'parent_id' => $parent_id,
                              'business_id' => $business_id,
                              'coc_id' => $jaf->business_id,
                              'candidate_id' => $candidate_id,
                              'service_id'  => $jaf->service_id,
                              'jaf_form_data_id' => $jaf->id,
                              'item_number' => $jaf->check_item_number,
                              'activity_type'=> 'jaf-insuff',
                              'status'=>'raised',
                              'notes' => 'BGV Failed',
                              'created_by'   => Auth::user()->id,
                              'created_at'   => date('Y-m-d H:i:s'),
                            ];
                      
                            $ver_id = DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);
                          }

                  }
              }

               // service
              //  else if($serviceId->type_name == 'cibil'){
                
              //   $jaf_cibil = DB::table('jaf_form_data')->select('id','business_id','candidate_id','form_data','service_id','check_item_number')->where(['candidate_id'=>$candidate_id,'service_id'=>$jaf->service_id])->first();
                
              //   $username = DB::table('users')->where(['id'=>$jaf_cibil->candidate_id])->first();
                
              //   $jaf_array = json_decode($jaf_cibil->form_data, true);
              //   //print_r($jaf_array);
              //   $pan_number ="";
              //   $first_name ="";
              //   $contact_number ="";
              //   foreach($jaf_array as $input){
              //       if(array_key_exists('First Name',$input)){
              //         $first_name = $input['First Name'];
              //       }
              //       if(array_key_exists('PAN Number',$input)){
              //         $pan_number = $input['PAN Number'];
              //       }
              //       if(array_key_exists('Contact Number',$input)){
              //         $contact_number = $input['Contact Number'];
              //       }
              //   }
              
              //   $api_check_status = false;
              //       // Setup request to send json via POST
              //     $data = array(
              //         'name'    => $username->name,
              //         'pan'    => $pan_number,
              //         'mobile' => $contact_number,
              //         'consent' => 'Y'
              //     );
              //   //dd($data);
              //   $payload = json_encode($data);

              //   $apiURL = "https://kyc-api.surepass.io/api/v1/credit-report-v2/fetch-report";
                
              //   $ch = curl_init();
              //   curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);                
              //   curl_setopt ($ch, CURLOPT_POST, 1);
              //   $token_key = env('SUREPASS_PRODUCTION_TOKEN');
              //   curl_setopt($ch, CURLOPT_HTTPHEADER, array('Authorization: Bearer '.$token_key, 'Content-Type: application/json'));
              //   curl_setopt($ch, CURLOPT_URL, $apiURL);
              //   curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);
              //   $resp = curl_exec ( $ch );
              //   //dd($resp);
              //   $response_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
              //   curl_close ( $ch );
              //   $array_data =  json_decode($resp,true);

              //   if($array_data['success'])
              //   {
              //     $data = 
              //         [
              //           'parent_id'            => $parent_id,
              //           'business_id'          => $business_id,
              //           'client_id'            => $array_data['data']['client_id'],
              //           'pan_number'           =>$array_data['data']['pan'],
              //           'mobile_number'        =>$array_data['data']['mobile'],
              //           'name'                 =>$array_data['data']['name'],
              //           'consent'              => 'Y',
              //           'credit_score'         => $array_data['data']['credit_score'],
              //           'report_type'          => 'html',
              //           'credit_report_link'   =>$array_data['data']['credit_report']!=NULL && count($array_data['data']['credit_report']) > 0 ? json_encode($array_data['data']['credit_report']) : NULL,
              //           'is_api_verified'      =>'1',
              //           'created_by'           => $user_id,
              //           'created_at'           =>date('Y-m-d H:i:s')
              //         ];
              //         //dd($data);
              //         DB::table('cibil_check_masters')->insert($data);
              //         $master_data = DB::table('cibil_check_masters')->select('*')->where(['pan_number'=>$pan_number])->latest()->first();
              //         //dd($master_data);
              //         $log_data = 
              //         [
              //           'parent_id'            =>$parent_id,
              //           'business_id'          =>$business_id,
              //           'service_id'           => $serviceId->id,
              //           'source_type'          =>'API',
              //           'client_id'            => $array_data['data']['client_id'],
              //           'pan_number'           =>$array_data['data']['pan'],
              //           'mobile_number'        =>$array_data['data']['mobile'],
              //           'name'                 =>$array_data['data']['name'],
              //           'consent'              => 'Y',
              //           'credit_score'         => $array_data['data']['credit_score'],
              //           'report_type'          => 'html',
              //           'credit_report_link'   =>$array_data['data']['credit_report']!=NULL && count($array_data['data']['credit_report']) > 0 ? json_encode($array_data['data']['credit_report']) : NULL,
              //           'is_verified'          =>'1',
              //           'price'                =>$price,
              //           'user_type'            =>'customer',
              //           'user_id'              =>$user_id,
              //           'created_at'           =>date('Y-m-d H:i:s')
              //         ];
              //         //dd($log_data);
              //         DB::table('cibil_checks')->insert($log_data);

              //       $jaf_data=DB::table('jaf_form_data')->where(['candidate_id'=>$candidate_id,'service_id'=>$jaf->service_id])->update(['is_api_checked'=>'1','is_api_verified'=>'1','verification_status'=>'success','verified_at'=>date('Y-m-d H:i:s'),'is_insufficiency'=>'0','is_all_insuff_cleared' => 1,'insuff_cleared_by'=>Auth::user()->id,'updated_at'=>date('Y-m-d H:i:s')]); 

              //       $jaf_data=TRUE; 

              //       $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf->id,'service_id'=>$jaf->service_id,'status'=>'removed'])->first();

              //       if($ver_insuff!=NULL)
              //       {
              //           $ver_insuff_data=[
              //             'notes' => 'BGV Cleared',
              //             'updated_by' => Auth::user()->id,
              //             'updated_at' => date('Y-m-d H:i:s')
              //           ];

              //           DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf->id,'service_id'=>$jaf->service_id,'status'=>'removed'])->update($ver_insuff_data);

              //           $ver_id=$ver_insuff->id;
              //       }
              //       else
              //       {
              //         $ver_insuff_data=[
              //           'parent_id' => $parent_id,
              //           'business_id' => $business_id,
              //           'coc_id' =>  $jaf_cibil->business_id,
              //           'candidate_id' => $candidate_id,
              //           'service_id'  => $jaf_cibil->service_id,
              //           'jaf_form_data_id' => $jaf_cibil->id,
              //           'item_number' => $jaf_cibil->check_item_number,
              //           'activity_type'=> 'jaf-insuff',
              //           'status'=>'removed',
              //           'notes' => 'BGV Cleared',
              //           'created_by'   => Auth::user()->id,
              //           'created_at'   => date('Y-m-d H:i:s'),
              //           'updated_at' => date('Y-m-d H:i:s')
              //         ];
                
              //         DB::table('verification_insufficiency')->insert($ver_insuff_data);
              //       }

              //       $insuff_log_data=[
              //         'parent_id' => $parent_id,
              //         'business_id' => $business_id,
              //         'coc_id' => $jaf_cibil->business_id,
              //         'candidate_id' => $candidate_id,
              //         'service_id'  => $jaf->service_id,
              //         'jaf_form_data_id' => $jaf_cibil->id,
              //         'item_number' => $jaf_cibil->check_item_number,
              //         'activity_type'=> 'jaf-insuff',
              //         'status'=>'removed',
              //         'notes' => 'BGV Cleared',
              //         'created_by'   => Auth::user()->id,
              //         'created_at'   => date('Y-m-d H:i:s'),
              //       ];
              
              //       DB::table('insufficiency_logs')->insert($insuff_log_data);

              //     }
              //     else{
              //       //update insuff
              //       $jaf_data=DB::table('jaf_form_data')->where(['candidate_id'=>$candidate_id,'service_id'=>$jaf->service_id])->update(['is_api_checked'=>'1','is_api_verified'=>'0','is_insufficiency'=>'1','verification_status'=>'failed','verified_at'=>date('Y-m-d H:i:s')]); 

              //       // $jaf_data=TRUE; 

              //       $jaf_data_s=DB::table('jaf_form_data')->where(['candidate_id'=>$candidate_id,'service_id'=>$jaf->service_id])->first();

              //       $insuff_log_data=[
              //         'parent_id' => $parent_id,
              //         'business_id' => $business_id,
              //         'coc_id' => $jaf_cibil->business_id,
              //         'candidate_id' => $candidate_id,
              //         'service_id'  => $jaf->service_id,
              //         'jaf_form_data_id' => $jaf_cibil->id,
              //         'item_number' => $jaf_cibil->check_item_number,
              //         'activity_type'=> 'jaf-insuff',
              //         'status'=>'failed',
              //         'notes' => 'BGV Failed',
              //         'created_by'   => Auth::user()->id,
              //         'created_at'   => date('Y-m-d H:i:s'),
              //       ];
              
              //       DB::table('insufficiency_logs')->insert($insuff_log_data);

              //       $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf->id,'service_id'=>$jaf->service_id,'status'=>'raised'])->first();

              //             if($ver_insuff!=NULL)
              //             {
              //                 $ver_insuff_data=[
              //                   'notes' => 'BGV Failed',
              //                   'updated_by' => Auth::user()->id,
              //                   'updated_at' => date('Y-m-d H:i:s')
              //                 ];

              //                 DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf->id,'service_id'=>$jaf->service_id,'status'=>'raised'])->update($ver_insuff_data);

              //                 $ver_id=$ver_insuff->id;
              //             }
              //             else
              //             {
              //               $ver_insuff_data=[
              //                 'parent_id' => $parent_id,
              //                 'business_id' => $business_id,
              //                 'coc_id' => $jaf->business_id,
              //                 'candidate_id' => $candidate_id,
              //                 'service_id'  => $jaf->service_id,
              //                 'jaf_form_data_id' => $jaf->id,
              //                 'item_number' => $jaf->check_item_number,
              //                 'activity_type'=> 'jaf-insuff',
              //                 'status'=>'raised',
              //                 'notes' => 'BGV Failed',
              //                 'created_by'   => Auth::user()->id,
              //                 'created_at'   => date('Y-m-d H:i:s'),
              //               ];
                      
              //               $ver_id = DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);
              //             }

              //     }
              // }
              //manual 
              else
              {
                $jaf_data = DB::table('jaf_form_data')
                          ->where('candidate_id', $candidate_id)
                          ->where('service_id', $jaf->service_id)
                          ->update(['is_insufficiency'=>'0','verification_status'=>'success','verified_at'=>date('Y-m-d H:i:s'),'is_all_insuff_cleared' => 1,'insuff_cleared_by'=>Auth::user()->id,'updated_at'=>date('Y-m-d H:i:s')]);

                $jaf_data=TRUE; 

                $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf->id,'service_id'=>$jaf->service_id,'status'=>'removed'])->first();

                if($ver_insuff!=NULL)
                {
                    $ver_insuff_data=[
                      'notes' => 'BGV Cleared',
                      'updated_by' => Auth::user()->id,
                      'updated_at' => date('Y-m-d H:i:s')
                    ];

                    DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf->id,'service_id'=>$jaf->service_id,'status'=>'removed'])->update($ver_insuff_data);

                    $ver_id=$ver_insuff->id;
                }
                else
                {
                  $ver_insuff_data=[
                    'parent_id' => $parent_id,
                    'business_id' => $business_id,
                    'coc_id' => $jaf->business_id,
                    'candidate_id' => $candidate_id,
                    'service_id'  => $jaf->service_id,
                    'jaf_form_data_id' => $jaf->id,
                    'item_number' => $jaf->check_item_number,
                    'activity_type'=> 'jaf-insuff',
                    'status'=>'removed',
                    'notes' => 'BGV Cleared',
                    'created_by'   => Auth::user()->id,
                    'created_at'   => date('Y-m-d H:i:s'),
                    'updated_at' => date('Y-m-d H:i:s')
                  ];
            
                  DB::table('verification_insufficiency')->insert($ver_insuff_data);
                }

                $insuff_log_data=[
                  'parent_id' => $parent_id,
                  'business_id' => $business_id,
                  'coc_id' => $jaf->business_id,
                  'candidate_id' => $candidate_id,
                  'service_id'  => $jaf->service_id,
                  'jaf_form_data_id' => $jaf->id,
                  'item_number' => $jaf->check_item_number,
                  'activity_type'=> 'jaf-insuff',
                  'status'=>'removed',
                  'notes' => 'BGV Cleared',
                  'created_by'   => Auth::user()->id,
                  'created_at'   => date('Y-m-d H:i:s'),
                ];
          
                DB::table('insufficiency_logs')->insert($insuff_log_data);
          


              }
            }
            // $jaf_data =  DB::table('jaf_form_data')
            //               ->where('candidate_id', $candidate_id)
            //               ->update(['is_all_insuff_cleared' => 1,'insuff_cleared_by'=>Auth::user()->id]);

            
          
              //return result 
              if($jaf_data){  
                  
                  DB::table('job_items')
                  ->where('candidate_id', $candidate_id)
                  ->update(['is_all_insuff_cleared' => 1,'insuff_cleared_at'=>date('Y-m-d H:i:s'),'insuff_cleared_by'=>Auth::user()->id,'updated_at'=>date('Y-m-d H:i:s')]);
                  $is_updated=TRUE;
                  if($is_updated){
                    //generate report here 
                    $this->generateCandidateReport($candidate_id);

                    DB::commit();
                    return response()->json([
                    'status'=>'ok',
                    'check' =>'no',
                    'message' => 'updated',                
                    ], 200);
                  }
                  else{
                    DB::commit();
                    return response()->json([
                      'status' =>'no',
                      ], 200);
                  }
              }
              else{
                  DB::commit();
                  return response()->json([
                  'status' =>'no',
                  ], 200);
              }
          }
          else{   
            return response()->json([
                'status' =>'error',
                ], 200);
          }
        }
        catch (\Exception $e) {
            DB::rollback();
            // something went wrong
            return $e;
        }    
    }

    //generate a report of caniddate 
    public function generateCandidateReport($candidate_id){

      $id = $candidate_id;
      $business_id = Auth::user()->business_id;
      $user_id = Auth::user()->id;
      $report_id ="";
      $job = DB::table('job_items')->where(['candidate_id'=>$id])->first(); 
      $sla_id = $job->sla_id;
      //check report items created or not
      $report_count = DB::table('reports')->where(['candidate_id'=>$id])->count(); 
      if($report_count == 0){
        
        $job = DB::table('job_items')->where(['candidate_id'=>$id])->first(); 
      
        $data = 
          [
            'parent_id'     =>$business_id,
            'business_id'   =>$job->business_id,
            'candidate_id'  =>$id,
            'sla_id'        =>$job->sla_id,       
            'created_at'    =>date('Y-m-d H:i:s'),
            'created_by'  =>  $user_id  
          ];
          
          $report_id = DB::table('reports')->insertGetId($data);
          
          // add service items
          $jaf_items = DB::table('jaf_form_data')->where(['candidate_id'=>$id])->get(); 
          // dd($jaf_items);
          $approval_status_id = 1;
          foreach($jaf_items as $item){
            $approval_status_id = 1;
            if($item->verification_status == 'success'){
              $approval_status_id = 4;
            }

            $data = 
              [
                'report_id'           =>$report_id,
                'service_id'          =>$item->service_id,
                'service_item_number' =>$item->check_item_number,
                'candidate_id'        =>$id,      
                'jaf_data'            =>$item->form_data,
                'jaf_id'              =>$item->id,
                'approval_status_id'  =>$approval_status_id,
                'created_at'          =>date('Y-m-d H:i:s')
              ];
              
            $report_item_id = DB::table('report_items')->insertGetId($data);
          }
          //report update
          // $jaf_items_failed = DB::table('jaf_form_data')->where(['candidate_id'=>$id])->whereIn('verification_status',['failed',null])->get(); 
          // // dd($jaf_items_failed);
          // if (count($jaf_items_failed)>0) {
          //  //update report status
          // DB::table('reports')
          // ->where(['id'=>$report_id])
          // ->update(['report_type'=>'auto','is_verified'=>'1','status'=>'interim','manual_input_status'=>'completed','approval_status_id'=>$approval_status_id,'report_jaf_data'=>NULL]);
        
          // } else {
              
          // //update report status
          // DB::table('reports')
          // ->where(['id'=>$report_id])
          // ->update(['report_type'=>'auto','is_verified'=>'1','status'=>'completed','manual_input_status'=>'completed','approval_status_id'=>$approval_status_id,'report_jaf_data'=>NULL]);
      
          // }
          DB::table('reports')
          ->where(['id'=>$report_id])
          ->update(['report_type'=>'auto','is_verified'=>'1','status'=>'completed','manual_input_status'=>'completed','approval_status_id'=>$approval_status_id,'report_jaf_data'=>NULL,'complete_created_at'=>date('Y-m-d H:i:s')]);
      
      }
      
        $report = DB::table('reports')->where(['candidate_id'=>$id])->first(); 
        $report_id = $report->id;
        $report_status = $report->status;

      $candidate = [];
      $report_items = [];
      $candidate =    Db::table('users as u')
                        ->select('u.id','u.business_id','u.first_name','u.middle_name','u.last_name','u.name','u.email','u.phone','r.created_at')  
                        ->leftjoin('reports as r','r.candidate_id','=','u.id')
                        ->where(['u.id'=>$id]) 
                        ->first(); 
      
      $report_items = Db::table('report_items as ri')
                        ->select('ri.*','s.name as service_name','s.id as service_id')  
                        ->join('services as s','s.id','=','ri.service_id')
                        ->where(['ri.report_id'=>$report_id]) 
                        ->orderBy('s.sort_number','asc')
                        ->get(); 

        //get BGV data - 
        $jaf = DB::table('jaf_form_data')->select('form_data_all')->where(['candidate_id'=>$id])->first(); 

        $status_list = DB::table('report_status_masters')->where(['status'=>1])->get();             

    }


    /**
     * Delete Candidate
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function deleteCandidate(Request $request)
    {   
        $candidate_id = base64_decode($request->get('candidate_id')); 

        DB::beginTransaction();
        try{
          if(Auth::check()){

            DB::table('users')
              ->where('id', $candidate_id)
              ->update(['is_deleted' => 1,'deleted_at'=>date('Y-m-d H:i:s'),'deleted_by'=>Auth::user()->id]);

              $is_deleted=TRUE;
            
              //return result 
              if($is_deleted){   
                  DB::commit();
                  return response()->json([
                  'status'=>'ok',
                  'message' => 'deleted',                
                  ], 200);
              }
              else{
                  return response()->json([
                  'status' =>'no',
                  ], 200);
              }

          }
          else{   
              return response()->json([
                  'status' =>'no',
                  ], 200);
          }
        }
        catch (\Exception $e) {
            DB::rollback();
            // something went wrong
            return $e;
        }       
    }

     /**
     * Delete Candidate
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */

     public function deleteCandidatePermanent(Request $request)
     {
     
         $candidate_id = base64_decode($request->get('candidate_id'));  
         DB::beginTransaction();

         try{

            if(Auth::check())
            {
                $user_id = Auth::user()->id;

                $candidate = DB::table('users')->where('id',$candidate_id)->first();

                $modules = [];

                $tables = [];

                $module_all = [];

                // Check Tables

                $aadhar_check=DB::table('aadhar_checks')->where('candidate_id',$candidate_id)->get();

                if(count($aadhar_check)>0)
                {
                    $tables[]='aadhar_checks';

                    if(array_key_exists('Verification Checks',$module_all))
                    {
                        array_push($module_all['Verification Checks'],'aadhar_checks');
                    }
                    else
                    {
                        $module_all['Verification Checks']=['aadhar_checks'];
                    }

                    foreach($aadhar_check as $aadhar)
                    {
                        AadharCheck::find($aadhar->id)->delete();
                    }
                }

                $bank_check=DB::table('bank_account_checks')->where('candidate_id',$candidate_id)->get();

                if(count($bank_check)>0)
                {
                    $tables[]='bank_account_checks';

                    if(array_key_exists('Verification Checks',$module_all))
                    {
                        array_push($module_all['Verification Checks'],'bank_account_checks');
                    }
                    else
                    {
                        $module_all['Verification Checks']=['bank_account_checks'];
                    }

                    foreach($bank_check as $bank)
                    {
                        BankAccountCheck::find($bank->id)->delete();
                    }
                }

                $cin_check=DB::table('cin_checks')->where('candidate_id',$candidate_id)->get();

                if(count($cin_check)>0)
                {
                    $tables[]='cin_checks';

                    if(array_key_exists('Verification Checks',$module_all))
                    {
                        array_push($module_all['Verification Checks'],'cin_checks');
                    }
                    else
                    {
                        $module_all['Verification Checks']=['cin_checks'];
                    }

                    foreach($cin_check as $cin)
                    {
                        CinCheck::find($cin->id)->delete();
                    }
                }

                $covid19_check=DB::table('covid19_checks')->where('candidate_id',$candidate_id)->get();

                if(count($covid19_check)>0)
                {
                    $tables[]='covid19_checks';

                    if(array_key_exists('Verification Checks',$module_all))
                    {
                        array_push($module_all['Verification Checks'],'covid19_checks');
                    }
                    else
                    {
                        $module_all['Verification Checks']=['covid19_checks'];
                    }

                    foreach($covid19_check as $covid)
                    {
                        Covid19Check::find($covid->id)->delete();
                    }
                }

                $dl_check=DB::table('dl_checks')->where('candidate_id',$candidate_id)->get();

                if(count($dl_check)>0)
                {
                    $tables[]='dl_checks';

                    if(array_key_exists('Verification Checks',$module_all))
                    {
                        array_push($module_all['Verification Checks'],'dl_checks');
                    }
                    else
                    {
                        $module_all['Verification Checks']=['dl_checks'];
                    }

                    foreach($dl_check as $dl)
                    {
                        DlCheck::find($dl->id)->delete();
                    }
                }

                $ecourt_check=DB::table('e_court_checks')->where('candidate_id',$candidate_id)->get();

                if(count($ecourt_check)>0)
                {
                    $tables[]='e_court_checks';

                    if(array_key_exists('Verification Checks',$module_all))
                    {
                        array_push($module_all['Verification Checks'],'e_court_checks');
                    }
                    else
                    {
                        $module_all['Verification Checks']=['e_court_checks'];
                    }

                    foreach($ecourt_check as $ecourt)
                    {
                        ECourtCheck::find($ecourt->id)->delete();
                    }
                }

                $ecourt_check_items=DB::table('e_court_check_items')->where('candidate_id',$candidate_id)->get();

                if(count($ecourt_check_items)>0)
                {
                    $tables[]='e_court_check_items';

                    if(array_key_exists('Verification Checks',$module_all))
                    {
                        array_push($module_all['Verification Checks'],'e_court_check_items');
                    }
                    else
                    {
                        $module_all['Verification Checks']=['e_court_check_items'];
                    }

                    foreach($ecourt_check_items as $ecourt)
                    {
                        ECourtCheckItem::find($ecourt->id)->delete();
                    }
                }

                $gst_check=DB::table('gst_checks')->where('candidate_id',$candidate_id)->get();

                if(count($gst_check)>0)
                {
                    $tables[]='gst_checks';

                    if(array_key_exists('Verification Checks',$module_all))
                    {
                        array_push($module_all['Verification Checks'],'gst_checks');
                    }
                    else
                    {
                        $module_all['Verification Checks']=['gst_checks'];
                    }

                    foreach($gst_check as $gst)
                    {
                        GstCheck::find($gst->id)->delete();
                    }
                }

                $pan_check=DB::table('pan_checks')->where('candidate_id',$candidate_id)->get();

                if(count($pan_check)>0)
                {
                    $tables[]='pan_checks';

                    if(array_key_exists('Verification Checks',$module_all))
                    {
                        array_push($module_all['Verification Checks'],'pan_checks');
                    }
                    else
                    {
                        $module_all['Verification Checks']=['pan_checks'];
                    }

                    foreach($pan_check as $pan)
                    {
                        PanCheck::find($pan->id)->delete();
                    }
                }

                $passport_check=DB::table('passport_checks')->where('candidate_id',$candidate_id)->get();

                if(count($passport_check)>0)
                {
                    $tables[]='passport_checks';

                    if(array_key_exists('Verification Checks',$module_all))
                    {
                        array_push($module_all['Verification Checks'],'passport_checks');
                    }
                    else
                    {
                        $module_all['Verification Checks']=['passport_checks'];
                    }

                    foreach($passport_check as $passport)
                    {
                        PassportCheck::find($passport->id)->delete();
                    }
                }

                $rc_check=DB::table('rc_checks')->where('candidate_id',$candidate_id)->get();

                if(count($rc_check)>0)
                {
                    $tables[]='rc_checks';

                    if(array_key_exists('Verification Checks',$module_all))
                    {
                        array_push($module_all['Verification Checks'],'rc_checks');
                    }
                    else
                    {
                        $module_all['Verification Checks']=['rc_checks'];
                    }

                    foreach($rc_check as $rc)
                    {
                        RcCheck::find($rc->id)->delete();
                    }
                }

                $telecom_check=DB::table('telecom_check')->where('candidate_id',$candidate_id)->get();

                if(count($telecom_check)>0)
                {
                    $tables[]='telecom_check';

                    if(array_key_exists('Verification Checks',$module_all))
                    {
                        array_push($module_all['Verification Checks'],'telecom_check');
                    }
                    else
                    {
                        $module_all['Verification Checks']=['telecom_check'];
                    }

                    foreach($telecom_check as $telecom)
                    {
                        TelecomCheck::find($telecom->id)->delete();
                    }
                }

                $upi_check=DB::table('upi_checks')->where('candidate_id',$candidate_id)->get();

                if(count($upi_check)>0)
                {
                    $tables[]='upi_checks';

                    if(array_key_exists('Verification Checks',$module_all))
                    {
                        array_push($module_all['Verification Checks'],'upi_checks');
                    }
                    else
                    {
                        $module_all['Verification Checks']=['upi_checks'];
                    }

                    foreach($upi_check as $upi)
                    {
                        UpiCheck::find($upi->id)->delete();
                    }
                }

                $voter_id=DB::table('voter_id_checks')->where('candidate_id',$candidate_id)->get();

                if(count($voter_id)>0)
                {
                    $tables[]='voter_id_checks';

                    if(array_key_exists('Verification Checks',$module_all))
                    {
                        array_push($module_all['Verification Checks'],'voter_id_checks');
                    }
                    else
                    {
                        $module_all['Verification Checks']=['voter_id_checks'];
                    }

                    foreach($voter_id as $voter)
                    {
                        VoterIdCheck::find($voter->id)->delete();
                    }
                }

                if(count($aadhar_check)>0 || count($pan_check)>0 || count($voter_id)>0 || count($rc_check)>0 || count($dl_check)>0 || count($passport_check)>0 || count($bank_check)>0 || count($covid19_check)>0 || count($ecourt_check)>0 || count($ecourt_check_items) > 0 || count($cin_check)>0 || count($upi_check)>0 || count($gst_check)>0)
                {
                  $modules[]='Verification Checks';
                }

                $candidates=DB::table('candidates')->where('candidate_id',$candidate_id)->get();

                $modules[]='Candidate';

                if(count($candidates)>0)
                {
                    $tables[]='candidates';

                    if(array_key_exists('Candidate',$module_all))
                    {
                        array_push($module_all['Candidate'],'candidates');
                    }
                    else
                    {
                        $module_all['Candidate']=['candidates'];
                    }

                    foreach($candidates as $c)
                    {
                        Candidate::find($c->id)->delete();
                    }
                }

                $candidate_hold=DB::table('candidate_hold_statuses')->where('candidate_id',$candidate_id)->get();

                if(count($candidate_hold)>0)
                {
                    $tables[]='candidate_hold_statuses';

                    if(array_key_exists('Candidate',$module_all))
                    {
                        array_push($module_all['Candidate'],'candidate_hold_statuses');
                    }
                    else
                    {
                        $module_all['Candidate']=['candidate_hold_statuses'];
                    }

                    foreach($candidate_hold as $c)
                    {
                      CandidateHoldStatus::find($c->id)->delete();
                    }
                }

                $candidate_jaf_status = DB::table('candidate_jaf_status')->where('candidate_id',$candidate_id)->get();

                if(count($candidate_jaf_status)>0)
                {
                  DB::table('candidate_jaf_status')->where('candidate_id',$candidate_id)->delete();

                  $tables[]='candidate_jaf_status';

                  if(array_key_exists('Candidate',$module_all))
                  {
                      array_push($module_all['Candidate'],'candidate_jaf_status');
                  }
                  else
                  {
                      $module_all['Candidate']=['candidate_jaf_status'];
                  }
                }

                $coc_notify=DB::table('coc_notification_masters')->where('candidate_id',$candidate_id)->get();

                if(count($coc_notify)>0)
                {
                    $tables[]='coc_notification_masters';

                    if(array_key_exists('Candidate',$module_all))
                    {
                        array_push($module_all['Candidate'],'coc_notification_masters');
                    }
                    else
                    {
                        $module_all['Candidate']=['coc_notification_masters'];
                    }

                    foreach($coc_notify as $c)
                    {
                      CocNotificationMaster::find($c->id)->delete();
                    }
                }

                $digital_address=DB::table('digital_address_verifications')->where('candidate_id',$candidate_id)->get();

                if(count($digital_address)>0)
                {
                    $tables[]='digital_address_verifications';

                    if(array_key_exists('Candidate',$module_all))
                    {
                        array_push($module_all['Candidate'],'digital_address_verifications');
                    }
                    else
                    {
                        $module_all['Candidate']=['digital_address_verifications'];
                    }

                    foreach($digital_address as $digital)
                    {
                      DigitalAddressVerification::find($digital->id)->delete();
                    }
                }

                $report_exports = DB::table('report_exports')->where('candidate_id',$candidate_id)->get();

                if(count($report_exports)>0)
                {
                    $tables[]='report_exports';

                    if(array_key_exists('Candidate',$module_all))
                    {
                        array_push($module_all['Candidate'],'report_exports');
                    }
                    else
                    {
                        $module_all['Candidate']=['report_exports'];
                    }

                    DB::table('report_exports')->where('candidate_id',$candidate_id)->delete();
                }

                $verification_insuff=DB::table('verification_insufficiency')->where('candidate_id',$candidate_id)->get();

                if(count($verification_insuff)>0)
                {
                    $tables[]='verification_insufficiency';

                    if(array_key_exists('Candidate',$module_all))
                    {
                        array_push($module_all['Candidate'],'verification_insufficiency');
                    }
                    else
                    {
                        $module_all['Candidate']=['verification_insufficiency'];
                    }

                    foreach($verification_insuff as $insuff)
                    {
                      VerificationInsufficiency::find($insuff->id)->delete();
                    }
                }

                $address_verifications=DB::table('address_verifications')->where('candidate_id',$candidate_id)->get();

                if(count($address_verifications)>0)
                {
                    $tables[]='address_verifications';

                    if(array_key_exists('Candidate',$module_all))
                    {
                        array_push($module_all['Candidate'],'address_verifications');
                    }
                    else
                    {
                        $module_all['Candidate']=['address_verifications'];
                    }

                    foreach($address_verifications as $address)
                    {
                      AddressVerification::find($address->id)->delete();
                    }
                }


                $address_decision=DB::table('address_verification_decision_logs')->where('candidate_id',$candidate_id)->get();

                if(count($address_decision)>0)
                {
                    $tables[]='address_verification_decision_logs';

                    if(array_key_exists('Candidate',$module_all))
                    {
                        array_push($module_all['Candidate'],'address_verification_decision_logs');
                    }
                    else
                    {
                        $module_all['Candidate']=['address_verification_decision_logs'];
                    }

                    foreach($address_decision as $address)
                    {
                      AddressVerificationDecisionLog::find($address->id)->delete();
                    }
                }

                $otp_email=DB::table('otp_by_email')->where('candidate_id',$candidate_id)->get();

                if(count($otp_email)>0)
                {
                    $tables[]='otp_by_email';

                    if(array_key_exists('Candidate',$module_all))
                    {
                        array_push($module_all['Candidate'],'otp_by_email');
                    }
                    else
                    {
                        $module_all['Candidate']=['otp_by_email'];
                    }

                    foreach($otp_email as $otp)
                    {
                      OtpByEmail::find($otp->id)->delete();
                    }
                }

                $job_items=DB::table('job_items')->where('candidate_id',$candidate_id)->get();

                if(count($job_items)>0)
                {
                    $tables[]='job_items';

                    if(array_key_exists('Candidate',$module_all))
                    {
                        array_push($module_all['Candidate'],'job_items');
                    }
                    else
                    {
                        $module_all['Candidate']=['job_items'];
                    }

                    $tables[]='jobs';

                    if(array_key_exists('Candidate',$module_all))
                    {
                        array_push($module_all['Candidate'],'jobs');
                    }
                    else
                    {
                        $module_all['Candidate']=['jobs'];
                    }

                    foreach($job_items as $job)
                    {
                      JobItem::find($job->id)->delete();

                      Job::find($job->job_id)->delete();
                    }
                }

                $job_sla_items=DB::table('job_sla_items')->where('candidate_id',$candidate_id)->get();

                if(count($job_sla_items)>0)
                {
                    $tables[]='job_sla_items';

                    if(array_key_exists('Candidate',$module_all))
                    {
                        array_push($module_all['Candidate'],'job_sla_items');
                    }
                    else
                    {
                        $module_all['Candidate']=['job_sla_items'];
                    }

                    foreach($job_sla_items as $job)
                    {
                      JobSlaItem::find($job->id)->delete();
                    }
                }

                $tasks=DB::table('tasks')->where('candidate_id',$candidate_id)->get();

                if(count($tasks)>0)
                {
                    $modules[]='Task';

                    $tables[]='tasks';

                    if(array_key_exists('Task',$module_all))
                    {
                        array_push($module_all['Task'],'tasks');
                    }
                    else
                    {
                        $module_all['Task']=['tasks'];
                    }

                    foreach($tasks as $task)
                    {
                      Task::find($task->id)->delete();
                    }
                }

                $tasks=DB::table('task_assignments')->where('candidate_id',$candidate_id)->get();

                if(count($tasks)>0)
                {
                    $tables[]='task_assignments';

                    if(array_key_exists('Task',$module_all))
                    {
                        array_push($module_all['Task'],'task_assignments');
                    }
                    else
                    {
                        $module_all['Task']=['task_assignments'];
                    }

                    foreach($tasks as $task)
                    {
                      TaskAssignment::find($task->id)->delete();
                    }
                }

                $insufficiency_attach = DB::table('insufficiency_attachments')->where('candidate_id',$candidate_id)->get();

                if(count($insufficiency_attach)>0)
                {
                    $tables[]='insufficiency_attachments';

                    if(array_key_exists('Candidate',$module_all))
                    {
                        array_push($module_all['Candidate'],'insufficiency_attachments');
                    }
                    else
                    {
                        $module_all['Candidate']=['insufficiency_attachments'];
                    }

                    foreach($insufficiency_attach as $insuff)
                    {

                      if($insuff->file_platform=='web')
                      {
                          $path = public_path('/uploads/raise-insuff/');

                          if(File::exists($path.$insuff->file_name))
                          {
                            File::delete($path.$insuff->file_name);
                          }

                          $path = public_path('/uploads/clear-insuff/');

                          if(File::exists($path.$insuff->file_name))
                          {
                            File::delete($path.$insuff->file_name);
                          }
                      }

                      DB::table('insufficiency_attachments')->where('id',$insuff->id)->delete();

                    }
                }

                $jaf_files = DB::table('jaf_files')->where('candidate_id',$candidate_id)->get();

                if(count($jaf_files)>0)
                {
                    $tables[]='jaf_files';

                    if(array_key_exists('Candidate',$module_all))
                    {
                        array_push($module_all['Candidate'],'jaf_files');
                    }
                    else
                    {
                        $module_all['Candidate']=['jaf_files'];
                    }

                    foreach($jaf_files as $file)
                    {
                      $path = public_path('/uploads/jaf_details/');

                      if(File::exists($path.$file->file_name))
                      {
                        File::delete($path.$file->file_name);
                      }

                      DB::table('jaf_files')->where('id',$file->id)->delete();
                    }
                }

                $jaf_form_data=DB::table('jaf_form_data')->where('candidate_id',$candidate_id)->get();

                if(count($jaf_form_data)>0)
                {
                    $tables[]='jaf_form_data';

                    if(array_key_exists('Candidate',$module_all))
                    {
                        array_push($module_all['Candidate'],'jaf_form_data');
                    }
                    else
                    {
                        $module_all['Candidate']=['jaf_form_data'];
                    }

                    foreach($jaf_form_data as $key => $jaf)
                    {
                      $jaf_additional_charges = DB::table('jaf_additional_charge_attachments')->where('jaf_id',$jaf->id)->get();

                      if(count($jaf_additional_charges)>0)
                      {
                          if($key==0)
                          {
                            $tables[]='jaf_additional_charge_attachments';

                            if(array_key_exists('Candidate',$module_all))
                            {
                                array_push($module_all['Candidate'],'jaf_additional_charge_attachments');
                            }
                            else
                            {
                                $module_all['Candidate']=['jaf_additional_charge_attachments'];
                            }
                          }

                          foreach($jaf_additional_charges as $attach)
                          {
                            $path = public_path('/uploads/jaf/additional-charge/');

                            if(File::exists($path.$attach->file_name))
                            {
                              File::delete($path.$attach->file_name);
                            }

                            DB::table('jaf_additional_charge_attachments')->where('id',$attach->id)->delete();

                          }
                      }

                      JafFormData::find($jaf->id)->delete();
                    }
                }

                $jaf_attach=DB::table('jaf_item_attachments')->where('candidate_id',$candidate_id)->get();

                if(count($jaf_attach)>0)
                {
                    $tables[]='jaf_item_attachments';

                    if(array_key_exists('Candidate',$module_all))
                    {
                        array_push($module_all['Candidate'],'jaf_item_attachments');
                    }
                    else
                    {
                        $module_all['Candidate']=['jaf_item_attachments'];
                    }

                    foreach($jaf_attach as $attach)
                    {
                      $path = public_path('/uploads/jaf-files/');

                      if(File::exists($path.$attach->file_name))
                      {
                        File::delete($path.$attach->file_name);
                      }

                      DB::table('jaf_item_attachments')->where('id',$attach->id)->delete();
                    }
                }

                $reports=DB::table('reports')->where('candidate_id',$candidate_id)->get();

                if(count($reports)>0)
                {
                    $modules[]='Report';

                    $tables[]='reports';

                    if(array_key_exists('Report',$module_all))
                    {
                        array_push($module_all['Report'],'reports');
                    }
                    else
                    {
                        $module_all['Report']=['reports'];
                    }

                    foreach($reports as $report)
                    {
                      Report::find($report->id)->delete();
                    }
                }

                $report_items=DB::table('report_items')->where('candidate_id',$candidate_id)->get();

                if(count($report_items)>0)
                {
                    $tables[]='report_items';

                    if(array_key_exists('Report',$module_all))
                    {
                        array_push($module_all['Report'],'report_items');
                    }
                    else
                    {
                        $module_all['Report']=['report_items'];
                    }

                    foreach($report_items as $key => $report)
                    {

                      $report_attach=DB::table('report_item_attachments')->where('report_item_id',$report->id)->get();

                      if(count($report_attach)>0)
                      {
                          if($key==0)
                          {
                            $tables[]='report_item_attachments';

                            if(array_key_exists('Report',$module_all))
                            {
                                array_push($module_all['Report'],'report_item_attachments');
                            }
                            else
                            {
                                $module_all['Report']=['report_item_attachments'];
                            }
                          }

                          foreach($report_attach as $attach)
                          {
                            $path = public_path('/uploads/report-files/');

                            if(File::exists($path.$attach->file_name))
                            {
                              File::delete($path.$attach->file_name);
                            }

                            DB::table('report_item_attachments')->where('id',$attach->id)->delete();
                          }
                      }

                      ReportItem::find($report->id)->delete();
                    }
                }

                $tables[]='users';

                if(array_key_exists('Candidate',$module_all))
                {
                    array_push($module_all['Candidate'],'users');
                }
                else
                {
                    $module_all['Candidate']=['users'];
                }

                User::find($candidate_id)->delete();

                DB::table('purge_data_logs')->insert([
                  'parent_id' => $candidate->parent_id,
                  'business_id' => $candidate->business_id,
                  'user_id' => $candidate->id,
                  'display_id' => $candidate->display_id,
                  'name' => $candidate->name,
                  'modules' => json_encode($modules),
                  'tables' => json_encode($tables),
                  'module_all' => json_encode($module_all),
                  'module_type' => 'account-deleted',
                  'user_type' => 'candidate',
                  'created_by'  => $user_id,
                  'created_at' => date('Y-m-d H:i:s')
                ]);

                $is_deleted=TRUE;
                
                //return result 
                if($is_deleted){   
                    DB::commit();
                    return response()->json([
                    'status'=>'ok',
                    'message' => 'deleted',                
                    ], 200);
                }
                else{
                    return response()->json([
                    'status' =>'no',
                    ], 200);
                }

            }
            else{   
              return response()->json([
                  'status' =>'no',
                  ], 200);
            }

         }
         catch (\Exception $e) {
              DB::rollback();
              // something went wrong
              return $e;
          }
     }

    // Create Function for hold a candidate
    public function holdCandidate(Request $request)
    {
        $parent_id=Auth::user()->parent_id;
        $business=Auth::user()->business_id;
        $user_id=Auth::user()->id;
        $candidate_id = base64_decode($request->get('candidate_id'));  
        $business_id = base64_decode($request->get('business_id'));  
        // echo('abc');
        // dd($candidate_id);

        if($request->isMethod('get'))
        {
            $candidate = DB::table('users')->where('id',$candidate_id)->first();

            $candidate_hold_logs = DB::table('candidate_hold_status_logs')->where('candidate_id',$candidate_id)->get();

            $viewRender = view('admin.candidates.hold-resume.index',compact('candidate_hold_logs','candidate'))->render();
            return response()->json(
                                    array(
                                      'success' => true, 
                                      'candidate_name' => $candidate->name.' ('.$candidate->display_id.')',
                                      'html'=>$viewRender
                                    )
                                  );
        }

        $rules= [
            'comments' => 'required|min:1',
        ];

        
        $validator = Validator::make($request->all(), $rules);
          
        if ($validator->fails()){
            return response()->json([
                'success' => false,
                'error_type' => 'validation',
                'errors' => $validator->errors()
            ]);
        }

        DB::beginTransaction();
        try
        {
          $hold = new CandidateHoldStatus();
          $hold->business_id =$business_id;
          $hold->candidate_id =$candidate_id;
          $hold->status = '1';
          $hold->hold_by =Auth::user()->id;
          $hold->hold_notes =$request->comments;
          $hold->hold_at = date('Y-m-d H:i:s');
          $hold->save();
      
          $hold_data = CandidateHoldStatus::where(['candidate_id'=>$candidate_id,'business_id'=>$business_id,'hold_remove_at'=>null])->first();

          $hold_log_data=DB::table('candidate_hold_status_logs')->insert([
              'parent_id'=>$parent_id,
              'business_id'=> $business,
              'candidate_id' => $candidate_id,
              'user_id' => $user_id,
              'status' => 'hold',
              'notes' => $request->comments,
              'created_at' => date('Y-m-d H:i:s'),
              'updated_at' => date('Y-m-d H:i:s')
          ]);
          if ($hold_data) {
            DB::commit();
            return response()->json([
              'success' => true,
              'message' => 'Hold',                
            ], 200);
          }else{
            return response()->json([
              'success' => true,
              'message' => 'Something Went Wrong !!'
            ], 200);
          }
        }
        catch (\Exception $e) {
            DB::rollback();
            // something went wrong
            return $e;
        }       
      
    }

     // Update hold to resume a candidate
     public function resumeCandidate(Request $request)
     {
          $parent_id=Auth::user()->parent_id;
          $business=Auth::user()->business_id;
          $user_id=Auth::user()->id;
          $candidate_id = base64_decode($request->get('candidate_id'));  
          $business_id = base64_decode($request->get('business_id'));  
          // echo('abc');
          // dd($business_id);
          //  $hold = new CandidateHoldStatus();
          //  $hold->business_id =$business_id;
          //  $hold->candidate_id =$candidate_id;
          //  $hold->status = '1';
          //  $hold->hold_by =Auth::user()->id;
          //  $hold->hold_at = date('Y-m-d H:i:s');
          //  $hold->save();

          if($request->isMethod('get'))
          {
              $candidate = DB::table('users')->where('id',$candidate_id)->first();

              $candidate_hold_logs = DB::table('candidate_hold_status_logs')->where('candidate_id',$candidate_id)->get();

              $viewRender = view('admin.candidates.hold-resume.index',compact('candidate_hold_logs','candidate'))->render();
              return response()->json(
                                      array(
                                        'success' => true, 
                                        'candidate_name' => $candidate->name.' ('.$candidate->display_id.')',
                                        'html'=>$viewRender
                                      )
                                    );
          }

          $rules= [
              'comments' => 'required|min:1',
          ];

          
          $validator = Validator::make($request->all(), $rules);
            
          if ($validator->fails()){
              return response()->json([
                  'success' => false,
                  'error_type' => 'validation',
                  'errors' => $validator->errors()
              ]);
          }

          DB::beginTransaction();
          try
          {
        
              CandidateHoldStatus::where(['candidate_id'=>$candidate_id,'business_id'=>$business_id,'hold_remove_at'=>null])
                                    ->update(['hold_remove_by'=>Auth::user()->id,
                                              'hold_remove_notes' => $request->comments,
                                            'hold_remove_at'=>date('Y-m-d H:i:s')]);

              $hold_log_data=DB::table('candidate_hold_status_logs')->insert([
                'parent_id'=>$parent_id,
                'business_id'=> $business,
                'candidate_id' => $candidate_id,
                'user_id' => $user_id,
                'status' => 'removed',
                'notes' => $request->comments,
                'created_at' => date('Y-m-d H:i:s'),
                'updated_at' => date('Y-m-d H:i:s')
                ]);

                $hold_data = TRUE;
              
              if ($hold_data) {
                DB::commit();
                return response()->json([
                  'success' => true,
                  'message' => 'removed',                
                  ], 200);
              }else{
                return response()->json([
                  'success' => true,
                  'message' => 'Something Went Wrong !!'
                ], 200);
              }
          }
          catch (\Exception $e) {
              DB::rollback();
              // something went wrong
              return $e;
          }       
       
     }

    public function closeCase(Request $request){
          $candidate_id = base64_decode($request->get('candidate_id'));  
          //$business_id = base64_decode($request->get('business_id'));  
          if($request->isMethod('get'))
            {
              
                $candidate = DB::table('users')->where('id',$candidate_id)->first();
                // dd($candidate);

                $candidate_hold_logs = DB::table('candidate_hold_status_logs')->where('candidate_id',$candidate_id)->get();

                // $viewRender = view('admin.candidates.hold-resume.index',compact('candidate_hold_logs','candidate'))->render();
                return response()->json(
                  array(
                    'success' => true, 
                    'candidate_name' => $candidate->name.' ('.$candidate->display_id.')',
                  
                  )
                );
            }
            $rules= [
              'comments' => 'required|min:1',
            ];
          
          $validator = Validator::make($request->all(), $rules);
            
          if ($validator->fails()){
              return response()->json([
                  'success' => false,
                  'error_type' => 'validation',
                  'errors' => $validator->errors()
              ]);
          }
          DB::table('users')
          ->where('id', $candidate_id)
          ->update([
            'close_comment'=>$request->comments,
            'close_case'=>1,
          ]);
          $allowedextension=['jpg','jpeg','png','png','pdf'];
          $filePath = public_path('/uploads/close-case/'); 
          $files= $request->file('attachment');
          if($request->hasFile('attachment') && $request->file('attachment') !="")
          { 
            foreach($files as $file)
            {
                    $extension = $file->getClientOriginalExtension();

                    $check = in_array($extension,$allowedextension);
                    $file_size = number_format(File::size($file) / 1048576, 2);

                    if(!$check)
                    {
                        return response()->json([
                          'fail' => true,
                          'errors' => ['attachment' => 'Only jpg,jpeg,png,pdf are allowed !'],
                          'error_type'=>'validation'
                        ]);
                    }

                    if($file_size > 10)
                    {
                        return response()->json([
                          'fail' => true,
                          'error_type'=>'validation',
                          'errors' => ['attachment' => 'The document size must be less than only 10mb Upload !'],
                        ]);                        
                    }
            }
            foreach($files as $file)
            {
                $file_data = $file->getClientOriginalName();
                $tmp_data  = $candidate_id.'-'.date('mdYHis').'-'.$file_data; 
                $data = $file->move($filePath, $tmp_data);   
                $productImage = DB::table('attachments')->insert(['candidate_id'=>$candidate_id,'file_name'=> $tmp_data]);    
            }
            return response()->json([
              'success' => true,
              'message' => 'Close',                
            ], 200);
          }
          return response()->json([
            'success' => true,
            'message' => 'Closecase',                
          ], 200);
      
    }
    
    public function candidateClosedLogs(Request $request ){
      $candidate_id = base64_decode($request->get('candidate_id'));
      $closed_case_user=DB::table('users')
                            ->where(['id'=> $candidate_id])->first();
      $attachfile='';
      $closecasefile=DB::table('attachments')->where(['candidate_id'=>$candidate_id])->get();
      if( count($closecasefile)>0){
        foreach($closecasefile as $ccf){
          $img='';
        
          $path=url('/').'/uploads/close-case/';
          $file=$path.$ccf->file_name;
          if(stripos($ccf->file_name, 'pdf')!==false) {
            $img='<img src="'.url("/")."/admin/images/icon_pdf.png".'" title="'.$ccf->file_name.'" alt="preview" style="height:100px;"/>';

          }else{
            $img='<img src="'.$file.'" title="'.$ccf->file_name.'" alt="preview" style="height:100px;"/>';
            
          }
          if($closecasefile!=""){
        
          $attachfile.='<div class="col-4">
                            <div class="image-area" style="width:110px;">
                                <a href="'.$file.'" download>
                                    '.$img.'
                                </a>
                            </div>
                            </div>';
          }else{
            $attachfile="";
          }
        }
      }
      return response()->json(
        array(
          'success' => true,
          'candidate_name' => $closed_case_user->name.' ('.$closed_case_user->display_id.')',
          'closed_case'=>$closed_case_user,
          'attachfile'=> $attachfile,
          
        )
      );

    }
     // Update Priority Status of a Candidate
    public function updateCandidate(Request $request)
    {

          $id = $request->input('candidate_id');
          $type = $request->input('type');

          foreach ($id as $candidate_id) 
          {
           
                $data =  DB::table('users')
                        ->where('id', $candidate_id)
                        ->update(['priority'=>$type]);
          }

        

          if($data){   
                return response()->json([
                'status'=>'ok',
                'message' => 'updated',                
                ], 200);
            }
            else{
                return response()->json([
                'status' =>'no',
                ], 200);
            }
    }
    

    //
    // public function getServiceItems(Request $request){
    
    //   $input_items = DB::table('service_form_inputs as sfi')
    //   ->select('sfi.*')            
    //   ->where(['sfi.service_id'=>$service->sla_item_id])
    //   ->get();
    //   $i=0;

    //   foreach($input_items as $input){

    //   $request->input('service-input-label-'.$i.'-'.$service->sla_item_id);

    //   $input_data[] = [
    //                   $service->sla_item_id=>[
    //                   $request->input('service-input-label-'.$i.'-'.$service->sla_item_id)=>$request->input('service-input-value-'.$i.'-'.$service->sla_item_id)
    //                   ]
    //                 ];
    //   }

    // }

    public function candidateReportEdit($id)
    {
      $candidate_id = base64_decode($id);
        //  $business_id = Auth::user()->business_id;
    	//
      
        $candidate = DB::table('users as u')
        ->select('u.id','u.first_name','u.middle_name','u.last_name','u.name','u.email','u.phone','u.client_emp_code','u.display_id','u.dob','u.aadhar_number','u.father_name','u.gender','u.created_by','u.created_at')
        ->where(['u.id'=>$candidate_id])
        ->first();
        // $report_id ="";
        $job = DB::table('job_items')->where(['candidate_id'=>$candidate_id])->first();
        
        $sla_id = $job->sla_id;
        //check report items created or not
      $report = DB::table('reports')->where(['candidate_id'=>$candidate_id])->first(); 

      if ($report) {
        $report_id = $report->id;
        $report_status = $report->status;
  
      $candidate_report = [];
      $report_items = [];
      $candidate_report = DB::table('users as u')
                         ->select('u.id','u.business_id','u.first_name','u.last_name','u.name','u.email','u.phone','r.created_at')  
                         ->leftjoin('reports as r','r.candidate_id','=','u.id')
                         ->where(['u.id'=>$candidate_id]) 
                         ->first(); 
      
      $report_items = Db::table('report_items as ri')
                         ->select('ri.*','s.name as service_name','s.id as service_id')  
                         ->join('services as s','s.id','=','ri.service_id')
                         ->where(['ri.report_id'=>$report_id]) 
                         ->orderBy('s.sort_number','asc')
                         ->get(); 
      }
     
      $sla_items = DB::select("SELECT sla_id, GROUP_CONCAT(DISTINCT service_id) AS alot_services FROM `job_sla_items` WHERE candidate_id = $candidate_id");
      //get BGV data - 
      $jaf = DB::table('jaf_form_data')->select('form_data_all')->where(['candidate_id'=>$candidate_id])->first(); 
      $status_list = DB::table('report_status_masters')->where(['status'=>1])->get();  
        // $users = DB::table('users as u')->select('u.id','u.name')->get();
        if ($report) {
          return view('admin.candidates.report',compact('candidate','candidate_report','report','report_items','jaf','report_id','report_status','sla_id','status_list','sla_items'));

        } else {
          return view('admin.candidates.report',compact('candidate','report','sla_id','status_list','sla_items'));

        }
        
    }

    //report to be complete
    public function reportUpdate(Request $request){
      
      $candidate_id =$request->id;
      $report_id = base64_decode($request->input('report_id'));
      //get report items
      $report_items = DB::table('report_items')->where(['report_id'=>$report_id])->get();
      $i = 0;
      foreach($report_items as $item){
          $report_output = 0;
          //update report
          $verified_by          = $request->input('verified_by-'.$item->id);
          $annexure_value          = $request->input('annexure_value-'.$item->id);
          $comments             = $request->input('comments-'.$item->id);
          $additional_comments  = $request->input('additional-comments-'.$item->id);
          $status_id            = $request->input('approval-status-'.$item->id);
          $district_court_name  = $request->input('district_court_name-'.$item->id);
          $district_court_result= $request->input('district_court_result-'.$item->id);
          $high_court_name      = $request->input('high_court_name-'.$item->id);
          $high_court_result    = $request->input('high_court_result-'.$item->id);
          $supreme_court_name   = $request->input('supreme_court_name-'.$item->id);
          $supreme_court_result = $request->input('supreme_court_result-'.$item->id);
          //
          if($request->has('report-output-'.$item->id)){
            $report_output     = '1';
          }
          
          $input_items = DB::table('service_form_inputs as sfi')
                      ->select('sfi.*')            
                      ->where(['sfi.service_id'=>$item->service_id])
                      ->get();

            //dd($input_items);
            $input_data = [];
            $j=0;
            
            foreach($input_items as $input){
              
              $remarks_message= "";
              $remarks     = '-';
              $is_executive_summary = 0;
              $table_output = 0;

              if($request->has('remarks-input-checkbox-'.$item->id.'-'.$j)){
                $remarks     = 'Yes';
              }
              if($request->has('remarks-input-value-'.$item->id.'-'.$j)){
                $remarks_message = $request->input('remarks-input-value-'.$item->id.'-'.$j);
              }
              if($request->has('table-output-'.$item->id.'-'.$j)){
                $table_output     = '1';
              }
              
              if($request->has('executive-summary-'.$item->id.'-'.$j)){
                $is_executive_summary     = '1';
              }

              $input_data[] = [
                                $request->input('service-input-label-'.$item->id.'-'.$j)=>$request->input('service-input-value-'.$item->id.'-'.$j),
                                'remarks'=>$remarks,
                                'is_report_output'=>$table_output,
                                'remarks_message'=>$remarks_message,
                                'is_executive_summary'=>$is_executive_summary
                              ];
                $j++;
            }
          
            $jaf_data = json_encode($input_data);
            $insuf_notes = NULL;
            if($request->has('insuf_notes-'.$item->id)){
              $insuf_notes     = $request->input('insuf_notes-'.$item->id);
            }

          $is_updated = DB::table('report_items')
                        ->where(['report_id'=>$report_id,'id'=>$item->id])
                        ->update(['jaf_data'          =>$jaf_data,
                                  'verified_by'       =>$verified_by,
                                  'annexure_value'    =>$annexure_value,
                                  'is_report_output'  =>$report_output,
                                  'comments'          =>$comments,
                                  'additional_comments'=>$additional_comments,
                                  'approval_status_id' =>$status_id,
                                  'report_insufficiency_notes'=>$insuf_notes,
                                  'district_court_name'=>$district_court_name,
                                  'district_court_result'=>$district_court_result,
                                  'high_court_name'    =>$high_court_name,
                                  'high_court_result'   =>$high_court_result,
                                  'supreme_court_name'  =>$supreme_court_name,
                                  'supreme_court_result'=>$supreme_court_result
                                  ]
                                );
          $i++;
      }

      //color status
      $approval_status_id= NULL;
      $report_item_data = DB::table('report_items')->where(['report_id'=>$report_id])->whereNotNull('approval_status_id')->orderBy('approval_status_id','asc')->first();
      if($report_item_data !=null){
        $approval_status_id= $report_item_data->approval_status_id;
      }

      //update report status
      DB::table('reports')
        ->where(['id'=>$report_id])
        ->update(['is_verified'=>'1','status'=>'completed','manual_input_status'=>'completed','approval_status_id'=>$approval_status_id,'report_jaf_data'=>json_encode($request->all())]);

      //redirect to reports
      return redirect('/candidates/show/'.$candidate_id)
      ->with('success', 'Report updated Successfully. download now');

    }

    //Candidate profile task
    public function task(Request $request,$id)
    {
        $candidate_id = base64_decode($id);
        //  $business_id = Auth::user()->business_id;
        //
        // $query = DB::table('users as u')
        //         ->select('u.*','j.sla_id','j.jaf_status','j.job_id','j.candidate_id','j.created_at')      
        //         ->join('job_items as j','j.candidate_id','=','u.id')        
        //         ->where(['u.user_type'=>'candidate','is_deleted'=>'0'])->get();

        $candidate = DB::table('users as u')
        ->select('u.id','u.business_id','u.first_name','u.middle_name','u.last_name','u.name','u.email','u.phone','u.phone_code','u.phone_iso','u.client_emp_code','u.entity_code','u.display_id','u.dob','u.aadhar_number','u.father_name','u.gender','u.created_by','u.created_at')
        ->where(['u.id'=>$candidate_id])
        ->first();
        $users = DB::table('users as u')->select('u.id','u.name')->get();

        $business_id = Auth::user()->business_id;
        $user_id = Auth::user()->id;
        $query = DB::table('users as u')
                ->select('u.*','j.sla_id','j.jaf_status','j.job_id','j.candidate_id')      
                ->join('job_items as j','j.candidate_id','=','u.id')        
                ->where(['u.user_type'=>'candidate','u.parent_id'=>$business_id,'u.id'=>$candidate_id,'is_deleted'=>'0']);
                if(is_numeric($request->get('customer_id'))){
                  $query->where('u.business_id',$request->get('customer_id'));
                }
                if(is_numeric($request->get('candidate_id'))){
                  $query->where('u.id',$request->get('candidate_id'));
                }
                if($request->get('from_date') !=""){
                  $query->whereDate('u.created_at','>=',date('Y-m-d',strtotime($request->get('from_date'))));
                }
                if($request->get('to_date') !=""){
                  $query->whereDate('u.created_at','<=',date('Y-m-d',strtotime($request->get('to_date'))));
                }
                $query->orderBy('u.created_at','desc');
          // dd($query);
          $items =    $query->paginate(15);
          // $users= User::whereIn('user_type',['user','candidate'])->get();
          // $checks = UserCheck::all();
          // $job_sla_items = DB::table('job_sla_items')->get();
                  // dd($users);
          $customers = DB::table('users as u')
            ->select('u.id','u.name','u.first_name','u.last_name','u.email','u.phone','b.company_name')
            ->join('user_businesses as b','b.business_id','=','u.id')
            ->where(['u.user_type'=>'client','u.parent_id'=>$business_id])
            ->get();

            $permissions = DB::select("SELECT u.id,u.name,u.email,jsi.candidate_id,jsi.sla_id,u.business_id,u.phone,ji.jaf_status,u.created_at,ji.job_id, GROUP_CONCAT(DISTINCT s.name) AS alot_services FROM `users` AS u LEFT JOIN user_checks AS uc ON u.id = uc.user_id LEFT JOIN job_sla_items AS jsi ON uc.checks = jsi.service_id LEFT JOIN services AS s ON jsi.service_id = s.id JOIN job_items AS ji ON jsi.candidate_id= ji.candidate_id where u.business_id = $business_id AND u.id = $user_id and u.user_type= 'user'  GROUP BY u.id,jsi.candidate_id,jsi.sla_id,ji.jaf_status,ji.job_id");

          $services = DB::table('services')
                      ->where('business_id',NULL)
                      ->whereNotIn('type_name',['e_court'])
                      ->orwhere('business_id',$business_id)
                      ->get(); 

          $sla_items = DB::select("SELECT sla_id, GROUP_CONCAT(DISTINCT service_id) AS alot_services FROM `job_sla_items` WHERE candidate_id = $candidate_id");

          $report = DB::table('reports')->where(['candidate_id'=>$candidate_id,'status'=>'completed'])->first();
              if ($report==NULL) {
                $report= '';
              }

          return view('admin.candidates.task',compact('candidate','users','items','customers','services','permissions','sla_items','report'));
    }

    /**
     * remove a BGV Attachment File .
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function removeFile(Request $request)
    {        
       $id =  $request->input('file_id');
       DB::beginTransaction();
       try{

          $is_done = DB::table('jaf_item_attachments')->where('id',$id)->update(['is_deleted'=>'1','deleted_at'=>date('Y-m-d H:i:s'),'deleted_by'=>Auth::user()->id]);
         DB::table('report_item_attachments')->where('jaf_item_attachment_id',$id)->update(['is_deleted'=>'1','deleted_at'=>date('Y-m-d H:i:s'),'deleted_by'=>Auth::user()->id]);

          DB::commit();
          // Do something when it fails
          return response()->json([
              'fail' => false,
              'message' => 'File removed!'
          ]);
        }
        catch (\Exception $e) {
            DB::rollback();
            // something went wrong
            return $e;
        }       
    }


   // add file.
   public function uploadFile(Request $request)
   {   
        //  echo count($request->file('files'));
        //  print_r($request->file('files')); 
        //  echo $request->input('service_id');
        //  die;
        // dd($request);
        $files=[];
        $i=0;
        $extensions = array("jpg","png","jpeg","PNG","JPG","JPEG","pdf");
      // dd($extensions);
      DB::beginTransaction();
      try{
        if($request->hasFile('files')) {

            foreach( $request->file('files') as $item){
            
                  $result = array($request->file('files')[$i]->getClientOriginalExtension());
                 
                  
 
                  if(in_array($result[0],$extensions))
                  {                      
                      // $label_file_name  = $request->input('label_file_name');
                      $file_platform = 'web';

                      $s3_config = S3ConfigTrait::s3Config();

                      $attachment_file  = $request->file('files')[$i];
                      $orgi_file_name   = $attachment_file->getClientOriginalName();
                      
                      $file_size = number_format(File::size($attachment_file) / 1048576, 2);
                    
                      if($file_size > 10)
                      {
                          return response()->json([
                            'fail' => true,
                            'error_type'=>'validation',
                            'errors' => ['files'  => 'The document size must be less than only 10mb Upload !'],
                          ]);                        
                      }

                      $fileName = pathinfo($orgi_file_name,PATHINFO_FILENAME);
            
                      //$filename         = time().'-'.$fileName.'.'.$attachment_file->getClientOriginalExtension();
                      $file_name_time   = time().'-'.date('Ymdhis');
                      $filename         = $file_name_time.'.'.$attachment_file->getClientOriginalExtension();
                      $dir              = public_path('/uploads/jaf-files/'); 

                      if(!File::exists($dir))
                      {
                        //dd(1);
                        File::makeDirectory($dir,0777, true, true);
                      }

                      $request->file('files')[$i]->move($dir, $filename);
                                 
                        
                      $candidate_id  = NULL;
                      $jaf_id  = NULL;
                      $is_temp         = 1;
                      $type            = 'main';
                      //check if report id 
                      if($request->has('jaf_id')) 
                      {
                          $candidate_id       = base64_decode($request->input('candidate_id'));
                          $jaf_id  = $request->input('jaf_id');
                          $business_id= $request->input('business_id');
                          $is_temp         = 0;
                          //get service item id
                           $type            = 'supporting';
                           if($request->has('type')){
                            $type           = $request->input('type');
                           }
                      }
                   
                        // file type 
                        
                        $extArray = explode('.', $filename);
                        $ext = end($extArray);

                        $file_id_array = [];
                        $file_name_array = [];
                        $file_url_array = []; 

                        if(stripos($ext,'pdf')!==false)
                        {
                          $file_platform = 'web';

                          if(File::exists($dir.$filename))
                          {
                              $pdf_file_name = $file_name_time.'-'.time();
    
                              $imagick = new Imagick();
    
                              $imagick->setResolution(300, 300);
    
                              $imagick->readImage($dir.$filename);
    
                              $imagick->setImageFormat("png");
    
                              $pages = $imagick->getNumberImages();
    
                              $imagick->writeImages($dir.$pdf_file_name.'.png', false);
    
                              if($pages)
                              {
                                  if($pages==1)
                                  {
                                    if($s3_config!=NULL)
                                    {
                                        $file_platform = 's3';

                                        $file_name = $pdf_file_name.'.png';

                                        $path = 'uploads/jaf-files/';

                                        if(!Storage::disk('s3')->exists($path))
                                        {
                                            Storage::disk('s3')->makeDirectory($path,0777, true, true);
                                        }

                                        $file = Helper::createFileObject($path.$file_name);

                                        Storage::disk('s3')->put($path.$file_name, file_get_contents($file));

                                    }
                                    $rowID = DB::table('jaf_item_attachments')
                                      ->insertGetId([
                                          'jaf_id'        => $jaf_id, 
                                          'business_id'   => Auth::user()->business_id,    
                                          'candidate_id' => $candidate_id,
                                          'file_name'        => $pdf_file_name.'.png',
                                          'attachment_type'  => $type,
                                          'file_platform'    => $file_platform,
                                          'created_by'       => Auth::user()->id,
                                          'service_attachment_id'=>$request->service_type,
                                          'service_attachment_name'=>$request->attachment_name,
                                          'created_at'       => date('Y-m-d H:i:s'),
                                          'is_temp'          => $is_temp,
                                      ]);
                                      $report_count = DB::table('reports')->where(['candidate_id'=>$candidate_id])->count(); 
                                      if($report_count > 0){
                                        $report_items= DB::table('report_items')->where('jaf_id',$jaf_id)->first();
                                        if($report_items){
                                            // dd($report_items);
                                            if(!File::exists(public_path('/uploads/report-files/')))
                                            {
                                              //dd(1);
                                              File::makeDirectory(public_path('/uploads/report-files/'),0777, true, true);
                                            }
                                            File::copy(public_path('/uploads/jaf-files/'.$pdf_file_name.'.png'),public_path('/uploads/report-files/'.$pdf_file_name.'.png'));
                                            if(stripos($file_platform,'s3')!==false)
                                            {
                                              $path = 'uploads/jaf-files/';
                                              $report_path = 'uploads/report-files/';
                                              if(!Storage::disk('s3')->exists($report_path))
                                              {
                                                  Storage::disk('s3')->makeDirectory($report_path,0777, true, true);
                                              }

                                              Storage::disk('s3')->copy($path.$pdf_file_name.'.png',$report_path.$pdf_file_name.'.png');

                                            }
                                          
                                            DB::table('report_item_attachments')->insert([
                                            'report_id'        => $report_items->report_id, 
                                            'report_item_id'   => $report_items->id,
                                            'jaf_item_attachment_id'=>$rowID,
                                            'file_name'        => $pdf_file_name.'.png',
                                            'attachment_type'  => $type,
                                            'file_platform'     => $file_platform,
                                            'created_by'       => Auth::user()->id,
                                            'service_attachment_id'=>$request->service_type,
                                            'service_attachment_name'=>$request->attachment_name,
                                            'created_at'       => date('Y-m-d H:i:s'),
                                            'is_temp'          => $is_temp,
                                          ]);
                                        }
                                      }

                                      $file_url = '';
                                      if(stripos($file_platform,'s3')!==false)
                                      {
                                        $filePath = 'uploads/jaf-files/';
                                        if(File::exists(public_path('/uploads/jaf-files/'.$pdf_file_name.'.png')))
                                        {
                                            File::delete(public_path('/uploads/jaf-files/'.$pdf_file_name.'.png'));
                                        }

                                        if(File::exists(public_path('/uploads/report-files/'.$pdf_file_name.'.png')))
                                        {
                                          File::delete(public_path('/uploads/report-files/'.$pdf_file_name.'.png'));
                                        }

                                        $disk = Storage::disk('s3');

                                        $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                                            'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                                            'Key'                        => $filePath.$pdf_file_name.'.png',
                                            'ResponseContentDisposition' => 'attachment;'//for download
                                        ]);

                                        $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');

                                        $file_url = (string)$req->getUri();
                                      }
                                      else
                                      {
                                          $file_url = url('/').'/uploads/jaf-files/'.$pdf_file_name.'.png';
                                      }


                                      $file_id_array[] = $rowID;
                                      $file_name_array[] = $pdf_file_name.'.png';
                                      $file_url_array[] = $file_url;
                                  }
                                  else
                                  {
                                      for($i=0;$i<$pages;$i++)
                                      {
                                        $file_platform = 'web';

                                        if($s3_config!=NULL)
                                        {
                                            $file_platform = 's3';

                                            $file_name = $pdf_file_name.'-'.$i.'.png';

                                            $path = 'uploads/jaf-files/';

                                            if(!Storage::disk('s3')->exists($path))
                                            {
                                                Storage::disk('s3')->makeDirectory($path,0777, true, true);
                                            }

                                            $file = Helper::createFileObject($path.$file_name);

                                            Storage::disk('s3')->put($path.$file_name, file_get_contents($file));

                                        }
                                          $rowID = DB::table('jaf_item_attachments')
                                          ->insertGetId([
                                            'jaf_id'        => $jaf_id, 
                                            'business_id'   => Auth::user()->business_id,    
                                            'candidate_id' => $candidate_id,
                                              'file_name'        => $pdf_file_name.'-'.$i.'.png',
                                              'attachment_type'  => $type,
                                              'file_platform'    => $file_platform,
                                              'created_by'       => Auth::user()->id,
                                              'service_attachment_id'=>$request->service_type,
                                              'service_attachment_name'=>$request->attachment_name,
                                              'created_at'       => date('Y-m-d H:i:s'),
                                              'is_temp'          => $is_temp,
                                          ]);
                                          $report_count = DB::table('reports')->where(['candidate_id'=>$candidate_id])->count(); 
                                          if($report_count > 0){
                                            $report_items= DB::table('report_items')->where('jaf_id',$jaf_id)->first();
                                            if($report_items){
                                                // dd($report_items);
                                                File::copy(public_path('/uploads/jaf-files/'.$pdf_file_name.'-'.$i.'.png'),public_path('/uploads/report-files/'.$pdf_file_name.'-'.$i.'.png'));
                                                if(stripos($file_platform,'s3')!==false)
                                                {
                                                  $path = 'uploads/jaf-files/';
                                                  $report_path = 'uploads/report-files/';
                                                  if(!Storage::disk('s3')->exists($report_path))
                                                  {
                                                      Storage::disk('s3')->makeDirectory($report_path,0777, true, true);
                                                  }

                                                  Storage::disk('s3')->copy($path.$pdf_file_name.'-'.$i.'.png',$report_path.$pdf_file_name.'-'.$i.'.png');

                                                }
                                                DB::table('report_item_attachments')->insert([
                                                'report_id'        => $report_items->report_id, 
                                                'report_item_id'   => $report_items->id,
                                                'jaf_item_attachment_id'=>$rowID,
                                                'file_name'        => $pdf_file_name.'-'.$i.'.png',
                                                'attachment_type'  => $type,
                                                'file_platform'     => $file_platform,
                                                'created_by'       => Auth::user()->id,
                                                'service_attachment_id'=>$request->service_type,
                                                'service_attachment_name'=>$request->attachment_name,
                                                'created_at'       => date('Y-m-d H:i:s'),
                                                'is_temp'          => $is_temp,
                                              ]);
                                            }
                                          }

                                          $file_url = '';
                                          if(stripos($file_platform,'s3')!==false)
                                          {
                                            $filePath = 'uploads/jaf-files/';
                                            if(File::exists(public_path('/uploads/jaf-files/'.$pdf_file_name.'-'.$i.'.png')))
                                            {
                                                File::delete(public_path('/uploads/jaf-files/'.$pdf_file_name.'-'.$i.'.png'));
                                            }

                                            if(File::exists(public_path('/uploads/report-files/'.$pdf_file_name.'-'.$i.'.png')))
                                            {
                                              File::delete(public_path('/uploads/report-files/'.$pdf_file_name.'-'.$i.'.png'));
                                            }

                                            $disk = Storage::disk('s3');

                                            $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                                                'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                                                'Key'                        => $filePath.$pdf_file_name.'-'.$i.'.png',
                                                'ResponseContentDisposition' => 'attachment;'//for download
                                            ]);

                                            $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');

                                            $file_url = (string)$req->getUri();
                                          }
                                          else
                                          {
                                              $file_url = url('/').'/uploads/jaf-files/'.$pdf_file_name.'-'.$i.'.png';
                                          }

                                          $file_id_array[] = $rowID;
                                          $file_name_array[] = $pdf_file_name.'-'.$i.'.png';
                                          $file_url_array[] = $file_url;  
                                      }
                                  }
                              }
    
                              File::delete($dir.$filename);
                          }
                        }
                        else
                        {
                          $file_platform = 'web';
                          if($s3_config!=NULL)
                          {
                              $file_platform = 's3';

                              $path = 'uploads/jaf-files/';

                              if(!Storage::disk('s3')->exists($path))
                              {
                                  Storage::disk('s3')->makeDirectory($path,0777, true, true);
                              }

                              $file = Helper::createFileObject($path.$filename);

                              Storage::disk('s3')->put($path.$filename, file_get_contents($file));

                          }
                          $rowID = DB::table('jaf_item_attachments')
                          ->insertGetId([
                              'jaf_id'        => $jaf_id, 
                              'business_id'   => Auth::user()->business_id,
                              'candidate_id' => $candidate_id,
                              'file_name'        => $filename,
                              'attachment_type'  => $type,
                              'file_platform'     => $file_platform,
                              'created_by'       => Auth::user()->id,
                              'service_attachment_id'=>$request->service_type,
                              'service_attachment_name'=>$request->attachment_name,
                              'created_at'       => date('Y-m-d H:i:s'),
                              'is_temp'          => $is_temp,
                          ]);  
                          $report_count = DB::table('reports')->where(['candidate_id'=>$candidate_id])->count(); 
                            if($report_count > 0){
                             
                              $report_items= DB::table('report_items')->where('jaf_id',$jaf_id)->first();
                              if($report_items){
                                File::copy(public_path('/uploads/jaf-files/'.$filename),public_path('/uploads/report-files/'.$filename)); 
                                if(stripos($file_platform,'s3')!==false)
                                {
                                  $path = 'uploads/jaf-files/';
                                  $report_path = 'uploads/report-files/';
                                  if(!Storage::disk('s3')->exists($report_path))
                                  {
                                      Storage::disk('s3')->makeDirectory($report_path,0777, true, true);
                                  }

                                  Storage::disk('s3')->copy($path.$filename,$report_path.$filename);

                                }
                                // $attachment= DB::table('report_items')->where('jaf_id',$jaf_id)->first();
                                  DB::table('report_item_attachments')->insert([
                                  'report_id'        => $report_items->report_id, 
                                  'report_item_id'   => $report_items->id,
                                  'jaf_item_attachment_id'=>$rowID,
                                  'file_name'        => $filename,
                                  'attachment_type'  => $type,
                                  'file_platform'    => $file_platform,
                                  'created_by'       => Auth::user()->id,
                                  'service_attachment_id'=>$request->service_type,
                                  'service_attachment_name'=>$request->attachment_name,
                                  'created_at'       => date('Y-m-d H:i:s'),
                                  'is_temp'          => $is_temp,
                                ]);
                              }
                            }

                            if(stripos($file_platform,'s3')!==false)
                            {
                                if(File::exists(public_path('/uploads/jaf-files/'.$filename)))
                                {
                                    File::delete(public_path('/uploads/jaf-files/'.$filename));
                                }

                                if(File::exists(public_path('/uploads/report-files/'.$filename)))
                                {
                                  File::delete(public_path('/uploads/report-files/'.$filename));
                                }
                            }
                        }

                        $type = url('/').'/admin/images/file.jpg';
                        if($filename != NULL)
                        {
                            // if($ext == 'pdf')
                            // {
                            //   $type = url('/').'/admin/images/icon_pdf.png';
                            // } 
                            if($ext == 'doc' || $ext == 'docx')
                            {
                              $type = url('/').'/admin/images/icon_docx.png';
                            }
                            if($ext == 'xls' || $ext == 'xlsx' || $ext == 'csv')
                            {
                              $type = url('/').'/admin/images/icon_xlsx.png';
                            }
                            if($ext == 'pptx' || $ext == 'ppt')
                            {
                              $type = url('/').'/admin/images/icon_pptx.png';
                            }
                            if($ext == 'psd' || $ext == 'PSD')
                            {
                              $type = url('/').'/admin/images/icon_psd.png';
                            }
                            if($ext == 'jpg' || $ext == 'png' || $ext == 'jpeg' || $ext == 'JPG' || $ext == 'PNG' || $ext == 'JPEG' )
                            { 
                              if(stripos($file_platform,'s3')!==false)
                              {
                                  $filePath = 'uploads/jaf-files/';

                                  $disk = Storage::disk('s3');

                                  $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                                      'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                                      'Key'                        => $filePath.$filename,
                                      //'ResponseContentDisposition' => 'attachment;'//for download
                                  ]);

                                  $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');

                                  $type = (string)$req->getUri();  
                              }
                              else
                              {
                                $type = url('/').'/uploads/jaf-files/'.$filename;
                              }             
                            } 
                        } 
                          
                        // $files[] = ['filePrev'=> $type,'file_id'=>$rowID];

                        if($ext=='pdf')
                        {
                          $files[] = ['file_type'=>$ext,'filePrev'=> $file_url_array,'file_id'=>$file_id_array,'file_name'=>$file_name_array,'select_file'=>$request->select_file,'customeval'=>$request->attachment_name];
                        }
                        else
                        {
                          $files[] = ['file_type'=>$ext,'filePrev'=> $type,'file_id'=>$rowID,'file_name'=>$filename,'select_file'=>$request->select_file,'customeval'=>$request->attachment_name];
                        }

                        if(File::exists($dir.'tmp-files/'))
                        {
                          File::cleanDirectory($dir.'tmp-files/');
                        }

                      $i++;
                  
                  }else{
                      // Do something when it fails
                      return response()->json([
                          'fail' => true,
                          'errors' => 'File type error!'
                      ]);
                  }

            }
            DB::commit();
            //send file response
            return response()->json([
              'fail' => false,
              'errors' => 'no',
              'data'=>$files
            ]);
            
    
        }
      }
      catch (\Exception $e) {
          DB::rollback();
          // something went wrong
          return $e;
      }       
 
   }

  /**
     * Import Excel to insert Candidate Details.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
  */
  public function importExcel(Request $request)
  {
    // dd($request->all());
          $rules= [
            'customer'    => 'required',
            // 'sla'         => 'required',
            'sla_type'  => 'required|in:package,variable',
            'days_type'  => 'required_if:sla_type,variable',
            'price_type'  => 'required_if:sla_type,variable',
            'price'       => 'required_if:price_type,package|numeric|min:0',
            'sla'         => 'required_if:sla_type,package',
            'services'    => 'required_if:sla_type,package,variable|min:1',
            // 'file'        => 'required_if:file,undefined'
          ];
      
        // dd($request->all());
        //  Array.from(types)
        $services= explode(",",$request->services);
        // dd($services);
        $service_unit= explode(",",$request->service_unit);
        $tat= explode(",",$request->tat);
        $incentive= explode(",",$request->incentive);
        $penalty= explode(",",$request->penalty);
        $prices= explode(",",$request->prices);
        $days_type=$request->days_types;
        $price_type=$request->price_types;
        // dd($incentive);
        $customMessages = [ 
          'days_type.required_if'       => 'The days type field is required',
          'price_type.required_if'       => 'The price type field is required',
          'price.required_if' => 'The price field is required',
          'sla.required_if' =>  'The sla is required',
          'services.required_if' => 'Select at least one Check or Service item.',
          'customer.required' => 'Please select at least one customer.',
          // 'file.required_if' => 'Please select a excel file'
        ];

        $validator = Validator::make($request->all(), $rules,$customMessages);
          
          if ($validator->fails()){
              return response()->json([
                  'fail' => true,
                  'errors' => $validator->errors()
              ]);
          }
          //validation for sla type
          // if($request->sla_type=='package')
          // {
          //   $rules=[
          //     'sla'         => 'required',
          //     'services'    => 'required|min:1',
          //   ];
          //   $customMessages=[
          //   'services.required' => 'Select at least one Check or Service item.',
          //   ];
          //   $validator = Validator::make($request->all(), $rules,$customMessages);
            
          //   if ($validator->fails()){
          //       return response()->json([
          //           'success' => false,
          //           'errors' => $validator->errors()
          //       ]);
          //   }  
          // }
          if($request->sla_type=='variable')
          {


            $request['days_type'] ='working';

            $rules=[
              // 'services'    => 'required|array|min:1',
              'days_type'  => 'required_if:sla_type,variable|in:working,calender',
              'price_type'  => 'required_if:sla_type,variable|in:package,check',
            ];
            $customMessages=[
              // 'services.required' => 'Select at least one Check or Service item.',
              'days_type.required_if'       => 'The days type field is required',
              'price_type.required_if'       => 'The price type field is required',
            ];
              $validator = Validator::make($request->all(), $rules,$customMessages);
              
              if ($validator->fails()){
                  return response()->json([
                      'success' => false,
                      'errors' => $validator->errors()
                  ]);
              }

              // if( count($services) > 0 ){
              //   $arr=[];
              //   foreach($services as $item){
              //     $rules=[
              //       'service_unit-'.$item    => 'required|integer|min:1',
              //       'tat-'.$item      => 'required|integer|min:1',
              //       'incentive-'.$item      => 'required|integer|lte:tat-'.$item,
              //       'penalty-'.$item      => 'required|integer|gte:tat-'.$item,
              //       'price-'.$item => 'required_if:price_type,check|numeric|min:0'
              //     ];
              //     $customMessages=[
              //       'service_unit-'.$item.'.required' => 'No of Verification is required',
              //       'service_unit-'.$item.'.integer' => 'No of Verification should be numeric',
              //       'service_unit-'.$item.'.min' => 'No of Verification should be atleast 1',
              //       // 'service_unit-'.$item.'.max' => 'No of Verification should be Maximum 3',
              //       'tat-'.$item.'.required' => 'No of TAT is required',
              //       'tat-'.$item.'.integer' => 'No of TAT should be numeric',
              //       'tat-'.$item.'.min' => 'No of TAT should be atleast 1',
              //       'incentive-'.$item.'.required' => 'No of incentive TAT is required',
              //       'incentive-'.$item.'.integer' => 'No of incentive TAT should be numeric',
              //       'incentive-'.$item.'.lte' => 'No of Incentive TAT should be less than or equal to Service TAT',
              //       'penalty-'.$item.'.required' => 'No of penalty TAT is required',
              //       'penalty-'.$item.'.integer' => 'No of penalty TAT should be numeric',
              //       'penalty-'.$item.'.gte' => 'No of penalty TAT should be greater than or equal to Service TAT',
              //       'price-'.$item.'.required_if' => 'Check Price is required',
              //       'price-'.$item.'.numeric' => 'Check Price should be numeric',
              //       'price-'.$item.'.min' => 'Check Price should be minimum value 0',
              //     ];
              //       $validator = Validator::make($request->all(), $rules,$customMessages);
                    
              //       if ($validator->fails()){
              //           return response()->json([
              //               'fail' => true,
              //               'errors' => $validator->errors()
              //           ]);
              //       }

              //       // $max_service_tat =  $max_service_tat + $request->input('tat-'.$item);
              //       $arr[]=intval($request->input('tat-'.$item));
              //   }

              //   $max_service_tat = max($arr);
              // }
                if(count($services)>0){
                  foreach ($services as $key =>  $value) {
                    
                    if ($service_unit[$key] =='' ||  $service_unit[$key]==NULL ) {
                      return response()->json([
                                      'fail' => true,
                                      'errors' => ['service_unit-'.$value =>'No of Verification is required']
                                  ]);
                    }
                    elseif (!is_numeric($service_unit[$key])) {
                        return response()->json([
                          'fail' => true,
                          'errors' => ['service_unit-'.$value =>'No of Verification should be numeric']
                      ]);
                    }
                    elseif ($service_unit[$key]<1) {
                      return response()->json([
                        'fail' => true,
                        'errors' => ['service_unit-'.$value =>'No of Verification should be atleast 1']
                      ]);
                    }
                     //TAT validation
                    if ($tat[$key] =='' ||  $tat[$key]==NULL ) {
                      return response()->json([
                                      'fail' => true,
                                      'errors' => ['tat-'.$value =>'No of TAT is required']
                                  ]);
                    }
                    elseif (!is_numeric($tat[$key])) {
                        return response()->json([
                          'fail' => true,
                          'errors' => ['tat-'.$value =>'No of TAT should be numeric']
                      ]);
                    }
                    elseif ($tat[$key]<1) {
                      return response()->json([
                        'fail' => true,
                        'errors' => ['tat-'.$value =>'No of TAT should be atleast 1']
                      ]);
                    }
                    
                    // dd($incentive[$key]);
                    //incentive validation
                    if ($incentive[$key] =='' ||  $incentive[$key]==NULL ) {
                     
                      return response()->json([
                                      'fail' => true,
                                      'errors' => ['incentive-'.$value =>'No of Incentive is required']
                                  ]);
                    }
                    elseif (!is_numeric($incentive[$key])) {
                        return response()->json([
                          'fail' => true,
                          'errors' => ['incentive-'.$value =>'No of Incentive should be numeric']
                      ]);
                    }
                    elseif ($incentive[$key]>$tat[$key]) {
                      return response()->json([
                        'fail' => true,
                        'errors' => ['incentive-'.$value =>'No of Incentive TAT should be less than or equal to Service TAT']
                      ]);
                    }
                     //penalty validation
                     if ($penalty[$key] =='' ||  $penalty[$key]==NULL ) {
                      return response()->json([
                                      'fail' => true,
                                      'errors' => ['penalty-'.$value =>'No of penalty is required']
                                  ]);
                    }
                    elseif (!is_numeric($penalty[$key])) {
                        return response()->json([
                          'fail' => true,
                          'errors' => ['penalty-'.$value =>'No of penalty should be numeric']
                      ]);
                    }
                    elseif ($penalty[$key]< $tat[$key]) {
                      return response()->json([
                        'fail' => true,
                        'errors' => ['penalty-'.$value =>'No of penalty TAT should be greater than or equal to Service TAT']
                      ]);
                    }
                     //price validation
                     if ($prices[$key] =='' ||  $prices[$key]==NULL ) {
                      return response()->json([
                                      'fail' => true,
                                      'errors' => ['price-'.$value =>'No of Check Price is required']
                                  ]);
                    }
                    elseif (!is_numeric($prices[$key])) {
                        return response()->json([
                          'fail' => true,
                          'errors' => ['price-'.$value =>'No of Check Price should be numeric']
                      ]);
                    }
                    elseif ($prices[$key]<0) {
                      return response()->json([
                        'fail' => true,
                        'errors' => ['price-'.$value =>'Check Price should be minimum value 0']
                      ]);
                    }

                  }
                }
                // die;
                // else{
                //   return response()->json([
                //                   'fail' => true,
                //                   'errors' => ['service_unit']
                //               ]);
                // }

        }

        DB::beginTransaction();
        try
        {

            $file = $request->file;
            // dd($file);
            $parsed_array = Excel::toArray([], $file);
            $imported_data = array_splice($parsed_array[0], 1);
            //  print_r($request->services);
            //   die();

            //   foreach($request->services as $service){
            //     $data[] = $service;
            // }
            // $service_id =json_encode($data);

          $unique = uniqid();

          foreach ($imported_data as $value)
          {
            // $excel_dob=$value[7];
            $excel_date = $value[7]; //here is that value 41621 or 41631
            // $regex = '/^(0[1-9]|[1-2][0-9]|3[0-1])-(0[1-9]|1[0-2])-([0-9]{4})$/'; 
            if(stripos($excel_date, '-') !== false || stripos($excel_date, '/') !== false){
              $excel_dob = date('Y-m-d', strtotime($excel_date));
            } else { 
              $unix_date = ($excel_date - 25569) * 86400;
              $excel_date = 25569 + ($unix_date / 86400);
              $unix_date = ($excel_date - 25569) * 86400;
              $excel_dob=gmdate("Y-m-d", $unix_date);
            } 
            // var_dump($excel_dob);
            // die;
            
            // dd($test);
            // if($excel_dob!=''){

            //     $dummy_dob = date('Y-m-d', strtotime($excel_dob));
            // }
            // else{
            //     $dummy_dob=NULL;
            // }

            $name = trim(preg_replace('/^\s+|\s+$|\s+(?=\s)/', '', $value[2].' '.$value[3].' '.$value[4]));
              $user_data = 
                    [
                       
                      'business_id' => $request->customer,
                      'parent_id'   =>Auth::user()->business_id,
                      'unique_id' => $unique,
                      'sla_id'  =>  $request->sla,
                      'service_id'=> $request->services,
                      'client_emp_code'      => $value[0] ,
                      'entity_code'     => $value[1] ,
                      // 'name'  =>  $value[2].' '.$value[3].' '.$value[4],
                      'name'  =>  $name,
                      'first_name'     => $value[2] ,
                      'middle_name' => $value[3],
                      'last_name'=> $value[4],
                      'father_name' => $value[5],
                      'aadhar_number' => $value[6],
                      'dob' => $excel_dob,
                      'gender'=>$value[8],
                      'phone'=>$value[9],
                      'email' => $value[10],
                      'jaf_filling_access' => $value[11],
                      'created_at'=> date('Y-m-d H:i:s')
                    ];
                    
                    $user_id = DB::table('import_candidates')->insertGetId($user_data);

          }
          $excel_dummy = ImportCandidate::where('unique_id',$unique)->get();
          $data ='';
          
          if (count($excel_dummy)>0) {
          
            foreach ($excel_dummy as $dummy) {
                  //check condition for first name
                      
                  $first_name = $dummy->first_name; 
                  $regex = '/^([A-Za-z ]+)$/'; 
                  if (preg_match($regex, $first_name)) {
                  $first = $first_name ;
                  } else { 
                    $first = "<span class='text-danger'>".$first_name ."</span>";
                  
                  }           

                  $middle = "";
                //check condition for first name
                if ($dummy->middle_name != '') {
                  
                  $middle_name = $dummy->middle_name; 
                  $regex = '/^([a-zA-Z ]+)$/'; 
                  if (preg_match($regex, $middle_name)) {
                  $middle = $middle_name ;
                  } else { 
                    $middle = "<span class='text-danger'>".$middle_name ."</span>";
                
                  }           
                }
              //   // Last Name Check
              $last="";
              if ($dummy->last_name != '') {
                

                $last_name = $dummy->last_name; 
                $regex = '/^([a-zA-Z ]+)$/'; 
                if (preg_match($regex, $last_name)) {
                $last = $last_name ;
                } else { 
                  $last ="<span class='text-danger'>". $last_name ."</span>";
                }           
              }

               if ($dummy->father_name !='') {
                  $father_name = $dummy->father_name; 
                    $regex = '/^([a-zA-Z ]+)$/'; 
                    if (preg_match($regex, $father_name)) {
                    $father = $father_name ;
                    } else { 
                      $father ="<span class='text-danger'>". $father_name ."</span>";
                    } 
              }
                    else{

                        $father ="<span class='text-danger exceldata' ><input type='hidden' value='".$dummy->id."'>Required</span>";
                    }
              //check Aadhar number
              $aadhar='';
              if ($dummy->aadhar_number != '') {
                
                $aadhar_number = $dummy->aadhar_number; 
                $regex = ' /^[1-9]{1}[0-9]{11}$/'; 
                if (preg_match($regex, $aadhar_number)) {
                $aadhar = $aadhar_number ;
                } else { 
                  $aadhar ="<span class='text-danger'>". $aadhar_number ."</span>";
                }  
              }   

              //Check DOB validation
              if ($dummy->dob !=NULL) {
                $dob = $dummy->dob; 
                  $regex = '/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/'; 
                  if (preg_match($regex, $dob)) {
                  $birth_date = $dob ;
                  } else { 
                    $birth_date ="<span class='text-danger'>". $dob ."</span>";
                  } 
              }
              else{
                $birth_date ="<span class='text-danger exceldata' ><input type='hidden' value='".$dummy->id."'>Required</span>";
            }
                // Check Gender
                $genders="N/A";
              if ($dummy->gender != '') {
                
                if ($dummy->gender == 'male' || $dummy->gender == 'female' || $dummy->gender == 'others' ||  $dummy->gender == 'other' || $dummy->gender == 'Male' || $dummy->gender == 'Female' || $dummy->gender == 'Others' ||  $dummy->gender == 'Other'  ) {
                  $genders =  $dummy->gender;
                } 
                else {
                  $genders = "<span class='text-danger'>". $dummy->gender ."</span>";
                }
              }

              // Check Mobile nummber 
              $mob ='';
              if ($dummy->phone != '') {
                $phone = $dummy->phone; 
                $regex = ' /^[1-9]{1}[0-9]{9}$/'; 
                if (preg_match($regex, $phone)) {
                $mob = $phone ;
                } else { 
                  $mob = "<span class='text-danger'>".$phone ."</span>";
                }  
              }

              //check condition for Email
              $email_id ='';
                   $check_email='';
                    if ($dummy->email != '') {
                        $email =strtolower($dummy->email);
                        $regex = '/^[_a-z0-9-]+(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,3})$/'; 
                        $user_email = DB::table('users')->select('email')->where('email',$email)->first();
                        if($user_email){
                            $check_email = $user_email->email;
                        }
                        // dd($user_email);
                        if (preg_match($regex, $email) && ($check_email!=$email)) {
                            $email_id = $email ;
                        } else { 
                            $email_id ="<span class='text-danger exceldata'> <input type='hidden' value='".$dummy->id."'>". $email ."</span>";
                        }   
                    }
              // $email = $dummy->email; 
              // $regex = '/^[_a-z0-9-]+(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,3})$/'; 
              // if (preg_match($regex, $email)) {
              // $email_id = $email ;
              // } else { 
              //   $email_id ="<span class='text-danger'>". $email ."</span>";
              // }           
              $jaf_send_to="";
              if ($dummy->jaf_filling_access == 'customer' || $dummy->jaf_filling_access == 'coc' || $dummy->jaf_filling_access == 'Customer' || $dummy->jaf_filling_access == 'COC' || $dummy->jaf_filling_access == 'Coc' || $dummy->jaf_filling_access == 'candidate' || $dummy->jaf_filling_access == 'Candidate') {
              
                $jaf_send_to = strtolower($dummy->jaf_filling_access);
              }
              else {
                $jaf_send_to ="<span class='text-danger'>". $dummy->jaf_filling_access ."</span>";
              }

              $data .= '<tr><td>'.$dummy->client_emp_code.'</td><td>'.$dummy->entity_code.'</td><td>'.$first.'</td><td>'.$middle.'</td><td>'.$last.'</td><td>'.$father.'</td><td>'.$aadhar.'</td><td>'.$birth_date.'</td><td>'.$genders.'</td><td>'.$email_id .'</td><td>'.$mob.'</td><td>'.$jaf_send_to.'</td></tr>';

            }
          }
          else
          {
            $data .= '<tr><td>'.'No Data Found'.'</td></tr>';
          }

          DB::commit();
          return response()->json([
            'fail'      =>false,
            'excel' => $data,
            'unique_excel_id' =>$unique
          
          ]);
        }
        catch (\Exception $e) {
            DB::rollback();
            // something went wrong
            return $e;
        }       
  }


 //store Multiple Candidate
 public function storeMultiple(Request $request)
 {
    // $tat = $request->input('tats');
    // $tats = explode(',', $tat);
      
        $unique = $request->input('unique_id');
        $customer_id = $request->input('customer_id');
        $sla_id = $request->input('sla_id');
        $sla_type = $request->input('sla_type');
        $service_id = $request->input('service_id');
        $service_unit = $request->input('service_units');
        $tat = $request->input('tats');
        $incentive = $request->input('incentives');
        $penalty = $request->input('penalties');
        $check_price = $request->input('check_prices');
        $days_type = $request->input('days_types');
        $price_type = $request->input('price_types');
        $package_price = $request->package_price;
        $business_id = Auth::user()->business_id;
        $services = explode(',', $service_id);
        $service_unit = explode(',', $service_unit);
        $tats = explode(',', $tat);
        $incentives = explode(',', $incentive);
        $penalties = explode(',', $penalty);
        $check_prices = explode(',', $check_price);
        $max_service_tat = max($tats);
        // dd($key);
        $customer_sla=DB::table('customer_sla')->where('id',$sla_id)->first();
        DB::beginTransaction();
        try{
          $excel_dummy = ImportCandidate::where('unique_id',$unique)->get();
          $data ='';
          if (count($excel_dummy)>0) {
            foreach ($excel_dummy as $dummy) {
                    //check condition for first name
                      
                $first_name = $dummy->first_name; 
                $regex = '/^([a-zA-Z ]+)$/'; 
                if (preg_match($regex, $first_name)) {
                  $first = $first_name ;
                } else { 
                  continue;
                }           

                $middle = "";
              //check condition for first name
              if ($dummy->middle_name != '') {
                
                $middle_name = $dummy->middle_name; 
                $regex = '/^([a-zA-Z ]+)$/'; 
                if (preg_match($regex, $middle_name)) {
                  $middle = $middle_name ;
                } else { 
                  continue;
                }           
              }
              //   // Last Name Check
              $last='';
              if ($dummy->last_name != '') {
                
                $last_name = $dummy->last_name; 
                $regex = '/^([a-zA-Z ]+)$/'; 
                if (preg_match($regex, $last_name)) {
                $last = $last_name ;
                } else { 
                  continue;
                }           
              }

              if ($dummy->father_name !='') {  
                $father_name = $dummy->father_name; 
                $regex = '/^([a-zA-Z ]+)$/'; 
                if (preg_match($regex, $father_name)) {
                  $father = $father_name ;
                } else { 
                  continue;
                } 
              }
              else{
                  continue;
              }
              //check Aadhar number
              $aadhar='';
              if ($dummy->aadhar_number != '') {
                
                  $aadhar_number = $dummy->aadhar_number; 
                  $regex = '/^[1-9]{1}[0-9]{11}$/'; 
                  if (preg_match($regex, $aadhar_number)) {
                    $aadhar = $aadhar_number ;
                  } else { 
                    continue;
                  }  
              }   

              //Check DOB validation
               if ($dummy->dob !=NULL) {
                    $dob = $dummy->dob; 
                    $regex = '/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/'; 
                  if (preg_match($regex, $dob)) {
                    $birth_date = $dob ;
                  } else { 
                    continue;
                  } 
              }
                else{

                   continue;
                }
                // Check Gender
                $genders ="N/A";
              if ($dummy->gender != '') {
                
                if ($dummy->gender == 'male' || $dummy->gender == 'female' || $dummy->gender == 'others' ||  $dummy->gender == 'other' || $dummy->gender == 'Male' || $dummy->gender == 'Female' || $dummy->gender == 'Others' ||  $dummy->gender == 'Other'  ) {
                  $genders =  $dummy->gender;
                } 
                else {
                  continue;
                }
              }

              // Check Mobile nummber 
              $mob =null;
              if ($dummy->phone != '') {
                $phone = $dummy->phone; 
                $regex = '/^[1-9]{1}[0-9]{9}$/'; 
                if (preg_match($regex, $phone)) {
                $mob = $phone ;
                } else { 
                continue;
                }  
              }

              //check condition for Email
              $email_id =null;
              $check_email='';
              if ($dummy->email !='') {
                  $email = strtolower($dummy->email); 
                  $regex = '/^[_a-z0-9-]+(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,3})$/'; 
                    $user_email = DB::table('users')->select('email')->where('email',$email)->first();
                    if($user_email){
                      $check_email = $user_email->email;
                  }
                  if (preg_match($regex, $email) && ($check_email!=$email)) {
                      $email_id = $email ;
                  } else { 
                      continue;
                  } 
              }
              //   $email = $dummy->email; 
              //   $regex = '/^[_a-z0-9-]+(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,3})$/'; 
              // if (preg_match($regex, $email)) {
              //   $email_id = $email ;
              // } else { 
              //   continue;
              // }           

              if ($dummy->jaf_filling_access == 'customer' || $dummy->jaf_filling_access == 'coc' || $dummy->jaf_filling_access == 'Customer' || $dummy->jaf_filling_access == 'COC' || $dummy->jaf_filling_access == 'Coc' || $dummy->jaf_filling_access == 'candidate' || $dummy->jaf_filling_access == 'Candidate') {

                $jaf_send_to =strtolower($dummy->jaf_filling_access) ;
              }
              else {
                continue;
              }

                
              // $is_send_jaf_link = 0;
              // if($request->input('is_send_jaf_link')){
              //   $is_send_jaf_link = '1';
              // }

              //create user 

              $name = trim(preg_replace('/^\s+|\s+$|\s+(?=\s)/', '', $first.' '.$middle.' '.$last));
              $data = 
              [
                  'business_id'   =>$customer_id,
                  'user_type'     =>'candidate',
                  'client_emp_code'=>$request->client_emp_code,
                  'entity_code'   =>$request->entity_code,
                  'parent_id'     =>Auth::user()->business_id,
                  'name'          =>$name,
                  'first_name'    =>$first,
                  'middle_name'   =>$middle,
                  'last_name'     =>$last,
                  'father_name'   =>$father,
                  'aadhar_number' =>$aadhar,
                  'dob'           =>$birth_date,
                  'gender'        =>$genders,
                  'email'         =>$email_id,
                  //  'password'       => Hash::make($request->input('password')),
                  'phone'         =>$mob,
                  'created_by'    =>Auth::user()->id,
                  'created_at'    =>date('Y-m-d H:i:s') 
              ];
            
              $user_id = DB::table('users')->insertGetId($data);
              // dd($user_id);
              $display_id = "";
                //check customer config
              $candidate_config = DB::table('candidate_config')
              ->where(['client_id'=>$customer_id,'business_id'=>$business_id])
              ->first();
              //check client 
              $client_config = DB::table('user_businesses')
              ->where(['business_id'=>$customer_id])
              ->first();

              $latest_user = DB::table('users')
              ->select('display_id')
              ->where(['user_type'=>'candidate','business_id'=>$business_id])
              ->orderBy('id','desc')
              ->first();
              // dd($latest_user);
              $starting_number = $user_id;

              if($candidate_config !=null){
                if($latest_user != null){
                  if($latest_user->display_id !=null){
                    $id_arr = explode('-',$latest_user->display_id);
                    $starting_number = $id_arr[2]+1;  
                  }
                }
                $starting_number = str_pad($starting_number, 10, "0", STR_PAD_LEFT);
                $display_id = $candidate_config->customer_prefix.'-'.$candidate_config->client_prefix.'-'.$starting_number;
              }else{
                $customer_company = DB::table('user_businesses')
                  ->select('company_name')
                  ->where(['business_id'=>$business_id])
                  ->first();
                
                  $client_company = DB::table('user_businesses')
                  ->select('company_name')
                  ->where(['business_id'=>$customer_id])
                  ->first();
                  
                  $u_id = str_pad($user_id, 10, "0", STR_PAD_LEFT);
                  $display_id = substr($customer_company->company_name,0,4).'-'.substr($client_company->company_name,0,4).'-'.$u_id;
              }
              //
              DB::table('users')->where(['id'=>$user_id])->update(['display_id'=>$display_id]);
              
              //
              $job_data = 
              [
                'business_id'  => $customer_id,
                'parent_id'    => Auth::user()->business_id,
                'title'        => NULL,
                'sla_id'       => $sla_id,
                'total_candidates'=>1,
                // 'send_jaf_link_required'=>$is_send_jaf_link,
                'status'       =>0,
                'created_by'   =>Auth::user()->id,
                'created_at'   => date('Y-m-d H:i:s')
              ];
              
              $job_id = DB::table('jobs')->insertGetId($job_data);

              // job item items      
              $data = ['business_id' =>$customer_id, 
              'job_id'       =>$job_id, 
              'candidate_id' =>$user_id,
              'sla_id'       =>$sla_id,
              'days_type'    => stripos($sla_type,'variable')!==false ? $days_type : $customer_sla->days_type,
              'price_type'    => stripos($sla_type,'variable')!==false ? $price_type : $customer_sla->price_type,
              'tat_type'     => $customer_sla->tat_type,
              'incentive'     => $customer_sla->incentive,
              'penalty'     => $customer_sla->penalty,
              'tat'     => stripos($sla_type,'variable')!==false ?$max_service_tat:$customer_sla->tat,
              'client_tat'     => stripos($sla_type,'variable')!==false ?$max_service_tat:$customer_sla->client_tat,
              'jaf_status'   =>'pending',
              'created_at'   =>date('Y-m-d H:i:s')
              ];
              $job_item_id = DB::table('job_items')->insertGetId($data);  

              if(stripos($request->sla_type,'variable')!==false && stripos($request->price_type,'package')!==false)
              {
                  DB::table('job_items')->where(['business_id'=>$customer_id,'candidate_id'=>$user_id])->update([
                      'package_price' => $package_price,
                  ]);
              }
              else if(stripos($request->sla_type,'package')!==false && stripos($customer_sla->price_type,'package')!==false)
              {
                  DB::table('job_items')->where(['business_id'=>$customer_id,'candidate_id'=>$user_id])->update([
                      'package_price' => $customer_sla->package_price,
                  ]);
              }
              // service items
              if($request->sla_type=='package')
              {
                if( count($services) > 0 ){
                  foreach($services as $item){
                    // $number_of_verifications=1;
                  $service_d=DB::table('services')->where('id',$item)->first();
                  $number_of_verifications=1;
                  $no_of_tat=1;
                  $incentive_tat=1;
                  $penalty_tat=1;
                  $price = 0;
                    $sal_item_data = DB::table('customer_sla_items')->select('number_of_verifications','tat','incentive_tat','penalty_tat','price')->where(['sla_id'=>$sla_id,'service_id'=>$item])->first(); 
                    if($sal_item_data !=null){
                      $number_of_verifications= $sal_item_data->number_of_verifications;
                      $no_of_tat= $sal_item_data->tat;
                      $incentive_tat= $sal_item_data->incentive_tat;
                      $penalty_tat= $sal_item_data->penalty_tat;
                      $price= $sal_item_data->price;
                    }
                      $data = ['business_id'=>  $customer_id, 
                              'job_id'      => $job_id, 
                              'job_item_id' => $job_item_id,
                              'candidate_id' =>$user_id,
                              'sla_id'      => $sla_id,
                              'service_id'  => $item,
                              'jaf_send_to' => $jaf_send_to,
                              'jaf_filled_by' => Auth::user()->id,
                              'number_of_verifications'=>$service_d->verification_type=='Manual' || $service_d->verification_type=='manual'?$number_of_verifications:1,
                              'tat'=>$no_of_tat,
                              'incentive_tat'=>$incentive_tat,
                              'penalty_tat'=>$penalty_tat,
                              'price'   => $price,
                              'sla_item_id' => $item,
                              'created_at'  => date('Y-m-d H:i:s')
                            ]; 
                    $jsi =  DB::table('job_sla_items')->insertGetId($data);  
                  }
                }
              }
              else if($request->sla_type=='variable')
              { 
                if( count($services) == count($service_unit)&&  count($services) ==count($tats)&& count($services)==count($incentives)&& count($services)==count($penalties)||count($services)==count($check_prices)){
                  for($i=0;$i<=count($services)-1;$i++){
                    // print_r($services[$i]);
                    // print_r($service_unit[$i]);incentives


                    //  for($j=$i;$j<=sizeof($service_unit);$j++){
                      // if ($services[$i]== $service_unit[$i]) {
                        $number_of_verifications=1;
                        $no_of_tat=1;
                        $incentive_tat=1;
                        $penalty_tat=1;
                        $price=0;
                        $number_of_verifications=$service_unit[$i];
                        $no_of_tat=$tats[$i];
                        $incentive_tat=$incentives[$i];
                        $penalty_tat=$penalties[$i];
                        $price=$check_prices[$i];
                        // dd($number_of_verifications);
                        $service_d=DB::table('services')->where('id',$services[$i])->first();
                        // dd($service_d);
                        $data = ['business_id'=>  $customer_id, 
                                'job_id'      => $job_id, 
                                'job_item_id' => $job_item_id,
                                'candidate_id' =>$user_id,
                                'sla_id'      => $sla_id,
                                'service_id'  => $services[$i],
                                'jaf_send_to' => $jaf_send_to,
                                'jaf_filled_by' => Auth::user()->id,
                                'number_of_verifications'=>$service_d->verification_type=='Manual' || $service_d->verification_type=='manual'?$number_of_verifications:1,
                                'tat' => $no_of_tat,
                                'incentive_tat' => $incentive_tat,
                                'penalty_tat' => $penalty_tat,
                                'price'   => $price,
                                'sla_item_id' => $services[$i],
                                'created_at'  => date('Y-m-d H:i:s')
                              ]; 
                        $jsi =  DB::table('job_sla_items')->insertGetId($data);  
                      // }
                  }
                }
                // die;
              }
              $checks= 0;
                // service  items uses in  task table
                if ($dummy->jaf_filling_access == 'customer' || $dummy->jaf_filling_access == 'Customer') {
                  //Get data of user of customer with 
                  $data = [
                    'name'   =>$first.' '.$last,
                    'parent_id'=> Auth::user()->business_id,
                    'business_id'=> $customer_id, 
                    'description' => 'BGV Filling',
                    'job_id'      => $job_id, 
                    'priority' => 'normal',
                    'candidate_id' =>$user_id,   
                    // 'service_id'  => $item, 
                    // 'assigned_to' =>$assigned_user_id,
                    // 'assigned_by' => Auth::user()->id, 
                    // 'assigned_at' => date('Y-m-d H:i:s'),
                    // 'start_date' => date('Y-m-d'),
                    'created_by'    =>Auth::user()->id,
                    'created_at'  => date('Y-m-d H:i:s'),
                    'is_completed' => 0,
                    'status'=>'1',
                    'started_at' => date('Y-m-d H:i:s'),
                    'updated_at'  => date('Y-m-d H:i:s')
                  ];
                  // dd($data);
                  $task =  DB::table('tasks')->insertGetId($data); 

                  // // dd($task_users); 
                  // if (count($task_users)>1) {
                  //   $random_user=array_rand($task_users,2);
                  // } else {
                  //   $random_user=$task_users;
                  // }
                
                
                    
                  //  dd($random_user);
                  // foreach ($random_user as $user)
                  // {
                  //   echo  
                  // }
                  // die;
              
                  // foreach ($users as $user) {
              
            


                
                  $taskdata = [
                    'parent_id'=> Auth::user()->business_id,
                    'business_id'=> $customer_id,
                    'candidate_id' =>$user_id,   
                    'job_sla_item_id'  => $jsi,
                    'task_id'=> $task,
                    // 'user_id' => $user->id,
                    // 'service_id'  => $item,
                    'created_at'  => date('Y-m-d H:i:s'),
                    'updated_at'  => date('Y-m-d H:i:s')
                    
                  ];
                  DB::table('task_assignments')->insertGetId($taskdata); 

                    if (Auth::user()->user_type == 'customer') {
                      # code...
                        $admin_email = Auth::user()->email;
                        $admin_name = Auth::user()->first_name;
                        //send email to customer
                        $email = $admin_email;
                        $name  = $admin_name;
                        $candidate_name = $first;
                        $msg = "New BGV Filling Task Created with candidate name";
                        $sender = DB::table('users')->where(['id'=>$business_id])->first();
                        $data  = array('name'=>$name,'email'=>$email,'candidate_name'=>$candidate_name,'msg'=>$msg,'sender'=>$sender);

                        Mail::send(['html'=>'mails.task-notify'], $data, function($message) use($email,$name) {
                              $message->to($email, $name)->subject
                                ('Clobminds Pvt Ltd - Notification for BGV Filling Task');
                              $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                        });
                    }
                    // else
                    // {

                    //   $login_user = Auth::user()->business_id;
                    //   $user= User::where('id',$login_user)->first();
                    //   $admin_email = $user->email;
                    //   $admin_name = $user->first_name;
                    //   //send email to customer
                    //   $email = $admin_email;
                    //   $name  = $admin_name;
                    //   $candidate_name = $first;
                    //   $msg = "New BGV Filling Task Created with candidate name";
                    //   $sender = DB::table('users')->where(['id'=>$business_id])->first();
                    //   $data  = array('name'=>$name,'email'=>$email,'candidate_name'=>$candidate_name,'msg'=>$msg,'sender'=>$sender);

                    //   Mail::send(['html'=>'mails.task-notify'], $data, function($message) use($email,$name) {
                    //         $message->to($email, $name)->subject
                    //           ('Clobminds Pvt Ltd - Notification for BGV Filling Task');
                    //         $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                    //   });
                    // }

                  // $kams  = KeyAccountManager::where('business_id',$customer_id)->get();

                  // if (count($kams)>0) {
                  //   foreach ($kams as $kam) {

                  //     $user= User::where('id',$kam->user_id)->first();
                      
                  //     $email = $user->email;
                  //     $name  = $user->name;
                  //     $candidate_name = $first;
                  //     $msg = "New BGV Filling Task Created with candidate name";
                  //     $sender = DB::table('users')->where(['id'=>$business_id])->first();
                  //     $data  = array('name'=>$name,'email'=>$email,'candidate_name'=>$candidate_name,'msg'=>$msg,'sender'=>$sender);

                  //     Mail::send(['html'=>'mails.task-notify'], $data, function($message) use($email,$name) {
                  //           $message->to($email, $name)->subject
                  //             ('Clobminds Pvt Ltd - Notification for BGV Filling Task');
                  //           $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                  //     });

                  //   }
                    
                  // }

                }
                //
                $data = 
                [     'business_id'   =>$customer_id,
                      'candidate_id'  =>$user_id,
                      'job_id'        =>$job_id,
                      'name'          =>$first.' '.$middle.' '.$last,
                      'first_name'    =>$first,
                      'middle_name'   =>$middle,
                      'last_name'     =>$last,
                      'email'         =>$email_id,
                      'phone'         =>$mob,
                      'created_by'    =>Auth::user()->id,
                      'created_at'    =>date('Y-m-d H:i:s')
                ];
              
                DB::table('candidates')->insertGetId($data);

                // // Mail Send to COC
                // $user= User::where('id',$customer_id)->first();

                // $email = $user->email;
                // $name  = $user->name;
                // $candidate_name = $first;
                // $msg = "New Candidate Has Been Created with candidate name";
                // $sender = DB::table('users')->where(['id'=>$business_id])->first();
                // $data  = array('name'=>$name,'email'=>$email,'candidate_name'=>$candidate_name,'msg'=>$msg,'sender'=>$sender);

                // Mail::send(['html'=>'mails.task-notify'], $data, function($message) use($email,$name) {
                //       $message->to($email, $name)->subject
                //         ('Clobminds Pvt Ltd - Notification for New Candidate Created');
                //       $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                // });

                if ($jaf_send_to == 'candidate' || $jaf_send_to == 'Candidate') 
                {
                      //send email to candidate
                      $randomPassword = Str::random(10);
                      $hashed_random_password = Hash::make($randomPassword);
                      $candidate = DB::table('users')->select('display_id','email','parent_id','first_name','name','business_id')->where(['id'=>$user_id])->first();
                      // dd($candidate);
                      $company = DB::table('user_businesses')->select('company_name')->where(['business_id'=>$candidate->business_id])->first();
                      if ($candidate) {
              
                        DB::table('users')->where(['id'=>$user_id])->update(['password'=>$hashed_random_password,'status'=>'1']);
                      }

                      $email = $email_id;
                      $name  = $first;
                      $company_name=$company->company_name;
                      $id = $candidate->business_id;

                      // $data  = array('name'=>$name,'email'=>$email,'case_id'=>base64_encode($job_item_id),'c_id'=>base64_encode($user_id));

                      //   Mail::send(['html'=>'mails.jaf-info'], $data, function($message) use($email,$name) {
                      //       $message->to($email, $name)->subject
                      //           ('Clobminds Pvt Ltd - Your account credential');
                      //       $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                      //   });

                      $data  = array('name'=>$name,'email'=>$email,'candidate'=>$candidate,'password'=>$randomPassword,'company_name'=>$company_name,'id'=>$id);

                      Mail::send(['html'=>'mails.jaf_info_credential-candidate'], $data, function($message) use($email,$name) {
                          $message->to($email, $name)->subject
                              ('Clobminds Pvt Ltd - Your account credential');
                          $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                      });
                }
            }
          }
          DB::commit();
          return response()->json([
            'fail'      =>false,
            'error' => '',
            
          
          ]);
          // return redirect('/candidates')
          //             ->with('success', 'All candidates have been successfully created.');
        }
        catch (\Exception $e) {
            DB::rollback();
            // something went wrong
            return $e;
        } 
 }


 //bulk upload sla creaed

 public function BulkSlaCreate()
 {

      $business_id = Auth::user()->business_id;
        
      $items = DB::table('users')
              ->select('*')
              ->where(['user_type'=>'candidate','business_id'=>$business_id])
              ->get();

          
      $customers = DB::table('users as u')
              ->select('u.id','u.name','u.email','u.phone','b.company_name')
              ->join('user_businesses as b','b.business_id','=','u.id')
              ->where(['user_type'=>'client','parent_id'=>$business_id])
              ->get();

      $services = DB::table('services as s')
                  ->select('s.*')
                  ->join('service_form_inputs as si','s.id','=','si.service_id')
                  ->where('s.business_id',NULL)
                  ->where('s.status',1)
                  ->whereNotIn('s.type_name',['gstin'])
                  ->orwhere('s.business_id',$business_id)
                  ->groupBy('si.service_id')
                  ->get();
      // dd($services);
      $variable = DB::table('customer_sla')->select('id','title')->where('parent_id','0')->first();
     //dd($variable);
      // $excel_dummy = ImportCandidate::all();
      
      return view('admin.candidates.bulkuploads', compact('items','customers','services','variable'));

 }

 //bulk jaf uploads 
 public function candidatesJafUploads(Request $request)
 {
      $sla_id = $request->sla;

      $sla_data  = DB::table('customer_sla_items as csi')
                    ->select('csi.*')
                    ->join('customer_sla as c','c.id','=','csi.sla_id')
                    ->where(['c.id'=>$sla_id])
                    ->get();

      foreach($sla_data as $service)
      {
          $service_data = DB::table('service_form_inputs as si')
                          ->select('si.*','s.name as service_name','s.type_name','s.verification_type')
                          ->join('services as s','s.id','=','si.service_id')
                          ->where(['si.service_id'=>$service->service_id,'si.status'=>1])
                          ->whereNull('si.reference_type')
                          //->whereNotIn('si.label_name',['First Name','Last Name','Father Name','Date of Birth','Mode of Verification','Remarks'])
                          ->get();
          
          $no_of_verification=$service->number_of_verifications;

          for($i = 0; $i < $no_of_verification; $i++)
          {
              $items = DB::table('service_form_inputs as si')
                      ->select('si.*','s.name as service_name','s.type_name','s.verification_type')
                      ->join('services as s','s.id','=','si.service_id')
                      ->where(['si.service_id'=>$service->service_id,'si.status'=>1])
                      ->whereNull('si.reference_type')
                      //->whereNotIn('si.label_name',['First Name','Last Name','Father Name','Date of Birth','Mode of Verification','Remarks'])
                      ->get();
                
                  foreach($items as $key => $item)
                  {
                      if(stripos($item->verification_type,'Manual')!==false)
                      {
                          $j=$i+1;
                          if($key == '0'){
                              $columns[]=$item->label_name.' ('.$item->service_name.'- '.$j.')'; 
                          }
                          else
                          { 
                              if($item->type_name == 'reference'){
                                  if($item->label_name != 'Mode of Verification' && $item->label_name != 'Remarks'){
                                    $columns[]=$item->label_name;
                                  }
                              }
                              else
                              {
                                  $columns[]=$item->label_name;
                              }
                          }
                      }
                      else
                      {
                          if($key == '0'){
                              $columns[]=$item->label_name.' ('.$item->service_name.')';
                          }
                          else
                          {
                              $columns[]=$item->label_name;
                          }
                      }
                  }
                  
                    
          }  
      }             
      
      $rules= [
        'customer'    => 'required',
        // 'sla'         => 'required',
        'sla'         => 'required:sla,package',
        'services'    => 'required_if:sla,package|min:1',
        // 'excelFile'        => 'required'
      ];

      $customMessages = [ 
        'sla.required_if' =>  'The sla is required',
        'services.required_if' => 'Select at least one Check or Service item.',
        'customer.required' => 'Please select at least one customer.',
        // 'excelFile' => 'Please select a excel file'
      ];

      $validator = Validator::make($request->all(), $rules,$customMessages);
        
        if ($validator->fails()){
            return response()->json([
                'success' => false,
                'errors' => $validator->errors()
            ]);
        }


        DB::beginTransaction();
        try
        {
          
            $service = [];
            $check = $request->input('services');
            $serviceId = implode(',', $check); 
            //dd($service);
            $file = $request->excelFile;
          
            $unique = uniqid();

            $parsed_array = Excel::toArray([], $file);
            
            $imported_data = array_splice($parsed_array[0], 1);
            // dd($imported_data);
            //$heading_data = array_splice($parsed_array[0], 0);
        
            $customer_sla_items = DB::table('customer_sla_items')->select('id','sla_id','service_id','number_of_verifications')->where('sla_id',$sla_id)->get();
            //dd($customer_sla_items);
            
            $input_items = [];
            $input_data = [];

              foreach ($imported_data as $value)
              {
                  $dummy_dob = NULL;
                  $excel_date = $value[7]; //here is that value 41621 or 41631

                  if(stripos($excel_date, '-') !== false || stripos($excel_date, '/') !== false){
                    $excel_dob = date('Y-m-d', strtotime($excel_date));
                  } else { 
                    $unix_date = ($excel_date - 25569) * 86400;
                    $excel_date = 25569 + ($unix_date / 86400);
                    $unix_date = ($excel_date - 25569) * 86400;
                    $excel_dob=gmdate("Y-m-d", $unix_date);
                  } 

                  $i=11;

                  $service_data=[];

                foreach($customer_sla_items as $service)
                {
                    $input_items = DB::table('service_form_inputs as sfi')
                                ->select('sfi.*')   
                                ->where(['sfi.service_id'=>$service->service_id,'status'=>1])
                                ->whereNull('sfi.reference_type')
                                //->whereNotIn('label_name',['Mode of Verification','Remarks'])
                                ->get();
      
                  $numbers_of_items = $service->number_of_verifications;
                
                  for($j=1; $j<=$numbers_of_items; $j++)
                  {
                    
                    $input_data = [];
                    foreach($input_items as $input)
                    { 
                        $input_data[] = [
                          $input->label_name => $value[$i],
                        ];
                        $i++;
                    }
                    $service_data[$service->service_id.'-'.$j]=$input_data;

                  }
                
                 
                }

                $jaf_data = json_encode($service_data);
                //dd($jaf_data);

                $name = trim(preg_replace('/^\s+|\s+$|\s+(?=\s)/', '', $value[2].' '.$value[3].' '.$value[4]));
                $user_data = 
                    [
                      'business_id'      => $request->customer,
                      'parent_id'        =>Auth::user()->business_id,
                      'unique_id'        => $unique,
                      'sla_id'           =>  $request->sla,
                      'service_id'       => $serviceId,
                      'client_emp_code'  => $value[0] ,
                      'entity_code'      => $value[1] ,
                      'name'             =>  $name,
                      'first_name'       => $value[2] ,
                      'middle_name'      => $value[3],
                      'last_name'        => $value[4],
                      'father_name'      => $value[5],
                      'aadhaar_number'    => $value[6],
                      'dob'              => $excel_dob,
                      'gender'           =>$value[8],
                      'phone'            =>$value[9],
                      'email'            => $value[10],
                     // 'jaf_filling_access' => 'Admin',
                      'jaf_form_data'    => $jaf_data,
                      'created_at'=> date('Y-m-d H:i:s')
                    ];
                  
                $user_id = DB::table('import_canidate_jaf_uploads')->insertGetId($user_data);
              }

            $excel_dummy = ImportCanidateJafUpload::where('unique_id',$unique)->get();
            $data ='';
            $label_value = '';
            
             
           
            if (count($excel_dummy)>0) 
            {
              foreach ($excel_dummy as $dummy) 
              {
                    $column_value = '';
                    //check condition for first name 
                    $first_name = $dummy->first_name;
                    $regex = '/^([A-Za-z ]+)$/'; 
                    if (preg_match($regex, $first_name)) {
                        $first = $first_name ;
                    } else { 
                      $first = "<span class='text-danger'>".'Required'."</span>";
                    
                    }           

                    $middle = "";
                    //check condition for first name
                    if ($dummy->middle_name != '') {
                      $middle_name = $dummy->middle_name; 
                      $regex = '/^([a-zA-Z ]+)$/'; 
                    if (preg_match($regex, $middle_name)) {
                      $middle = $middle_name ;
                    } else { 
                      $middle = "<span class='text-danger'>".'Required'."</span>";
                  
                    }           
                    }
                    //   // Last Name Check
                    $last="";
                    if ($dummy->last_name != '') {
                      $last_name = $dummy->last_name; 
                      $regex = '/^([a-zA-Z ]+)$/'; 
                      if (preg_match($regex, $last_name)) {
                      $last = $last_name ;
                      } else { 
                        $last ="<span class='text-danger'>". 'Required' ."</span>";
                      }           
                    }

                    if ($dummy->father_name !='')
                    {
                      $father_name = $dummy->father_name; 
                        $regex = '/^([a-zA-Z ]+)$/'; 
                        if (preg_match($regex, $father_name)) {
                        $father = $father_name ;
                        } else { 
                          $father ="<span class='text-danger'>". 'Required'."</span>";
                        } 
                    }
                    else{
                        $father ="<span class='text-danger exceldata' ><input type='hidden' value='".$dummy->id."'>Required</span>";
                    }
                    //check Aadhar number
                    $aadhar='';
                    if ($dummy->aadhaar_number != '') {
                      
                      $aadhaar_number = $dummy->aadhaar_number; 
                      $regex = ' /^[1-9]{1}[0-9]{11}$/'; 
                      if (preg_match($regex, $aadhaar_number)) {
                      $aadhar = $aadhaar_number ;
                      } else { 
                        $aadhar ="<span class='text-danger'>". 'Required'."</span>";
                      }  
                    }   

                    //Check DOB validation
                    if ($dummy->dob !=NULL) {
                      $dob = $dummy->dob; 
                        $regex = '/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/'; 
                        if (preg_match($regex, $dob)) {
                        $birth_date = $dob ;
                        } else { 
                          $birth_date ="<span class='text-danger'>". 'Required' ."</span>";
                        } 
                    }
                    else{
                      $birth_date ="<span class='text-danger exceldata' ><input type='hidden' value='".$dummy->id."'>Required</span>";
                    }
                    // Check Gender
                    $genders="N/A";
                      if ($dummy->gender != '') {
                      
                      if ($dummy->gender == 'male' || $dummy->gender == 'female' || $dummy->gender == 'others' ||  $dummy->gender == 'other' || $dummy->gender == 'Male' || $dummy->gender == 'Female' || $dummy->gender == 'Others' ||  $dummy->gender == 'Other'  ) {
                        $genders =  $dummy->gender;
                      } 
                      else {
                        $genders = "<span class='text-danger'>". $dummy->gender."</span>";
                      }
                    }

                    // Check Mobile nummber 
                    $mob ='';
                    if ($dummy->phone != '') {
                      $phone = $dummy->phone; 
                      $regex = ' /^[1-9]{1}[0-9]{9}$/'; 
                      if (preg_match($regex, $phone)) {
                      $mob = $phone ;
                      } else { 
                        $mob = "<span class='text-danger'>".'Required' ."</span>";
                      }  
                    }

                     //check condition for Email
                    $email_id ='';
                        $check_email='';
                        if ($dummy->email != '') {
                            $email =strtolower($dummy->email);
                            $regex = '/^[_a-z0-9-]+(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,3})$/'; 
                            $user_email = DB::table('users')->select('email')->where('email',$email)->first();
                            if($user_email){
                                $check_email = $user_email->email;
                            }
                            // dd($user_email);
                            if (preg_match($regex, $email) && ($check_email!=$email)) {
                                $email_id = $email ;
                            } else { 
                                $email_id ="<span class='text-danger exceldata'> <input type='hidden' value='".$dummy->id."'>". $email ."</span>";
                            }   
                        }
                        
                    // $jaf_send_to="";
                    // if ($dummy->jaf_filling_access == 'customer' || $dummy->jaf_filling_access == 'coc' || $dummy->jaf_filling_access == 'Customer' || $dummy->jaf_filling_access == 'COC' || $dummy->jaf_filling_access == 'Coc' || $dummy->jaf_filling_access == 'candidate' || $dummy->jaf_filling_access == 'Candidate') {
                    
                    //   $jaf_send_to = strtolower($dummy->jaf_filling_access);
                    // }
                    // else {
                    //   $jaf_send_to ="<span class='text-danger'>". $dummy->jaf_filling_access ."</span>";
                    // }

                    $input_item_data = $dummy->jaf_form_data;
                    $input_item_data_array =  json_decode($input_item_data, true);
                  
                    if($input_item_data_array != null)
                    {
                      foreach($input_item_data_array as $key => $input)
                      {
                        foreach($input as $val)
                        {
                          $input_val = array_values($val); 
                          $valuename = implode(',',$input_val);
                         
                          $column_value .= '<td>'.$valuename.'</td>';
                      
                        }
                      }
                    }

                    $data .= '<tr><td>'.$dummy->client_emp_code.'</td><td>'.$dummy->entity_code.'</td><td>'.$first.'</td><td>'.$middle.'</td><td>'.$last.'</td><td>'.$father.'</td><td>'.$aadhar.'</td><td>'.$birth_date.'</td><td>'.$genders.'</td><td>'.$email_id .'</td><td>'.$mob.'</td>'.$column_value.'</tr>';
                    // dd($data);
                  
                }
              }
              else
              {
                $data .= '<tr><td>'.'No Data Found'.'</td></tr>';
              }

             
              if(count($columns) > 0)
              {
                foreach($columns as $column)
                {
                  $label_value .= '<th>'.$column.'</th>';
                }
              }
              else
              {
                $label_value .= '<td>'.'No Data Found'.'</td>';
              }
              
              DB::commit();
              return response()->json([
                'success'  => false,
                'excel'    => $data,
                // 'column_value' => $column_value,
                'label_name' => $label_value,
                'unique_excel_id' => $unique
              
              ]);
            }
          catch (\Exception $e) {
              DB::rollback();
              // something went wrong
              return $e;
          }   

 }

 //store Multiple Candidate jaf uploads
 public function candidatesMultipleJafuploads(Request $request)
 {
    
        $unique      = $request->input('unique_id');
        
        $customer_id = $request->input('customer_id');
        $sla_id      = $request->input('sla_id');
        $service_id = $request->input('service_id');

        $business_id = Auth::user()->business_id;
        
        $services = explode(',', $service_id);

        $customer_sla=DB::table('customer_sla')->where('id',$sla_id)->first();
        DB::beginTransaction();
        try{
          $excel_dummy = ImportCanidateJafUpload::where('unique_id',$unique)->get();
          // dd($excel_dummy);
          $data ='';
          if (count($excel_dummy)>0) {
            foreach ($excel_dummy as $key => $dummy) {
                    //check condition for first name
                     
                $first_name = $dummy->first_name; 
                $regex = '/^([a-zA-Z ]+)$/'; 
                if (preg_match($regex, $first_name)) {
                  $first = $first_name ;
                } else { 
                  continue;
                }           

                $middle = "";
                //check condition for first name
                if ($dummy->middle_name != '') {
                  
                  $middle_name = $dummy->middle_name; 
                  $regex = '/^([a-zA-Z ]+)$/'; 
                  if (preg_match($regex, $middle_name)) {
                    $middle = $middle_name ;
                  } else { 
                    continue;
                  }           
                }
                //   // Last Name Check
                $last='';
                if ($dummy->last_name != '') {
                  
                  $last_name = $dummy->last_name; 
                  $regex = '/^([a-zA-Z ]+)$/'; 
                  if (preg_match($regex, $last_name)) {
                  $last = $last_name ;
                  } else { 
                    continue;
                  }           
                }

                if ($dummy->father_name !='') {  
                  $father_name = $dummy->father_name; 
                  $regex = '/^([a-zA-Z ]+)$/'; 
                  if (preg_match($regex, $father_name)) {
                    $father = $father_name ;
                  } else { 
                    continue;
                  } 
                }
                else{
                    continue;
                }
                //check Aadhar number
                $aadhar='';
                if ($dummy->aadhaar_number != '') {
                  
                    $aadhaar_number = $dummy->aadhaar_number; 
                    $regex = '/^[1-9]{1}[0-9]{11}$/'; 
                    if (preg_match($regex, $aadhaar_number)) {
                      $aadhar = $aadhaar_number ;
                    } else { 
                      continue;
                    }  
                }   

                //Check DOB validation
                if ($dummy->dob !=NULL) {
                      $dob = $dummy->dob; 
                      $regex = '/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/'; 
                    if (preg_match($regex, $dob)) {
                      $birth_date = $dob ;
                    } else { 
                      continue;
                    } 
                }
                  else{

                    continue;
                  }
                  // Check Gender
                  $genders ="N/A";
                if ($dummy->gender != '') {
                  
                  if ($dummy->gender == 'male' || $dummy->gender == 'female' || $dummy->gender == 'others' ||  $dummy->gender == 'other' || $dummy->gender == 'Male' || $dummy->gender == 'Female' || $dummy->gender == 'Others' ||  $dummy->gender == 'Other'  ) {
                    $genders =  $dummy->gender;
                  } 
                  else {
                    continue;
                  }
                }

                // Check Mobile nummber 
                $mob =null;
                if ($dummy->phone != '') {
                  $phone = $dummy->phone; 
                  $regex = '/^[1-9]{1}[0-9]{9}$/'; 
                  if (preg_match($regex, $phone)) {
                  $mob = $phone ;
                  } else { 
                  continue;
                  }  
                }

                //check condition for Email
                $email_id =null;
                $check_email='';
                if ($dummy->email !='') {
                    $email = strtolower($dummy->email); 
                    $regex = '/^[_a-z0-9-]+(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,3})$/'; 
                      $user_email = DB::table('users')->select('email')->where('email',$email)->first();
                      if($user_email){
                        $check_email = $user_email->email;
                    }
                    if (preg_match($regex, $email) && ($check_email!=$email)) {
                        $email_id = $email ;
                    } else { 
                        continue;
                    } 
                }
                        
              // if ($dummy->jaf_filling_access == 'customer' || $dummy->jaf_filling_access == 'coc' || $dummy->jaf_filling_access == 'Customer' || $dummy->jaf_filling_access == 'COC' || $dummy->jaf_filling_access == 'Coc' || $dummy->jaf_filling_access == 'candidate' || $dummy->jaf_filling_access == 'Candidate') {

              //   $jaf_send_to =strtolower($dummy->jaf_filling_access) ;
              // }
              // else {
              //   continue;
              // }
              // $is_send_jaf_link = 0;
              // if($request->input('is_send_jaf_link')){
              //   $is_send_jaf_link = '1';
              // }

              //create user 
              // dd();
              //  $serviceId = $dummy->service_id;

              $name = trim(preg_replace('/^\s+|\s+$|\s+(?=\s)/', '', $first.' '.$middle.' '.$last));
              $data = 
              [
                  'business_id'   =>$customer_id,
                  'user_type'     =>'candidate',
                  'client_emp_code'=>$dummy->client_emp_code,
                  'entity_code'   =>$dummy->entity_code,
                  'parent_id'     =>Auth::user()->business_id,
                  'name'          =>$name,
                  'first_name'    =>$first,
                  'middle_name'   =>$middle,
                  'last_name'     =>$last,
                  'father_name'   =>$father,
                  'aadhar_number' =>$aadhar,
                  'dob'           =>$birth_date,
                  'gender'        =>$genders,
                  'email'         =>$email_id,
                  //  'password'       => Hash::make($request->input('password')),
                  'phone'         =>$mob,
                  'created_by'    =>Auth::user()->id,
                  'created_at'    =>date('Y-m-d H:i:s') 
              ];
              // dd($data);
              $user_id = DB::table('users')->insertGetId($data);
              // dd($user_id);
              $display_id = "";
                //check customer config
              $candidate_config = DB::table('candidate_config')
                                ->where(['client_id'=>$customer_id,'business_id'=>$business_id])
                                ->first();
              //check client 
              $client_config = DB::table('user_businesses')
                              ->where(['business_id'=>$customer_id])
                              ->first();

              $latest_user = DB::table('users')
                            ->select('display_id')
                            ->where(['user_type'=>'candidate','business_id'=>$business_id])
                            ->orderBy('id','desc')
                            ->first();
              // dd($latest_user);
              $starting_number = $user_id;

              if($candidate_config !=null){
                if($latest_user != null){
                  if($latest_user->display_id !=null){
                    $id_arr = explode('-',$latest_user->display_id);
                    $starting_number = $id_arr[2]+1;  
                  }
                }
                $starting_number = str_pad($starting_number, 10, "0", STR_PAD_LEFT);
                $display_id = $candidate_config->customer_prefix.'-'.$candidate_config->client_prefix.'-'.$starting_number;
              }else{
                $customer_company = DB::table('user_businesses')
                                  ->select('company_name')
                                  ->where(['business_id'=>$business_id])
                                  ->first();
                
                  $client_company = DB::table('user_businesses')
                                    ->select('company_name')
                                    ->where(['business_id'=>$customer_id])
                                    ->first();
                  
                  $u_id = str_pad($user_id, 10, "0", STR_PAD_LEFT);
                  $display_id = substr($customer_company->company_name,0,4).'-'.substr($client_company->company_name,0,4).'-'.$u_id;
              }
              //
              DB::table('users')->where(['id'=>$user_id])->update(['display_id'=>$display_id]);
              
              //
              $job_data = 
              [
                'business_id'  => $customer_id,
                'parent_id'    => Auth::user()->business_id,
                'title'        => NULL,
                'sla_id'       => $sla_id,
                'total_candidates'=>1,
                // 'send_jaf_link_required'=>$is_send_jaf_link,
                'status'       =>0,
                'created_by'   =>Auth::user()->id,
                'created_at'   => date('Y-m-d H:i:s')
              ];
              
              $job_id = DB::table('jobs')->insertGetId($job_data);

              // job item items      
              $data = 
              [
                'business_id' =>$customer_id, 
                'job_id'       =>$job_id, 
                'candidate_id' =>$user_id,
                'sla_id'       =>$sla_id,
                'days_type'    => $customer_sla->days_type,
                'price_type'    =>  $customer_sla->price_type,
                'tat_type'      => $customer_sla->tat_type,
                'incentive'     => $customer_sla->incentive,
                'penalty'       => $customer_sla->penalty,
                'tat'           => $customer_sla->tat,
                'client_tat'    => $customer_sla->client_tat,
                'jaf_status'   =>'pending',
                'created_at'   =>date('Y-m-d H:i:s')
              ];

              $job_item_id = DB::table('job_items')->insertGetId($data);  

              // if(stripos($request->sla_type,'variable')!==false && stripos($request->price_type,'package')!==false)
              // {
              //     DB::table('job_items')->where(['business_id'=>$customer_id,'candidate_id'=>$user_id])->update([
              //         'package_price' => $package_price,
              //     ]);
              // }
              // else if(stripos($request->sla_type,'package')!==false && stripos($customer_sla->price_type,'package')!==false)
              // {
                  DB::table('job_items')->where(['business_id'=>$customer_id,'candidate_id'=>$user_id])->update([
                      'package_price' => $customer_sla->package_price,
                  ]);
              // }
              // service items
              // if($request->sla_type=='package')
              // {
                if(count($services) > 0 ){
                  foreach($services as $item){
                    // $number_of_verifications=1;
                    $service_d=DB::table('services')->where('id',$item)->first();

                    $number_of_verifications=1;
                    $no_of_tat=1;
                    $incentive_tat=1;
                    $penalty_tat=1;
                    $price = 0;
                    $sal_item_data = DB::table('customer_sla_items')->select('number_of_verifications','tat','incentive_tat','penalty_tat','price')->where(['sla_id'=>$sla_id,'service_id'=>$item])->first(); 
                    if($sal_item_data !=null){
                      $number_of_verifications= $sal_item_data->number_of_verifications;
                      $no_of_tat= $sal_item_data->tat;
                      $incentive_tat= $sal_item_data->incentive_tat;
                      $penalty_tat= $sal_item_data->penalty_tat;
                      $price= $sal_item_data->price;
                    }
                      $data = [
                              'business_id'=>  $customer_id, 
                              'job_id'      => $job_id, 
                              'job_item_id' => $job_item_id,
                              'candidate_id' =>$user_id,
                              'sla_id'      => $sla_id,
                              'service_id'  => $item,
                              'jaf_send_to' => 'customer',
                              'jaf_filled_by' => Auth::user()->id,
                              'number_of_verifications'=>$service_d->verification_type=='Manual' || $service_d->verification_type=='manual'?$number_of_verifications:1,
                              'tat'=>$no_of_tat,
                              'incentive_tat'=>$incentive_tat,
                              'penalty_tat'=>$penalty_tat,
                              'price'   => $price,
                              'sla_item_id' => $item,
                              'created_at'  => date('Y-m-d H:i:s')
                            ]; 
                    $jsi =  DB::table('job_sla_items')->insertGetId($data);  
                  }
                }
              // }
              // else if($request->sla_type=='variable')
              // { 
              //   if( count($services) == count($service_unit)&&  count($services) ==count($tats)&& count($services)==count($incentives)&& count($services)==count($penalties)||count($services)==count($check_prices)){
              //     for($i=0;$i<=count($services)-1;$i++){
              //       // print_r($services[$i]);
              //       // print_r($service_unit[$i]);incentives


              //       //  for($j=$i;$j<=sizeof($service_unit);$j++){
              //         // if ($services[$i]== $service_unit[$i]) {
              //           $number_of_verifications=1;
              //           $no_of_tat=1;
              //           $incentive_tat=1;
              //           $penalty_tat=1;
              //           $price=0;
              //           $number_of_verifications=$service_unit[$i];
              //           $no_of_tat=$tats[$i];
              //           $incentive_tat=$incentives[$i];
              //           $penalty_tat=$penalties[$i];
              //           $price=$check_prices[$i];
              //           // dd($number_of_verifications);
              //           $service_d=DB::table('services')->where('id',$services[$i])->first();
              //           // dd($service_d);
              //           $data = ['business_id'=>  $customer_id, 
              //                   'job_id'      => $job_id, 
              //                   'job_item_id' => $job_item_id,
              //                   'candidate_id' =>$user_id,
              //                   'sla_id'      => $sla_id,
              //                   'service_id'  => $services[$i],
              //                   'jaf_send_to' => $jaf_send_to,
              //                   'jaf_filled_by' => Auth::user()->id,
              //                   'number_of_verifications'=>$service_d->verification_type=='Manual' || $service_d->verification_type=='manual'?$number_of_verifications:1,
              //                   'tat' => $no_of_tat,
              //                   'incentive_tat' => $incentive_tat,
              //                   'penalty_tat' => $penalty_tat,
              //                   'price'   => $price,
              //                   'sla_item_id' => $services[$i],
              //                   'created_at'  => date('Y-m-d H:i:s')
              //                 ]; 
              //           $jsi =  DB::table('job_sla_items')->insertGetId($data);  
              //         // }
              //     }
              //   }
              //   // die;
              // }
              $checks= 0;
                // service  items uses in  task table
                // if ($dummy->jaf_filling_access == 'customer' || $dummy->jaf_filling_access == 'Customer') { 
                  //Get data of user of customer with 
                  $data = 
                  [
                    'name'   =>$first.' '.$last,
                    'parent_id'=> Auth::user()->business_id,
                    'business_id'=> $customer_id, 
                    'description' => 'BGV Filling',
                    'job_id'      => $job_id, 
                    'priority' => 'normal',
                    'candidate_id' =>$user_id,   
                    'created_by'    =>Auth::user()->id,
                    'created_at'  => date('Y-m-d H:i:s'),
                    'is_completed' => 0,
                    'status'=>'1',
                    'started_at' => date('Y-m-d H:i:s'),
                    'updated_at'  => date('Y-m-d H:i:s')
                  ];
                  // dd($data);
                  $task =  DB::table('tasks')->insertGetId($data); 

                  $taskdata = 
                  [
                    'parent_id'=> Auth::user()->business_id,
                    'business_id'=> $customer_id,
                    'candidate_id' =>$user_id,   
                    'job_sla_item_id'  => $jsi,
                    'task_id'=> $task,
                    // 'user_id' => $user->id,
                    // 'service_id'  => $item,
                    'created_at'  => date('Y-m-d H:i:s'),
                    'updated_at'  => date('Y-m-d H:i:s')
                    
                  ];
                  DB::table('task_assignments')->insertGetId($taskdata); 

                  //jaf filled save
                 
                  $job_sla_items = DB::table('customer_sla_items')->where('sla_id',$sla_id)->get();

                  $jasoarray = json_decode($dummy->jaf_form_data,true);
                 
                  // dd($jasoarray);
                  $i = 0;
                  $input_data = [];
                  $arrset = [];
                  $service_data = [];
                 
                  foreach($job_sla_items as  $service)
                  {
                    $numbers_of_items = $service->number_of_verifications;
                    
                    for($j=1; $j<=$numbers_of_items; $j++)
                    {
                      $service_data = $jasoarray[$service->service_id.'-'.$j];
                      $jaf_data = json_encode($service_data);
                     
                        $jaf_form_data = 
                        [
                          'business_id' => $service->business_id,
                          'job_id'      => $job_id,
                          'job_item_id' => $job_item_id,
                          'service_id'  => $service->service_id,
                          'candidate_id' => $user_id,
                          'check_item_number'=>$j,
                          'sla_id'      =>$service->sla_id,
                          'created_by'   => Auth::user()->id,
                          'form_data'    => $jaf_data,
                          'form_data_all'   => $jaf_data,
                          'created_at'   => date('Y-m-d H:i:s')
                        ];
      
                        $jaf_data =JafFormData::create($jaf_form_data);
                                  
                    }
                  }
                  
                
                  $jaf_items_data = DB::table('jaf_form_data')->where(['job_item_id'=>$job_item_id])->get();
              
                  foreach($jaf_items_data as $service)
                  {
                    //dd($service);
                      $jaf_form_data = [       
                        // 'form_data'       => $service->jaf_data,
                        // 'form_data_all'   => $service->jaf_data,
                        'is_insufficiency'=> null,
                        'insufficiency_notes'=>NULL,
                        'address_type'  =>NULL,
                        'reference_type'  => NULL,
                        'created_by'    => Auth::user()->id,
                        'is_filled' => '1',
                        'updated_at'    => date('Y-m-d H:i:s')
                      ];
        
                      DB::table('jaf_form_data')->where(['id'=>$service->id])->update($jaf_form_data);
                  }

                  $serviceId = DB::table('services')->select('id','name','type_name')->where('type_name','cin')->first();
                  $serviceUpi = DB::table('services')->select('id','name','type_name')->where('type_name','upi')->first();
                  $serviceUan = DB::table('services')->select('id','name','type_name')->where('type_name','uan-number')->first();
                  $serviceCibil = DB::table('services')->select('id','name','type_name')->where('type_name','cibil')->first();
                 
                  DB::table('job_items')->where(['candidate_id'=>$user_id])->update(['jaf_status'=>'filled','filled_by_type'=>'customer','filled_by'=>Auth::user()->id,'filled_at'=>date('Y-m-d H:i:s')]);
                
                  $job_item =DB::table('job_items')->where(['candidate_id'=>$user_id,'jaf_status'=>'filled'])->first();
                  
                  if ( $job_item->jaf_status == 'filled') {
                    //  $jfd_service =[];
                    $jfd_service= DB::table('jaf_form_data')->where('candidate_id',$user_id)->whereIn('service_id',['2','3','4','7','8','9','12',$serviceId->id,$serviceUpi->id,$serviceUan->id,$serviceCibil->id])->get();
                    
                    $jfd_service=$jfd_service->toArray();
                    // want to ApiCheck event
                      event(new ApiCheck($jfd_service));
                    // }
                    
                    $task = Task::where(['business_id'=>$customer_id,'candidate_id'=>$user_id,'is_completed'=>0,'description'=>'BGV Filling'])->first();
                    
                    $task_id='';
                    if ($task) 
                    {
                      # code...
                        $task_id = $task->id;
                        $task->is_completed= 1;
                        $task->assigned_to = Auth::user()->id;
                        $task->updated_at= date('Y-m-d H:i:s');
                        $task->save();
                      
                      //Change status of old task 
                      $task_assgn = TaskAssignment::where(['business_id'=>$customer_id,'candidate_id'=>$user_id,'task_id'=>$task_id])->first();
                      
                      if($task_assgn)
                      {
                        $task_assgn->status= '3';
                        $task_assgn->user_id= Auth::user()->id;
                        $task_assgn->updated_at = date('Y-m-d H:i:s');
                        $task_assgn->save();
                      }
                    }
                      // task assign start
                      // $final_users = [];
                      // // $j = 0;
                      // $job_sla_items  = DB::table('job_sla_items')->where('candidate_id',$candidate_id)->whereNotIn('service_id',[2,3,4,7,8,9,12])->get();
                      $user_name      = DB::table('users')->where('id',$user_id)->first();
  
                    
                        $j_sla_item  = DB::table('customer_sla_items')->select('id')->where('business_id',$customer_id)->latest()->first();
                      
                        $data = 
                        [
                          'name'          => $first.' '.$last,
                          'parent_id'     => Auth::user()->business_id,
                          'business_id'   => $customer_id, 
                          'description'   => 'BGV QC',
                          'job_id'        => NULL, 
                          'priority'      => 'normal',
                          'candidate_id'  => $user_id,   
                          'service_id'    => 0, 
                          'number_of_verifications' => NULL,
                          'assigned_to'   => NULL,
                          'created_by'    => Auth::user()->id,
                          'created_at'    => date('Y-m-d H:i:s'),
                          'updated_at'    => date('Y-m-d H:i:s'),
                          'is_completed'  => 0,
                          'assigned_to' => Auth::user()->id,
                          'assigned_by'  => Auth::user()->id,
                          'assigned_at' =>  date('Y-m-d H:i:s')
                          // 'started_at'    => date('Y-m-d H:i:s')
                        ];
                        
                        $task_id =  DB::table('tasks')->insertGetId($data);

                        $taskdata = 
                        [
                          'parent_id'         => Auth::user()->business_id,
                          'business_id'       => $business_id,
                          'candidate_id'      => $user_id,   
                          'job_sla_item_id'   => $j_sla_item->id,
                          'task_id'           => $task_id,
                          'service_id'        => NULL,
                          'status'            =>'1',
                          'number_of_verifications' => 0,
                          'created_at'        => date('Y-m-d H:i:s'),
                          'updated_at'        => date('Y-m-d H:i:s'),
                          'user_id'  =>       Auth::user()->id
                         
                        ];
                        
                        DB::table('task_assignments')->insertGetId($taskdata); 
                      
                    // foreach($report_job_sla_items as $report_job_sla_item){
                        $report = DB::table('reports')->where('candidate_id',$user_id)->first();
                          // dd($report);
                          if ($report==NULL) {
                            $report= '';
                          }
                
                          //check report items created or not
                          $report_count = DB::table('reports')->where(['candidate_id'=>$user_id])->count(); 
                          // dd($report_count);
                          if($report_count == 0)
                          {
                            $job = DB::table('job_items')->where(['candidate_id'=>$user_id])->first(); 
                          
                            $data = 
                              [
                                'parent_id'     =>Auth::user()->business_id,
                                'business_id'   =>$job->business_id,
                                'candidate_id'  =>$user_id,
                                'sla_id'        =>$job->sla_id,       
                                'created_at'    =>date('Y-m-d H:i:s')
                              ];
                              
                              $report_id = DB::table('reports')->insertGetId($data);
                          }
                          else
                          {
                            $report_id = $report->id;
                          }
  
                          // add service items
                          $jaf_items_datas = DB::table('jaf_form_data')->where(['candidate_id'=>$user_id])->get(); 
                              
                          foreach($jaf_items_datas as $item)
                          {
                            // $reference_type = NULL;
                            $r_item = DB::table('report_items')->where('jaf_id',$item->id)->first();
                            if($r_item!=NULL)
                            {
                                if ($item->verification_status == 'success') {
                                  $data = 
                                  [
                                    'jaf_data'      =>$item->form_data,
                                    'updated_at'    =>date('Y-m-d H:i:s')
                                  ];
                                } 
                                else {
                                  $data = 
                                  [
                                    'jaf_data'      =>$item->form_data,
                                    'updated_at'    =>date('Y-m-d H:i:s')
                                  ]; 
                                }
  
                                DB::table('report_items')->where('jaf_id',$item->id)->update($data);
  
                                $report_item_id = $r_item->id;
                            }
                            else
                            {
                              if ($item->verification_status == 'success') {
                                $data = 
                                [
                                  'report_id'     =>$report_id,
                                  'service_id'    =>$item->service_id,
                                  'service_item_number'=>$item->check_item_number,
                                  'candidate_id'  =>$user_id,      
                                  'jaf_data'      =>$item->form_data,
                                  'jaf_id'        =>$item->id,
                                  // 'reference_type' =>  $reference_type,
                                  'created_at'    =>date('Y-m-d H:i:s')
                                ];
                              } 
                              else {
                                $data = 
                                [
                                  'report_id'     =>$report_id,
                                  'service_id'    =>$item->service_id,
                                  'service_item_number'=>$item->check_item_number,
                                  'candidate_id'  =>$user_id,      
                                  'jaf_data'      =>$item->form_data,
                                  'jaf_id'        =>$item->id,
                                  'is_report_output' => '0',
                                  // 'reference_type' =>  $reference_type,
                                  'created_at'    =>date('Y-m-d H:i:s')
                                ]; 
                              }
                              $report_item_id = DB::table('report_items')->insertGetId($data);
                            }
                          
                            
                            $jaf_item_attachments= DB::table('jaf_item_attachments')->where(['jaf_id'=>$item->id,'is_deleted'=>'0'])->get();

                            if(count($jaf_item_attachments)>0)
                            {
                              foreach($jaf_item_attachments as $attachment)
                              {
                                // dd(public_path('/uploads/report-files/'));
                                // dd($attachment);
                                // $dir  = public_path('/uploads/jaf-files/');
                                $file_platform = 'web'; 
                                if(stripos($attachment->file_platform,'s3')!==false)
                                {
                                  $s3_config = S3ConfigTrait::s3Config();
  
                                  $file_platform = 's3';
                                  $jaf_path = 'uploads/jaf-files/';
                                  $report_path = 'uploads/report-files/';
                                  if(!Storage::disk('s3')->exists($report_path))
                                  {
                                      Storage::disk('s3')->makeDirectory($report_path,0777, true, true);
                                  }
  
                                  Storage::disk('s3')->copy($jaf_path.$attachment->file_name,$report_path.$attachment->file_name);
                                }
                                else
                                {
                                    $rep_path = public_path('uploads/report-files/');
                                    if(!File::exists($rep_path))
                                    {
                                      File::makeDirectory($rep_path, $mode = 0777, true, true);
                                    }
                                    File::copy(public_path('/uploads/jaf-files/'.$attachment->file_name),public_path('/uploads/report-files/'.$attachment->file_name)); 
                                }
                              
                                DB::table('report_item_attachments')->insert([
                                  'report_id'        => $report_id, 
                                  'report_item_id'   => $report_item_id,
                                  'jaf_item_attachment_id'=>$attachment->id,
                                  'file_name'        => $attachment->file_name,
                                  'attachment_type'  => $attachment->attachment_type,
                                  'file_platform'   => $file_platform,
                                  'img_order'       =>$attachment->img_order,
                                  'service_attachment_name'=>$attachment->service_attachment_name,
                                  'service_attachment_id'=>$attachment->service_attachment_id,
                                  'created_by'       => Auth::user()->id,
                                  'created_at'       => date('Y-m-d H:i:s'),
                                  'is_temp'          => $attachment->is_temp,
                                ]);
                              }
                            }
                          }
                    // }
                      // end send BGV data to report
  
                      // Send Email to Customer for BGV Filled Successfully
                  }



                    if (Auth::user()->user_type == 'customer') 
                    {
                      # code...
                        $admin_email = Auth::user()->email;
                        $admin_name = Auth::user()->first_name;
                        //send email to customer
                        $email = $admin_email;
                        $name  = $admin_name;
                        $candidate_name = $first;
                        $msg = "New BGV Filling Task Created with candidate name";
                        $sender = DB::table('users')->where(['id'=>$business_id])->first();
                        $data  = array('name'=>$name,'email'=>$email,'candidate_name'=>$candidate_name,'msg'=>$msg,'sender'=>$sender);

                        Mail::send(['html'=>'mails.task-notify'], $data, function($message) use($email,$name) {
                              $message->to($email, $name)->subject
                                ('Clobminds Pvt Ltd - Notification for BGV Filling Task');
                              $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                        });
                    }
                    // else
                    // {
                    //   $login_user = Auth::user()->business_id;
                    //   $user= User::where('id',$login_user)->first();
                    //   $admin_email = $user->email;
                    //   $admin_name = $user->first_name;
                    //   //send email to customer
                    //   $email = $admin_email;
                    //   $name  = $admin_name;
                    //   $candidate_name = $first;
                    //   $msg = "New BGV Filling Task Created with candidate name";
                    //   $sender = DB::table('users')->where(['id'=>$business_id])->first();
                    //   $data  = array('name'=>$name,'email'=>$email,'candidate_name'=>$candidate_name,'msg'=>$msg,'sender'=>$sender);

                    //   Mail::send(['html'=>'mails.task-notify'], $data, function($message) use($email,$name) {
                    //         $message->to($email, $name)->subject
                    //           ('Clobminds Pvt Ltd - Notification for BGV Filling Task');
                    //         $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                    //   });
                    // }

                  // $kams  = KeyAccountManager::where('business_id',$customer_id)->get();

                  // if (count($kams)>0) 
                  // {
                  //   foreach ($kams as $kam) {
                  //     $user= User::where('id',$kam->user_id)->first();
                      
                  //     $email = $user->email;
                  //     $name  = $user->name;
                  //     $candidate_name = $first;
                  //     $msg = "New BGV Filling Task Created with candidate name";
                  //     $sender = DB::table('users')->where(['id'=>$business_id])->first();
                  //     $data  = array('name'=>$name,'email'=>$email,'candidate_name'=>$candidate_name,'msg'=>$msg,'sender'=>$sender);

                  //     Mail::send(['html'=>'mails.task-notify'], $data, function($message) use($email,$name) {
                  //           $message->to($email, $name)->subject
                  //             ('Clobminds Pvt Ltd - Notification for BGV Filling Task');
                  //           $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                  //     });

                  //   }
                    
                  // }

                // }
                //
                $data = 
                [     'business_id'   =>$customer_id,
                    'candidate_id'  =>$user_id,
                    'job_id'        =>$job_id,
                    'name'          =>$first.' '.$middle.' '.$last,
                    'first_name'    =>$first,
                    'middle_name'   =>$middle,
                    'last_name'     =>$last,
                    'email'         =>$email_id,
                    'phone'         =>$mob,
                    'created_by'    =>Auth::user()->id,
                    'created_at'    =>date('Y-m-d H:i:s')
                ];
              
                DB::table('candidates')->insertGetId($data);

                // Mail Send to COC
                // $user= User::where('id',$customer_id)->first();

                // $email = $user->email;
                // $name  = $user->name;
                // $candidate_name = $first;
                // $msg = "New Candidate Has Been Created with candidate name";
                // $sender = DB::table('users')->where(['id'=>$business_id])->first();
                // $data  = array('name'=>$name,'email'=>$email,'candidate_name'=>$candidate_name,'msg'=>$msg,'sender'=>$sender);

                // Mail::send(['html'=>'mails.task-notify'], $data, function($message) use($email,$name) {
                //       $message->to($email, $name)->subject
                //         ('Clobminds Pvt Ltd - Notification for New Candidate Created');
                //       $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                // });

                // if ($jaf_send_to == 'candidate' || $jaf_send_to == 'Candidate') 
                // {
                      //send email to candidate
                    // $randomPassword = Str::random(10);
                    // $hashed_random_password = Hash::make($randomPassword);
                    // $candidate = DB::table('users')->select('email','first_name','name','business_id')->where(['id'=>$user_id])->first();
                    // $company = DB::table('user_businesses')->select('company_name')->where(['business_id'=>$candidate->business_id])->first();
                    // if ($candidate) {
                    //     DB::table('users')->where(['id'=>$user_id])->update(['password'=>$hashed_random_password,'status'=>'1']);
                    // }

                    // $email = $email_id;
                    // $name  = $first;
                    // $company_name=$company->company_name;
                    // $id = $candidate->business_id;

                    // $data  = array('name'=>$name,'email'=>$email,'password'=>$randomPassword,'company_name'=>$company_name,'id'=>$id);

                    // Mail::send(['html'=>'mails.jaf_info_credential-candidate'], $data, function($message) use($email,$name) {
                    //     $message->to($email, $name)->subject
                    //         ('Clobminds Pvt Ltd - Your account credential');
                    //     $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                    // });
                // }
            }
          }
          DB::commit();
          return response()->json([
            'fail'      =>false,
            'error' => '',
          ]);
          // return redirect('/candidates')
          //             ->with('success', 'All candidates have been successfully created.');
        }
        catch (\Exception $e) {
            DB::rollback();
            // something went wrong
            return $e;
        } 
 }
  
  // Send OTP to Open Generate Report
  public function send_otp(Request $req)
  { 
        date_default_timezone_set('Asia/Kolkata');

        $candidate_id=base64_decode($req->_id);
        $user_id=Auth::user()->id;
        $business_id=Auth::user()->business_id;
        $email=Auth::user()->email;
        $otp=mt_rand(1000,9999);
        $email_send_at= date('Y-m-d h:i:s');
        $created_at= date('Y-m-d h:i:s');
        $updated_at= date('Y-m-d h:i:s');
        $name=Auth::user()->name;

        DB::beginTransaction();
        try{
          $items=DB::table('otp_by_email')->where(['user_id'=>$user_id,'candidate_id'=>$candidate_id,'status'=>'0']);

          $candidate=DB::table('users')->select('name','business_id','display_id')->where('id',$candidate_id)->first();
          $candidate_name= $candidate->name;
          $reference_no=$candidate->display_id;
          $sender = DB::table('users')->where(['id'=>$business_id])->first();
          // $company_name=Helper::company_name($candidate->business_id);
          if($items->count()>0)
          {
            $items=$items->update(
                          [
                              "user_id" => $user_id,
                              "business_id" => $business_id,
                              "candidate_id" => $candidate_id,
                              "email"=>$email,
                              "otp"=>$otp,
                              "email_send_at"=>$email_send_at,
                              // "created_at"=>$created_at,
                              "updated_at"=>$updated_at
                          ]
                    );
              
              $data  = array('name'=>$name,'email'=>$email,'otp'=>$otp,'candidate_name' => $candidate_name,'reference_no'=>$reference_no,'sender'=>$sender);
              if($items)
              {
                Mail::send('mails.send_otp', $data, function($message) use($email,$name) {
                  $message->to($email)->subject
                    ('Clobminds Pvt Ltd - OTP Verification');
                        $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                    });
                DB::commit(); 
                return response()->json([
                  'fail'      => false,
                  'data'      => ['name'=>$candidate->name,'ref_no'=>$candidate->display_id]
                  // 'id' => $user_id
                
                ]);
              }
          }
          else
          {
            $insert=DB::table('otp_by_email')
                    ->insert(
                          [
                              "user_id" => $user_id,
                              "business_id" => $business_id,
                              "candidate_id" => $candidate_id,
                              "email"=>$email,
                              "otp"=>$otp,
                              "email_send_at"=>$email_send_at,
                              "created_at"=>$created_at,
                              "updated_at"=>$updated_at
                          ]
                    );
            $data  = array('name'=>$name,'otp'=>$otp,'candidate_name' => $candidate_name,'reference_no'=>$reference_no,'sender'=>$sender);
            if($insert){
              Mail::send('mails.send_otp', $data, function($message) use($email) {
                $message->to($email)->subject
                  ('Clobminds Pvt Ltd - OTP Verification');
                        $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                  });
                DB::commit();
                return response()->json([
                  'fail'      => false,
                  'data'      => ['name'=>$candidate->name,'ref_no'=>$candidate->display_id]
                  // 'id' => $user_id
                
              ]);
            }
          }
          // return response()->json([
          //   'fail'  => false,
          //   // 'id' => $candidate_id
          // ]);
        }
        catch (\Exception $e) {
            DB::rollback();
            // something went wrong
            return $e;
        }  
  }

  // Verify otp to Open Generate Report
  public function verify_otp(Request $request)
  {
      // $business_id = Auth::user()->id;
      // $rules = [
      //     // 'abc' => 'required',
      //     // 'otp'  => 'required|array',
      //     'otp.*'  => 'required',
      //     // 'otp.*' => '|min:1'   
      //     // 'mob' => 'required',             
      // ];

      // $custom=[
      //   'otp.*.required' => 'The otp field is required'
      // ];

      // $validator = Validator::make($request->all(), $rules,$custom);
      // if ($validator->fails())
      //     return response()->json([
      //         'fail' => true,
      //         'errors' => $validator->errors(),
      //         'error_type'=>'validation'
      //     ]);


          // Validation
          if(count($request->otp)==0)
          {
            return response()->json([
                'fail' => true,
                'errors' => ['otp'=>['The otp field is required']],
                'error_type'=>'validation'
            ]);
          }
          else
          {
            foreach($request->otp as $value)
            {
                if($value=='' || $value==NULL)
                {
                  return response()->json([
                            'fail' => true,
                            'errors' => ['otp'=>['The otp field is required']],
                            'error_type'=>'validation'
                        ]);
                }
                else if(!is_numeric($value))
                {
                  return response()->json([
                      'fail' => true,
                      'errors' => ['otp'=>['The otp must be numeric']],
                      'error_type'=>'validation'
                  ]);
                }
            }
          }
          $otp=implode('',$request->otp);

          // dd($request->otp);
          $candidate_id=base64_decode($request->can_id);
          $user_id=Auth::user()->id;
          $email_id=Auth::user()->email;

          DB::beginTransaction();
          try
          {
                $data = DB::table('otp_by_email')
                          ->where(['user_id'=>$user_id,'email'=>$email_id,'candidate_id'=>$candidate_id,'status'=>'0'])
                          ->first();
                // dd($data->otp);
                // DB::table('aadhar_check_v2s')->insert($data);
                if($otp==$data->otp)
                {
                  DB::table('otp_by_email')
                  ->where('id',$data->id)
                  ->update(['status'=>'1','otp'=>NULL]);

                  // $jaf_form_data = DB::table(' jaf_form_data AS jfd ')
                  // ->join(' job_items AS ji','ji.candidate_id', '=', 'jfd.candidate_id')
                  // ->select('jfd.*','ji.jaf_status')
                  // ->where(['jfd.candidate_id'=>$candidate_id])
                  // ->groupBy('jfd.candidate_id')->first();

                  // if ( $jaf_form_data) {

                  //   DB::table('reports')->where('candidate_id',$candidate_id)->update(['status'=>'interim']);

                  // }
                    DB::commit();
                    return response()->json([
                      'fail' =>false,
                      'id' => $request->can_id
                    ]);
                }
                return response()->json([
                    'fail'      => true, 
                    'error'     => "yes",
                    'message' => "Otp Didn't match try again"
                ]);
          }
          catch (\Exception $e) {
                DB::rollback();
                // something went wrong
                // dd($e->getMessage());
                return $e;
          }  

  }

  //Ignore TAT
  public function ignore_tat(Request $request)
  {
    //
    $candidate_id=base64_decode($request->candi_id);
    $rules = [
      
      'notes'  => 'required',   
      'days' => 'required|numeric|min:1|max:10',             
    ];

    $validator = Validator::make($request->all(), $rules);
    if ($validator->fails())
        return response()->json([
            'fail' => true,
            'errors' => $validator->errors(),
            'error_type'=>'validation'
        ]);

      
      DB::beginTransaction();
      try{

        $job_item = DB::table('job_items')->where(['candidate_id'=>$candidate_id])->update(['is_tat_ignore'=>1,'tat_notes'=>$request->notes,'tat_ignore_days'=>$request->days]);
        DB::commit();
        return response()->json([
          'fail' => false,
        ]);
      }
      catch (\Exception $e) {
          DB::rollback();
          // something went wrong
          return $e;
      }  

  }

  /**
   * 
   * Get Auto Complete Data
   * 
   */
  public function autocomplete(Request $request)
  {
    // $business_id = Auth::user()->business_id;
    $data_result = [];

    $data = DB::table('users as u')
    ->DISTINCT('u.id')
    ->select('u.*','j.sla_id','jsi.jaf_send_to','j.jaf_status','j.job_id','j.candidate_id','jsi.jaf_send_to','j.id as job_item_id')      
    ->join('job_items as j','j.candidate_id','=','u.id') 
    ->join('job_sla_items as jsi','jsi.candidate_id','=','j.candidate_id' )             
    ->where(['u.user_type'=>'candidate','is_deleted'=>'0']);

    if (!is_numeric($request->search)) {
    $data = $data->select('u.id','u.phone',"u.name")
    ->where("u.name","LIKE","%{$request->search}%")
    ->get();

      foreach($data as $item){
        $data_result[] = ['id'=>$item->id,'name'=>$item->name];
      }

    }

    if (is_numeric($request->search)) {
      $data = DB::table('users as u')->select('u.id','u.phone',"u.name","u.client_emp_code")
                  ->where("u.phone","LIKE","%{$request->search}%")
                  ->get();

      
        foreach($data as $item){
          $data_result[] = ['id'=>$item->id,'name'=>$item->phone];
        }

    }

    // if (is_numeric($request->search)) {
    //   $data = $data->select('u.id','u.phone',"u.name",'u.client_emp_code')
    //   ->where("u.client_emp_code","LIKE","%{$request->search}%")
    //   ->get();

    //     foreach($data as $item){
    //       $data_result[] = ['id'=>$item->id,'name'=>$item->client_emp_code];
    //     }

    //   }

    return response()->json($data_result);
  }


    /**
     * 
     * Get BGV Reference Type Form
     * 
     */
    public function jafReferenceTypeForm(Request $request)
    {
        $report_item_id = base64_decode($request->id);

        $type = $request->type;

        $readonly='';

        $form='';



        $report_data = DB::table('report_items as ri')
                          ->where(['id'=> $report_item_id])
                          ->first();
        // dd($report_data);
        if($report_data !=NULL)
        {
            $report_reference_data = $report_data->reference_form_data;
            //dd($report_reference_data);
            $form.= '<div class="row" style="border:1px solid #ddd; padding:10px; margin-bottom:10px;">';
            if($report_reference_data!=NULL)
            {
                $report=DB::table('reports')->where(['id'=>$report_data->report_id])->first();

                if(stripos($report->status,'interim')!==false || stripos($report->status,'completed')!==false)
                {
                  $readonly = 'readonly';
                }

              $form.='<h4 class="pt-2 pb-2">'.ucwords($type).' Details</h4>';
              if(stripos($report_data->reference_type,$type)!==false)
              {
                  $report_reference_data_array = json_decode($report_reference_data,true);
                  $k=0;
                  foreach($report_reference_data_array as $key => $input)
                  {
                    $key_val = array_keys($input); $input_val = array_values($input);
                    $form.='<div class="col-sm-12">
                              <div class="form-group">
                                <label> '.$key_val[0].'</label>
                                <input type="hidden" name="reference-input-label-'.$report_data->jaf_id.'-'.$k.'" value="'.$key_val[0].'">
                                <input class="form-control error-control" '.$readonly.' type="text" name="reference-input-value-'.$report_data->jaf_id.'-'.$k.'" value="'.$input_val[0].'">
                              </div>
                            </div>';
                      $k++;
                  }

              }
              else
              {
                  $ref_service_inputs = DB::table('service_form_inputs')
                                        ->where(['service_id'=>$report_data->service_id,'reference_type'=>$type,'status'=>1])
                                        ->orWhereIn('label_name',['Mode of Verification','Remarks'])
                                        ->orderBy('reference_type','desc')
                                        ->get();
                    
                  $k=0;
                  foreach($ref_service_inputs as $input)
                  {
                      $form.='<div class="col-sm-12">
                                <div class="form-group">
                                  <label> '.$input->label_name.'</label>
                                  <input type="hidden" name="reference-input-label-'.$report_data->jaf_id.'-'.$k.'" value="'.$input->label_name.'">
                                  <input class="form-control error-control" '.$readonly.' type="text" name="reference-input-value-'.$report_data->jaf_id.'-'.$k.'">
                                </div>
                              </div>';
                      $k++;
                  }
                
              }

            }
            else
            {
              $form.='<h4 class="pt-2 pb-2">'.ucwords($type).' Details</h4>';
              $ref_service_inputs = DB::table('service_form_inputs')
                                    ->where(['service_id'=>$report_data->service_id,'reference_type'=>$type,'status'=>1])
                                    ->orWhereIn('label_name',['Mode of Verification','Remarks'])
                                    ->orderBy('reference_type','desc')
                                    ->get();
                                    
                $report=DB::table('reports')->where(['id'=>$report_data->report_id])->first();

                if(stripos($report->status,'interim')!==false || stripos($report->status,'completed')!==false)
                {
                  $readonly = 'readonly';
                }
                
                $k=0;
                foreach($ref_service_inputs as $input)
                {
                    $form.='<div class="col-sm-12">
                              <div class="form-group">
                                <label> '.$input->label_name.'</label>
                                <input type="hidden" name="reference-input-label-'.$report_data->jaf_id.'-'.$k.'" value="'.$input->label_name.'">
                                <input class="form-control error-control" '.$readonly.' type="text" name="reference-input-value-'.$report_data->jaf_id.'-'.$k.'">
                              </div>
                            </div>';
                    $k++;
                }
            }

            $form.='</div>';

            return $form;
        }
    }
 
   
    /**
     *
     *Task Reassign the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * 
     * @return \Illuminate\Http\Response
     */
    public function assignModal(Request $request)
    {
        
            // 'roles'     => 'required'
            
            $business_id = Auth::user()->business_id;
            $user_id = Auth::user()->id;

            $assign_form = '';

            $data = '';
           
            $service_id =$request->service_id;

            $services = DB::table('services')->select('name')->where(['id'=>$service_id])->first();
            // dd($service_id);
            $candidate = DB::table('users as u')
            ->select('u.id','u.business_id','u.client_emp_code','u.first_name','u.dob','u.father_name','u.last_name','u.name','u.email','u.phone','u.gender','u.aadhar_number','u.display_id','u.entity_code','u.user_type','u.digital_signature')  
            ->where(['u.id'=>$request->candidate_id]) 
            ->first(); 
            $service_forms = DB::table('service_form_inputs as sfi')
            ->select('sfi.*','s.name','s.verification_type','s.type_name') 
            ->join('services as s','s.id','=','sfi.service_id')           
            ->where(['sfi.service_id'=>$service_id,'sfi.status'=>'1'])
            ->whereNull('sfi.reference_type')
            ->whereNotIn('sfi.label_name',['Mode of Verification','Remarks'])
            ->get();
           
            $jaf_items= DB::table('jaf_form_data')->where(['candidate_id'=>$request->candidate_id,'service_id'=>$service_id])->get();
            $country_list = DB::table('countries')->select('name')->get();
            // $i=1;
            //   if (count($jaf_items)>0) {
            //     foreach ($jaf_items as $jaf_item) {
            //       $i =(int) $jaf_item->check_item_number;
            //     }
            //     ++$i;
            //   }
            // $data.="<div class='row'>";

            $i=0;
            foreach ($service_forms as $input) {
              $labelname = '';
              if($input->type_name=='global_database'){
               
                if($input->label_name=='Criminal Records Database Checks - India')
                {
                  $labelname = 'd-none';
                }
                elseif($input->label_name=='Civil Litigation Database Checks – India')
                {
                  $labelname = 'd-none';
                }
                elseif($input->label_name=='Credit and Reputational Risk Database Checks – India')
                {
                  $labelname = 'd-none';
                }
                elseif($input->label_name=='Serious and Organized Crimes Database Checks – Global')
                {
                  $labelname = 'd-none';
                }
                elseif($input->label_name== 'Global Regulatory Bodies')
                {
                  $labelname = 'd-none';
                }
                elseif($input->label_name== 'Compliance Database')
                {
                  $labelname = 'd-none';
                }
                elseif($input->label_name=='Sanction & PEP - Global')
                {
                  $labelname = 'd-none';
                }
                elseif($input->label_name=='Web and Media Searches – Global')
                {
                  $labelname = 'd-none';
                }
               
              }
                  $name =$lname = $father_name= $dob= $placeholder=$readonly ='';

                   $data.='<div class="form-group '.$labelname.'">';

                    $input_class='error-control';
                    //name
                    if($input->label_name=='First Name' || $input->label_name=='First name' || $input->label_name=='first name'){ 
                      $name = $candidate->first_name;
                      $readonly ="readonly";
                      $input_class='';
                    }
                    if($input->label_name=='First Name' || $input->label_name=='First name' || $input->label_name=='first name'){ 
                      $name = $candidate->first_name;
                      $readonly ="readonly";
                      $input_class='';
                    }
                    if($input->label_name=='Candidate Name' || $input->label_name=='Candidate Name' || $input->label_name=='candidate name'){ 
                      $name = $candidate->first_name;
                      $readonly ="readonly";
                      $input_class='';
                    }
                    //father name
                    if($input->label_name=='Father Name' || $input->label_name=='father name' || $input->label_name=='Father name'){ 
                      $name = $candidate->father_name;
                    }
                    //dob
                    $date_class='';
                    if($input->label_name=='Date of Birth' || $input->label_name=='DOB' || $input->label_name=='dob'){ 
                      $dob = $candidate->dob;
                      if($dob !=NULL){
                        $name = date('d-m-Y',strtotime($candidate->dob));
                      }
                      $date_class = 'commonDatepicker';
                    }
                    if(stripos($input->label_name,'Date of Expire')!==false)
                    {
                       $date_class = 'Datepicker';
                    }
                    if($input->label_name=='Period of Stay' || $input->label_name=='Period of stay' || $input->label_name=='period of stay'){
                      $placeholder ='ex-No of days ';
                    
                    }
                    $university_board_name = '';
                    if($input->label_name=='University Name / Board Name'){ 
                      $university_board_name = 'searchUniversity_board';
                    }
                   

                    if($input->service_id==17)
                    {
                        // if($input->reference_type==NULL && !(stripos($input->label_name,'Mode of Verification')!==false || stripos($input->label_name,'Remarks')!==false))
                        // {
                            if(stripos($input->label_name,'Reference Type (Personal / Professional)')!==false)
                            {
                              $data .= "<label>".$input->label_name." <span class='text-danger'>*</span></label>";
                      
                              $data.="<input type='hidden' name='service-input-label-".$service_id."-".$i. "' value='".$input->label_name."'>";

                              $data.='<select class="form-control '.$date_class.' '.$university_board_name.' service-input-value-'.$service_id.'-'.$i.' '.$input_class.' new_ref_type" name="service-input-value-'.$service_id.'-'.$i.'" data-id="'.base64_encode($service_id).'">
                                        <option value="">--Select--</option>
                                        <option value="personal">Personal</option>
                                        <option value="professional">Professional</option>
                                      </select>';

                              $data.='<p style="margin-bottom: 2px;" class="text-danger error-container error-service-input-value-'.$service_id.'-'.$i.'" id="error-service-input-value-'.$service_id.'-'.$i.'"></p>';
                            }
                            else
                            {
                              $data .= "<label>".$input->label_name."</label>";
                      
                              $data.="<input type='hidden' name='service-input-label-".$service_id."-".$i. "' value='".$input->label_name."'>";

                              $data.= "<input ". $readonly." class='form-control ".$date_class." ".$university_board_name.
                              " service-input-value-".$service_id."-".$i." " . $input_class."' type='text' name=service-input-value-".$service_id."-".$i ." value='". $name ."' placeholder='". $placeholder."'>";

                              $data.='<p style="margin-bottom: 2px;" class="text-danger error-container error-service-input-value-'.$service_id.'-'.$i.'" id="error-service-input-value-'.$service_id.'-'.$i.'"></p>';
                            }
                        // }
                    }
                    else if($input->service_id==15){
                      $data .= "<label>".$input->label_name."</label><br>";
                      
                      $data.="<input type='hidden' name='service-input-label-".$service_id."-".$i. "' value='".$input->label_name."'>";
                      if ($input->label_name=='Address Type'){
                        // $data .= "<label>".$input->label_name."</label>";
                        // $data.="<input type='hidden' name='service-input-label-".$service_id."-".$i. "' value='".$input->label_name."'>";

                              $data.='<select class="form-control '.$date_class.' '.$university_board_name.' service-input-value-'.$service_id.'-'.$i.' '.$input_class.' new_ref_type" name="service-input-value-'.$service_id.'-'.$i.'" data-id="'.base64_encode($service_id).'">
                                        <option value="">--Select--</option>
                                        <option  value="current">Current</option>
                                        <option  value="permanent">Permanent</option>
                                        <option  value="current_permanent">Current + Permanent</option>
                                      </select>';

                              $data.='<p style="margin-bottom: 2px;" class="text-danger error-container error-service-input-value-'.$service_id.'-'.$i.'" id="error-service-input-value-'.$service_id.'-'.$i.'"></p>';
                          
                      }else{
                        // $data .= "<label>".$input->label_name."</label>";
                      
                        // $data.="<input type='hidden' name='service-input-label-".$service_id."-".$i. "' value='".$input->label_name."'>";

                        $data.= "<input ". $readonly." class='form-control ".$date_class." ".$university_board_name." service-input-value-".$service_id."-".$i." " . $input_class."' type='text' name=service-input-value-".$service_id."-".$i ." value='". $name ."' placeholder='". $placeholder."'>";

                        $data.='<p style="margin-bottom: 2px;" class="text-danger error-container error-service-input-value-'.$service_id.'-'.$i.'" id="error-service-input-value-'.$service_id.'-'.$i.'"></p>';
                      }
                    }
                    else if($input->type_name=='global_database'){
                      $data .= "<label class=".$labelname.">".$input->label_name."</label><br>";
                      
                      $data.="<input type='hidden' name='service-input-label-".$service_id."-".$i. "' value='".$input->label_name."'>";
                      if ($input->label_name=='Country'){
                              $data.='<select class="form-control '.$date_class.' '.$university_board_name.' service-input-value-'.$service_id.'-'.$i.' '.$input_class.' " name="service-input-value-'.$service_id.'-'.$i.'" data-id="'.base64_encode($service_id).'">
                                        <option value="">--Select--</option>';
                                        foreach ($country_list as $country)  {
                                         $data.='<option  value="'.$country->name.'">'.$country->name.'</option>';
                                        }
                                     $data.=' </select>';
                                        
                              $data.='<p style="margin-bottom: 2px;" class="text-danger error-container error-service-input-value-'.$service_id.'-'.$i.'" id="error-service-input-value-'.$service_id.'-'.$i.'"></p>';
                          
                      }
                      else if($input->label_name=='Criminal Records Database Checks - India'){
                        $data.= "<input ". $readonly." class='form-control ".$date_class." ".$university_board_name.
                        " service-input-value-".$service_id."-".$i." " . $input_class."' type='hidden' name=service-input-value-".$service_id."-".$i ." value='". $name ."' placeholder='". $placeholder."'>";
                      }
                      else if($input->label_name=='Civil Litigation Database Checks – India'){
                        $data.= "<input ". $readonly." class='form-control ".$date_class." ".$university_board_name.
                        " service-input-value-".$service_id."-".$i." " . $input_class."' type='hidden' name=service-input-value-".$service_id."-".$i ." value='". $name ."' placeholder='". $placeholder."'>";
                      } 
                      else if($input->label_name=='Credit and Reputational Risk Database Checks – India'){
                        $data.= "<input ". $readonly." class='form-control ".$date_class." ".$university_board_name.
                        " service-input-value-".$service_id."-".$i." " . $input_class."' type='hidden' name=service-input-value-".$service_id."-".$i ." value='". $name ."' placeholder='". $placeholder."'>";
                      } 
                      else if($input->label_name=='Serious and Organized Crimes Database Checks – Global'){
                        $data.= "<input ". $readonly." class='form-control ".$date_class." ".$university_board_name.
                        " service-input-value-".$service_id."-".$i." " . $input_class."' type='hidden' name=service-input-value-".$service_id."-".$i ." value='". $name ."' placeholder='". $placeholder."'>";
                      } 
                      else if($input->label_name=='Global Regulatory Bodies'){
                        $data.= "<input ". $readonly." class='form-control ".$date_class." ".$university_board_name.
                        " service-input-value-".$service_id."-".$i." " . $input_class."' type='hidden' name=service-input-value-".$service_id."-".$i ." value='". $name ."' placeholder='". $placeholder."'>";
                      } 
                      else if($input->label_name=='Compliance Database'){
                        $data.= "<input ". $readonly." class='form-control ".$date_class." ".$university_board_name.
                        " service-input-value-".$service_id."-".$i." " . $input_class."' type='hidden' name=service-input-value-".$service_id."-".$i ." value='". $name ."' placeholder='". $placeholder."'>";
                      } 
                      else if($input->label_name=='Sanction & PEP - Global'){
                        $data.= "<input ". $readonly." class='form-control ".$date_class." ".$university_board_name.
                        " service-input-value-".$service_id."-".$i." " . $input_class."' type='hidden' name=service-input-value-".$service_id."-".$i ." value='". $name ."' placeholder='". $placeholder."'>";
                      } 
                      else if($input->label_name=='Web and Media Searches – Global'){
                        $data.= "<input ". $readonly." class='form-control ".$date_class." ".$university_board_name.
                        " service-input-value-".$service_id."-".$i." " . $input_class."' type='hidden' name=service-input-value-".$service_id."-".$i ." value='". $name ."' placeholder='". $placeholder."'>";
                      }
                      else{
                        // $data .= "<label>".$input->label_name."</label>";
                      
                        // $data.="<input type='hidden' name='service-input-label-".$service_id."-".$i. "' value='".$input->label_name."'>";

                        $data.= "<input ". $readonly." class='form-control ".$date_class." ".$university_board_name." service-input-value-".$service_id."-".$i." " . $input_class."' type='text' name=service-input-value-".$service_id."-".$i ." value='". $name ."' placeholder='". $placeholder."'>";

                        $data.='<p style="margin-bottom: 2px;" class="text-danger error-container error-service-input-value-'.$service_id.'-'.$i.'" id="error-service-input-value-'.$service_id.'-'.$i.'"></p>';
                      }
                    }
                    else
                    {
                      $data .= "<label>".$input->label_name."</label><br>";
                      
                      $data.="<input type='hidden' name='service-input-label-".$service_id."-".$i. "' value='".$input->label_name."'>";

                      if(stripos($input->type_name,'drug_test_5')!==false || stripos($input->type_name,'drug_test_6')!==false || stripos($input->type_name,'drug_test_7')!==false || stripos($input->type_name,'drug_test_8')!==false || stripos($input->type_name,'drug_test_9')!==false || stripos($input->type_name,'drug_test_10')!==false)
                      {
                        if(stripos($input->label_name,'Test Name')!==false)
                        {
                            $drug_test_name = Helper::drugTestName($input->service_id);

                            $data.= "<input ". $readonly." class='form-control ".$date_class." ".$university_board_name.
                            " service-input-value-".$service_id."-".$i." " . $input_class."' type='hidden' name=service-input-value-".$service_id."-".$i ." value='". $name ."' placeholder='". $placeholder."'>";

                            if(count($drug_test_name)>0)
                            {
                              foreach($drug_test_name as $d_item)
                              {
                                  $data.="<div class='form-check form-check-inline disabled-link-1'>
                                            <input class='form-check-input test-name-".$service_id."-".$i." " . $input_class."' type='checkbox' name='test-name-".$service_id."-".$i ."[]' value='".$d_item->test_name."' checked readonly>
                                            <label class='form-check-label' for='inlineCheckbox-1'>".$d_item->test_name."</label>
                                          </div>";
                              }
                            }
                        }
                        else if(stripos($input->label_name,'Result')!==false)
                        {
                          $data.='<select class="form-control '.$date_class.' '.$university_board_name.' service-input-value-'.$service_id.'-'.$i.' '.$input_class.'" name="service-input-value-'.$service_id.'-'.$i.'">
                                    <option value="">--Select--</option>
                                    <option value="positive">Positive</option>
                                    <option value="negative">Negative</option>
                                  </select>';
                        }
                        else
                        {
                          $data.= "<input ". $readonly." class='form-control ".$date_class." ".$university_board_name.
                          " service-input-value-".$service_id."-".$i." " . $input_class."' type='text' name=service-input-value-".$service_id."-".$i ." value='". $name ."' placeholder='". $placeholder."'>";
                        }

                      }
                      else
                      {
                        $data.= "<input ". $readonly." class='form-control ".$date_class." ".$university_board_name.
                        " service-input-value-".$service_id."-".$i." " . $input_class."' type='text' name=service-input-value-".$service_id."-".$i ." value='". $name ."' placeholder='". $placeholder."'>";

                      }
                       $data.='<p style="margin-bottom: 2px;" class="text-danger error-container error-service-input-value-'.$service_id.'-'.$i.'" id="error-service-input-value-'.$service_id.'-'.$i.'"></p>';

                    }

                    $data.='</div>';
                  $i++;
            }
           $data.="</div>";
            // dd($task_time);
            // $services = explode(',', $service_id);
            $users = DB::table('users as u')
            ->join('role_masters as rm', 'rm.id', '=', 'u.role')
            ->join('role_permissions as rp', 'rp.role_id', '=', 'rm.id')
            ->select('u.name','u.id','u.role as role_id','rm.role','rp.permission_id' )
            ->where(['u.business_id'=>Auth::user()->business_id,'u.is_deleted'=>0])
            ->get();
           // dd($users);
            // // 
            $user_service = DB::table('users as u')
            ->join('role_masters as rm', 'rm.id', '=', 'u.role')
            ->join('role_permissions as rp', 'rp.role_id', '=', 'rm.id')
            ->leftJoin('user_checks as uc','uc.user_id','=','u.id')
            ->select('uc.checks','u.id' )
            ->where(['u.business_id'=>Auth::user()->business_id,'uc.checks'=>$service_id])
            ->get();
          
            // $task =DB::table('tasks');
            
            $user_id =[];
            foreach($user_service as $us)
            {
              $user_id[]= $us->id;
            }
          
            $action_master = DB::table('action_masters')->select('*')
            ->where(['route_group'=>'','action_title'=>'BGV Filled'])
            ->first();
            $assign_form .="<div class='form-group'>
                              <label for='label_name'>Assign To <span class='text-danger'>*</span></label>
           
                              <select class='select-option-field-7 users selectValue form-control' name='users' data-type='users' required><option value=''>Select User</option>";
                            foreach($users as $user){
                              if ( in_array($action_master->id,json_decode($user->permission_id)) && $action_master->action_title == 'BGV Filled' && in_array($user->id,$user_id) ) {

                                  $assign_form .=" <option value=".$user->id. ">".$user->name.' </option>' ;
                              }
                            }
                            $assign_form.="</select>";
                            $assign_form.='<p style="margin-bottom: 2px;" class="text-danger error-container error-users" id="error-users"></p>';
                            $assign_form.='</div>';

            return response()->json([
                'fail'      =>false,
                'data' => $data,
                'assign_form' => $assign_form,
                'service' => $services
            ]);
             
    }

    public function newReferenceTypeForm(Request $request)
    {
        $service_id = base64_decode($request->id);

        $type = $request->type;

        $form='';

        $form.= '<div class="row" style="border:1px solid #ddd; padding:10px; margin-bottom:10px;">';

        $ref_service_inputs = DB::table('service_form_inputs')
                              ->where(['service_id'=>$service_id,'reference_type'=>$type,'status'=>1])
                              ->orWhereIn('label_name',['Mode of Verification','Remarks'])
                              ->orderBy('reference_type','desc')
                              ->get();

        $form.='<h4 class="pt-2 pb-2">'.ucwords($type).' Details</h4>';

        $k=0;
        foreach($ref_service_inputs as $input)
        {
            $form.='<div class="col-sm-12">
                      <div class="form-group">
                        <label> '.$input->label_name.'</label>
                        <input type="hidden" name="reference-input-label-'.$service_id.'-'.$k.'" value="'.$input->label_name.'">
                        <input class="form-control error-control" type="text" name="reference-input-value-'.$service_id.'-'.$k.'">
                      </div>
                    </div>';
            $k++;
        }

        $form.='</div>';

        return $form;


    }

    public function newCheckSave(Request $request)
    {

          $candidate_id= $request->assign_candidate_id;
          $service_id = $request->check_name;

          $parent_id=Auth::user()->parent_id;
          $business_id=Auth::user()->business_id;
          $user_id=Auth::user()->id;

          if(Auth::user()->user_type=='user' || Auth::user()->user_type=='User')
          {
              $users=DB::table('users')->select('parent_id','user_type')->where('id',$business_id)->first();
              $parent_id=$users->parent_id;
          }

          $rules=[
                'check_name' => 'required',
                'tat'    => 'required|integer|min:1', 
                'incentive_tat'  => 'required|integer|min:1',
                'penalty_tat'  => 'required|integer|min:1',
                'price'  => 'required|numeric|min:0', 
                'users' => 'sometimes|required'
          ];
    
          $validator = Validator::make($request->all(), $rules);
      
          if ($validator->fails()){
                return response()->json([
                    'fail' => true,
                    'errors' => $validator->errors(),
                    'error_type'=>'validation'
                ]);
          }

          

            if($service_id=='17')
            {
                $i=2;
                $rules=[
                  'service-input-value-'.$service_id.'-'.$i => 'required|in:personal,professional',
                ];

                $custom = [
                  'service-input-value-'.$service_id.'-'.$i.'.required' => 'Reference Type Field is Required',
                  'service-input-value-'.$service_id.'-'.$i.'.in' => 'Reference Type Must be personal / professional',
                ];
          
                $validator = Validator::make($request->all(), $rules, $custom);
            
                if ($validator->fails()){
                      return response()->json([
                          'fail' => true,
                          'errors' => $validator->errors(),
                          'error_type'=>'validation'
                      ]);
                }
            }

            DB::beginTransaction();
            try{

            
              $jaf_items = DB::table('jaf_form_data')->where(['candidate_id'=>$candidate_id,'service_id'=>$service_id])->get();

              $j=1;
              if (count($jaf_items)>0) {
                foreach ($jaf_items as $jaf_item) {
                 
                  $j =(int) $jaf_item->check_item_number;
                  
                }
                ++$j;
               
              }

            
     
             $i=0;
             $reference_type = NULL;
             $input_items = DB::table('service_form_inputs as sfi')
                              ->select('sfi.*')            
                              ->where(['sfi.service_id'=>$service_id,'status'=>'1'])
                              ->whereNull('sfi.reference_type')
                              ->whereNotIn('label_name',['Mode of Verification','Remarks'])
                              ->get();
                             
                    $input_data = [];
                   
                    foreach($input_items as $input){
                      if($input->service_id==17)
                      {
                            $input_data[] = [
                              $request->input('service-input-label-'.$service_id.'-'.$i)=>$request->input('service-input-value-'.$service_id.'-'.$i),
                              'is_report_output'=>$input->is_report_output 
                            ];
                            // dd($request->input('service-input-label-'.$service->id.'-'.'2'));
                            if(stripos($request->input('service-input-label-'.$service_id.'-'.$i),'Reference Type (Personal / Professional)')!==false)
                            {
                                $reference_type = $request->input('service-input-value-'.$service_id.'-'.$i);
                            }

                      }
                      else
                      {
                        $input_data[] = [
                          $request->input('service-input-label-'.$service_id.'-'.$i)=>$request->input('service-input-value-'.$service_id.'-'.$i),
                          'is_report_output'=>$input->is_report_output 
                        ];
                      }
                        $i++;
                    }
                    $jfd = json_encode($input_data);

                    $reference_jaf_data = NULL;

                    if($service_id==17)
                    {
                        $reference_input_data=[];
                        $l=0;

                        $reference_input_items = DB::table('service_form_inputs as sfi')
                              ->select('sfi.*')            
                              ->where(['sfi.service_id'=>$service_id,'status'=>1,'reference_type'=>$reference_type])
                              ->orWhereIn('label_name',['Mode of Verification','Remarks'])
                              ->orderBy('reference_type','desc')
                              ->get();

                        // dd($reference_input_items);
                        
                        foreach($reference_input_items as $ref_input)
                        {
                          $reference_input_data[] = [
                            $request->input('reference-input-label-'.$service_id.'-'.$l)=>$request->input('reference-input-value-'.$service_id.'-'.$l),
                            'is_report_output'=>$input->is_report_output 
                          ];
                          $l++;
                        }

                        $reference_jaf_data = json_encode($reference_input_data);
                    }
                    
                    // dd($jfd);
                    $jaf_data = DB::table('jaf_form_data')->where(['candidate_id'=>$candidate_id])->first();
                    $address_type = $request->input('address-type-'.$service_id);
                    $job_sla_item_jaf = DB::table('job_sla_items')->where(['candidate_id'=>$candidate_id])->first();
                    // dd($address_type);
                    $job_items_data = DB::table('job_items')->where(['candidate_id'=>$candidate_id])->first();

                    // Check Whether the Report is Generated or Not.
                    $report_data = DB::table('reports')->where(['candidate_id'=>$candidate_id])->first();

                    if($report_data!=NULL && stripos($report_data->status,'incomplete')!==false)
                    {
                        $jaf_form_data = 
                        [
                          'business_id' => $jaf_data->business_id,
                          'job_id'      => $jaf_data->job_id,
                          'job_item_id' => $jaf_data->job_item_id,
                          'service_id'  => $service_id,
                          'candidate_id' => $candidate_id,
                          'check_item_number'=>$j,
                          'sla_id'      =>$jaf_data->sla_id,
                          'form_data'       => $jfd,
                          'reference_form_data' => $reference_jaf_data,
                          'is_insufficiency'=>"0",
                          'address_type'  =>$address_type,
                          'reference_type'  => $reference_type,
                          'is_supplementary'=>'0',
                          'is_filled' => '1',
                          'created_by'   => Auth::user()->id,
                          'created_at'   => date('Y-m-d H:i:s')
                        ];
                        
                        $jaf_form_data_id= DB::table('jaf_form_data')->insertGetId($jaf_form_data);
                        
                        
                        $reports=DB::table('reports')->where('candidate_id',$candidate_id)->first();
                        $report = 
                        [
                          'report_id'     =>$reports->id,
                          'service_id'    =>$service_id,
                          'service_item_number'=>$j,
                          'candidate_id'  =>$candidate_id, 
                          'jaf_data'      =>$jfd,
                          'jaf_id'        =>$jaf_form_data_id,
                          'reference_type'  => $reference_type,
                          'reference_form_data' => $reference_jaf_data,
                          'is_report_output' => '0',
                          'is_supplementary'=>'0',
                          'created_at'    =>date('Y-m-d H:i:s'),
                        ]; 
                      
                      DB::table('report_items')->insertGetId($report);
                      
                      // Check Whether This Check is Already Exist or Not in BGV.

                      if(count($jaf_items)>0)
                      {

                          $job_sla_item_data = DB::table('job_sla_items')->where(['candidate_id'=>$candidate_id,'service_id'=>$service_id])->first();

                          $log_job_item_data=[];

                          if(stripos($job_items_data->price_type,'package')!==false)
                          {
                              $package_price = 0;

                              $package_price = $job_items_data->package_price + ($request->price!=null ? $request->price : 0);

                              $log_job_item_data['package_price']=$package_price;

                              //Helper::array_push_assoc($log_job_item_data,'package_price',$package_price);
                          }

                          if(stripos($job_items_data->tat_type,'case')!==false)
                          {
                              $internal_tat = 10;

                              $client_tat = 10;

                              $internal_tat = $job_items_data->tat + $request->tat;

                              $log_job_item_data['tat']=$internal_tat;

                              //Helper::array_push_assoc($log_job_item_data,'tat',$internal_tat);

                              $client_tat = $job_items_data->client_tat + $request->tat;

                              $log_job_item_data['client_tat']=$client_tat;

                              //Helper::array_push_assoc($log_job_item_data,'client_tat',$client_tat);
                          }

                          if(count($log_job_item_data)>0)
                          {
                              DB::table('job_items')->where(['candidate_id'=>$candidate_id])->update($log_job_item_data);
                          }

                          $jsi = $job_sla_item_data->id;
                      }
                      else
                      {

                          $log_job_item_data=[];

                          if(stripos($job_items_data->price_type,'package')!==false)
                          {
                              $package_price = 0;

                              $package_price = $job_items_data->package_price + ($request->price!=null ? $request->price : 0);

                              $log_job_item_data['package_price']=$package_price;

                              //Helper::array_push_assoc($log_job_item_data,'package_price',$package_price);
                          }

                          if(stripos($job_items_data->tat_type,'case')!==false)
                          {
                            $internal_tat = 10;

                            $client_tat = 10;

                            $internal_tat = $job_items_data->tat + $request->tat;

                            $log_job_item_data['tat']=$internal_tat;

                            //Helper::array_push_assoc($log_job_item_data,'tat',$internal_tat);

                            $client_tat = $job_items_data->client_tat + $request->tat;

                            $log_job_item_data['client_tat']=$client_tat;

                              //Helper::array_push_assoc($log_job_item_data,'client_tat',$client_tat);
                          }

                          if(count($log_job_item_data)>0)
                          {
                              DB::table('job_items')->where(['candidate_id'=>$candidate_id])->update($log_job_item_data);
                          }

                          $data = [
                            'business_id'=> $jaf_data->business_id, 
                            'job_id'      => $jaf_data->job_id, 
                            'job_item_id' =>  $jaf_data->job_item_id,
                            'candidate_id' =>$candidate_id,
                            'sla_id'      => $jaf_data->sla_id,
                            'service_id'  => $service_id,
                            'jaf_send_to' => $job_sla_item_jaf->jaf_send_to,
                            // 'jaf_filled_by' => Auth::user()->id,
                            'number_of_verifications'=>$j,
                            // 'check_item_number' => $j,
                            'tat'=>$request->tat,
                            'incentive_tat'=>$request->incentive_tat,
                            'penalty_tat'=>$request->penalty_tat,
                            'price' => $request->price!=null ? $request->price : 0,
                            'sla_item_id' => $service_id,
                            'is_supplementary' => '0',
                            'created_at'  => date('Y-m-d H:i:s')
                          ]; 
                          $jsi =  DB::table('job_sla_items')->insertGetId($data); 
                      }

                    }
                    else
                    {
                        $jaf_form_data = [
                          'business_id' => $jaf_data->business_id,
                          'job_id'      => $jaf_data->job_id,
                          'job_item_id' => $jaf_data->job_item_id,
                          'service_id'  => $service_id,
                          'candidate_id' => $candidate_id,
                          'check_item_number'=>$j,
                          'sla_id'      =>$jaf_data->sla_id,
                          'form_data'       => $jfd,
                          'reference_form_data' => $reference_jaf_data,
                          'is_insufficiency'=>"0",
                          'address_type'  =>$address_type,
                          'reference_type'  => $reference_type,
                          'is_supplementary'=>'1',
                          'is_filled' => '1',
                          'created_by'   => Auth::user()->id,
                          'created_at'   => date('Y-m-d H:i:s')];
                        
                      $jaf_form_data_id= DB::table('jaf_form_data')->insertGetId($jaf_form_data);
    
                        $data = [
                        'business_id'=> $jaf_data->business_id, 
                        'job_id'      => $jaf_data->job_id, 
                        'job_item_id' =>  $jaf_data->job_item_id,
                        'candidate_id' =>$candidate_id,
                        'sla_id'      => $jaf_data->sla_id,
                        'service_id'  => $service_id,
                        'jaf_send_to' => $job_sla_item_jaf->jaf_send_to,
                        // 'jaf_filled_by' => Auth::user()->id,
                        'number_of_verifications'=>$j,
                        // 'check_item_number' => $j,
                        'tat'=>$request->tat,
                        'incentive_tat'=>$request->incentive_tat,
                        'penalty_tat'=>$request->penalty_tat,
                        'price' => $request->price!=null ? $request->price : 0,
                        'sla_item_id' => $service_id,
                        'is_supplementary' => '1',
                        'created_at'  => date('Y-m-d H:i:s')
                      ]; 
                        $jsi =  DB::table('job_sla_items')->insertGetId($data); 
    
                        $reports=DB::table('reports')->where('candidate_id',$candidate_id)->first();
                        $report = 
                        [
                          'report_id'     =>$reports->id,
                          'service_id'    =>$service_id,
                          'service_item_number'=>$j,
                          'candidate_id'  =>$candidate_id, 
                          'jaf_data'      =>$jfd,
                          'jaf_id'        =>$jaf_form_data_id,
                          'reference_type'  => $reference_type,
                          'reference_form_data' => $reference_jaf_data,
                          'is_report_output' => '0',
                          'is_supplementary'=>'1',
                          'created_at'    =>date('Y-m-d H:i:s'),
                        ]; 
                      
                      DB::table('report_items')->insertGetId($report);
                    }
                    

                    $task = DB::table('tasks')->where(['candidate_id'=>$candidate_id])->first();
                    
                    $d = [
                      'name'          => $task->name,
                      'parent_id'=> $task->parent_id,
                      'business_id'   => $task->business_id, 
                      'description'   => 'Task for Verification',
                      'job_id'        => NULL, 
                      'priority'      => 'normal',
                      'candidate_id'  => $candidate_id,
                      'service_id'    => $service_id,
                      'number_of_verifications' => $j,
                      'assigned_to'   => $request->users,
                      'assigned_by'   => Auth::user()->id,
                      'assigned_at'   => date('Y-m-d H:i:s'),
                      'start_date'    => date('Y-m-d'),
                      'created_by'    => Auth::user()->id,
                      'created_at'    => date('Y-m-d H:i:s'),
                      'updated_at'  => date('Y-m-d H:i:s'),
                      'is_completed'  => 0,
                      // 'started_at'    => date('Y-m-d H:i:s')
                    ];
                    // // dd($data);
                    $task_id =  DB::table('tasks')->insertGetId($d); 

                    $taskdata = [
                      'parent_id'=> Auth::user()->business_id,
                      'business_id'   => $task->business_id,
                      'candidate_id'  =>$candidate_id,   
                      'job_sla_item_id'  => $jsi,
                      'task_id'       => $task_id,
                     'user_id'       =>  $request->users,
                      'service_id'    =>$service_id,
                      'number_of_verifications' => $j,
                      'created_at'    => date('Y-m-d H:i:s'),
                      'updated_at'  => date('Y-m-d H:i:s'),
                    ];
                    
                    DB::table('task_assignments')->insertGetId($taskdata); 

                //Auto API Checks
                $price=20;
                $checkprice_db=DB::table('check_price_masters')
                ->select('price')
                ->where(['business_id'=>Auth::user()->business_id,'service_id'=>$service_id])->first();

                $serviceId = DB::table('services')->select('id','name','type_name')->where('id',$service_id)->first();
                    
                if($checkprice_db!=NULL)
                {
                  $price=$checkprice_db->price;
                }
                    
              if ($service_id=='2') 
              {
                $jaf_aadhaar = DB::table('jaf_form_data')->select('*')->where(['id'=>$jaf_form_data_id])->first();
                $jaf_array = json_decode($jaf_aadhaar->form_data, true);
                // print_r($jaf_array);
                $aaddhaar_number ="";
                foreach($jaf_array as $input){
                    if(array_key_exists('Aadhar Number',$input)){
                      $aaddhaar_number = $input['Aadhar Number'];
                    }
                }
                 //check first into master table
                 $master_data = DB::table('aadhar_check_masters')->select('*')->where(['aadhar_number'=>$aaddhaar_number])->first();
                 if($master_data !=null){
                    //update case
                    DB::table('jaf_form_data')->where(['id'=>$jaf_form_data_id])
                    ->update(['is_api_checked'=>'1','is_api_verified'=>'1','verification_status'=>'success','verified_at'=>date('Y-m-d H:i:s'),'is_insufficiency'=>'0','clear_insuff_notes'=>'Auto Check aadhar cleared','is_all_insuff_cleared' => 1,'insuff_cleared_by'=>Auth::user()->id,'updated_at'=>date('Y-m-d H:i:s')]); 

                    $check_data = [
                      'parent_id'         =>$parent_id,
                      'business_id'       =>$business_id,
                      'service_id'        =>$service_id,
                      'candidate_id'      =>$candidate_id,
                      'source_reference'  =>'SystemDB',
                      'aadhar_number'     =>$master_data->aadhar_number,
                      'age_range'         =>$master_data->age_range,
                      'gender'            =>$master_data->gender,
                      'state'             =>$master_data->state,
                      'last_digit'        =>$master_data->last_digit,
                      'is_verified'       =>'1',
                      'is_aadhar_exist'   =>'1',
                      'price'             =>$price,
                      'used_by'           =>'customer',
                      'user_id'            => $user_id,
                      'created_at'        =>date('Y-m-d H:i:s')
                      ];

                      DB::table('aadhar_checks')->insert($check_data);

                      $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf_form_data_id,'service_id'=>$service_id,'status'=>'removed'])->first();

                      if($ver_insuff!=NULL)
                      {
                        $ver_insuff_data=[
                          'notes' => 'Auto check aadhar cleared',
                          'updated_by' => Auth::user()->id,
                          'updated_at' => date('Y-m-d H:i:s')
                        ];

                        DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf_form_data_id,'service_id'=>$service_id,'status'=>'removed'])->update($ver_insuff_data);

                        $ver_id=$ver_insuff->id;
                      }
                      else
                      {
                          $ver_insuff_data=[
                            'parent_id'         =>$parent_id,
                            'business_id'       =>$business_id,
                            'coc_id' => $jaf_aadhaar->business_id,
                            'candidate_id' => $jaf_aadhaar->candidate_id,
                            'service_id'  => $jaf_aadhaar->service_id,
                            'jaf_form_data_id' => $jaf_aadhaar->id,
                            'item_number' => $jaf_aadhaar->check_item_number,
                            'activity_type'=> 'jaf-save',
                            'status'=>'removed',
                            'notes' => 'Auto check aadhar cleared',
                            'created_by'   => Auth::user()->id,
                            'created_at'   => date('Y-m-d H:i:s'),
                            'updated_at' => date('Y-m-d H:i:s')
                          ];
                    
                          $ver_id=DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);
                      }

                      $insuff_log_data=[
                        'parent_id'         =>$parent_id,
                        'business_id'       =>$business_id,
                        'coc_id' => $jaf_aadhaar->business_id,
                        'candidate_id' => $candidate_id,
                        'service_id'  => $jaf_aadhaar->service_id,
                        'jaf_form_data_id' => $jaf_aadhaar->id,
                        'item_number' => $jaf_aadhaar->check_item_number,
                        'activity_type'=> 'jaf-save',
                        'status'=>'removed',
                        'notes' => 'Auto check aadhar cleared',
                        'created_by'   => Auth::user()->id,
                        'user_type'    =>'customer',
                        'created_at'   => date('Y-m-d H:i:s'),
                      ];
                
                      DB::table('insufficiency_logs')->insert($insuff_log_data);

                      $ver_insuff=DB::table('verification_insufficiency')->where(['id'=>$ver_id])->first();
      
                      $candidates=DB::table('users as u')
                          ->select('u.*','j.business_id as coc_id','j.id as jaf_id','v.created_at as insuff_clear_date','v.created_by as insuff_clear_by','v.item_number','v.notes','s.verification_type','s.name as service_name','v.business_id as cust_id','v.attachment','v.updated_by','v.updated_at')
                          ->join('jaf_form_data as j','u.id','=','j.candidate_id')
                          ->join('verification_insufficiency as v','v.jaf_form_data_id','=','j.id')
                          ->join('services as s','s.id','=','v.service_id')
                          ->where(['u.user_type'=>'candidate','j.id'=>$jaf_form_data_id,'v.status'=>'removed','v.id'=>$ver_insuff->id])
                          ->first();
  
                      if($candidates!=NULL)
                      {
                        // $client=DB::table('users')->where(['id'=>$candidates->coc_id])->first();
                        // $name = $client->name;
                        // $email = $client->email;
                        // $msg= "Insufficiency Cleared For Candidate";
                        // $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                        // $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);
        
                        // Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email,$name) {
                        //   $message->to($email, $name)->subject
                        //       ('Clobminds Pvt Ltd - Insufficiency Notification');
                        //   $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                        // });
  
                        $kams = DB::table('key_account_managers')->where(['business_id'=>$candidates->business_id])->get();
                        if(count($kams)>0)
                        {
                          foreach($kams as $kam)
                          {
                              $user_data=DB::table('users')->where(['id'=>$kam->user_id])->first();
  
                              $name1 = $user_data->name;
                              $email1 = $user_data->email;
                              $msg= "Insufficiency Cleared For Candidate";
                              $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                              
                              $data  = array('name'=>$name1,'email'=>$email1,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);
  
                              Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email1,$name1) {
                                  $message->to($email1, $name1)->subject
                                      ('Clobminds Pvt Ltd - Insufficiency Notification');
                                  $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                              });
  
                          }
                        }
  
                      }

                 }
                 else
                 {                 
                    //check from live API
                    $api_check_status = false;
                    // Setup request to send json via POST
                    $data = array(
                        'id_number'    => $aaddhaar_number,
                        'async'         => true,
                    );
                    $payload = json_encode($data);
                    $apiURL = "https://kyc-api.aadhaarkyc.io/api/v1/aadhaar-validation/aadhaar-validation";
      
                    $ch = curl_init();
                    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
                    curl_setopt ( $ch, CURLOPT_POST, 1 );
                    $authorization = "Authorization: Bearer ".env('SUREPASS_PRODUCTION_TOKEN');
                    //$authorization = "Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTY3NTQxMTcwMywianRpIjoiMTA5ZDNkNWMtOTE4NC00MTJkLTg3YTMtYzhiNmYzZWQyYjQ3IiwidHlwZSI6ImFjY2VzcyIsImlkZW50aXR5IjoiZGV2LnRlY2hzYWdhQHN1cmVwYXNzLmlvIiwibmJmIjoxNjc1NDExNzAzLCJleHAiOjE5OTA3NzE3MDMsInVzZXJfY2xhaW1zIjp7InNjb3BlcyI6WyJ1c2VyIl19fQ.r4XeIMOFEdnb52_xCspvLyiu6ciS5wx4YeIMv8ZyHKI"; // Prepare the authorisation token
                    curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json' , $authorization )); // Inject the token into the header
                    curl_setopt($ch, CURLOPT_URL, $apiURL);
                    // Attach encoded JSON string to the POST fields
                    curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);
                    $resp = curl_exec ( $ch );
                    curl_close ( $ch );
                    
                    $array_data =  json_decode($resp,true);
      
                    if($array_data['success'])
                    {
                        $master_data ="";
                        //check if ID number is new then insert into DB
                        $checkIDInDB= DB::table('aadhar_check_masters')->where(['aadhar_number'=>$aaddhaar_number])->count();
                        if($checkIDInDB ==0)
                        {
                            $gender = 'Male';
                            if($array_data['data']['gender'] == 'F'){
                                $gender = 'Female';
                            }
                            $data = ['aadhar_number'    =>$array_data['data']['aadhaar_number'],
                                    'age_range'         =>$array_data['data']['age_range'],
                                    'gender'            =>$gender,
                                    'state'             =>$array_data['data']['state'],
                                    'last_digit'        =>$array_data['data']['last_digits'],
                                    'is_api_verified'       =>'1',
                                    'is_aadhar_exist'   =>'1',
                                    'created_at'        =>date('Y-m-d H:i:s')
                                    ];
      
                            DB::table('aadhar_check_masters')->insert($data);
                        }
                                    
                            //insert into business table
                            $check_data = [
                                    'parent_id'         =>$parent_id,
                                    'business_id'       =>$business_id,
                                    'candidate_id'      =>$candidate_id,
                                    'service_id'        =>$service_id,
                                    'source_reference'  =>'API',
                                    'aadhar_number'     =>$array_data['data']['aadhaar_number'],
                                    'age_range'         =>$array_data['data']['age_range'],
                                    'gender'            =>$gender,
                                    'state'             =>$array_data['data']['state'],
                                    'last_digit'        =>$array_data['data']['last_digits'],
                                    'is_verified'       =>'1',
                                    'is_aadhar_exist'   =>'1',
                                    'price'             =>$price,
                                    'used_by'           =>'customer',
                                    'user_id'            => Auth::user()->id,
                                    'created_at'        =>date('Y-m-d H:i:s')
                                    ];
      
                            DB::table('aadhar_checks')->insert($check_data);
                            
                            $master_data = DB::table('aadhar_check_masters')->select('*')->where(['aadhar_number'=>$aaddhaar_number])->first();
                            
                            // update the status
                            DB::table('jaf_form_data')->where(['id'=>$jaf_form_data_id])->update(['is_api_checked'=>'1','is_api_verified'=>'1','is_insufficiency'=>'0','verification_status'=>'success','verified_at'=>date('Y-m-d H:i:s'),'is_insufficiency'=>'0','clear_insuff_notes'=>'Auto check aadhar cleared','is_all_insuff_cleared' => 1,'insuff_cleared_by'=>Auth::user()->id,'updated_at'=>date('Y-m-d H:i:s')]); 
                            
                            $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf_form_data_id,'service_id'=>$service_id,'status'=>'removed'])->first();

                          if($ver_insuff!=NULL)
                          {
                              $ver_insuff_data=[
                                'notes' => 'Auto Check Aadhaar Cleared',
                                'updated_by' => Auth::user()->id,
                                'updated_at' => date('Y-m-d H:i:s')
                              ];

                              DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf_form_data_id,'service_id'=>$service_id,'status'=>'removed'])->update($ver_insuff_data);

                              $ver_id=$ver_insuff->id;
                              
                          }
                          else
                          {
                            $ver_insuff_data=[
                              'parent_id'         =>$parent_id,
                              'business_id'       =>$business_id,
                              'coc_id' => $jaf_aadhaar->business_id,
                              'candidate_id' => $candidate_id,
                              'service_id'  => $service_id,
                              'jaf_form_data_id' => $jaf_aadhaar->id,
                              'item_number' => $jaf_aadhaar->check_item_number,
                              'activity_type'=> 'jaf-save',
                              'status'=>'removed',
                              'notes' => 'Auto check aadhar cleared',
                              'created_by'   => Auth::user()->id,
                              'created_at'   => date('Y-m-d H:i:s'),
                              'updated_at' => date('Y-m-d H:i:s')
                            ];
                      
                            $ver_id=DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);
                          }

                          $insuff_log_data=[
                            'parent_id'         =>$parent_id,
                            'business_id'       =>$business_id,
                            'coc_id' => $jaf_aadhaar->business_id,
                            'candidate_id' => $candidate_id,
                            'service_id'  => $jaf_aadhaar->service_id,
                            'jaf_form_data_id' => $jaf_aadhaar->id,
                            'item_number' => $jaf_aadhaar->check_item_number,
                            'activity_type'=> 'jaf-save',
                            'status'=>'removed',
                            'notes' => 'Auto check aadhar cleared',
                            'created_by'   => Auth::user()->id,
                            'user_type'    =>'customer',
                            'created_at'   => date('Y-m-d H:i:s'),
                          ];
                    
                          DB::table('insufficiency_logs')->insert($insuff_log_data);
                            
                        
                          $task = Task::where(['business_id'=>$jaf_data->business_id,'candidate_id'=>$candidate_id,'service_id'=>$service_id,'is_completed'=>0,'description'=>'Task for Verification'])->first();
                          $task_id='';
                          if ($task) {
                              # code...
                              $task_id = $task->id;

                                $task->is_completed= 1;
                                $task->save();
                            
                            //Change status of old task 
                            $task_assgn = TaskAssignment::where(['business_id'=>$jaf_data->business_id,'candidate_id'=>$candidate_id,'status'=>"1",'task_id'=>$task_id])->first();
                            // dd($task_assgn);
                            if($task_assgn)
                            {
                              $task_assgn->status= '2';
                              $task_assgn->save();
                            }
                          }
      
                          $ver_insuff=DB::table('verification_insufficiency')->where(['id'=>$ver_id])->first();
      
                          $candidates=DB::table('users as u')
                              ->select('u.*','j.business_id as coc_id','j.id as jaf_id','v.created_at as insuff_clear_date','v.created_by as insuff_clear_by','v.item_number','v.notes','s.verification_type','s.name as service_name','v.business_id as cust_id','v.attachment','v.updated_by','v.updated_at')
                              ->join('jaf_form_data as j','u.id','=','j.candidate_id')
                              ->join('verification_insufficiency as v','v.jaf_form_data_id','=','j.id')
                              ->join('services as s','s.id','=','v.service_id')
                              ->where(['u.user_type'=>'candidate','j.id'=>$jaf_form_data_id,'v.status'=>'removed','v.id'=>$ver_insuff->id])
                              ->first();
      
                          if($candidates!=NULL)
                          {
                            // $client=DB::table('users')->where(['id'=>$candidates->coc_id])->first();
                            // $name = $client->name;
                            // $email = $client->email;
                            // $msg= "Insufficiency Cleared For Candidate";
                            // $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                            // $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);
            
                            // Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email,$name) {
                            //   $message->to($email, $name)->subject
                            //       ('Clobminds Pvt Ltd - Insufficiency Notification');
                            //   $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                            // });
      
                            $kams = DB::table('key_account_managers')->where(['business_id'=>$candidates->business_id])->get();
                            if(count($kams)>0)
                            {
                              foreach($kams as $kam)
                              {
                                  $user_data=DB::table('users')->where(['id'=>$kam->user_id])->first();
      
                                  $name1 = $user_data->name;
                                  $email1 = $user_data->email;
                                  $msg= "Insufficiency Cleared For Candidate";
                                  $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                                  
                                  $data  = array('name'=>$name1,'email'=>$email1,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);
      
                                  Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email1,$name1) {
                                      $message->to($email1, $name1)->subject
                                          ('Clobminds Pvt Ltd - Insufficiency Notification');
                                      $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                                  });
      
                              }
                            }
      
                          }
                        
                    
                    }
                    // Api  Status Failed Start
                    else{ 
                        //update insuff
                        DB::table('jaf_form_data')->where(['id'=>$jaf_form_data_id])->update(['is_api_checked'=>'1','is_api_verified'=>'0','is_insufficiency'=>'1','verification_status'=>'failed','verified_at'=>date('Y-m-d H:i:s')]); 
              
                        $jaf_data=DB::table('jaf_form_data')->where(['id'=>$jaf_form_data_id])->first();
                        $insuff_log_data=[
                          'parent_id'         =>$parent_id,
                          'business_id'       =>$business_id,
                          'coc_id' => $jaf_aadhaar->business_id,
                          'candidate_id' => $candidate_id,
                          'service_id'  => $jaf_aadhaar->service_id,
                          'jaf_form_data_id' => $jaf_aadhaar->id,
                          'item_number' => $jaf_aadhaar->check_item_number,
                          'activity_type'=> 'jaf-save',
                          'status'=>'failed',
                          'notes' => 'Auto check aadhar failed',
                          'created_by'   => Auth::user()->id,
                          'user_type'           =>'customer',
                          'created_at'   => date('Y-m-d H:i:s'),
                        ];
                  
                        DB::table('insufficiency_logs')->insert($insuff_log_data);

                        $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf_form_data_id,'service_id'=>$service_id,'status'=>'raised'])->first();

                          if($ver_insuff!=NULL)
                          {
                              $ver_insuff_data=[
                                'notes' => 'Auto check aadhar failed',
                                'updated_by' => Auth::user()->id,
                                'updated_at' => date('Y-m-d H:i:s')
                              ];

                              DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf_form_data_id,'service_id'=>$service_id,'status'=>'raised'])->update($ver_insuff_data);

                              $ver_id=$ver_insuff->id;
                          }
                          else
                          {
                            $ver_insuff_data=[
                              'parent_id'         =>$parent_id,
                              'business_id'       =>$business_id,
                              'coc_id' => $jaf_aadhaar->business_id,
                              'candidate_id' => $candidate_id,
                              'service_id'  => $service_id,
                              'jaf_form_data_id' => $jaf_form_data_id,
                              'item_number' => $jaf_aadhaar->check_item_number,
                              'activity_type'=> 'jaf-save',
                              'status'=>'raised',
                              'notes' => 'Auto check aadhar failed',
                              'created_by'   => Auth::user()->id,
                              'created_at'   => date('Y-m-d H:i:s'),
                            ];
                      
                            $ver_id = DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);
                          }
                        
                          // Task insuff raised and assign to  CAM

                          
                          // task assign start
                          $final_users = [];
                          // $j = 0;
                          $job_sla_item = DB::table('job_sla_items')->where(['candidate_id'=>$candidate_id,'service_id'=>$service_id])->first();
                          // dd($job_sla_item);
                          // foreach ($job_sla_items as $job_sla_item) {
                            if ($job_sla_item) {
                              # code...
                          
                              $kam  = KeyAccountManager::where(['business_id'=>Auth::user()->business_id,'is_primary'=>'1'])->first();
                              // dd( $kam);
                              if ($kam) {
                                  # code...
                                  $user_name='';
                                  $user_name = DB::table('users')->where('id',$candidate_id)->first();
                                  $task = Task::where(['business_id'=>$jaf_data->business_id,'candidate_id'=>$candidate_id,'service_id'=>$service_id,'is_completed'=>0,'description'=>'Task for Verification'])->first();
                                  $task_id='';
                                  if ($task) {
                                    # code...
                                    $task_id = $task->id;
        
                                      $task->assigned_to= $kam->user_id;
                                      $task->assigned_by =Auth::user()->id;
                                      $task->assigned_at   = date('Y-m-d H:i:s');
                                      $task->start_date    = date('Y-m-d');
                                      $task->save();
                                  
                                      //Change status of old task 
                                      $task_assgn = TaskAssignment::where(['business_id'=>$jaf_data->business_id,'candidate_id'=>$candidate_id,'status'=>"1",'task_id'=>$task_id])->first();
                                      // dd($task_assgn);
                                      if($task_assgn)
                                      {
                                        $task_assgn->user_id= $kam->user_id;
                                        $task_assgn->save();
                                      }
                                    
                                  }
                              }
                            } 
                    }
                 }
            
              } 
              elseif ($service_id=='3') {
                $jaf_pan = DB::table('jaf_form_data')->select('*')->where(['id'=>$jaf_form_data_id])->first();
    
                $pan_number = "";
                // $business_id = $jaf_pan->business_id; 
                $jaf_array = json_decode($jaf_pan->form_data, true);
                // print_r($jaf_array);
                foreach($jaf_array as $input){
                    if(array_key_exists('PAN Number',$input)){
                      $pan_number = $input['PAN Number'];
                    }
                }

                $master_data = DB::table('pan_check_masters')->select('*')->where(['pan_number'=>$pan_number])->first();
                
                  if($master_data !=null){

                    DB::table('jaf_form_data')->where(['id'=>$jaf_form_data_id])
                      ->update(['is_api_checked'=>'1','is_api_verified'=>'1','verification_status'=>'success','verified_at'=>date('Y-m-d H:i:s'),'is_insufficiency'=>'0','clear_insuff_notes'=>'Auto Check PAN Cleared','is_all_insuff_cleared' => 1,'insuff_cleared_by'=>Auth::user()->id,'updated_at'=>date('Y-m-d H:i:s')]); 

                    $data = [
                      'parent_id'         =>$parent_id,
                      'category'          =>$master_data->category,
                      'pan_number'        =>$master_data->pan_number,
                      'full_name'         =>$master_data->full_name,
                      'is_verified'       =>'1',
                      'is_pan_exist'      =>'1',
                      'business_id'       => $business_id,
                      'candidate_id' => $candidate_id,
                      'service_id'        => $service_id,
                      'source_type'       =>'SystemDb',
                      'price'             =>$price,
                      'used_by'           =>'customer',
                      'user_id'            => $user_id,
                      'created_at'=>date('Y-m-d H:i:s')
                      ];

                      DB::table('pan_checks')->insert($data);

                      $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf_form_data_id,'service_id'=>$service_id,'status'=>'removed'])->first();

                      if($ver_insuff!=NULL)
                      {
                        $ver_insuff_data=[
                          'notes' => 'Auto check PAN cleared',
                          'updated_by' => Auth::user()->id,
                          'updated_at' => date('Y-m-d H:i:s')
                        ];

                        DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf_form_data_id,'service_id'=>$service_id,'status'=>'removed'])->update($ver_insuff_data);

                        $ver_id=$ver_insuff->id;
                      }
                      else
                      {
                        $ver_insuff_data=[
                          'parent_id'         =>$parent_id,
                          'business_id'       =>$business_id,
                          'coc_id' => $jaf_pan->business_id,
                          'candidate_id' => $candidate_id,
                          'service_id'  => $service_id,
                          'jaf_form_data_id' => $jaf_pan->id,
                          'item_number' => $jaf_pan->check_item_number,
                          'activity_type'=> 'jaf-save',
                          'status'=>'removed',
                          'notes' => 'Auto check PAN cleared',
                          'created_by'   => Auth::user()->id,
                          'created_at'   => date('Y-m-d H:i:s'),
                          'updated_at' => date('Y-m-d H:i:s')
                        ];
                  
                        $ver_id=DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);
                      }

                      $insuff_log_data=[
                        'parent_id'         =>$parent_id,
                        'business_id'       =>$business_id,
                        'coc_id' => $jaf_pan->business_id,
                        'candidate_id' => $candidate_id,
                        'service_id'  => $jaf_pan->service_id,
                        'jaf_form_data_id' => $jaf_pan->id,
                        'item_number' => $jaf_pan->check_item_number,
                        'activity_type'=> 'jaf-save',
                        'status'=>'removed',
                        'notes' => 'Auto check aadhar cleared',
                        'created_by'   => Auth::user()->id,
                        'user_type'    =>'customer',
                        'created_at'   => date('Y-m-d H:i:s'),
                      ];
                
                      DB::table('insufficiency_logs')->insert($insuff_log_data);

                      $ver_insuff=DB::table('verification_insufficiency')->where(['id'=>$ver_id])->first();
      
                      $candidates=DB::table('users as u')
                          ->select('u.*','j.business_id as coc_id','j.id as jaf_id','v.created_at as insuff_clear_date','v.created_by as insuff_clear_by','v.item_number','v.notes','s.verification_type','s.name as service_name','v.business_id as cust_id','v.attachment','v.updated_by','v.updated_at')
                          ->join('jaf_form_data as j','u.id','=','j.candidate_id')
                          ->join('verification_insufficiency as v','v.jaf_form_data_id','=','j.id')
                          ->join('services as s','s.id','=','v.service_id')
                          ->where(['u.user_type'=>'candidate','j.id'=>$jaf_form_data_id,'v.status'=>'removed','v.id'=>$ver_insuff->id])
                          ->first();
  
                      if($candidates!=NULL)
                      {
                        // $client=DB::table('users')->where(['id'=>$candidates->coc_id])->first();
                        // $name = $client->name;
                        // $email = $client->email;
                        // $msg= "Insufficiency Cleared For Candidate";
                        // $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                        // $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);
        
                        // Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email,$name) {
                        //   $message->to($email, $name)->subject
                        //       ('Clobminds Pvt Ltd - Insufficiency Notification');
                        //   $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                        // });
  
                        $kams = DB::table('key_account_managers')->where(['business_id'=>$candidates->business_id])->get();
                        if(count($kams)>0)
                        {
                          foreach($kams as $kam)
                          {
                              $user_data=DB::table('users')->where(['id'=>$kam->user_id])->first();
  
                              $name1 = $user_data->name;
                              $email1 = $user_data->email;
                              $msg= "Insufficiency Cleared For Candidate";
                              $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                              
                              $data  = array('name'=>$name1,'email'=>$email1,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);
  
                              Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email1,$name1) {
                                  $message->to($email1, $name1)->subject
                                      ('Clobminds Pvt Ltd - Insufficiency Notification');
                                  $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                              });
  
                          }
                        }
  
                      }

                  }
                  else
                  {
                    //check from live API
                    $api_check_status = false;
                    // Setup request to send json via POST
                    $data = array(
                        'id_number'    => $pan_number,
                    );
                    $payload = json_encode($data);
                    $apiURL = "https://kyc-api.aadhaarkyc.io/api/v1/pan/pan";

                    $ch = curl_init();                
                    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);                
                    curl_setopt ( $ch, CURLOPT_POST, 1 );
                    $authorization = "Authorization: Bearer ".env('SUREPASS_PRODUCTION_TOKEN');
                    //$authorization = "Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTY3NTQxMTcwMywianRpIjoiMTA5ZDNkNWMtOTE4NC00MTJkLTg3YTMtYzhiNmYzZWQyYjQ3IiwidHlwZSI6ImFjY2VzcyIsImlkZW50aXR5IjoiZGV2LnRlY2hzYWdhQHN1cmVwYXNzLmlvIiwibmJmIjoxNjc1NDExNzAzLCJleHAiOjE5OTA3NzE3MDMsInVzZXJfY2xhaW1zIjp7InNjb3BlcyI6WyJ1c2VyIl19fQ.r4XeIMOFEdnb52_xCspvLyiu6ciS5wx4YeIMv8ZyHKI"; // Prepare the authorisation token
                    curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json' , $authorization )); // Inject the token into the header
                    curl_setopt($ch, CURLOPT_URL, $apiURL);
                    // Attach encoded JSON string to the POST fields
                    curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);

                    $resp = curl_exec ( $ch );
                    curl_close ( $ch );
                    
                    $array_data =  json_decode($resp,true);
                    // print_r($array_data); die;
                    if($array_data['success'])
                    {
                      //check if ID number is new then insert into DB
                      $checkIDInDB= DB::table('pan_check_masters')->where(['pan_number'=>$pan_number])->count();
                      if($checkIDInDB ==0)
                      {
                          $data = [
                                  'category'=>$array_data['data']['category'],
                                  'pan_number'=>$array_data['data']['pan_number'],
                                  'full_name'=>$array_data['data']['full_name'],
                                  'is_api_verified'=>'1',
                                  'is_pan_exist'=>'1',
                                  'created_at'=>date('Y-m-d H:i:s')
                                  ];
                          DB::table('pan_check_masters')->insert($data);

                          //store log
                          $data = [
                            'parent_id'         =>$parent_id,
                            'category'          =>$array_data['data']['category'],
                            'pan_number'        =>$array_data['data']['pan_number'],
                            'full_name'         =>$array_data['data']['full_name'],
                            'is_verified'       =>'1',
                            'is_pan_exist'      =>'1',
                            'business_id'       =>$business_id,
                            'candidate_id' => $candidate_id,
                            'service_id'        => $service_id,
                            'source_type'       =>'API',
                            'price'             =>$price,
                            'used_by'           =>'customer',
                            'user_id'            => Auth::user()->id,
                            'created_at'=>date('Y-m-d H:i:s')
                            ];
                    
                        DB::table('pan_checks')->insert($data);
                          
                      }

                      // update the status
                      DB::table('jaf_form_data')->where(['id'=>$jaf_form_data_id])
                      ->update(['is_api_checked'=>'1','is_api_verified'=>'1','verification_status'=>'success','verified_at'=>date('Y-m-d H:i:s'),'is_insufficiency'=>'0','clear_insuff_notes'=>'Auto Check PAN Cleared','is_all_insuff_cleared' => 1,'insuff_cleared_by'=>Auth::user()->id,'updated_at'=>date('Y-m-d H:i:s')]); 


                      $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf_form_data_id,'service_id'=>$service_id,'status'=>'removed'])->first();

                      if($ver_insuff!=NULL)
                      {
                          $ver_insuff_data=[
                            'notes' => 'Auto Check PAN cleared',
                            'updated_by' => Auth::user()->id,
                            'updated_at' => date('Y-m-d H:i:s')
                          ];

                          DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf_form_data_id,'service_id'=>$service_id,'status'=>'removed'])->update($ver_insuff_data);

                          $ver_id=$ver_insuff->id;
                      }
                      else
                      {
                        $ver_insuff_data=[
                          'parent_id'         =>$parent_id,
                          'business_id'       =>$business_id,
                          'coc_id' => $jaf_pan->business_id,
                          'candidate_id' => $candidate_id,
                          'service_id'  => $jaf_pan->service_id,
                          'jaf_form_data_id' => $jaf_form_data_id,
                          'item_number' => $jaf_pan->check_item_number,
                          'activity_type'=> 'jaf-save',
                          'status'=>'removed',
                          'notes' => 'Auto Check PAN cleared',
                          'created_by'   => Auth::user()->id,
                          'created_at'   => date('Y-m-d H:i:s'),
                          'updated_at' => date('Y-m-d H:i:s')
                        ];
                  
                        $ver_id=DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);

                      }

                      $insuff_log_data=[
                        'parent_id'         =>$parent_id,
                        'business_id'       =>$business_id,
                        'coc_id' => $jaf_pan->business_id,
                        'candidate_id' => $candidate_id,
                        'service_id'  => $jaf_pan->service_id,
                        'jaf_form_data_id' => $jaf_pan->id,
                        'item_number' => $jaf_pan->check_item_number,
                        'activity_type'=> 'jaf-save',
                        'status'=>'removed',
                        'notes' => 'Auto Check PAN cleared',
                        'created_by'   => Auth::user()->id,
                        'user_type' =>'customer',
                        'created_at'   => date('Y-m-d H:i:s'),
                      ];
                
                      DB::table('insufficiency_logs')->insert($insuff_log_data);
                
                      $task = Task::where(['business_id'=>$jaf_data->business_id,'candidate_id'=>$candidate_id,'is_completed'=>0,'description'=>'Task for Verification'])->first();
                      $task_id='';
                      if ($task) {
                        # code...
                        $task_id = $task->id;

                          $task->is_completed= 1;
                          $task->save();
                      
                        //Change status of old task 
                        $task_assgn = TaskAssignment::where(['business_id'=>$jaf_data->business_id,'candidate_id'=>$candidate_id,'status'=>"1",'task_id'=>$task_id])->first();
                        // dd($task_assgn);
                        if($task_assgn)
                        {
                          $task_assgn->status= '2';
                          $task_assgn->save();
                        }
                      }

                      $ver_insuff=DB::table('verification_insufficiency')->where(['id'=>$ver_id])->first();

                      $candidates=DB::table('users as u')
                          ->select('u.*','j.business_id as coc_id','j.id as jaf_id','v.created_at as insuff_clear_date','v.created_by as insuff_clear_by','v.item_number','v.notes','s.verification_type','s.name as service_name','v.business_id as cust_id','v.attachment','v.updated_by','v.updated_at')
                          ->join('jaf_form_data as j','u.id','=','j.candidate_id')
                          ->join('verification_insufficiency as v','v.jaf_form_data_id','=','j.id')
                          ->join('services as s','s.id','=','v.service_id')
                          ->where(['u.user_type'=>'candidate','j.id'=>$jaf_form_data_id,'v.status'=>'removed','v.id'=>$ver_insuff->id])
                          ->first();

                      if($candidates!=NULL)
                      {
                        // $client=DB::table('users')->where(['id'=>$candidates->coc_id])->first();
                        // $name = $client->name;
                        // $email = $client->email;
                        // $msg= "Insufficiency Cleared For Candidate";
                        // $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                        // $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);
        
                        // Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email,$name) {
                        //   $message->to($email, $name)->subject
                        //       ('Clobminds Pvt Ltd - Insufficiency Notification');
                        //   $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                        // });

                        $kams = DB::table('key_account_managers')->where(['business_id'=>$candidates->business_id])->get();
                        if(count($kams)>0)
                        {
                          foreach($kams as $kam)
                          {
                              $user_data=DB::table('users')->where(['id'=>$kam->user_id])->first();

                              $name1 = $user_data->name;
                              $email1 = $user_data->email;
                              $msg= "Insufficiency Cleared For Candidate";
                              $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                              $data  = array('name'=>$name1,'email'=>$email1,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);

                              Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email1,$name1) {
                                  $message->to($email1, $name1)->subject
                                      ('Clobminds Pvt Ltd - Insufficiency Notification');
                                  $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                              });

                          }
                        }


                      }
                    }
                    else{
                        //update insuff
                        DB::table('jaf_form_data')->where(['id'=>$jaf_form_data_id])->update(['is_api_checked'=>'1','is_api_verified'=>'0','is_insufficiency'=>'1','verification_status'=>'failed','verified_at'=>date('Y-m-d H:i:s')]); 

                        $jaf_data=DB::table('jaf_form_data')->where(['id'=>$jaf_form_data_id])->first();

                        $insuff_log_data=[
                          'parent_id'         =>$parent_id,
                          'business_id'       =>$business_id,
                          'coc_id' => $jaf_pan->business_id,
                          'candidate_id' => $candidate_id,
                          'service_id'  => $service_id,
                          'jaf_form_data_id' => $jaf_pan->id,
                          'item_number' => $jaf_pan->check_item_number,
                          'activity_type'=> 'jaf-save',
                          'status'=>'failed',
                          'notes' => 'Auto Check PAN failed',
                          'created_by'   => Auth::user()->id,
                          'user_type'           =>'customer',
                          'created_at'   => date('Y-m-d H:i:s'),
                        ];
                  
                        DB::table('insufficiency_logs')->insert($insuff_log_data);

                        $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf_form_data_id,'service_id'=>$service_id,'status'=>'raised'])->first();

                          if($ver_insuff!=NULL)
                          {
                              $ver_insuff_data=[
                                'notes' => 'Auto check PAN failed',
                                'updated_by' => Auth::user()->id,
                                'updated_at' => date('Y-m-d H:i:s')
                              ];

                              DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf_form_data_id,'service_id'=>$service_id,'status'=>'raised'])->update($ver_insuff_data);

                              $ver_id=$ver_insuff->id;
                          }
                          else
                          {
                            $ver_insuff_data=[
                              'parent_id'         =>$parent_id,
                              'business_id'       =>$business_id,
                              'coc_id' => $jaf_pan->business_id,
                              'candidate_id' => $candidate_id,
                              'service_id'  => $service_id,
                              'jaf_form_data_id' => $jaf_form_data_id,
                              'item_number' => $jaf_pan->check_item_number,
                              'activity_type'=> 'jaf-save',
                              'status'=>'raised',
                              'notes' => 'Auto check PAN failed',
                              'created_by'   => Auth::user()->id,
                              'created_at'   => date('Y-m-d H:i:s'),
                            ];
                      
                            $ver_id = DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);
                          }
                        
                          // task assign start
                          $final_users = [];
                          // $j = 0;
                          $job_sla_item = DB::table('job_sla_items')->where(['candidate_id'=>$candidate_id,'service_id'=>$service_id])->first();

                          // foreach ($job_sla_items as $job_sla_item) {
                            if ($job_sla_item) {
                              # code...
                          
                              $kam  = KeyAccountManager::where(['business_id'=>$jaf_data->business_id,'is_primary'=>'1'])->first();
                              if ($kam) {
                                # code...
                                $task = Task::where(['business_id'=>$jaf_data->business_id,'candidate_id'=>$candidate_id,'service_id'=>$service_id,'is_completed'=>0,'description'=>'Task for Verification'])->first();
                                $task_id='';
                                if ($task) {
                                  # code...
                                  $task_id = $task->id;
      
                                    $task->assigned_to= $kam->user_id;
                                    $task->assigned_by =Auth::user()->id;
                                    $task->assigned_at   = date('Y-m-d H:i:s');
                                    $task->start_date    = date('Y-m-d');
                                    $task->save();
                                
                                //Change status of old task 
                                  $task_assgn = TaskAssignment::where(['business_id'=>$jaf_data->business_id,'candidate_id'=>$candidate_id,'status'=>"1",'task_id'=>$task_id])->first();
                                  // dd($task_assgn);
                                  if($task_assgn)
                                  {
                                    $task_assgn->user_id= $kam->user_id;
                                    $task_assgn->save();
                                  }
                              
                                  
                                  }
                                }
                            }
                    }
                  }
              } 
              elseif ($service_id=='4') {
                      $jaf_voterid = DB::table('jaf_form_data')->select('*')->where(['id'=>$jaf_form_data_id])->first();

                      $voterid_number = "";
                      // $business_id = $jaf_voterid->business_id; 
                      $jaf_array = json_decode($jaf_voterid->form_data, true);
                      // print_r($jaf_array);
                      foreach($jaf_array as $input){
                          if(array_key_exists('Voter ID Number',$input)){
                            $voterid_number = $input['Voter ID Number'];
                          }
                      }

                      //check first into master table
                      $master_data = DB::table('voter_id_check_masters')->select('*')->where(['voter_id_number'=>$voterid_number])->first();
                      if($master_data !=null){

                        DB::table('jaf_form_data')->where(['id'=>$jaf_form_data_id])
                       ->update(['is_api_checked'=>'1','is_api_verified'=>'1','verification_status'=>'success','verified_at'=>date('Y-m-d H:i:s'),'is_insufficiency'=>'0','clear_insuff_notes'=>'Auto Check VoterID Cleared','is_all_insuff_cleared' => 1,'insuff_cleared_by'=>Auth::user()->id,'updated_at'=>date('Y-m-d H:i:s')]); 

                        $log_data = [
                          'parent_id'         =>$parent_id,
                          'api_client_id'     =>$master_data->api_client_id,
                          'relation_type'     =>$master_data->relation_type,
                          'voter_id_number'   =>$master_data->voter_id_number,
                          'relation_name'     =>$master_data->relation_name,
                          'full_name'         =>$master_data->full_name,
                          'gender'            =>$master_data->gender,
                          'age'               =>$master_data->age,
                          'dob'               =>$master_data->dob,
                          'house_no'          =>$master_data->house_no,
                          'area'              =>$master_data->area,
                          'state'             =>$master_data->state,
                          'is_verified'       =>'1',
                          'is_voter_id_exist' =>'1',
                          'business_id'       =>$business_id,
                          'candidate_id' => $candidate_id,
                          'service_id'        =>$service_id,
                          'source_reference'  =>'SystemDb',
                          'price'             =>$price,
                          'used_by'           =>'customer',
                          'user_id'            => $user_id,
                          'created_at'        =>date('Y-m-d H:i:s')
                          ];

                          DB::table('voter_id_checks')->insert($log_data);

                          $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf_form_data_id,'service_id'=>$service_id,'status'=>'removed'])->first();

                          if($ver_insuff!=NULL)
                          {
                            $ver_insuff_data=[
                              'notes' => 'Auto check Voter ID cleared',
                              'updated_by' => Auth::user()->id,
                              'updated_at' => date('Y-m-d H:i:s')
                            ];
    
                            DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf_form_data_id,'service_id'=>$service_id,'status'=>'removed'])->update($ver_insuff_data);
    
                            $ver_id=$ver_insuff->id;
                          }
                          else
                          {
                              $ver_insuff_data=[
                                'parent_id'         =>$parent_id,
                                'business_id'       =>$business_id,
                                'coc_id' => $jaf_voterid->business_id,
                                'candidate_id' => $candidate_id,
                                'service_id'  => $service_id,
                                'jaf_form_data_id' => $jaf_voterid->id,
                                'item_number' => $jaf_voterid->check_item_number,
                                'activity_type'=> 'jaf-save',
                                'status'=>'removed',
                                'notes' => 'Auto check Voter ID cleared',
                                'created_by'   => Auth::user()->id,
                                'created_at'   => date('Y-m-d H:i:s'),
                                'updated_at' => date('Y-m-d H:i:s')
                              ];
                        
                              $ver_id=DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);
                          }

                          $insuff_log_data=[
                            'parent_id'         =>$parent_id,
                            'business_id'       =>$business_id,
                            'coc_id' => $jaf_voterid->business_id,
                            'candidate_id' => $candidate_id,
                            'service_id'  => $jaf_voterid->service_id,
                            'jaf_form_data_id' => $jaf_voterid->id,
                            'item_number' => $jaf_voterid->check_item_number,
                            'activity_type'=> 'jaf-save',
                            'status'=>'removed',
                            'notes' => 'Auto check Voter ID cleared',
                            'created_by'   => Auth::user()->id,
                            'user_type'    =>'customer',
                            'created_at'   => date('Y-m-d H:i:s'),
                          ];
                    
                          DB::table('insufficiency_logs')->insert($insuff_log_data);
  
                          $ver_insuff=DB::table('verification_insufficiency')->where(['id'=>$ver_id])->first();
        
                            $candidates=DB::table('users as u')
                                ->select('u.*','j.business_id as coc_id','j.id as jaf_id','v.created_at as insuff_clear_date','v.created_by as insuff_clear_by','v.item_number','v.notes','s.verification_type','s.name as service_name','v.business_id as cust_id','v.attachment','v.updated_by','v.updated_at')
                                ->join('jaf_form_data as j','u.id','=','j.candidate_id')
                                ->join('verification_insufficiency as v','v.jaf_form_data_id','=','j.id')
                                ->join('services as s','s.id','=','v.service_id')
                                ->where(['u.user_type'=>'candidate','j.id'=>$jaf_form_data_id,'v.status'=>'removed','v.id'=>$ver_insuff->id])
                                ->first();
        
                            if($candidates!=NULL)
                            {
                              // $client=DB::table('users')->where(['id'=>$candidates->coc_id])->first();
                              // $name = $client->name;
                              // $email = $client->email;
                              // $msg= "Insufficiency Cleared For Candidate";
                              // $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                              // $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);
              
                              // Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email,$name) {
                              //   $message->to($email, $name)->subject
                              //       ('Clobminds Pvt Ltd - Insufficiency Notification');
                              //   $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                              // });
        
                              $kams = DB::table('key_account_managers')->where(['business_id'=>$candidates->business_id])->get();
                              if(count($kams)>0)
                              {
                                foreach($kams as $kam)
                                {
                                    $user_data=DB::table('users')->where(['id'=>$kam->user_id])->first();
        
                                    $name1 = $user_data->name;
                                    $email1 = $user_data->email;
                                    $msg= "Insufficiency Cleared For Candidate";
                                    $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                                    
                                    $data  = array('name'=>$name1,'email'=>$email1,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);
        
                                    Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email1,$name1) {
                                        $message->to($email1, $name1)->subject
                                            ('Clobminds Pvt Ltd - Insufficiency Notification');
                                        $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                                    });
        
                                }
                              }
        
                            }


                      }
                      else
                      {
                        
                        //check from live API
                        // Setup request to send json via POST
                        $data = array(
                            'id_number'    => $voterid_number,
                        );
                        $payload = json_encode($data);
                        $apiURL = "https://kyc-api.aadhaarkyc.io/api/v1/voter-id/voter-id";
        
                        $ch = curl_init();
                        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);                
                        curl_setopt ( $ch, CURLOPT_POST, 1 );
                        $authorization = "Authorization: Bearer ".env('SUREPASS_PRODUCTION_TOKEN');
                        //$authorization = "Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTY3NTQxMTcwMywianRpIjoiMTA5ZDNkNWMtOTE4NC00MTJkLTg3YTMtYzhiNmYzZWQyYjQ3IiwidHlwZSI6ImFjY2VzcyIsImlkZW50aXR5IjoiZGV2LnRlY2hzYWdhQHN1cmVwYXNzLmlvIiwibmJmIjoxNjc1NDExNzAzLCJleHAiOjE5OTA3NzE3MDMsInVzZXJfY2xhaW1zIjp7InNjb3BlcyI6WyJ1c2VyIl19fQ.r4XeIMOFEdnb52_xCspvLyiu6ciS5wx4YeIMv8ZyHKI"; // Prepare the authorisation token
                        curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json' , $authorization )); // Inject the token into the header
                        curl_setopt($ch, CURLOPT_URL, $apiURL);
                        // Attach encoded JSON string to the POST fields
                        curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);
                        $resp = curl_exec ( $ch );
                        curl_close ( $ch );
                        $array_data =  json_decode($resp,true);
                        // print_r($array_data); die;
        
                        if($array_data['success'])
                        {
                            //check if ID number is new then insert into DB
                            $checkIDInDB= DB::table('voter_id_check_masters')->where(['voter_id_number'=>$voterid_number])->count();
                            if($checkIDInDB ==0)
                            {
                                $gender = 'Male';
                                if($array_data['data']['gender'] == 'F'){
                                    $gender = 'Female';
                                }
                                //
                                $relation_type = NULL;
                                if($array_data['data']['relation_type'] == 'M'){
                                    $relation_type = 'Mother';
                                }
                                if($array_data['data']['relation_type'] == 'F'){
                                    $relation_type = 'Father';
                                }
                                if($array_data['data']['relation_type'] == 'W'){
                                    $relation_type = 'Wife';
                                }
                                if($array_data['data']['relation_type'] == 'H'){
                                    $relation_type = 'Husband';
                                }
        
                                $data = [
                                          'api_client_id'     =>$array_data['data']['client_id'],
                                          'relation_type'     =>$relation_type,
                                          'voter_id_number'   =>$array_data['data']['epic_no'],
                                          'relation_name'     =>$array_data['data']['relation_name'],
                                          'full_name'         =>$array_data['data']['name'],
                                          'gender'            =>$gender,
                                          'age'               =>$array_data['data']['age'],
                                          'dob'               =>$array_data['data']['dob'],
                                          'house_no'          =>$array_data['data']['house_no'],
                                          'area'              =>$array_data['data']['area'],
                                          'state'             =>$array_data['data']['state'],
                                          'is_api_verified'   =>'1',
                                          'is_voter_id_exist' =>'1',
                                          'created_at'        =>date('Y-m-d H:i:s')
                                ];
                                
                                DB::table('voter_id_check_masters')->insert($data);
                                
                                $master_data = DB::table('voter_id_check_masters')->select('*')->where(['voter_id_number'=>$voterid_number])->first();

                                //store log
                                  $log_data = [
                                            'parent_id'         =>$parent_id,
                                            'api_client_id'     =>$array_data['data']['client_id'],
                                            'relation_type'     =>$relation_type,
                                            'voter_id_number'   =>$array_data['data']['epic_no'],
                                            'relation_name'     =>$array_data['data']['relation_name'],
                                            'full_name'         =>$array_data['data']['name'],
                                            'gender'            =>$gender,
                                            'age'               =>$array_data['data']['age'],
                                            'dob'               =>$array_data['data']['dob'],
                                            'house_no'          =>$array_data['data']['house_no'],
                                            'area'              =>$array_data['data']['area'],
                                            'state'             =>$array_data['data']['state'],
                                            'is_verified'       =>'1',
                                            'is_voter_id_exist' =>'1',
                                            'price'             =>$price,
                                            'business_id'       => $business_id,
                                            'candidate_id' => $candidate_id,
                                            'service_id'        =>$service_id,
                                            'source_reference'  =>'API',
                                            'used_by'           =>'customer',
                                            'user_id'            => Auth::user()->id,
                                            'created_at'        =>date('Y-m-d H:i:s')
                                  ];

                                DB::table('voter_id_checks')->insert($log_data);
                            }
        
                            // update the status
                            // DB::table('jaf_form_data')->where(['id'=>$item_id])->update(['is_api_checked'=>'1','is_api_verified'=>'1','verification_status'=>'success','verified_at'=>date('Y-m-d H:i:s')]); 
                            DB::table('jaf_form_data')->where(['id'=>$jaf_form_data_id])
                            ->update(['is_api_checked'=>'1','is_api_verified'=>'1','verification_status'=>'success','verified_at'=>date('Y-m-d H:i:s'),'is_insufficiency'=>'0','clear_insuff_notes'=>'Auto Check Voter ID Cleared','is_all_insuff_cleared' => 1,'insuff_cleared_by'=>Auth::user()->id,'updated_at'=>date('Y-m-d H:i:s')]); 
                            $is_updated=TRUE;

                            $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf_form_data_id,'service_id'=>$service_id,'status'=>'removed'])->first();

                            if($ver_insuff!=NULL)
                            {
                                $ver_insuff_data=[
                                  'notes' => 'Auto Check Voter ID cleared',
                                  'updated_by' => Auth::user()->id,
                                  'updated_at' => date('Y-m-d H:i:s')
                                ];

                                DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf_form_data_id,'service_id'=>$service_id,'status'=>'removed'])->update($ver_insuff_data);

                                $ver_id=$ver_insuff->id;
                            }
                            else
                            {
                              $ver_insuff_data=[
                                'parent_id'         =>$parent_id,
                                'business_id'       =>$business_id,
                                'coc_id' => $jaf_voterid->business_id,
                                'candidate_id' => $candidate_id,
                                'service_id'  => $service_id,
                                'jaf_form_data_id' => $jaf_form_data_id,
                                'item_number' => $jaf_voterid->check_item_number,
                                'activity_type'=> 'jaf-save',
                                'status'=>'removed',
                                'notes' => 'Auto Check Voter ID cleared',
                                'created_by'   => Auth::user()->id,
                                'created_at'   => date('Y-m-d H:i:s'),
                                'updated_at' => date('Y-m-d H:i:s')
                              ];
                        
                              $ver_id=DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);
                            }

                            $insuff_log_data=[
                              'parent_id'         =>$parent_id,
                              'business_id'       =>$business_id,
                              'coc_id' => $jaf_voterid->business_id,
                              'candidate_id' => $candidate_id,
                              'service_id'  => $service_id,
                              'jaf_form_data_id' => $jaf_voterid->id,
                              'item_number' => $jaf_voterid->check_item_number,
                              'activity_type'=> 'jaf-save',
                              'status'=>'removed',
                              'notes' => 'Auto Check Voter ID cleared',
                              'created_by'   => Auth::user()->id,
                              'user_type'           =>'customer',
                              'created_at'   => date('Y-m-d H:i:s'),
                            ];
                      
                            DB::table('insufficiency_logs')->insert($insuff_log_data);

                            
                            $task = Task::where(['business_id'=> $jaf_data->business_id,'service_id'=>$service_id,'candidate_id'=>$candidate_id,'is_completed'=>0,'description'=>'Task for Verification'])->first();
                            $task_id='';
                            if ($task) {
                                # code...
                                $task_id = $task->id;

                                  $task->is_completed= 1;
                                  $task->save();
                              
                              //Change status of old task 
                              $task_assgn = TaskAssignment::where(['business_id'=> $jaf_data->business_id,'candidate_id'=>$candidate_id,'status'=>"1",'task_id'=>$task_id])->first();
                              // dd($task_assgn);
                              if($task_assgn)
                              {
                                $task_assgn->status= '2';
                                $task_assgn->save();
                              }
                            }
                            $ver_insuff=DB::table('verification_insufficiency')->where(['id'=>$ver_id])->first();

                            $candidates=DB::table('users as u')
                                ->select('u.*','j.business_id as coc_id','j.id as jaf_id','v.created_at as insuff_clear_date','v.created_by as insuff_clear_by','v.item_number','v.notes','s.verification_type','s.name as service_name','v.business_id as cust_id','v.attachment','v.updated_by','v.updated_at')
                                ->join('jaf_form_data as j','u.id','=','j.candidate_id')
                                ->join('verification_insufficiency as v','v.jaf_form_data_id','=','j.id')
                                ->join('services as s','s.id','=','v.service_id')
                                ->where(['u.user_type'=>'candidate','j.id'=>$jaf_form_data_id,'v.status'=>'removed','v.id'=>$ver_insuff->id])
                                ->first();

                            if($candidates!=NULL)
                            {
                              // $client=DB::table('users')->where(['id'=>$candidates->coc_id])->first();
                              // $name = $client->name;
                              // $email = $client->email;
                              // $msg= "Insufficiency Cleared For Candidate";
                              // $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                              // $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);
              
                              // Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email,$name) {
                              //   $message->to($email, $name)->subject
                              //       ('Clobminds Pvt Ltd - Insufficiency Notification');
                              //   $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                              // });

                              $kams = DB::table('key_account_managers')->where(['business_id'=>$candidates->business_id])->get();
                              if(count($kams)>0)
                              {
                                foreach($kams as $kam)
                                {
                                    $user_data=DB::table('users')->where(['id'=>$kam->user_id])->first();

                                    $name1 = $user_data->name;
                                    $email1 = $user_data->email;
                                    $msg= "Insufficiency Cleared For Candidate";
                                    $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                                    $data  = array('name'=>$name1,'email'=>$email1,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);

                                    Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email1,$name1) {
                                        $message->to($email1, $name1)->subject
                                            ('Clobminds Pvt Ltd - Insufficiency Notification');
                                        $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                                    });

                                }
                              }


                            }


                            
                        }
                        else{
                            //update insuff
                            DB::table('jaf_form_data')->where(['id'=>$jaf_form_data_id])->update(['is_api_checked'=>'1','is_api_verified'=>'0','is_insufficiency'=>'1','verification_status'=>'failed','verified_at'=>date('Y-m-d H:i:s')]);    

                            $jaf=DB::table('jaf_form_data')->where(['id'=>$jaf_form_data_id])->first();

                            $insuff_log_data=[
                                  'parent_id'         =>$parent_id,
                                  'business_id'       =>$business_id,
                                  'coc_id' => $jaf->business_id,
                                  'candidate_id' => $candidate_id,
                                  'service_id'  => $service_id,
                                  'jaf_form_data_id' => $jaf->id,
                                  'item_number' => $jaf->check_item_number,
                                  'activity_type'=> 'jaf-save',
                                  'status'=>'failed',
                                  'notes' => 'Auto Check Voter ID failed',
                                  'created_by'   => Auth::user()->id,
                                  'user_type'           =>'customer',
                                  'created_at'   => date('Y-m-d H:i:s'),
                            ];
                          
                                DB::table('insufficiency_logs')->insert($insuff_log_data);

                                $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf_form_data_id,'service_id'=>$service_id,'status'=>'raised'])->first();

                                if($ver_insuff!=NULL)
                                {
                                    $ver_insuff_data=[
                                      'notes' => 'Auto check Voter ID failed',
                                      'updated_by' => Auth::user()->id,
                                      'updated_at' => date('Y-m-d H:i:s')
                                    ];

                                    DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf_form_data_id,'service_id'=>$service_id,'status'=>'raised'])->update($ver_insuff_data);

                                    $ver_id=$ver_insuff->id;
                                }
                                else
                                {
                                  $ver_insuff_data=[
                                    'parent_id'         =>$parent_id,
                                    'business_id'       =>$business_id,
                                    'coc_id' => $jaf_data->business_id,
                                    'candidate_id' => $candidate_id,
                                    'service_id'  => $service_id,
                                    'jaf_form_data_id' => $jaf_form_data_id,
                                    'item_number' => $jaf_data->check_item_number,
                                    'activity_type'=> 'jaf-save',
                                    'status'=>'raised',
                                    'notes' => 'Auto check Voter ID failed',
                                    'created_by'   => Auth::user()->id,
                                    'created_at'   => date('Y-m-d H:i:s'),
                                  ];
                            
                                  $ver_id = DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);
                                }
                                
                            $final_users = [];
                            // $j = 0;
                            $job_sla_item = DB::table('job_sla_items')->where(['candidate_id'=> $jaf_data->business_id,'service_id'=>$service_id])->first();
              
                            // foreach ($job_sla_items as $job_sla_item) {
                              if ($job_sla_item) {
                                # code...
                            
                                $kam  = KeyAccountManager::where(['business_id'=> $jaf_data->business_id,'is_primary'=>'1'])->first();
                                if ($kam) {
                                  # code...
                                  $task = Task::where(['business_id'=>$jaf_data->business_id,'candidate_id'=>$candidate_id,'service_id'=>$service_id,'is_completed'=>0,'description'=>'Task for Verification'])->first();
                                  $task_id='';
                                  if ($task) {
                                    # code...
                                    $task_id = $task->id;
        
                                      $task->assigned_to= $kam->user_id;
                                      $task->assigned_by =Auth::user()->id;
                                      $task->assigned_at   = date('Y-m-d H:i:s');
                                      $task->start_date    = date('Y-m-d');
                                      $task->save();
                                  
                                  //Change status of old task 
                                    $task_assgn = TaskAssignment::where(['business_id'=>$jaf_data->business_id,'candidate_id'=>$candidate_id,'status'=>"1",'task_id'=>$task_id])->first();
                                    // dd($task_assgn);
                                    if($task_assgn)
                                    {
                                      $task_assgn->user_id= $kam->user_id;
                                      $task_assgn->save();
                                    }
                              
                                  
                                    }
                                  }
                              }
                        }
                      }
              }
              elseif($service_id==7)
              {
                $jaf_rc = DB::table('jaf_form_data')->select('*')->where(['id'=>$jaf_form_data_id])->first();
                // dd($jaf_rc);
                $rc_number = "";
                // $business_id = $jaf_rc->business_id; 
                $jaf_array = json_decode($jaf_rc->form_data, true);
                // print_r($jaf_array);
                foreach($jaf_array as $input){
                    if(array_key_exists('RC Number',$input)){
                      $rc_number = $input['RC Number'];
                    }
                }
                //check first into master table
                $master_data = DB::table('rc_check_masters')->select('*')->where(['rc_number'=>$rc_number])->first();
                if($master_data !=null){
                  DB::table('jaf_form_data')->where(['id'=>$jaf_form_data_id])
                      ->update(['is_api_checked'=>'1','is_api_verified'=>'1','verification_status'=>'success','verified_at'=>date('Y-m-d H:i:s'),'is_insufficiency'=>'0','clear_insuff_notes'=>'Auto Check RC Cleared','is_all_insuff_cleared' => 1,'insuff_cleared_by'=>Auth::user()->id,'updated_at'=>date('Y-m-d H:i:s')]); 
                      $log_data = [
                        'parent_id'         =>$parent_id,
                        'business_id'       => $business_id,
                        'candidate_id' => $candidate_id,
                        'service_id'        =>$service_id,
                        'source_type'       => 'SystemDb',
                        'api_client_id'     =>$master_data->api_client_id,
                        'rc_number'         =>$master_data->rc_number,
                        'registration_date' =>$master_data->registration_date,
                        'owner_name'        =>$master_data->owner_name,
                        'present_address'   =>$master_data->present_address,
                        'permanent_address'    =>$master_data->permanent_address,
                        'mobile_number'        =>$master_data->mobile_number,
                        'vehicle_category'     =>$master_data->vehicle_category,
                        'vehicle_chasis_number' =>$master_data->vehicle_chasis_number,
                        'vehicle_engine_number' =>$master_data->vehicle_engine_number,
                        'maker_description'     =>$master_data->maker_description,
                        'maker_model'           =>$master_data->maker_model,
                        'body_type'             =>$master_data->body_type,
                        'fuel_type'             =>$master_data->fuel_type,
                        'color'                 =>$master_data->color,
                        'norms_type'            =>$master_data->norms_type,
                        'fit_up_to'             =>$master_data->fit_up_to,
                        'financer'              =>$master_data->financer,
                        'insurance_company'     =>$master_data->insurance_company,
                        'insurance_policy_number'=>$master_data->insurance_policy_number,
                        'insurance_upto'         =>$master_data->insurance_upto,
                        'manufacturing_date'     =>$master_data->manufacturing_date,
                        'registered_at'          =>$master_data->registered_at,
                        'latest_by'              =>$master_data->latest_by,
                        'less_info'              =>$master_data->less_info,
                        'tax_upto'               =>$master_data->tax_upto,
                        'cubic_capacity'         =>$master_data->cubic_capacity,
                        'vehicle_gross_weight'   =>$master_data->vehicle_gross_weight,
                        'no_cylinders'           =>$master_data->no_cylinders,
                        'seat_capacity'          =>$master_data->seat_capacity,
                        'sleeper_capacity'       =>$master_data->sleeper_capacity,
                        'standing_capacity'      =>$master_data->standing_capacity,
                        'wheelbase'              =>$master_data->wheelbase,
                        'unladen_weight'         =>$master_data->unladen_weight,
                        'vehicle_category_description'         =>$master_data->vehicle_category_description,
                        'pucc_number'               =>$master_data->pucc_number,
                        'pucc_upto'                 =>$master_data->pucc_upto,
                        'masked_name'           =>$master_data->masked_name,
                        'is_verified'           =>'1',
                        'is_rc_exist'           =>'1',
                        'price'             =>$price,
                        'used_by'           =>'customer',
                        'user_id'            => $user_id,
                        'created_at'            =>date('Y-m-d H:i:s')
                        ];

                        DB::table('rc_checks')->insert($log_data);

                        $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf_form_data_id,'service_id'=>$service_id,'status'=>'removed'])->first();

                        if($ver_insuff!=NULL)
                        {
                          $ver_insuff_data=[
                            'notes' => 'Auto check RC cleared',
                            'updated_by' => Auth::user()->id,
                            'updated_at' => date('Y-m-d H:i:s')
                          ];

                          DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf_form_data_id,'service_id'=>$service_id,'status'=>'removed'])->update($ver_insuff_data);

                          $ver_id=$ver_insuff->id;
                        }
                        else
                        {
                            $ver_insuff_data=[
                              'parent_id'         =>$parent_id,
                              'business_id'       =>$business_id,
                              'coc_id' => $jaf_rc->business_id,
                              'candidate_id' => $candidate_id,
                              'service_id'  => $service_id,
                              'jaf_form_data_id' => $jaf_rc->id,
                              'item_number' => $jaf_rc->check_item_number,
                              'activity_type'=> 'jaf-save',
                              'status'=>'removed',
                              'notes' => 'Auto check RC cleared',
                              'created_by'   => Auth::user()->id,
                              'created_at'   => date('Y-m-d H:i:s'),
                              'updated_at' => date('Y-m-d H:i:s')
                            ];
                      
                            $ver_id=DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);
                        }

                        $insuff_log_data=[
                          'parent_id'         =>$parent_id,
                          'business_id'       =>$business_id,
                          'coc_id' => $jaf_rc->business_id,
                          'candidate_id' => $candidate_id,
                          'service_id'  => $jaf_rc->service_id,
                          'jaf_form_data_id' => $jaf_rc->id,
                          'item_number' => $jaf_rc->check_item_number,
                          'activity_type'=> 'jaf-save',
                          'status'=>'removed',
                          'notes' => 'Auto check RC cleared',
                          'created_by'   => Auth::user()->id,
                          'user_type'    =>'customer',
                          'created_at'   => date('Y-m-d H:i:s'),
                        ];
                  
                        DB::table('insufficiency_logs')->insert($insuff_log_data);

                        $ver_insuff=DB::table('verification_insufficiency')->where(['id'=>$ver_id])->first();
      
                          $candidates=DB::table('users as u')
                              ->select('u.*','j.business_id as coc_id','j.id as jaf_id','v.created_at as insuff_clear_date','v.created_by as insuff_clear_by','v.item_number','v.notes','s.verification_type','s.name as service_name','v.business_id as cust_id','v.attachment','v.updated_by','v.updated_at')
                              ->join('jaf_form_data as j','u.id','=','j.candidate_id')
                              ->join('verification_insufficiency as v','v.jaf_form_data_id','=','j.id')
                              ->join('services as s','s.id','=','v.service_id')
                              ->where(['u.user_type'=>'candidate','j.id'=>$jaf_form_data_id,'v.status'=>'removed','v.id'=>$ver_insuff->id])
                              ->first();
      
                          if($candidates!=NULL)
                          {
                            // $client=DB::table('users')->where(['id'=>$candidates->coc_id])->first();
                            // $name = $client->name;
                            // $email = $client->email;
                            // $msg= "Insufficiency Cleared For Candidate";
                            // $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                            // $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);
            
                            // Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email,$name) {
                            //   $message->to($email, $name)->subject
                            //       ('Clobminds Pvt Ltd - Insufficiency Notification');
                            //   $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                            // });
      
                            $kams = DB::table('key_account_managers')->where(['business_id'=>$candidates->business_id])->get();
                            if(count($kams)>0)
                            {
                              foreach($kams as $kam)
                              {
                                  $user_data=DB::table('users')->where(['id'=>$kam->user_id])->first();
      
                                  $name1 = $user_data->name;
                                  $email1 = $user_data->email;
                                  $msg= "Insufficiency Cleared For Candidate";
      
                                  $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                                  $data  = array('name'=>$name1,'email'=>$email1,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);
      
                                  Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email1,$name1) {
                                      $message->to($email1, $name1)->subject
                                          ('Clobminds Pvt Ltd - Insufficiency Notification');
                                      $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                                  });
      
                              }
                            }
      
                          }

                  
                }
                else
                {
                  //check from live API
                  // Setup request to send json via POST
                  $data = array(
                      'id_number'    => $rc_number,
                      'async'         => true
                  );
                  $payload = json_encode($data);
                  $apiURL = "https://kyc-api.aadhaarkyc.io/api/v1/rc/rc";
  
                  $ch = curl_init();
                  curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);                
                  curl_setopt ( $ch, CURLOPT_POST, 1 );
                  $authorization = "Authorization: Bearer ".env('SUREPASS_PRODUCTION_TOKEN'); // Prepare the authorisation token
                  curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json' , $authorization )); // Inject the token into the header
                  curl_setopt($ch, CURLOPT_URL, $apiURL);
                  // Attach encoded JSON string to the POST fields
                  curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);
                  $resp = curl_exec ( $ch );
                  curl_close ( $ch );
                  $array_data =  json_decode($resp,true);
                  // print_r($array_data); die;
  
                  if($array_data['success'])
                  {
                      //check if ID number is new then insert into DB
                      $checkIDInDB= DB::table('rc_check_masters')->where(['rc_number'=>$rc_number])->count();
                      if($checkIDInDB ==0)
                      {
                      
                          $data = [
                                  'api_client_id'     =>$array_data['data']['client_id'],
                                  'rc_number'         =>$array_data['data']['rc_number'],
                                  'registration_date' =>$array_data['data']['registration_date'],
                                  'owner_name'        =>$array_data['data']['owner_name'],
                                  'present_address'   =>$array_data['data']['present_address'],
                                  'permanent_address'    =>$array_data['data']['permanent_address'],
                                  'mobile_number'        =>$array_data['data']['mobile_number'],
                                  'vehicle_category'     =>$array_data['data']['vehicle_category'],
                                  'vehicle_chasis_number' =>$array_data['data']['vehicle_chasi_number'],
                                  'vehicle_engine_number' =>$array_data['data']['vehicle_engine_number'],
                                  'maker_description'     =>$array_data['data']['maker_description'],
                                  'maker_model'           =>$array_data['data']['maker_model'],
                                  'body_type'             =>$array_data['data']['body_type'],
                                  'fuel_type'             =>$array_data['data']['fuel_type'],
                                  'color'                 =>$array_data['data']['color'],
                                  'norms_type'            =>$array_data['data']['norms_type'],
                                  'fit_up_to'             =>$array_data['data']['fit_up_to'],
                                  'financer'              =>$array_data['data']['financer'],
                                  'insurance_company'     =>$array_data['data']['insurance_company'],
                                  'insurance_policy_number'=>$array_data['data']['insurance_policy_number'],
                                  'insurance_upto'         =>$array_data['data']['insurance_upto'],
                                  'manufacturing_date'     =>$array_data['data']['manufacturing_date'],
                                  'registered_at'          =>$array_data['data']['registered_at'],
                                  'latest_by'              =>$array_data['data']['latest_by'],
                                  'less_info'              =>$array_data['data']['less_info'],
                                  'tax_upto'               =>$array_data['data']['tax_upto'],
                                  'cubic_capacity'         =>$array_data['data']['cubic_capacity'],
                                  'vehicle_gross_weight'   =>$array_data['data']['vehicle_gross_weight'],
                                  'no_cylinders'           =>$array_data['data']['no_cylinders'],
                                  'seat_capacity'          =>$array_data['data']['seat_capacity'],
                                  'sleeper_capacity'       =>$array_data['data']['sleeper_capacity'],
                                  'standing_capacity'      =>$array_data['data']['standing_capacity'],
                                  'wheelbase'              =>$array_data['data']['wheelbase'],
                                  'unladen_weight'         =>$array_data['data']['unladen_weight'],
                                  'vehicle_category_description'         =>$array_data['data']['vehicle_category_description'],
                                  'pucc_number'               =>$array_data['data']['pucc_number'],
                                  'pucc_upto'                 =>$array_data['data']['pucc_upto'],
                                  'masked_name'           =>$array_data['data']['masked_name'],
                                  'is_api_verified'           =>'1',
                                  'is_rc_exist'           =>'1',
                                  'created_at'            =>date('Y-m-d H:i:s')
                                  ];
  
                          DB::table('rc_check_masters')->insert($data);
                          
                          $master_data = DB::table('rc_check_masters')->select('*')->where(['rc_number'=>$rc_number])->first();

                          $log_data = [
                            'parent_id'         =>$parent_id,
                            'business_id'       =>$business_id,
                            'candidate_id' => $candidate_id,
                            'service_id'        =>$service_id,
                            'source_type'       => 'API',
                            'api_client_id'     =>$master_data->api_client_id,
                            'rc_number'         =>$master_data->rc_number,
                            'registration_date' =>$master_data->registration_date,
                            'owner_name'        =>$master_data->owner_name,
                            'present_address'   =>$master_data->present_address,
                            'permanent_address'    =>$master_data->permanent_address,
                            'mobile_number'        =>$master_data->mobile_number,
                            'vehicle_category'     =>$master_data->vehicle_category,
                            'vehicle_chasis_number' =>$master_data->vehicle_chasis_number,
                            'vehicle_engine_number' =>$master_data->vehicle_engine_number,
                            'maker_description'     =>$master_data->maker_description,
                            'maker_model'           =>$master_data->maker_model,
                            'body_type'             =>$master_data->body_type,
                            'fuel_type'             =>$master_data->fuel_type,
                            'color'                 =>$master_data->color,
                            'norms_type'            =>$master_data->norms_type,
                            'fit_up_to'             =>$master_data->fit_up_to,
                            'financer'              =>$master_data->financer,
                            'insurance_company'     =>$master_data->insurance_company,
                            'insurance_policy_number'=>$master_data->insurance_policy_number,
                            'insurance_upto'         =>$master_data->insurance_upto,
                            'manufacturing_date'     =>$master_data->manufacturing_date,
                            'registered_at'          =>$master_data->registered_at,
                            'latest_by'              =>$master_data->latest_by,
                            'less_info'              =>$master_data->less_info,
                            'tax_upto'               =>$master_data->tax_upto,
                            'cubic_capacity'         =>$master_data->cubic_capacity,
                            'vehicle_gross_weight'   =>$master_data->vehicle_gross_weight,
                            'no_cylinders'           =>$master_data->no_cylinders,
                            'seat_capacity'          =>$master_data->seat_capacity,
                            'sleeper_capacity'       =>$master_data->sleeper_capacity,
                            'standing_capacity'      =>$master_data->standing_capacity,
                            'wheelbase'              =>$master_data->wheelbase,
                            'unladen_weight'         =>$master_data->unladen_weight,
                            'vehicle_category_description'         =>$master_data->vehicle_category_description,
                            'pucc_number'               =>$master_data->pucc_number,
                            'pucc_upto'                 =>$master_data->pucc_upto,
                            'masked_name'           =>$master_data->masked_name,
                            'is_verified'           =>'1',
                            'is_rc_exist'           =>'1',
                            'price'             =>$price,
                            'used_by'           =>'customer',
                            'user_id'            => Auth::user()->id,
                            'created_at'            =>date('Y-m-d H:i:s')
                            ];
        
                            DB::table('rc_checks')->insert($log_data);
                      }
  
                      // update the status
                      DB::table('jaf_form_data')->where(['id'=>$jaf_form_data_id])
                          ->update(['is_api_checked'=>'1','is_api_verified'=>'1','verification_status'=>'success','verified_at'=>date('Y-m-d H:i:s'),'is_insufficiency'=>'0','clear_insuff_notes'=>'Auto Check RC Cleared','is_all_insuff_cleared' => 1,'insuff_cleared_by'=>Auth::user()->id,'updated_at'=>date('Y-m-d H:i:s')]); 

                          $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf_form_data_id,'service_id'=>$service_id,'status'=>'removed'])->first();

                          if($ver_insuff!=NULL)
                          {
                              $ver_insuff_data=[
                                'notes' => 'Auto Check RC Cleared',
                                'updated_by' => Auth::user()->id,
                                'updated_at' => date('Y-m-d H:i:s')
                              ];
                    
                              DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf_form_data_id,'service_id'=>$service_id,'status'=>'removed'])->update($ver_insuff_data);
                    
                              $ver_id=$ver_insuff->id;
                          }
                          else
                          {
                            $ver_insuff_data=[
                              'parent_id'         =>$parent_id,
                              'business_id'       =>$business_id,
                              'coc_id' => $jaf_rc->business_id,
                              'candidate_id' => $candidate_id,
                              'service_id'  => $service_id,
                              'jaf_form_data_id' => $jaf_rc->id,
                              'item_number' => $jaf_rc->check_item_number,
                              'activity_type'=> 'jaf-save',
                              'status'=>'removed',
                              'notes' => 'Auto Check RC Cleared',
                              'created_by'   => Auth::user()->id,
                              'created_at'   => date('Y-m-d H:i:s'),
                              'updated_at' => date('Y-m-d H:i:s')
                            ];
                      
                            $ver_id=DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);
                          }

                          $insuff_log_data=[
                            'parent_id'         =>$parent_id,
                            'business_id'       =>$business_id,
                            'coc_id' => $jaf_rc->business_id,
                            'candidate_id' => $candidate_id,
                            'service_id'  => $service_id,
                            'jaf_form_data_id' => $jaf_rc->id,
                            'item_number' => $jaf_rc->check_item_number,
                            'activity_type'=> 'jaf-save',
                            'status'=>'removed',
                            'notes' => 'Auto Check RC Cleared',
                            'created_by'   => Auth::user()->id,
                            'user_type'           =>'customer',
                            'created_at'   => date('Y-m-d H:i:s'),
                          ];
                    
                          DB::table('insufficiency_logs')->insert($insuff_log_data);


                          
                        $task = Task::where(['business_id'=> $jaf_data->business_id,'service_id'=>$service_id,'candidate_id'=>$candidate_id,'is_completed'=>0,'description'=>'Task for Verification'])->first();
                        $task_id='';
                        if ($task) {
                          # code...
                          $task_id = $task->id;

                            $task->is_completed= 1;
                            $task->save();
                        
                        //Change status of old task 
                        $task_assgn = TaskAssignment::where(['business_id'=> $jaf_data->business_id,'candidate_id'=>$candidate_id,'status'=>"1",'task_id'=>$task_id])->first();
                        // dd($task_assgn);
                        if($task_assgn)
                        {
                          $task_assgn->status= '2';
                          $task_assgn->save();
                        }
                      }
                      $ver_insuff=DB::table('verification_insufficiency')->where(['id'=>$ver_id])->first();

                      $candidates=DB::table('users as u')
                          ->select('u.*','j.business_id as coc_id','j.id as jaf_id','v.created_at as insuff_clear_date','v.created_by as insuff_clear_by','v.item_number','v.notes','s.verification_type','s.name as service_name','v.business_id as cust_id','v.attachment','v.updated_by','v.updated_at')
                          ->join('jaf_form_data as j','u.id','=','j.candidate_id')
                          ->join('verification_insufficiency as v','v.jaf_form_data_id','=','j.id')
                          ->join('services as s','s.id','=','v.service_id')
                          ->where(['u.user_type'=>'candidate','j.id'=>$jaf_form_data_id,'v.status'=>'removed','v.id'=>$ver_insuff->id])
                          ->first();

                      if($candidates!=NULL)
                      {
                        // $client=DB::table('users')->where(['id'=>$candidates->coc_id])->first();
                        // $name = $client->name;
                        // $email = $client->email;
                        // $msg= "Insufficiency Cleared For Candidate";
                        // $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                        // $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);
        
                        // Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email,$name) {
                        //   $message->to($email, $name)->subject
                        //       ('Clobminds Pvt Ltd - Insufficiency Notification');
                        //   $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                        // });

                        $kams = DB::table('key_account_managers')->where(['business_id'=>$candidates->business_id])->get();
                        if(count($kams)>0)
                        {
                          foreach($kams as $kam)
                          {
                              $user_data=DB::table('users')->where(['id'=>$kam->user_id])->first();

                              $name1 = $user_data->name;
                              $email1 = $user_data->email;
                              $msg= "Insufficiency Cleared For Candidate";
                              $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                              $data  = array('name'=>$name1,'email'=>$email1,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);

                              Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email1,$name1) {
                                  $message->to($email1, $name1)->subject
                                      ('Clobminds Pvt Ltd - Insufficiency Notification');
                                  $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                              });

                          }
                        }

                      }


                  }
                  else{
                      //update insuff
                      DB::table('jaf_form_data')->where(['id'=>$jaf_form_data_id])->update(['is_api_checked'=>'1','is_api_verified'=>'0','is_insufficiency'=>'1','verification_status'=>'failed','verified_at'=>date('Y-m-d H:i:s')]); 

                      $jaf=DB::table('jaf_form_data')->where(['id'=>$jaf_form_data_id])->first();
                      $insuff_log_data=[
                        'parent_id'         =>$parent_id,
                        'business_id'       =>$business_id,
                        'coc_id' => $jaf_rc->business_id,
                        'candidate_id' => $candidate_id,
                        'service_id'  => $service_id,
                        'jaf_form_data_id' => $jaf_rc->id,
                        'item_number' => $jaf_rc->check_item_number,
                        'activity_type'=> 'jaf-save',
                        'status'=>'failed',
                        'notes' => 'Auto Check RC Failed',
                        'created_by'   => Auth::user()->id,
                        'user_type'           =>'customer',
                        'created_at'   => date('Y-m-d H:i:s'),
                      ];
                
                      DB::table('insufficiency_logs')->insert($insuff_log_data);

                      $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf_form_data_id,'service_id'=>$service_id,'status'=>'raised'])->first();

                        if($ver_insuff!=NULL)
                        {
                            $ver_insuff_data=[
                              'notes' => 'Auto check RC failed',
                              'updated_by' => Auth::user()->id,
                              'updated_at' => date('Y-m-d H:i:s')
                            ];

                            DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf_form_data_id,'service_id'=>$service_id,'status'=>'raised'])->update($ver_insuff_data);

                            $ver_id=$ver_insuff->id;
                        }
                        else
                        {
                          $ver_insuff_data=[
                            'parent_id'         =>$parent_id,
                            'business_id'       =>$business_id,
                            'coc_id' => $jaf_data->business_id,
                            'candidate_id' => $candidate_id,
                            'service_id'  => $service_id,
                            'jaf_form_data_id' => $jaf_form_data_id,
                            'item_number' => $jaf_data->check_item_number,
                            'activity_type'=> 'jaf-save',
                            'status'=>'raised',
                            'notes' => 'Auto check RC failed',
                            'created_by'   => Auth::user()->id,
                            'created_at'   => date('Y-m-d H:i:s'),
                          ];
                    
                          $ver_id = DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);
                        }

                         
                         // task assign start
                         $final_users = [];
                         // $j = 0;
                         $job_sla_item = DB::table('job_sla_items')->where(['candidate_id'=>$candidate_id,'service_id'=>$service_id])->first();
           
                         // foreach ($job_sla_items as $job_sla_item) {
                           if ($job_sla_item) {
                             # code...
                         
                             $kam  = KeyAccountManager::where(['business_id'=> $jaf_data->business_id,'is_primary'=>'1'])->first();
                             if ($kam) {
                               # code...
                               $task = Task::where(['business_id'=>$jaf_data->business_id,'candidate_id'=>$candidate_id,'service_id'=>$service_id,'is_completed'=>0,'description'=>'Task for Verification'])->first();
                               $task_id='';
                               if ($task) {
                                 # code...
                                 $task_id = $task->id;
     
                                   $task->assigned_to= $kam->user_id;
                                   $task->assigned_by =Auth::user()->id;
                                   $task->assigned_at   = date('Y-m-d H:i:s');
                                   $task->start_date    = date('Y-m-d');
                                   $task->save();
                               
                               //Change status of old task 
                                 $task_assgn = TaskAssignment::where(['business_id'=>$jaf_data->business_id,'candidate_id'=>$candidate_id,'status'=>"1",'task_id'=>$task_id])->first();
                                 // dd($task_assgn);
                                 if($task_assgn)
                                 {
                                   $task_assgn->user_id= $kam->user_id;
                                   $task_assgn->save();
                                 }
                            
                                 }
                               }
                           }
                  }
                }

              }
              elseif($service_id==9)
              {
                $jaf_dl = DB::table('jaf_form_data')->select('*')->where(['id'=>$jaf_form_data_id])->first();

                $dl_number = "";
                // $business_id = $jaf_dl->business_id; 
                $jaf_array = json_decode($jaf_dl->form_data, true);
                // print_r($jaf_array);
                foreach($jaf_array as $input){
                    if(array_key_exists('DL Number',$input)){
                      $dl_number = $input['DL Number'];
                    }
                }
                $dl_number_input      = $dl_number;
                $dl_raw               = preg_replace('/[^A-Za-z0-9\ ]/', '', $dl_number_input);
                $final_dl_number      = str_replace(' ', '', $dl_raw);

                $master_data = DB::table('dl_check_masters')->select('*')->where(['dl_number'=>$final_dl_number])->first();
                  
                  if($master_data !=null){
                    $log_data = [
                      'parent_id'         =>$parent_id,
                      'business_id'       => $business_id,
                      'service_id'        =>$service_id,
                      'candidate_id' => $candidate_id,
                      'source_type'       =>'SystemDb',
                      'api_client_id'     =>$master_data->api_client_id,
                      'dl_number'         =>$master_data->dl_number,
                      'name'              =>$master_data->name,
                      'permanent_address' =>$master_data->permanent_address,
                      'temporary_address' =>$master_data->temporary_address,
                      'permanent_zip'     =>$master_data->permanent_zip,
                      'temporary_zip'     =>$master_data->temporary_zip,
                      'state'             =>$master_data->state,
                      'citizenship'       =>$master_data->citizenship,
                      'ola_name'          =>$master_data->ola_name,
                      'ola_code'          =>$master_data->ola_code,
                      'gender'            =>$master_data->gender,
                      'father_or_husband_name' =>$master_data->father_or_husband_name,
                      'dob'               =>$master_data->dob,
                      'doe'               =>$master_data->doe,
                      'transport_doe'     =>$master_data->transport_doe,
                      'doi'               =>$master_data->doi,
                      'is_verified'       =>'1',
                      'is_rc_exist'       =>'1',
                      'price'             =>$price,
                      'used_by'           =>'customer',
                      'user_id'            => $user_id,
                      'created_at'        =>date('Y-m-d H:i:s')
                    ];

                    DB::table('dl_checks')->insert($log_data);

                    DB::table('jaf_form_data')->where(['id'=>$jaf_form_data_id])
                        ->update(['is_api_checked'=>'1','is_api_verified'=>'1','verification_status'=>'success','verified_at'=>date('Y-m-d H:i:s'),'is_insufficiency'=>'0','clear_insuff_notes'=>'Auto Check DL Cleared','is_all_insuff_cleared' => 1,'insuff_cleared_by'=>Auth::user()->id,'updated_at'=>date('Y-m-d H:i:s')]); 

                    $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf_form_data_id,'service_id'=>$service_id,'status'=>'removed'])->first();

                    if($ver_insuff!=NULL)
                    {
                      $ver_insuff_data=[
                        'notes' => 'Auto check DL cleared',
                        'updated_by' => Auth::user()->id,
                        'updated_at' => date('Y-m-d H:i:s')
                      ];

                      DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf_form_data_id,'service_id'=>$service_id,'status'=>'removed'])->update($ver_insuff_data);

                      $ver_id=$ver_insuff->id;
                    }
                    else
                    {
                        $ver_insuff_data=[
                          'parent_id'         =>$parent_id,
                          'business_id'       =>$business_id,
                          'coc_id' => $jaf_dl->business_id,
                          'candidate_id' => $candidate_id,
                          'service_id'  => $service_id,
                          'jaf_form_data_id' => $jaf_dl->id,
                          'item_number' => $jaf_dl->check_item_number,
                          'activity_type'=> 'jaf-save',
                          'status'=>'removed',
                          'notes' => 'Auto check DL cleared',
                          'created_by'   => Auth::user()->id,
                          'created_at'   => date('Y-m-d H:i:s'),
                          'updated_at' => date('Y-m-d H:i:s')
                        ];
                  
                        $ver_id=DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);
                    }

                    $insuff_log_data=[
                      'parent_id'         =>$parent_id,
                      'business_id'       =>$business_id,
                      'coc_id' => $jaf_dl->business_id,
                      'candidate_id' => $candidate_id,
                      'service_id'  => $jaf_dl->service_id,
                      'jaf_form_data_id' => $jaf_dl->id,
                      'item_number' => $jaf_dl->check_item_number,
                      'activity_type'=> 'jaf-save',
                      'status'=>'removed',
                      'notes' => 'Auto check DL cleared',
                      'created_by'   => Auth::user()->id,
                      'user_type'    =>'customer',
                      'created_at'   => date('Y-m-d H:i:s'),
                    ];
              
                    DB::table('insufficiency_logs')->insert($insuff_log_data);

                    $ver_insuff=DB::table('verification_insufficiency')->where(['id'=>$ver_id])->first();
      
                    $candidates=DB::table('users as u')
                        ->select('u.*','j.business_id as coc_id','j.id as jaf_id','v.created_at as insuff_clear_date','v.created_by as insuff_clear_by','v.item_number','v.notes','s.verification_type','s.name as service_name','v.business_id as cust_id','v.attachment','v.updated_by','v.updated_at')
                        ->join('jaf_form_data as j','u.id','=','j.candidate_id')
                        ->join('verification_insufficiency as v','v.jaf_form_data_id','=','j.id')
                        ->join('services as s','s.id','=','v.service_id')
                        ->where(['u.user_type'=>'candidate','j.id'=>$jaf_form_data_id,'v.status'=>'removed','v.id'=>$ver_insuff->id])
                        ->first();

                    if($candidates!=NULL)
                    {
                      // $client=DB::table('users')->where(['id'=>$candidates->coc_id])->first();
                      // $name = $client->name;
                      // $email = $client->email;
                      // $msg= "Insufficiency Cleared For Candidate";
                      // $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                      // $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);
      
                      // Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email,$name) {
                      //   $message->to($email, $name)->subject
                      //       ('Clobminds Pvt Ltd - Insufficiency Notification');
                      //   $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                      // });

                      $kams = DB::table('key_account_managers')->where(['business_id'=>$candidates->business_id])->get();
                      if(count($kams)>0)
                      {
                        foreach($kams as $kam)
                        {
                            $user_data=DB::table('users')->where(['id'=>$kam->user_id])->first();

                            $name1 = $user_data->name;
                            $email1 = $user_data->email;
                            $msg= "Insufficiency Cleared For Candidate";
                            $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                            
                            $data  = array('name'=>$name1,'email'=>$email1,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);

                            Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email1,$name1) {
                                $message->to($email1, $name1)->subject
                                    ('Clobminds Pvt Ltd - Insufficiency Notification');
                                $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                            });

                        }
                      }

                    }

                  }
                  else
                  {
                      //check from live API
                      // Setup request to send json via POST
                      $data = array(
                          'id_number'    => $dl_number,
                      );
                      $payload = json_encode($data);
                      $apiURL = "https://kyc-api.aadhaarkyc.io/api/v1/driving-license/driving-license";
      
                      $ch = curl_init();
                      curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);                
                      curl_setopt ( $ch, CURLOPT_POST, 1 );
                      $authorization = "Authorization: Bearer ".env('SUREPASS_PRODUCTION_TOKEN'); // Prepare the authorisation token
                      curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json' , $authorization )); // Inject the token into the header
                      curl_setopt($ch, CURLOPT_URL, $apiURL);
                      // Attach encoded JSON string to the POST fields
                      curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);
                      $resp = curl_exec ( $ch );
                      curl_close ( $ch );
                      $array_data =  json_decode($resp,true);
                      // print_r($array_data); die;
      
                      if($array_data['success'])
                      {
                          //check if ID number is new then insert into DB
                          $checkIDInDB= DB::table('dl_check_masters')->where(['dl_number'=>$final_dl_number])->count();
                          if($checkIDInDB ==0)
                          {
                              $gender = 'Male';
                              if($array_data['data']['gender'] == 'F'){
                                  $gender = 'Female';
                              }
      
                              $dl_number      = $array_data['data']['license_number'];
                              $dl_raw         = preg_replace('/[^A-Za-z0-9\ ]/', '', $dl_number);
                              $final_number   = str_replace(' ', '', $dl_raw);
      
                              //
                              $data = [
                                      'api_client_id'     =>$array_data['data']['client_id'],
                                      'dl_number'         =>$final_number,
                                      'name'              =>$array_data['data']['name'],
                                      'permanent_address' =>$array_data['data']['permanent_address'],
                                      'temporary_address' =>$array_data['data']['temporary_address'],
                                      'permanent_zip'     =>$array_data['data']['permanent_zip'],
                                      'temporary_zip'     =>$array_data['data']['temporary_zip'],
                                      'state'             =>$array_data['data']['state'],
                                      'citizenship'       =>$array_data['data']['citizenship'],
                                      'ola_name'          =>$array_data['data']['ola_name'],
                                      'ola_code'          =>$array_data['data']['ola_code'],
                                      'gender'            =>$gender,
                                      'father_or_husband_name' =>$array_data['data']['father_or_husband_name'],
                                      'dob'               =>$array_data['data']['dob'],
                                      'doe'               =>$array_data['data']['doe'],
                                      'transport_doe'     =>$array_data['data']['transport_doe'],
                                      'doi'               =>$array_data['data']['doi'],
                                      'is_api_verified'       =>'1',
                                      'is_rc_exist'       =>'1',
                                      'created_at'        =>date('Y-m-d H:i:s')
                                      ];
                                  
                                  DB::table('dl_check_masters')->insert($data);
      
                                  
                              
                              $master_data = DB::table('dl_check_masters')->select('*')->where(['dl_number'=>$final_dl_number])->first();
      
                              $log_data = [
                                'parent_id'         =>$parent_id,
                                'business_id'       =>$business_id,
                                'service_id'        =>$service_id,
                                'candidate_id' => $candidate_id,
                                'source_type'       =>'API',
                                'api_client_id'     =>$master_data->api_client_id,
                                'dl_number'         =>$master_data->dl_number,
                                'name'              =>$master_data->name,
                                'permanent_address' =>$master_data->permanent_address,
                                'temporary_address' =>$master_data->temporary_address,
                                'permanent_zip'     =>$master_data->permanent_zip,
                                'temporary_zip'     =>$master_data->temporary_zip,
                                'state'             =>$master_data->state,
                                'citizenship'       =>$master_data->citizenship,
                                'ola_name'          =>$master_data->ola_name,
                                'ola_code'          =>$master_data->ola_code,
                                'gender'            =>$master_data->gender,
                                'father_or_husband_name' =>$master_data->father_or_husband_name,
                                'dob'               =>$master_data->dob,
                                'doe'               =>$master_data->doe,
                                'transport_doe'     =>$master_data->transport_doe,
                                'doi'               =>$master_data->doi,
                                'is_verified'       =>'1',
                                'is_rc_exist'       =>'1',
                                'price'             =>$price,
                                'used_by'           =>'customer',
                                'user_id'            => Auth::user()->id,
                                'created_at'        =>date('Y-m-d H:i:s')
                                ];
                            
                            DB::table('dl_checks')->insert($log_data);
                          }
                          // update the status
                          DB::table('jaf_form_data')->where(['id'=>$jaf_form_data_id])
                          ->update(['is_api_checked'=>'1','is_api_verified'=>'1','verification_status'=>'success','verified_at'=>date('Y-m-d H:i:s'),'is_insufficiency'=>'0','clear_insuff_notes'=>'Auto Check DL Cleared','is_all_insuff_cleared' => 1,'insuff_cleared_by'=>Auth::user()->id,'updated_at'=>date('Y-m-d H:i:s')]); 

                          $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf_form_data_id,'service_id'=>$service_id,'status'=>'removed'])->first();

                            if($ver_insuff!=NULL)
                            {
                                $ver_insuff_data=[
                                  'notes' => 'Auto Check Dl Cleared',
                                  'updated_by' => Auth::user()->id,
                                  'updated_at' => date('Y-m-d H:i:s')
                                ];

                                DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf_form_data_id,'service_id'=>$service_id,'status'=>'removed'])->update($ver_insuff_data);

                                $ver_id=$ver_insuff->id;
                            }
                            else
                            {
                              $ver_insuff_data=[
                                'parent_id'         =>$parent_id,
                                'business_id'       =>$business_id,
                                'coc_id' => $jaf_dl->business_id,
                                'candidate_id' => $candidate_id,
                                'service_id'  => $service_id,
                                'jaf_form_data_id' => $jaf_dl->id,
                                'item_number' => $jaf_dl->check_item_number,
                                'activity_type'=> 'jaf-save',
                                'status'=>'removed',
                                'notes' => 'Auto Check Dl Cleared',
                                'created_by'   => Auth::user()->id,
                                'created_at'   => date('Y-m-d H:i:s'),
                                'updated_at' => date('Y-m-d H:i:s')
                              ];
                        
                              $ver_id=DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);
                            }


                            $insuff_log_data=[
                              'parent_id'         =>$parent_id,
                              'business_id'       =>$business_id,
                              'coc_id' => $jaf_dl->business_id,
                              'candidate_id' => $candidate_id,
                              'service_id'  => $service_id,
                              'jaf_form_data_id' => $jaf_dl->id,
                              'item_number' => $jaf_dl->check_item_number,
                              'activity_type'=> 'jaf-save',
                              'status'=>'removed',
                              'notes' => 'Auto Check Dl Cleared',
                              'created_by'   => Auth::user()->id,
                              'user_type'           =>'customer',
                              'created_at'   => date('Y-m-d H:i:s'),
                            ];
                      
                            DB::table('insufficiency_logs')->insert($insuff_log_data);
                            



                            $task = Task::where(['business_id'=> $jaf_data->business_id,'service_id'=>$service_id,'candidate_id'=>$candidate_id,'is_completed'=>0,'description'=>'Task for Verification'])->first();
                            $task_id='';
                            if ($task) {
                              # code...
                              $task_id = $task->id;

                                $task->is_completed= 1;
                                $task->save();
                            
                            //Change status of old task 
                            $task_assgn = TaskAssignment::where(['business_id'=> $jaf_data->business_id,'candidate_id'=>$candidate_id,'status'=>"1",'task_id'=>$task_id])->first();
                            // dd($task_assgn);
                            if($task_assgn)
                            {
                              $task_assgn->status= '2';
                              $task_assgn->save();
                            }
                          }
      
                          $ver_insuff=DB::table('verification_insufficiency')->where(['id'=>$ver_id])->first();
      
                          $candidates=DB::table('users as u')
                              ->select('u.*','j.business_id as coc_id','j.id as jaf_id','v.created_at as insuff_clear_date','v.created_by as insuff_clear_by','v.item_number','v.notes','s.verification_type','s.name as service_name','v.business_id as cust_id','v.attachment','v.updated_at','v.updated_by')
                              ->join('jaf_form_data as j','u.id','=','j.candidate_id')
                              ->join('verification_insufficiency as v','v.jaf_form_data_id','=','j.id')
                              ->join('services as s','s.id','=','v.service_id')
                              ->where(['u.user_type'=>'candidate','j.id'=>$jaf_form_data_id,'v.status'=>'removed','v.id'=>$ver_insuff->id])
                              ->first();
      
                          if($candidates!=NULL)
                          {
                            // $client=DB::table('users')->where(['id'=>$candidates->coc_id])->first();
                            // $name = $client->name;
                            // $email = $client->email;
                            // $msg= "Insufficiency Cleared For Candidate";
                            // $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                            // $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);
            
                            // Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email,$name) {
                            //   $message->to($email, $name)->subject
                            //       ('Clobminds Pvt Ltd - Insufficiency Notification');
                            //   $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                            // });
      
                            $kams = DB::table('key_account_managers')->where(['business_id'=>$candidates->business_id])->get();
                            if(count($kams)>0)
                            {
                              foreach($kams as $kam)
                              {
                                  $user_data=DB::table('users')->where(['id'=>$kam->user_id])->first();
      
                                  $name1 = $user_data->name;
                                  $email1 = $user_data->email;
                                  $msg= "Insufficiency Cleared For Candidate";
                                  $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                                  $data  = array('name'=>$name1,'email'=>$email1,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);
      
                                  Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email1,$name1) {
                                      $message->to($email1, $name1)->subject
                                          ('Clobminds Pvt Ltd - Insufficiency Notification');
                                      $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                                  });
      
                              }
                            }
      
      
                          }
      
                      }
                      else{
                          //update insuff
                          DB::table('jaf_form_data')->where(['id'=>$jaf_form_data_id])->update(['is_api_checked'=>'1','is_api_verified'=>'0','is_insufficiency'=>'1','verification_status'=>'failed','verified_at'=>date('Y-m-d H:i:s')]); 
      
                          $jaf_data=DB::table('jaf_form_data')->where(['id'=>$jaf_form_data_id])->first();


                          $insuff_log_data=[
                                'parent_id'         =>$parent_id,
                                'business_id'       =>$business_id,
                                'coc_id' => $jaf_dl->business_id,
                                'candidate_id' => $candidate_id,
                                'service_id'  => $service_id,
                                'jaf_form_data_id' => $jaf_dl->id,
                                'item_number' => $jaf_dl->check_item_number,
                                'activity_type'=> 'jaf-save',
                                'status'=>'failed',
                                'notes' => 'Auto Check Dl failed',
                                'created_by'   => Auth::user()->id,
                                'user_type'           =>'customer',
                                'created_at'   => date('Y-m-d H:i:s'),
                              ];
                        
                              DB::table('insufficiency_logs')->insert($insuff_log_data);

                              $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf_form_data_id,'service_id'=>$service_id,'status'=>'raised'])->first();

                            if($ver_insuff!=NULL)
                            {
                                $ver_insuff_data=[
                                  'notes' => 'Auto check DL failed',
                                  'updated_by' => Auth::user()->id,
                                  'updated_at' => date('Y-m-d H:i:s')
                                ];

                                DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf_form_data_id,'service_id'=>$service_id,'status'=>'raised'])->update($ver_insuff_data);

                                $ver_id=$ver_insuff->id;
                            }
                            else
                            {
                              $ver_insuff_data=[
                                'parent_id'         =>$parent_id,
                                'business_id'       =>$business_id,
                                'coc_id' => $jaf_data->business_id,
                                'candidate_id' => $candidate_id,
                                'service_id'  => $service_id,
                                'jaf_form_data_id' => $jaf_form_data_id,
                                'item_number' => $jaf_data->check_item_number,
                                'activity_type'=> 'jaf-save',
                                'status'=>'raised',
                                'notes' => 'Auto check DL failed',
                                'created_by'   => Auth::user()->id,
                                'created_at'   => date('Y-m-d H:i:s'),
                              ];
                        
                              $ver_id = DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);
                            }
                            
                            // task assign start
                            $final_users = [];
                            // $j = 0;
                            $job_sla_item = DB::table('job_sla_items')->where(['candidate_id'=>$candidate_id,'service_id'=>$service_id])->first();
              
                            // foreach ($job_sla_items as $job_sla_item) {
                              if ($job_sla_item) {
                                # code...
                            
                                $kam  = KeyAccountManager::where(['business_id'=> $jaf_data->business_id,'is_primary'=>'1'])->first();
                                if ($kam) {
                                  # code...
                                  $task = Task::where(['business_id'=>$jaf_data->business_id,'candidate_id'=>$candidate_id,'service_id'=>$service_id,'is_completed'=>0,'description'=>'Task for Verification'])->first();
                                  $task_id='';
                                  if ($task) {
                                    # code...
                                    $task_id = $task->id;
        
                                      $task->assigned_to= $kam->user_id;
                                      $task->assigned_by =Auth::user()->id;
                                      $task->assigned_at   = date('Y-m-d H:i:s');
                                      $task->start_date    = date('Y-m-d');
                                      $task->save();
                                  
                                  //Change status of old task 
                                    $task_assgn = TaskAssignment::where(['business_id'=>$jaf_data->business_id,'candidate_id'=>$candidate_id,'status'=>"1",'task_id'=>$task_id])->first();
                                    // dd($task_assgn);
                                    if($task_assgn)
                                    {
                                      $task_assgn->user_id= $kam->user_id;
                                      $task_assgn->save();
                                    }
                                
                                  
                                    }
                                  }
                              }
                      }
                  }

              }
              elseif($service_id==8)
              {
                  $jaf_passport = DB::table('jaf_form_data')->select('*')->where(['id'=>$jaf_form_data_id])->first();

                  $file_number="";
                  $dob = "";
                  // $business_id = $jaf_passport->business_id; 
                  $jaf_array = json_decode($jaf_passport->form_data, true);
                  // print_r($jaf_array);
                  foreach($jaf_array as $input){
                      if(array_key_exists('File Number',$input)){
                        $file_number = $input['File Number'];
                      }

                      if(array_key_exists('Date of Birth',$input) ){
                        $dob = $input['Date of Birth'];
                      }
                  }

                //check first into master table
                $master_data = DB::table('passport_check_masters')->select('*')->where(['file_number'=>$file_number])->first();
                if($master_data !=null){
                  $log_data = [
                    'parent_id'         =>$parent_id,
                    'business_id'       =>$business_id,
                    'candidate_id' => $candidate_id,
                    'service_id'        =>$service_id,
                    'source_type'       =>'SystemDb',
                    'api_client_id'     =>$master_data->api_client_id,
                    'passport_number'   =>$master_data->passport_number,
                    'full_name'         =>$master_data->full_name,
                    'file_number'       =>$master_data->file_number,
                    'dob'               => $master_data->dob,
                    'date_of_application'=>$master_data->date_of_application,
                    'is_verified'       =>'1',
                    'is_passport_exist' =>'1',
                    'price'             =>$price,
                    'used_by'           =>'customer',
                    'user_id'            => $user_id,
                    'created_at'        =>date('Y-m-d H:i:s')
                    ];

                    DB::table('passport_checks')->insert($log_data);
                    // update the status
                    DB::table('jaf_form_data')->where(['id'=>$jaf_form_data_id])
                    ->update(['is_api_checked'=>'1','is_api_verified'=>'1','verification_status'=>'success','verified_at'=>date('Y-m-d H:i:s'),'is_insufficiency'=>'0','clear_insuff_notes'=>'Auto Check Passport Cleared','is_all_insuff_cleared' => 1,'insuff_cleared_by'=>Auth::user()->id,'updated_at'=>date('Y-m-d H:i:s')]); 

                    $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf_form_data_id,'service_id'=>$service_id,'status'=>'removed'])->first();

                    if($ver_insuff!=NULL)
                    {
                        $ver_insuff_data=[
                          'notes' => 'Auto Check Passport Cleared',
                          'updated_by' => Auth::user()->id,
                          'updated_at' => date('Y-m-d H:i:s')
                        ];

                        DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf_form_data_id,'service_id'=>$service_id,'status'=>'removed'])->update($ver_insuff_data);

                        $ver_id=$ver_insuff->id;
                    }
                    else
                    {
                      $ver_insuff_data=[
                        'parent_id' => $parent_id,
                        'business_id' => $business_id,
                        'coc_id' => $jaf_passport->business_id,
                        'candidate_id' => $candidate_id,
                        'service_id'  => $jaf_passport->service_id,
                        'jaf_form_data_id' => $jaf_passport->id,
                        'item_number' => $jaf_passport->check_item_number,
                        'activity_type'=> 'jaf-save',
                        'status'=>'removed',
                        'notes' => 'Auto Check Passport Cleared',
                        'created_by'   => Auth::user()->id,
                        'created_at'   => date('Y-m-d H:i:s'),
                      ];
                
                      $ver_id=DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);
                    }

                    $insuff_log_data=[
                      'parent_id'         =>$parent_id,
                      'business_id'       =>$business_id,
                      'coc_id' => $jaf_passport->business_id,
                      'candidate_id' => $candidate_id,
                      'service_id'  => $jaf_passport->service_id,
                      'jaf_form_data_id' => $jaf_passport->id,
                      'item_number' => $jaf_passport->check_item_number,
                      'activity_type'=> 'jaf-save',
                      'status'=>'removed',
                      'notes' => 'Auto check Passport cleared',
                      'created_by'   => Auth::user()->id,
                      'user_type'    =>'customer',
                      'created_at'   => date('Y-m-d H:i:s'),
                    ];
              
                    DB::table('insufficiency_logs')->insert($insuff_log_data);

                    $ver_insuff=DB::table('verification_insufficiency')->where(['id'=>$ver_id])->first();

                    $candidates=DB::table('users as u')
                                ->select('u.*','j.business_id as coc_id','j.id as jaf_id','v.created_at as insuff_clear_date','v.created_by as insuff_clear_by','v.item_number','v.notes','s.verification_type','s.name as service_name','v.business_id as cust_id','v.attachment','v.updated_by','v.updated_at')
                                ->join('jaf_form_data as j','u.id','=','j.candidate_id')
                                ->join('verification_insufficiency as v','v.jaf_form_data_id','=','j.id')
                                ->join('services as s','s.id','=','v.service_id')
                                ->where(['u.user_type'=>'candidate','j.id'=>$jaf_form_data_id,'v.status'=>'removed','v.id'=>$ver_insuff->id])
                                ->first();
        
                    if($candidates!=NULL)
                    {
                      // $client=DB::table('users')->where(['id'=>$candidates->coc_id])->first();
                      // $name = $client->name;
                      // $email = $client->email;
                      // $msg= "Insufficiency Cleared For Candidate";
                      // $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                      // $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);
      
                      // Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email,$name) {
                      //   $message->to($email, $name)->subject
                      //       ('Clobminds Pvt Ltd - Insufficiency Notification');
                      //   $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                      // });

                      $kams = DB::table('key_account_managers')->where(['business_id'=>$candidates->business_id])->get();
                      if(count($kams)>0)
                      {
                        foreach($kams as $kam)
                        {
                            $user_data=DB::table('users')->where(['id'=>$kam->user_id])->first();

                            $name1 = $user_data->name;
                            $email1 = $user_data->email;
                            $msg= "Insufficiency Cleared For Candidate";

                            $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                            $data  = array('name'=>$name1,'email'=>$email1,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);

                            Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email1,$name1) {
                                $message->to($email1, $name1)->subject
                                    ('Clobminds Pvt Ltd - Insufficiency Notification');
                                $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                            });

                        }
                      }

                    }

                }
                else
                {
                    //check from live API
                    // Setup request to send json via POST
                    $data = array(
                        'id_number' => $file_number,
                        'dob'       => date('Y-m-d',strtotime($dob)),
                    );
                    $payload = json_encode($data);
                    $apiURL = "https://kyc-api.aadhaarkyc.io/api/v1/passport/passport/passport-details";
    
                    $ch = curl_init();
                    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);                
                    curl_setopt ($ch, CURLOPT_POST, 1);
                    $authorization = "Authorization: Bearer ".env('SUREPASS_PRODUCTION_TOKEN'); // Prepare the authorisation token
                    curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json' , $authorization )); // Inject the token into the header
                    curl_setopt($ch, CURLOPT_URL, $apiURL);
                    // Attach encoded JSON string to the POST fields
                    curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);
                    $resp = curl_exec ( $ch );
                    curl_close ( $ch );
                    $array_data =  json_decode($resp,true);
                    
                    if($array_data['success'])
                    {
                        //check if ID number is new then insert into DB
                        $checkIDInDB= DB::table('passport_check_masters')->where(['file_number'=>$file_number])->count();
                        if($checkIDInDB ==0)
                        {
                            
                            $data = [
                                    'api_client_id'     =>$array_data['data']['client_id'],
                                    'passport_number'   =>$array_data['data']['passport_number'],
                                    'full_name'         =>$array_data['data']['full_name'],
                                    'file_number'       =>$array_data['data']['file_number'],
                                    'date_of_application'=>$array_data['data']['date_of_application'],
                                    'is_api_verified'       =>'1',
                                    'is_passport_exist' =>'1',
                                    'created_at'        =>date('Y-m-d H:i:s')
                                    ];
    
                            DB::table('passport_check_masters')->insert($data);
                            
                            $master_data = DB::table('passport_check_masters')->select('*')->where(['file_number'=>$file_number])->first();
    
                            $log_data = [
                              'parent_id'         =>$parent_id,
                              'business_id'       =>$business_id,
                              'candidate_id' => $candidate_id,
                              'service_id'        =>$service_id,
                              'source_type'       =>'API',
                              'api_client_id'     =>$master_data->api_client_id,
                              'passport_number'   =>$master_data->passport_number,
                              'full_name'         =>$master_data->full_name,
                              'file_number'       =>$master_data->file_number,
                              'dob'               => $master_data->dob,
                              'date_of_application'=>$master_data->date_of_application,
                              'is_verified'       =>'1',
                              'is_passport_exist' =>'1',
                              'price'             =>$price,
                              'used_by'           =>'customer',
                              'user_id'            => Auth::user()->id,
                              'created_at'        =>date('Y-m-d H:i:s')
                              ];
          
                          DB::table('passport_checks')->insert($log_data);
                        }
                        // update the status
                        DB::table('jaf_form_data')->where(['id'=>$jaf_form_data_id])
                        ->update(['is_api_checked'=>'1','is_api_verified'=>'1','verification_status'=>'success','verified_at'=>date('Y-m-d H:i:s'),'is_insufficiency'=>'0','clear_insuff_notes'=>'Auto Check Passport Cleared','is_all_insuff_cleared' => 1,'insuff_cleared_by'=>Auth::user()->id,'updated_at'=>date('Y-m-d H:i:s')]); 
                        $is_updated=TRUE;

                        $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf_form_data_id,'service_id'=>$service_id,'status'=>'removed'])->first();

                        if($ver_insuff!=NULL)
                        {
                            $ver_insuff_data=[
                              'notes' => 'Auto Check Passport Cleared',
                              'updated_by' => Auth::user()->id,
                              'updated_at' => date('Y-m-d H:i:s')
                            ];

                            DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf_form_data_id,'service_id'=>$service_id,'status'=>'removed'])->update($ver_insuff_data);

                            $ver_id=$ver_insuff->id;
                        }
                        else
                        {
                          $ver_insuff_data=[
                            'parent_id'         =>$parent_id,
                            'business_id'       =>$business_id,
                            'coc_id' => $jaf_passport->business_id,
                            'candidate_id' => $candidate_id,
                            'service_id'  => $service_id,
                            'jaf_form_data_id' => $jaf_passport->id,
                            'item_number' => $jaf_passport->check_item_number,
                            'activity_type'=> 'jaf-save',
                            'status'=>'removed',
                            'notes' => 'Auto Check Passport Cleared',
                            'created_by'   => Auth::user()->id,
                            'created_at'   => date('Y-m-d H:i:s'),
                          ];
                    
                          $ver_id=DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);
                        }

                        $insuff_log_data=[
                          'parent_id'         =>$parent_id,
                          'business_id'       =>$business_id,
                          'coc_id' => $jaf_passport->business_id,
                          'candidate_id' => $candidate_id,
                          'service_id'  => $service_id,
                          'jaf_form_data_id' => $jaf_passport->id,
                          'item_number' => $jaf_passport->check_item_number,
                          'activity_type'=> 'jaf-save',
                          'status'=>'removed',
                          'notes' => 'Auto Check Passport Cleared',
                          'created_by'   => Auth::user()->id,
                          'user_type'           =>'customer',
                          'created_at'   => date('Y-m-d H:i:s'),
                        ];
                  
                        DB::table('insufficiency_logs')->insert($insuff_log_data);


                        $task = Task::where(['business_id'=> $jaf_data->business_id,'service_id'=>$service_id,'candidate_id'=>$candidate_id,'is_completed'=>0,'description'=>'Task for Verification'])->first();
                        $task_id='';
                        if ($task) {
                          # code...
                          $task_id = $task->id;

                            $task->is_completed= 1;
                            $task->save();
                        
                        //Change status of old task 
                        $task_assgn = TaskAssignment::where(['business_id'=> $jaf_data->business_id,'candidate_id'=>$candidate_id,'status'=>"1",'task_id'=>$task_id])->first();
                        // dd($task_assgn);
                        if($task_assgn)
                        {
                          $task_assgn->status= '2';
                          $task_assgn->save();
                        }
                      }
    
                        $ver_insuff=DB::table('verification_insufficiency')->where(['id'=>$ver_id])->first();
    
                        $candidates=DB::table('users as u')
                            ->select('u.*','j.business_id as coc_id','j.id as jaf_id','v.created_at as insuff_clear_date','v.created_by as insuff_clear_by','v.item_number','v.notes','s.verification_type','s.name as service_name','v.business_id as cust_id','v.attachment','v.updated_at','v.updated_by')
                            ->join('jaf_form_data as j','u.id','=','j.candidate_id')
                            ->join('verification_insufficiency as v','v.jaf_form_data_id','=','j.id')
                            ->join('services as s','s.id','=','v.service_id')
                            ->where(['u.user_type'=>'candidate','j.id'=>$jaf_form_data_id,'v.status'=>'removed','v.id'=>$ver_insuff->id])
                            ->first();
    
                        if($candidates!=NULL)
                        {
                          // $client=DB::table('users')->where(['id'=>$candidates->coc_id])->first();
                          // $name = $client->name;
                          // $email = $client->email;
                          // $msg= "Insufficiency Cleared For Candidate";
                          // $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                          // $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);
          
                          // Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email,$name) {
                          //   $message->to($email, $name)->subject
                          //       ('Clobminds Pvt Ltd - Insufficiency Notification');
                          //   $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                          // });
    
                          $kams = DB::table('key_account_managers')->where(['business_id'=>$candidates->business_id])->get();
                          if(count($kams)>0)
                          {
                            foreach($kams as $kam)
                            {
                                $user_data=DB::table('users')->where(['id'=>$kam->user_id])->first();
    
                                $name1 = $user_data->name;
                                $email1 = $user_data->email;
                                $msg= "Insufficiency Cleared For Candidate";
                                $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                                $data  = array('name'=>$name1,'email'=>$email1,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);
    
                                Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email1,$name1) {
                                    $message->to($email1, $name1)->subject
                                        ('Clobminds Pvt Ltd - Insufficiency Notification');
                                    $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                                });
    
                            }
                          }
    
                        }
    
                        
                    }
                    else
                    {
                        //update insuff
                        DB::table('jaf_form_data')->where(['id'=>$jaf_form_data_id])->update(['is_api_checked'=>'1','is_api_verified'=>'0','is_insufficiency'=>'1','verification_status'=>'failed','verified_at'=>date('Y-m-d H:i:s')]); 
    
                        $jaf_data=DB::table('jaf_form_data')->where(['id'=>$jaf_form_data_id])->first();
                        $insuff_log_data=[
                          'parent_id'         =>$parent_id,
                          'business_id'       =>$business_id,
                          'coc_id' => $jaf_data->business_id,
                          'candidate_id' => $candidate_id,
                          'service_id'  => $service_id,
                          'jaf_form_data_id' => $jaf_data->id,
                          'item_number' => $jaf_data->check_item_number,
                          'activity_type'=> 'jaf-save',
                          'status'=>'failed',
                          'notes' => 'Auto Check Passport Failed',
                          'created_by'   => Auth::user()->id,
                          'user_type'           =>'customer',
                          'created_at'   => date('Y-m-d H:i:s'),
                        ];
                  
                        DB::table('insufficiency_logs')->insert($insuff_log_data);

                        $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf_form_data_id,'service_id'=>$service_id,'status'=>'raised'])->first();

                          if($ver_insuff!=NULL)
                          {
                              $ver_insuff_data=[
                                'notes' => 'Auto check Passport failed',
                                'updated_by' => Auth::user()->id,
                                'updated_at' => date('Y-m-d H:i:s')
                              ];

                              DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf_form_data_id,'service_id'=>$service_id,'status'=>'raised'])->update($ver_insuff_data);

                              $ver_id=$ver_insuff->id;
                          }
                          else
                          {
                            $ver_insuff_data=[
                              'parent_id'         =>$parent_id,
                              'business_id'       =>$business_id,
                              'coc_id' => $jaf_data->business_id,
                              'candidate_id' => $candidate_id,
                              'service_id'  => $service_id,
                              'jaf_form_data_id' => $jaf_form_data_id,
                              'item_number' => $jaf_data->check_item_number,
                              'activity_type'=> 'jaf-save',
                              'status'=>'raised',
                              'notes' => 'Auto check Passport failed',
                              'created_by'   => Auth::user()->id,
                              'created_at'   => date('Y-m-d H:i:s'),
                            ];
                      
                            $ver_id = DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);
                          }
                          
                          // task assign start
                          $final_users = [];
                          // $j = 0;
                          $job_sla_item = DB::table('job_sla_items')->where(['candidate_id'=>$candidate_id,'service_id'=>$service_id])->first();
            
                          // foreach ($job_sla_items as $job_sla_item) {
                            if ($job_sla_item) {
                              # code...
                          
                              $kam  = KeyAccountManager::where(['business_id'=> $jaf_data->business_id,'is_primary'=>'1'])->first();
                              if ($kam) {
                                # code...
                              
                                $task = Task::where(['business_id'=>$jaf_data->business_id,'candidate_id'=>$candidate_id,'service_id'=>$service_id,'is_completed'=>0,'description'=>'Task for Verification'])->first();
                                $task_id='';
                                if ($task) {
                                  # code...
                                  $task_id = $task->id;
      
                                    $task->assigned_to= $kam->user_id;
                                    $task->assigned_by =Auth::user()->id;
                                    $task->assigned_at   = date('Y-m-d H:i:s');
                                    $task->start_date    = date('Y-m-d');
                                    $task->save();
                                
                                //Change status of old task 
                                  $task_assgn = TaskAssignment::where(['business_id'=>$jaf_data->business_id,'candidate_id'=>$candidate_id,'status'=>"1",'task_id'=>$task_id])->first();
                                  // dd($task_assgn);
                                  if($task_assgn)
                                  {
                                    $task_assgn->user_id= $kam->user_id;
                                    $task_assgn->save();
                                  }
                                
                                  }
                                }
                            }
                    }
                }

              }
              elseif($service_id==12)
              {
                $jaf_bank = DB::table('jaf_form_data')->select('*')->where(['id'=>$jaf_form_data_id])->first();

                // $passport_file_no = $request->input('id_number');
                $account_no="";
                $ifsc_code = "";
                // $business_id = $jaf_bank->business_id; 
                $jaf_array = json_decode($jaf_bank->form_data, true);
                // print_r($jaf_array);
                  foreach($jaf_array as $input){
                      if(array_key_exists('Account Number',$input)){
                        $account_no = $input['Account Number'];
                      }
    
                      if(array_key_exists('IFSC Code',$input) ){
                        $ifsc_code = $input['IFSC Code'];
                      }
                  }

                  $master_data = DB::table('bank_account_check_masters')->select('*')->where(['account_number'=>$account_no,'ifsc_code'=>$ifsc_code])->first();
                  if($master_data !=null){
                    $log_data = [
                      'parent_id'         =>$parent_id,
                      'business_id'       =>$business_id,
                      'service_id'        =>$service_id,
                      'candidate_id' => $candidate_id,
                      'source_type'       =>'SystemDb',
                      'api_client_id'     =>$master_data->api_client_id,
                      'account_number'    =>$master_data->account_number,
                      'full_name'         =>$master_data->full_name,
                      'ifsc_code'         =>$master_data->ifsc_code,
                      'is_verified'       =>'1',
                      'is_account_exist' =>'1',
                      'price'             =>$price,
                      'used_by'           =>'customer',
                      'user_id'            => $user_id,
                      'created_at'        =>date('Y-m-d H:i:s')
                      ];

                    DB::table('bank_account_checks')->insert($log_data);

                    DB::table('jaf_form_data')->where(['id'=>$jaf_form_data_id])
                                            ->update(['is_api_checked'=>'1','is_api_verified'=>'1','verification_status'=>'success','verified_at'=>date('Y-m-d H:i:s'),'is_insufficiency'=>'0','clear_insuff_notes'=>'Auto Check Bank Cleared','is_all_insuff_cleared' => 1,'insuff_cleared_by'=>Auth::user()->id,'updated_at'=>date('Y-m-d H:i:s')]); 

                    $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf_form_data_id,'service_id'=>$service_id,'status'=>'removed'])->first();

                    if($ver_insuff!=NULL)
                    {
                      $ver_insuff_data=[
                        'notes' => 'Auto check Bank cleared',
                        'updated_by' => Auth::user()->id,
                        'updated_at' => date('Y-m-d H:i:s')
                      ];

                      DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf_form_data_id,'service_id'=>$service_id,'status'=>'removed'])->update($ver_insuff_data);

                      $ver_id=$ver_insuff->id;
                    }
                    else
                    {
                        $ver_insuff_data=[
                          'parent_id'         =>$parent_id,
                          'business_id'       =>$business_id,
                          'coc_id' => $jaf_bank->business_id,
                          'candidate_id' => $candidate_id,
                          'service_id'  => $service_id,
                          'jaf_form_data_id' => $jaf_bank->id,
                          'item_number' => $jaf_bank->check_item_number,
                          'activity_type'=> 'jaf-save',
                          'status'=>'removed',
                          'notes' => 'Auto check Bank cleared',
                          'created_by'   => Auth::user()->id,
                          'created_at'   => date('Y-m-d H:i:s'),
                          'updated_at' => date('Y-m-d H:i:s')
                        ];
                  
                        $ver_id=DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);
                    }

                    $insuff_log_data=[
                      'parent_id'         =>$parent_id,
                      'business_id'       =>$business_id,
                      'coc_id' => $jaf_bank->business_id,
                      'candidate_id' => $candidate_id,
                      'service_id'  => $jaf_bank->service_id,
                      'jaf_form_data_id' => $jaf_bank->id,
                      'item_number' => $jaf_bank->check_item_number,
                      'activity_type'=> 'jaf-save',
                      'status'=>'removed',
                      'notes' => 'Auto check Bank cleared',
                      'created_by'   => Auth::user()->id,
                      'user_type'    =>'customer',
                      'created_at'   => date('Y-m-d H:i:s'),
                    ];
              
                    DB::table('insufficiency_logs')->insert($insuff_log_data);

                    $ver_insuff=DB::table('verification_insufficiency')->where(['id'=>$ver_id])->first();

                    $candidates=DB::table('users as u')
                              ->select('u.*','j.business_id as coc_id','j.id as jaf_id','v.created_at as insuff_clear_date','v.created_by as insuff_clear_by','v.item_number','v.notes','s.verification_type','s.name as service_name','v.business_id as cust_id','v.attachment','v.updated_by','v.updated_at')
                              ->join('jaf_form_data as j','u.id','=','j.candidate_id')
                              ->join('verification_insufficiency as v','v.jaf_form_data_id','=','j.id')
                              ->join('services as s','s.id','=','v.service_id')
                              ->where(['u.user_type'=>'candidate','j.id'=>$jaf_form_data_id,'v.status'=>'removed','v.id'=>$ver_insuff->id])
                              ->first();
      
                    if($candidates!=NULL)
                    {
                      // $client=DB::table('users')->where(['id'=>$candidates->coc_id])->first();
                      // $name = $client->name;
                      // $email = $client->email;
                      // $msg= "Insufficiency Cleared For Candidate";
                      // $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                      // $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);
      
                      // Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email,$name) {
                      //   $message->to($email, $name)->subject
                      //       ('Clobminds Pvt Ltd - Insufficiency Notification');
                      //   $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                      // });

                      $kams = DB::table('key_account_managers')->where(['business_id'=>$candidates->business_id])->get();
                      if(count($kams)>0)
                      {
                        foreach($kams as $kam)
                        {
                            $user_data=DB::table('users')->where(['id'=>$kam->user_id])->first();

                            $name1 = $user_data->name;
                            $email1 = $user_data->email;
                            $msg= "Insufficiency Cleared For Candidate";
                            $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                            
                            $data  = array('name'=>$name1,'email'=>$email1,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);

                            Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email1,$name1) {
                                $message->to($email1, $name1)->subject
                                    ('Clobminds Pvt Ltd - Insufficiency Notification');
                                $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                            });

                        }
                      }

                    }

                  }
                  else
                  {
                    //check from live API
                    // Setup request to send json via POST
                    $data = array(
                      'id_number' => $account_no,
                      'ifsc'      => $ifsc_code,
                      );
                      $payload = json_encode($data);
                      $apiURL = "https://kyc-api.aadhaarkyc.io/api/v1/bank-verification/";
    
                      $ch = curl_init();
                      curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);                
                      curl_setopt ($ch, CURLOPT_POST, 1);
                      $authorization = "Authorization: Bearer ".env('SUREPASS_PRODUCTION_TOKEN'); // Prepare the authorisation token
                      curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json' , $authorization )); // Inject the token into the header
                      curl_setopt($ch, CURLOPT_URL, $apiURL);
                      // Attach encoded JSON string to the POST fields
                      curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);
                      $resp = curl_exec ( $ch );
                      curl_close ( $ch );
                      $array_data =  json_decode($resp,true);
                      // var_dump($resp); die;
                      if($array_data['success'])
                      {
                        //check if ID number is new then insert into DB
                        $checkIDInDB= DB::table('bank_account_check_masters')->where(['account_number'=>$account_no,'ifsc_code'=>$ifsc_code])->count();
                        if($checkIDInDB ==0)
                        {
                            
                            $data = [
                                    'api_client_id'     =>$array_data['data']['client_id'],
                                    'account_number'    =>$account_no,
                                    'full_name'         =>$array_data['data']['full_name'],
                                    'ifsc_code'         =>$ifsc_code,
                                    'is_verified'       =>'1',
                                    'is_account_exist' =>'1',
                                    'created_at'        =>date('Y-m-d H:i:s')
                                    ];
    
                            DB::table('bank_account_check_masters')->insert($data);
                            
                            $master_data = DB::table('bank_account_check_masters')->select('*')->where(['account_number'=>$account_no])->first();
    
                            $log_data = [
                              'parent_id'         =>$parent_id,
                              'business_id'       =>$business_id,
                              'service_id'        =>$service_id,
                              'candidate_id' => $candidate_id,
                              'source_type'       =>'API',
                              'api_client_id'     =>$master_data->api_client_id,
                              'account_number'    =>$master_data->account_number,
                              'full_name'         =>$master_data->full_name,
                              'ifsc_code'         =>$master_data->ifsc_code,
                              'is_verified'       =>'1',
                              'is_account_exist' =>'1',
                              'price'             =>$price,
                              'used_by'           =>'customer',
                              'user_id'            => Auth::user()->id,
                              'created_at'        =>date('Y-m-d H:i:s')
                              ];
          
                          DB::table('bank_account_checks')->insert($log_data);
                        }
                        // update the status
                        DB::table('jaf_form_data')->where(['id'=>$jaf_form_data_id])
                                            ->update(['is_api_checked'=>'1','is_api_verified'=>'1','verification_status'=>'success','verified_at'=>date('Y-m-d H:i:s'),'is_insufficiency'=>'0','clear_insuff_notes'=>'Auto Check Bank Cleared','is_all_insuff_cleared' => 1,'insuff_cleared_by'=>Auth::user()->id,'updated_at'=>date('Y-m-d H:i:s')]); 
                        $is_updated=TRUE;

                        $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf_form_data_id,'service_id'=>$service_id,'status'=>'removed'])->first();
                        if($ver_insuff!=NULL)
                        {
                            $ver_insuff_data=[
                              'notes' => 'Auto Check Bank Cleared',
                              'updated_by' => Auth::user()->id,
                              'updated_at' => date('Y-m-d H:i:s')
                            ];

                            DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf_form_data_id,'service_id'=>$service_id,'status'=>'removed'])->update($ver_insuff_data);

                            $ver_id=$ver_insuff->id;
                        }
                        else
                        {
                          $ver_insuff_data=[
                            'parent_id'         =>$parent_id,
                            'business_id'       =>$business_id,
                            'coc_id' => $jaf_bank->business_id,
                            'candidate_id' => $candidate_id,
                            'service_id'  => $service_id,
                            'jaf_form_data_id' => $jaf_bank->id,
                            'item_number' => $jaf_bank->check_item_number,
                            'activity_type'=> 'jaf-save',
                            'status'=>'removed',
                            'notes' => 'Auto Check Bank Cleared',
                            'created_by'   => Auth::user()->id,
                            'created_at'   => date('Y-m-d H:i:s'),
                          ];

                          $ver_id=DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);
                        }
                        
                        $insuff_log_data=[
                          'parent_id'         =>$parent_id,
                          'business_id'       =>$business_id,
                          'coc_id' => $jaf_bank->business_id,
                          'candidate_id' => $candidate_id,
                          'service_id'  => $service_id,
                          'jaf_form_data_id' => $jaf_bank->id,
                          'item_number' => $jaf_bank->check_item_number,
                          'activity_type'=> 'jaf-save',
                          'status'=>'removed',
                          'notes' => 'Auto Check Bank Cleared',
                          'created_by'   => Auth::user()->id,
                          'user_type'           =>'customer',
                          'created_at'   => date('Y-m-d H:i:s'),
                        ];
                  
                        DB::table('insufficiency_logs')->insert($insuff_log_data);
                      
                        $task = Task::where(['business_id'=> $jaf_data->business_id,'service_id'=>$service_id,'candidate_id'=>$candidate_id,'is_completed'=>0,'description'=>'Task for Verification'])->first();
                        $task_id='';
                        if ($task) {
                          # code...
                          $task_id = $task->id;

                            $task->is_completed= 1;
                            $task->save();
                        
                          //Change status of old task 
                          $task_assgn = TaskAssignment::where(['business_id'=> $jaf_data->business_id,'candidate_id'=>$candidate_id,'status'=>"1",'task_id'=>$task_id])->first();
                          // dd($task_assgn);
                          if($task_assgn)
                          {
                            $task_assgn->status= '2';
                            $task_assgn->save();
                          }
                        }

                        $ver_insuff=DB::table('verification_insufficiency')->where(['id'=>$ver_id])->first();
    
                        $candidates=DB::table('users as u')
                            ->select('u.*','j.business_id as coc_id','j.id as jaf_id','v.created_at as insuff_clear_date','v.created_by as insuff_clear_by','v.item_number','v.notes','s.verification_type','s.name as service_name','v.business_id as cust_id','v.attachment','v.updated_at','v.updated_by')
                            ->join('jaf_form_data as j','u.id','=','j.candidate_id')
                            ->join('verification_insufficiency as v','v.jaf_form_data_id','=','j.id')
                            ->join('services as s','s.id','=','v.service_id')
                            ->where(['u.user_type'=>'candidate','j.id'=>$jaf_form_data_id,'v.status'=>'removed','v.id'=>$ver_insuff->id])
                            ->first();
    
                        if($candidates!=NULL)
                        {
                          // $client=DB::table('users')->where(['id'=>$candidates->coc_id])->first();
                          // $name = $client->name;
                          // $email = $client->email;
                          // $msg= "Insufficiency Cleared For Candidate";
                          // $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                          // $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);
          
                          // Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email,$name) {
                          //   $message->to($email, $name)->subject
                          //       ('Clobminds Pvt Ltd - Insufficiency Notification');
                          //   $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                          // });
    
                          $kams = DB::table('key_account_managers')->where(['business_id'=>$candidates->business_id])->get();
                          if(count($kams)>0)
                          {
                            foreach($kams as $kam)
                            {
                                $user_data=DB::table('users')->where(['id'=>$kam->user_id])->first();
    
                                $name1 = $user_data->name;
                                $email1 = $user_data->email;
                                $msg= "Insufficiency Cleared For Candidate";
                                $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                                $data  = array('name'=>$name1,'email'=>$email1,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);
    
                                Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email1,$name1) {
                                    $message->to($email1, $name1)->subject
                                        ('Clobminds Pvt Ltd - Insufficiency Notification');
                                    $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                                });
    
                            }
                          }
    
                        }
    
                      }
                      else
                      {
                        //update insuff
    
                        DB::table('jaf_form_data')->where(['id'=>$jaf_form_data_id])->update(['is_api_checked'=>'1','is_api_verified'=>'0','is_insufficiency'=>'1','verification_status'=>'failed','verified_at'=>date('Y-m-d H:i:s')]); 
    
                        $jaf_data=DB::table('jaf_form_data')->where(['id'=>$jaf_form_data_id])->first();
                        $insuff_log_data=[
                          'parent_id'         =>$parent_id,
                          'business_id'       =>$business_id,
                          'coc_id' => $jaf_bank->business_id,
                          'candidate_id' => $candidate_id,
                          'service_id'  => $service_id,
                          'jaf_form_data_id' => $jaf_bank->id,
                          'item_number' => $jaf_bank->check_item_number,
                          'activity_type'=> 'jaf-save',
                          'status'=>'failed',
                          'notes' => 'Auto check Bank failed',
                          'created_by'   => Auth::user()->id,
                          'user_type'           =>'customer',
                          'created_at'   => date('Y-m-d H:i:s'),
                        ];
                  
                        DB::table('insufficiency_logs')->insert($insuff_log_data);

                        $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf_form_data_id,'service_id'=>$service_id,'status'=>'raised'])->first();

                        if($ver_insuff!=NULL)
                        {
                            $ver_insuff_data=[
                              'notes' => 'Auto check bank failed',
                              'updated_by' => Auth::user()->id,
                              'updated_at' => date('Y-m-d H:i:s')
                            ];

                            DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf_form_data_id,'service_id'=>$service_id,'status'=>'raised'])->update($ver_insuff_data);

                            $ver_id=$ver_insuff->id;
                        }
                        else
                        {
                          $ver_insuff_data=[
                            'parent_id'         =>$parent_id,
                            'business_id'       =>$business_id,
                            'coc_id' => $jaf_data->business_id,
                            'candidate_id' => $candidate_id,
                            'service_id'  => $service_id,
                            'jaf_form_data_id' => $jaf_form_data_id,
                            'item_number' => $jaf_data->check_item_number,
                            'activity_type'=> 'jaf-save',
                            'status'=>'raised',
                            'notes' => 'Auto check bank failed',
                            'created_by'   => Auth::user()->id,
                            'created_at'   => date('Y-m-d H:i:s'),
                          ];
                    
                          $ver_id = DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);
                        }
                         
                         // task assign start
                         $final_users = [];
                         // $j = 0;
                         $job_sla_item = DB::table('job_sla_items')->where(['candidate_id'=>$candidate_id,'service_id'=>$service_id])->first();
           
                         // foreach ($job_sla_items as $job_sla_item) {
                           if ($job_sla_item) {
                             # code...
                         
                             $kam  = KeyAccountManager::where(['business_id'=> $jaf_data->business_id,'is_primary'=>'1'])->first();
                             if ($kam) {
                               # code...
                            
                               $task = Task::where(['business_id'=>$jaf_data->business_id,'candidate_id'=>$candidate_id,'service_id'=>$service_id,'is_completed'=>0,'description'=>'Task for Verification'])->first();
                               $task_id='';
                               if ($task) {
                                 # code...
                                 $task_id = $task->id;
     
                                   $task->assigned_to= $kam->user_id;
                                   $task->assigned_by =Auth::user()->id;
                                   $task->assigned_at   = date('Y-m-d H:i:s');
                                   $task->start_date    = date('Y-m-d');
                                   $task->save();
                               
                               //Change status of old task 
                                 $task_assgn = TaskAssignment::where(['business_id'=>$jaf_data->business_id,'candidate_id'=>$candidate_id,'status'=>"1",'task_id'=>$task_id])->first();
                                 // dd($task_assgn);
                                 if($task_assgn)
                                 {
                                   $task_assgn->user_id= $kam->user_id;
                                   $task_assgn->save();
                                 }
                               
                                 }
                            }
                           }
                      }
                  }
              }
              elseif($serviceId->type_name == 'cin')
              {

                $jaf_cin = DB::table('jaf_form_data')->select('*')->where(['id'=>$jaf_form_data_id])->first();
          
                $jaf_array = json_decode($jaf_cin->form_data, true);
                //print_r($jaf_array);
                $ciin_number ="";
                foreach($jaf_array as $input){
                    if(array_key_exists('CIN Number',$input)){
                      $ciin_number = $input['CIN Number'];
                    }
                }
              
                $api_check_status = false;
                // Setup request to send json via POST
                $data = array(
                    'id_number'    => $ciin_number,
                );
                //dd($data);
                $payload = json_encode($data);
                $apiURL = "https://kyc-api.aadhaarkyc.io/api/v1/corporate/company-details";
  
                $ch = curl_init();
                curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);                
                curl_setopt ($ch, CURLOPT_POST, 1);
                $token_key = env('SUREPASS_PRODUCTION_TOKEN');
                curl_setopt($ch, CURLOPT_HTTPHEADER, array('Authorization: Bearer '.$token_key, 'Content-Type: application/json'));
                curl_setopt($ch, CURLOPT_URL, $apiURL);
                curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);
                $resp = curl_exec ( $ch );
                $response_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
                curl_close ( $ch );
                $array_data =  json_decode($resp,true);
               
                // var_dump($resp); die;
                if($array_data['success'])
                {
                  $data = 
                  [
                    'parent_id'                 => $parent_id,
                    'business_id'               => $business_id,
                    'cin_number'                => $array_data['data']['details']['company_info']['cin'],
                    'registration_number'       => $array_data['data']['details']['company_info']['registration_number'],
                    'company_name'              => $array_data['data']['company_name'],
                    'registered_address'        =>$array_data['data']['details']['company_info']['registered_address'],
                    'date_of_incorporation'     =>$array_data['data']['details']['company_info']['date_of_incorporation']!=NULL ? date('Y-m-d',strtotime($array_data['data']['details']['company_info']['date_of_incorporation'])) : NULL,
                    'email_id'                  =>$array_data['data']['details']['company_info']['email_id'],
                    'paid_up_capital_in_rupees' =>$array_data['data']['details']['company_info']['paid_up_capital'],
                    'authorised_capital'        =>$array_data['data']['details']['company_info']['authorized_capital'],
                    'company_category'          =>$array_data['data']['details']['company_info']['company_category'],
                    'company_subcategory'       =>$array_data['data']['details']['company_info']['company_sub_category'],
                    //'company_class'             =>$array_data['data']['details']['company_info']['company_class'],
                    //'whether_company_is_listed' =>$array_data['data']['details']['company_info']['whether_company_is_listed'],
                    //'company_efilling_status'   =>$array_data['data']['details']['company_info']['company_efilling_status'],
                    'date_of_last_AGM'          =>$array_data['data']['details']['company_info']['last_agm_date']!=NULL ? date('Y-m-d',strtotime($array_data['data']['details']['company_info']['last_agm_date'])) : NULL,
                    //'date_of_balance_sheet'     =>$array_data['data']['details']['company_info']['date_of_balance_sheet']!=NULL ? date('Y-m-d',strtotime($array_data['data']['details']['company_info']['date_of_balance_sheet'])) : NULL,
                    //'another_maintained_address' =>$array_data['data']['details']['company_info']['another_maintained_address'],
                    'directors'                => $array_data['data']['details']['directors']!=NULL && count($array_data['data']['details']['directors']) > 0 ? json_encode($array_data['data']['details']['directors']) : NULL,
                    'created_by'                => $user_id,
                    'created_at'                =>date('Y-m-d H:i:s')
                  ];
                  // dd($data);
                  DB::table('cin_check_masters')->insert($data);
                  $master_data = DB::table('cin_check_masters')->select('*')->where(['cin_number'=>$ciin_number])->latest()->first();
                  
                  //insert into business table
                  $cin_data = 
                  [
                    'parent_id'         =>$parent_id,
                    'business_id'       =>$business_id,
                    'service_id'         => $serviceId->id,
                    'source_type'       =>'API',
                    'cin_number'                => $array_data['data']['details']['company_info']['cin'],
                    'registration_number'       => $array_data['data']['details']['company_info']['registration_number'],
                    'company_name'              => $array_data['data']['company_name'],
                    'registered_address'        =>$array_data['data']['details']['company_info']['registered_address'],
                    'date_of_incorporation'     =>$array_data['data']['details']['company_info']['date_of_incorporation']!=NULL ? date('Y-m-d',strtotime($array_data['data']['details']['company_info']['date_of_incorporation'])) : NULL,
                    'email_id'                  =>$array_data['data']['details']['company_info']['email_id'],
                    'paid_up_capital_in_rupees' =>$array_data['data']['details']['company_info']['paid_up_capital'],
                    'authorised_capital'        =>$array_data['data']['details']['company_info']['authorized_capital'],
                    'company_category'          =>$array_data['data']['details']['company_info']['company_category'],
                    'company_subcategory'       =>$array_data['data']['details']['company_info']['company_sub_category'],
                    'date_of_last_AGM'          =>$array_data['data']['details']['company_info']['last_agm_date']!=NULL ? date('Y-m-d',strtotime($array_data['data']['details']['company_info']['last_agm_date'])) : NULL,
                    'directors'                 =>$array_data['data']['details']['directors']!=NULL && count($array_data['data']['details']['directors']) > 0 ? json_encode($array_data['data']['details']['directors']) : NULL,
                    'is_verified'                =>'1',
                    'price'                     =>$price,
                    'user_type'                   =>'customer',
                    'user_id'                     =>$user_id,
                    'created_at'                  =>date('Y-m-d H:i:s')
                  ];
                  // dd($cin_data);
                  DB::table('cin_checks')->insert($cin_data);

                  DB::table('jaf_form_data')->where(['id'=>$jaf_form_data_id])
                                      ->update(['is_api_checked'=>'1','is_api_verified'=>'1','verification_status'=>'success','verified_at'=>date('Y-m-d H:i:s'),'is_insufficiency'=>'0','clear_insuff_notes'=>'Auto Check CIN Cleared','is_all_insuff_cleared' => 1,'insuff_cleared_by'=>Auth::user()->id,'updated_at'=>date('Y-m-d H:i:s')]); 
                  $is_updated=TRUE;

                  $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf_form_data_id,'service_id'=>$service_id,'status'=>'removed'])->first();
                  if($ver_insuff!=NULL)
                  {
                      $ver_insuff_data=[
                        'notes' => 'Auto Check CIN Cleared',
                        'updated_by' => Auth::user()->id,
                        'updated_at' => date('Y-m-d H:i:s')
                      ];

                      DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf_form_data_id,'service_id'=>$service_id,'status'=>'removed'])->update($ver_insuff_data);

                      $ver_id=$ver_insuff->id;
                  }
                  else
                  {
                    $ver_insuff_data=[
                      'parent_id'         =>$parent_id,
                      'business_id'       =>$business_id,
                      'coc_id' => $jaf_cin->business_id,
                      'candidate_id' => $candidate_id,
                      'service_id'  => $service_id,
                      'jaf_form_data_id' => $jaf_cin->id,
                      'item_number' => $jaf_cin->check_item_number,
                      'activity_type'=> 'jaf-save',
                      'status'=>'removed',
                      'notes' => 'Auto Check CIN Cleared',
                      'created_by'   => Auth::user()->id,
                      'created_at'   => date('Y-m-d H:i:s'),
                    ];

                    $ver_id=DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);
                  }
                  
                  $insuff_log_data=[
                    'parent_id'         =>$parent_id,
                    'business_id'       =>$business_id,
                    'coc_id' => $jaf_cin->business_id,
                    'candidate_id' => $candidate_id,
                    'service_id'  => $service_id,
                    'jaf_form_data_id' => $jaf_cin->id,
                    'item_number' => $jaf_cin->check_item_number,
                    'activity_type'=> 'jaf-save',
                    'status'=>'removed',
                    'notes' => 'Auto Check CIN Cleared',
                    'created_by'   => Auth::user()->id,
                    'user_type'           =>'customer',
                    'created_at'   => date('Y-m-d H:i:s'),
                  ];
            
                  DB::table('insufficiency_logs')->insert($insuff_log_data);
                
                  $task = Task::where(['business_id'=> $jaf_data->business_id,'service_id'=>$service_id,'candidate_id'=>$candidate_id,'is_completed'=>0,'description'=>'Task for Verification'])->first();
                  $task_id='';
                  if ($task) {
                    # code...
                    $task_id = $task->id;

                      $task->is_completed= 1;
                      $task->save();
                  
                    //Change status of old task 
                    $task_assgn = TaskAssignment::where(['business_id'=> $jaf_data->business_id,'candidate_id'=>$candidate_id,'status'=>"1",'task_id'=>$task_id])->first();
                    // dd($task_assgn);
                    if($task_assgn)
                    {
                      $task_assgn->status= '2';
                      $task_assgn->save();
                    }
                  }

                  $ver_insuff=DB::table('verification_insufficiency')->where(['id'=>$ver_id])->first();

                  $candidates=DB::table('users as u')
                      ->select('u.*','j.business_id as coc_id','j.id as jaf_id','v.created_at as insuff_clear_date','v.created_by as insuff_clear_by','v.item_number','v.notes','s.verification_type','s.name as service_name','v.business_id as cust_id','v.attachment','v.updated_at','v.updated_by')
                      ->join('jaf_form_data as j','u.id','=','j.candidate_id')
                      ->join('verification_insufficiency as v','v.jaf_form_data_id','=','j.id')
                      ->join('services as s','s.id','=','v.service_id')
                      ->where(['u.user_type'=>'candidate','j.id'=>$jaf_form_data_id,'v.status'=>'removed','v.id'=>$ver_insuff->id])
                      ->first();

                  if($candidates!=NULL)
                  {
                    // $client=DB::table('users')->where(['id'=>$candidates->coc_id])->first();
                    // $name = $client->name;
                    // $email = $client->email;
                    // $msg= "Insufficiency Cleared For Candidate";
                    // $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                    // $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);
    
                    // Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email,$name) {
                    //   $message->to($email, $name)->subject
                    //       ('Clobminds Pvt Ltd - Insufficiency Notification');
                    //   $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                    // });

                    $kams = DB::table('key_account_managers')->where(['business_id'=>$candidates->business_id])->get();
                    if(count($kams)>0)
                    {
                      foreach($kams as $kam)
                      {
                          $user_data=DB::table('users')->where(['id'=>$kam->user_id])->first();

                          $name1 = $user_data->name;
                          $email1 = $user_data->email;
                          $msg= "Insufficiency Cleared For Candidate";
                          $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                          $data  = array('name'=>$name1,'email'=>$email1,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);

                          Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email1,$name1) {
                              $message->to($email1, $name1)->subject
                                  ('Clobminds Pvt Ltd - Insufficiency Notification');
                              $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                          });

                      }
                    }

                  }

                }
                else
                {
                  //update insuff

                  DB::table('jaf_form_data')->where(['id'=>$jaf_form_data_id])->update(['is_api_checked'=>'1','is_api_verified'=>'0','is_insufficiency'=>'1','verification_status'=>'failed','verified_at'=>date('Y-m-d H:i:s')]); 

                  $jaf_data=DB::table('jaf_form_data')->where(['id'=>$jaf_form_data_id])->first();
                  $insuff_log_data=[
                    'parent_id'         =>$parent_id,
                    'business_id'       =>$business_id,
                    'coc_id' => $jaf_cin->business_id,
                    'candidate_id' => $candidate_id,
                    'service_id'  => $service_id,
                    'jaf_form_data_id' => $jaf_cin->id,
                    'item_number' => $jaf_cin->check_item_number,
                    'activity_type'=> 'jaf-save',
                    'status'=>'failed',
                    'notes' => 'Auto check CIN failed',
                    'created_by'   => Auth::user()->id,
                    'user_type'           =>'customer',
                    'created_at'   => date('Y-m-d H:i:s'),
                  ];
            
                  DB::table('insufficiency_logs')->insert($insuff_log_data);

                  $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf_form_data_id,'service_id'=>$service_id,'status'=>'raised'])->first();

                  if($ver_insuff!=NULL)
                  {
                      $ver_insuff_data=[
                        'notes' => 'Auto check CIN failed',
                        'updated_by' => Auth::user()->id,
                        'updated_at' => date('Y-m-d H:i:s')
                      ];

                      DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf_form_data_id,'service_id'=>$service_id,'status'=>'raised'])->update($ver_insuff_data);

                      $ver_id=$ver_insuff->id;
                  }
                  else
                  {
                    $ver_insuff_data=[
                      'parent_id'         =>$parent_id,
                      'business_id'       =>$business_id,
                      'coc_id' => $jaf_data->business_id,
                      'candidate_id' => $candidate_id,
                      'service_id'  => $service_id,
                      'jaf_form_data_id' => $jaf_form_data_id,
                      'item_number' => $jaf_data->check_item_number,
                      'activity_type'=> 'jaf-save',
                      'status'=>'raised',
                      'notes' => 'Auto check CIN failed',
                      'created_by'   => Auth::user()->id,
                      'created_at'   => date('Y-m-d H:i:s'),
                    ];
              
                    $ver_id = DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);
                  }
                   
                   // task assign start
                   $final_users = [];
                   // $j = 0;
                   $job_sla_item = DB::table('job_sla_items')->where(['candidate_id'=>$candidate_id,'service_id'=>$service_id])->first();
     
                   // foreach ($job_sla_items as $job_sla_item) {
                     if ($job_sla_item) {
                       # code...
                   
                       $kam  = KeyAccountManager::where(['business_id'=> $jaf_data->business_id,'is_primary'=>'1'])->first();
                       if ($kam) {
                         # code...
                      
                         $task = Task::where(['business_id'=>$jaf_data->business_id,'candidate_id'=>$candidate_id,'service_id'=>$service_id,'is_completed'=>0,'description'=>'Task for Verification'])->first();
                         $task_id='';
                         if ($task) {
                           # code...
                           $task_id = $task->id;

                             $task->assigned_to= $kam->user_id;
                             $task->assigned_by =Auth::user()->id;
                             $task->assigned_at   = date('Y-m-d H:i:s');
                             $task->start_date    = date('Y-m-d');
                             $task->save();
                         
                         //Change status of old task 
                           $task_assgn = TaskAssignment::where(['business_id'=>$jaf_data->business_id,'candidate_id'=>$candidate_id,'status'=>"1",'task_id'=>$task_id])->first();
                           // dd($task_assgn);
                           if($task_assgn)
                           {
                             $task_assgn->user_id= $kam->user_id;
                             $task_assgn->save();
                           }
                         
                           }
                      }
                     }
                }
              }
              elseif($serviceId->type_name == 'upi')
              {

                $jaf_upi = DB::table('jaf_form_data')->select('*')->where(['id'=>$jaf_form_data_id])->first();
          
                $jaf_array = json_decode($jaf_upi->form_data, true);
                //print_r($jaf_array);
                $upi_number ="";
                foreach($jaf_array as $input){
                    if(array_key_exists('UPI ID',$input)){
                      $upi_number = $input['UPI ID'];
                    }
                }
              
                $api_check_status = false;
                // Setup request to send json via POST
                $data = array(
                  'upi_id'    => $upi_number,
                );
                //dd($data);
                $payload = json_encode($data);
                $apiURL = "https://kyc-api.aadhaarkyc.io/api/v1/bank-verification/upi-verification";
  
                $ch = curl_init();
                curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);                
                curl_setopt ($ch, CURLOPT_POST, 1);
                $token_key = env('SUREPASS_PRODUCTION_TOKEN');
                curl_setopt($ch, CURLOPT_HTTPHEADER, array('Authorization: Bearer '.$token_key, 'Content-Type: application/json'));
                curl_setopt($ch, CURLOPT_URL, $apiURL);
                curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);
                $resp = curl_exec ( $ch );
                //dd($resp);
                $response_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
                curl_close ( $ch );
                $array_data =  json_decode($resp,true);
                // var_dump($resp); die;
                if($array_data['success'])
                {
                  $data = 
                        [
                            'parent_id'     => $parent_id,
                            'business_id'   => $business_id,
                            'client_id'     => $array_data['data']['client_id'],
                            'upi_id'        =>$upi_number,
                            'name'          =>$array_data['data']['full_name'],
                            'is_api_verified' =>'1',
                            'created_by'    => $user_id,
                            'created_at'    =>date('Y-m-d H:i:s')
                        ];
                        DB::table('upi_check_masters')->insert($data);
                        $master_data = DB::table('upi_check_masters')->select('*')->where(['upi_id'=>$upi_number])->first();
                        //dd($master_data);
                  //insert into business table
                  $log_data = 
                    [
                        'parent_id'         =>$parent_id,
                        'business_id'       =>$business_id,
                        'service_id'         => $serviceId->id,
                        'source_type'       =>'API',
                        'client_id'     => $array_data['data']['client_id'],
                        'upi_id'            =>$upi_number,
                        'name'              =>$array_data['data']['full_name'],
                        'is_verified'       =>'1',
                        'price'             =>$price,
                        'user_type'           =>'customer',
                        'user_id'            =>$user_id,
                        'created_at'        =>date('Y-m-d H:i:s')
                    ];
                  //dd($log_data);
                  DB::table('upi_checks')->insert($log_data);

                  DB::table('jaf_form_data')->where(['id'=>$jaf_form_data_id])
                                      ->update(['is_api_checked'=>'1','is_api_verified'=>'1','verification_status'=>'success','verified_at'=>date('Y-m-d H:i:s'),'is_insufficiency'=>'0','clear_insuff_notes'=>'Auto Check UPI Cleared','is_all_insuff_cleared' => 1,'insuff_cleared_by'=>Auth::user()->id,'updated_at'=>date('Y-m-d H:i:s')]); 
                  $is_updated=TRUE;

                  $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf_form_data_id,'service_id'=>$service_id,'status'=>'removed'])->first();
                  if($ver_insuff!=NULL)
                  {
                      $ver_insuff_data=[
                        'notes' => 'Auto Check UPI Cleared',
                        'updated_by' => Auth::user()->id,
                        'updated_at' => date('Y-m-d H:i:s')
                      ];

                      DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf_form_data_id,'service_id'=>$service_id,'status'=>'removed'])->update($ver_insuff_data);

                      $ver_id=$ver_insuff->id;
                  }
                  else
                  {
                    $ver_insuff_data=
                    [
                      'parent_id'         =>$parent_id,
                      'business_id'       =>$business_id,
                      'coc_id'            => $jaf_upi->business_id,
                      'candidate_id'      => $candidate_id,
                      'service_id'        => $service_id,
                      'jaf_form_data_id'  => $jaf_upi->id,
                      'item_number'       => $jaf_upi->check_item_number,
                      'activity_type'     => 'jaf-save',
                      'status'            =>'removed',
                      'notes'             => 'Auto Check UPI Cleared',
                      'created_by'        => Auth::user()->id,
                      'created_at'        => date('Y-m-d H:i:s'),
                    ];

                    $ver_id=DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);
                  }
                  
                  $insuff_log_data=[
                    'parent_id'         =>$parent_id,
                    'business_id'       =>$business_id,
                    'coc_id'            => $jaf_upi->business_id,
                    'candidate_id'      => $candidate_id,
                    'service_id'        => $service_id,
                    'jaf_form_data_id'  => $jaf_upi->id,
                    'item_number'        => $jaf_upi->check_item_number,
                    'activity_type'      => 'jaf-save',
                    'status'            =>'removed',
                    'notes'             => 'Auto Check UPI Cleared',
                    'created_by'        => Auth::user()->id,
                    'user_type'         =>'customer',
                    'created_at'        => date('Y-m-d H:i:s'),
                  ];
            
                  DB::table('insufficiency_logs')->insert($insuff_log_data);
                
                  $task = Task::where(['business_id'=> $jaf_data->business_id,'service_id'=>$service_id,'candidate_id'=>$candidate_id,'is_completed'=>0,'description'=>'Task for Verification'])->first();
                  $task_id='';
                  if ($task) {
                    # code...
                    $task_id = $task->id;

                      $task->is_completed= 1;
                      $task->save();
                  
                    //Change status of old task 
                    $task_assgn = TaskAssignment::where(['business_id'=> $jaf_data->business_id,'candidate_id'=>$candidate_id,'status'=>"1",'task_id'=>$task_id])->first();
                    // dd($task_assgn);
                    if($task_assgn)
                    {
                      $task_assgn->status= '2';
                      $task_assgn->save();
                    }
                  }

                  $ver_insuff=DB::table('verification_insufficiency')->where(['id'=>$ver_id])->first();

                  $candidates=DB::table('users as u')
                      ->select('u.*','j.business_id as coc_id','j.id as jaf_id','v.created_at as insuff_clear_date','v.created_by as insuff_clear_by','v.item_number','v.notes','s.verification_type','s.name as service_name','v.business_id as cust_id','v.attachment','v.updated_at','v.updated_by')
                      ->join('jaf_form_data as j','u.id','=','j.candidate_id')
                      ->join('verification_insufficiency as v','v.jaf_form_data_id','=','j.id')
                      ->join('services as s','s.id','=','v.service_id')
                      ->where(['u.user_type'=>'candidate','j.id'=>$jaf_form_data_id,'v.status'=>'removed','v.id'=>$ver_insuff->id])
                      ->first();

                  if($candidates!=NULL)
                  {
                    // $client=DB::table('users')->where(['id'=>$candidates->coc_id])->first();
                    // $name = $client->name;
                    // $email = $client->email;
                    // $msg= "Insufficiency Cleared For Candidate";
                    // $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                    // $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);
    
                    // Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email,$name) {
                    //   $message->to($email, $name)->subject
                    //       ('Clobminds Pvt Ltd - Insufficiency Notification');
                    //   $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                    // });

                    $kams = DB::table('key_account_managers')->where(['business_id'=>$candidates->business_id])->get();
                    if(count($kams)>0)
                    {
                      foreach($kams as $kam)
                      {
                          $user_data=DB::table('users')->where(['id'=>$kam->user_id])->first();

                          $name1 = $user_data->name;
                          $email1 = $user_data->email;
                          $msg= "Insufficiency Cleared For Candidate";
                          $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                          $data  = array('name'=>$name1,'email'=>$email1,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);

                          Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email1,$name1) {
                              $message->to($email1, $name1)->subject
                                  ('Clobminds Pvt Ltd - Insufficiency Notification');
                              $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                          });

                      }
                    }

                  }

                }
                else
                {
                  //update insuff

                  DB::table('jaf_form_data')->where(['id'=>$jaf_form_data_id])->update(['is_api_checked'=>'1','is_api_verified'=>'0','is_insufficiency'=>'1','verification_status'=>'failed','verified_at'=>date('Y-m-d H:i:s')]); 

                  $jaf_data=DB::table('jaf_form_data')->where(['id'=>$jaf_form_data_id])->first();
                  $insuff_log_data=[
                    'parent_id'         =>$parent_id,
                    'business_id'       =>$business_id,
                    'coc_id' => $jaf_upi->business_id,
                    'candidate_id' => $candidate_id,
                    'service_id'  => $service_id,
                    'jaf_form_data_id' => $jaf_upi->id,
                    'item_number' => $jaf_upi->check_item_number,
                    'activity_type'=> 'jaf-save',
                    'status'=>'failed',
                    'notes' => 'Auto check UPI failed',
                    'created_by'   => Auth::user()->id,
                    'user_type'           =>'customer',
                    'created_at'   => date('Y-m-d H:i:s'),
                  ];
            
                  DB::table('insufficiency_logs')->insert($insuff_log_data);

                  $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf_form_data_id,'service_id'=>$service_id,'status'=>'raised'])->first();

                  if($ver_insuff!=NULL)
                  {
                      $ver_insuff_data=[
                        'notes' => 'Auto check UPI failed',
                        'updated_by' => Auth::user()->id,
                        'updated_at' => date('Y-m-d H:i:s')
                      ];

                      DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf_form_data_id,'service_id'=>$service_id,'status'=>'raised'])->update($ver_insuff_data);

                      $ver_id=$ver_insuff->id;
                  }
                  else
                  {
                    $ver_insuff_data=[
                      'parent_id'         =>$parent_id,
                      'business_id'       =>$business_id,
                      'coc_id' => $jaf_data->business_id,
                      'candidate_id' => $candidate_id,
                      'service_id'  => $service_id,
                      'jaf_form_data_id' => $jaf_form_data_id,
                      'item_number' => $jaf_data->check_item_number,
                      'activity_type'=> 'jaf-save',
                      'status'=>'raised',
                      'notes' => 'Auto check UPI failed',
                      'created_by'   => Auth::user()->id,
                      'created_at'   => date('Y-m-d H:i:s'),
                    ];
              
                    $ver_id = DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);
                  }
                   
                   // task assign start
                   $final_users = [];
                   // $j = 0;
                   $job_sla_item = DB::table('job_sla_items')->where(['candidate_id'=>$candidate_id,'service_id'=>$service_id])->first();
     
                   // foreach ($job_sla_items as $job_sla_item) {
                     if ($job_sla_item) {
                       # code...
                   
                       $kam  = KeyAccountManager::where(['business_id'=> $jaf_data->business_id,'is_primary'=>'1'])->first();
                       if ($kam) {
                         # code...
                      
                         $task = Task::where(['business_id'=>$jaf_data->business_id,'candidate_id'=>$candidate_id,'service_id'=>$service_id,'is_completed'=>0,'description'=>'Task for Verification'])->first();
                         $task_id='';
                         if ($task) {
                           # code...
                           $task_id = $task->id;

                             $task->assigned_to= $kam->user_id;
                             $task->assigned_by =Auth::user()->id;
                             $task->assigned_at   = date('Y-m-d H:i:s');
                             $task->start_date    = date('Y-m-d');
                             $task->save();
                         
                         //Change status of old task 
                           $task_assgn = TaskAssignment::where(['business_id'=>$jaf_data->business_id,'candidate_id'=>$candidate_id,'status'=>"1",'task_id'=>$task_id])->first();
                           // dd($task_assgn);
                           if($task_assgn)
                           {
                             $task_assgn->user_id= $kam->user_id;
                             $task_assgn->save();
                           }
                         
                           }
                      }
                     }
                }
              }
              elseif($serviceId->type_name == 'uan-number')
              {

                $jaf_uan= DB::table('jaf_form_data')->select('*')->where(['id'=>$jaf_form_data_id])->first();
          
                $jaf_array = json_decode($jaf_uan->form_data, true);
                //print_r($jaf_array);
                $uan_number ="";
                foreach($jaf_array as $input){
                    if(array_key_exists('UAN Number',$input)){
                      $uan_number = $input['UAN Number'];
                    }
                }

                $master_data = DB::table('uan_check_masters')->select('*')->where(['uan_number'=>$uan_number])->first();

                if($master_data != null)
                {
                  DB::table('jaf_form_data')->where(['id'=>$jaf_form_data_id])
                  ->update(['is_api_checked'=>'1','is_api_verified'=>'1','verification_status'=>'success','verified_at'=>date('Y-m-d H:i:s'),'is_insufficiency'=>'0','clear_insuff_notes'=>'Auto Check aadhar cleared','is_all_insuff_cleared' => 1,'insuff_cleared_by'=>Auth::user()->id,'updated_at'=>date('Y-m-d H:i:s')]); 

                  $log_data = 
                  [
                      'parent_id'            => $parent_id,
                      'business_id'          => $business_id,
                      'service_id'           => $serviceId->id,
                      'source_type'          => 'API',
                      'client_id'            => $master_data->client_id,
                      'uan_number'           => $uan_number,
                      'employment_history'   => $master_data->employment_history,
                      'is_verified'          => '1',
                      'price'                => $price,
                      'user_type'            => 'customer',
                      'user_id'              => $user_id,
                      'created_at'           => date('Y-m-d H:i:s')
                  ];
                  //dd($log_data);
                  DB::table('uan_checks')->insert($log_data);

                  $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf_form_data_id,'service_id'=>$service_id,'status'=>'removed'])->first();
                  if($ver_insuff!=NULL)
                  {
                      $ver_insuff_data=[
                        'notes' => 'Auto Check UAN Cleared',
                        'updated_by' => Auth::user()->id,
                        'updated_at' => date('Y-m-d H:i:s')
                      ];

                      DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf_form_data_id,'service_id'=>$service_id,'status'=>'removed'])->update($ver_insuff_data);

                      $ver_id=$ver_insuff->id;
                  }
                  else
                  {
                    $ver_insuff_data=
                    [
                      'parent_id'         =>$parent_id,
                      'business_id'       =>$business_id,
                      'coc_id'            => $jaf_uan->business_id,
                      'candidate_id'      => $candidate_id,
                      'service_id'        => $service_id,
                      'jaf_form_data_id'  => $jaf_uan->id,
                      'item_number'       => $jaf_uan->check_item_number,
                      'activity_type'     => 'jaf-save',
                      'status'            =>'removed',
                      'notes'             => 'Auto Check UAN Cleared',
                      'created_by'        => Auth::user()->id,
                      'created_at'        => date('Y-m-d H:i:s'),
                    ];

                    $ver_id=DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);
                  }
                  
                  $insuff_log_data=[
                    'parent_id'         =>$parent_id,
                    'business_id'       =>$business_id,
                    'coc_id'            => $jaf_uan->business_id,
                    'candidate_id'      => $candidate_id,
                    'service_id'        => $service_id,
                    'jaf_form_data_id'  => $jaf_uan->id,
                    'item_number'        => $jaf_uan->check_item_number,
                    'activity_type'      => 'jaf-save',
                    'status'            =>'removed',
                    'notes'             => 'Auto Check UAN Cleared',
                    'created_by'        => Auth::user()->id,
                    'user_type'         =>'customer',
                    'created_at'        => date('Y-m-d H:i:s'),
                  ];
            
                  DB::table('insufficiency_logs')->insert($insuff_log_data);
                
                  $task = Task::where(['business_id'=> $jaf_data->business_id,'service_id'=>$service_id,'candidate_id'=>$candidate_id,'is_completed'=>0,'description'=>'Task for Verification'])->first();
                  $task_id='';
                  if ($task) {
                    # code...
                    $task_id = $task->id;

                      $task->is_completed= 1;
                      $task->save();
                  
                    //Change status of old task 
                    $task_assgn = TaskAssignment::where(['business_id'=> $jaf_data->business_id,'candidate_id'=>$candidate_id,'status'=>"1",'task_id'=>$task_id])->first();
                    // dd($task_assgn);
                    if($task_assgn)
                    {
                      $task_assgn->status= '2';
                      $task_assgn->save();
                    }
                  }

                  $ver_insuff=DB::table('verification_insufficiency')->where(['id'=>$ver_id])->first();

                  $candidates=DB::table('users as u')
                      ->select('u.*','j.business_id as coc_id','j.id as jaf_id','v.created_at as insuff_clear_date','v.created_by as insuff_clear_by','v.item_number','v.notes','s.verification_type','s.name as service_name','v.business_id as cust_id','v.attachment','v.updated_at','v.updated_by')
                      ->join('jaf_form_data as j','u.id','=','j.candidate_id')
                      ->join('verification_insufficiency as v','v.jaf_form_data_id','=','j.id')
                      ->join('services as s','s.id','=','v.service_id')
                      ->where(['u.user_type'=>'candidate','j.id'=>$jaf_form_data_id,'v.status'=>'removed','v.id'=>$ver_insuff->id])
                      ->first();

                  if($candidates!=NULL)
                  {
                    // $client=DB::table('users')->where(['id'=>$candidates->coc_id])->first();
                    // $name = $client->name;
                    // $email = $client->email;
                    // $msg= "Insufficiency Cleared For Candidate";
                    // $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                    // $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);
    
                    // Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email,$name) {
                    //   $message->to($email, $name)->subject
                    //       ('Clobminds Pvt Ltd - Insufficiency Notification');
                    //   $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                    // });

                    $kams = DB::table('key_account_managers')->where(['business_id'=>$candidates->business_id])->get();
                    if(count($kams)>0)
                    {
                      foreach($kams as $kam)
                      {
                          $user_data=DB::table('users')->where(['id'=>$kam->user_id])->first();

                          $name1 = $user_data->name;
                          $email1 = $user_data->email;
                          $msg= "Insufficiency Cleared For Candidate";
                          $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                          $data  = array('name'=>$name1,'email'=>$email1,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);

                          Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email1,$name1) {
                              $message->to($email1, $name1)->subject
                                  ('Clobminds Pvt Ltd - Insufficiency Notification');
                              $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                          });

                      }
                    }

                  }


                }
                else
                {
                  $api_check_status = false;
                  // Setup request to send json via POST
                  $data = array(
                    'id_number'    => $uan_number,
                  );
                  //dd($data);
                  $payload = json_encode($data);
                  $apiURL = "https://kyc-api.aadhaarkyc.io/api/v1/income/employment-history-uan";
    
                  $ch = curl_init();
                  curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);                
                  curl_setopt ($ch, CURLOPT_POST, 1);
                  $token_key = env('SUREPASS_PRODUCTION_TOKEN');
                  curl_setopt($ch, CURLOPT_HTTPHEADER, array('Authorization: Bearer '.$token_key, 'Content-Type: application/json'));
                  curl_setopt($ch, CURLOPT_URL, $apiURL);
                  curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);
                  $resp = curl_exec ( $ch );
                  //dd($resp);
                  $response_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
                  curl_close ( $ch );
                  $array_data =  json_decode($resp,true);
                  // var_dump($resp); die;
                  if($array_data['success'])
                  {
                      $data = 
                            [
                                'parent_id'            => $parent_id,
                                'business_id'          => $business_id,
                                'client_id'            => $array_data['data']['client_id'],
                                'uan_number'           =>$uan_number,
                                'employment_history'   =>$array_data['data']['employment_history']!=NULL && count($array_data['data']['employment_history']) > 0 ? json_encode($array_data['data']['employment_history']) : NULL,
                                'is_api_verified'      =>'1',
                                'created_by'           => $user_id,
                                'created_at'           =>date('Y-m-d H:i:s')
                            ];
                        //dd($data);
                          DB::table('uan_check_masters')->insert($data);
  
                          $master_data = DB::table('uan_check_masters')->select('*')->where(['uan_number'=>$uan_number])->first();
                          //dd($master_data);
                          $log_data = 
                              [
                                  'parent_id'            =>$parent_id,
                                  'business_id'          =>$business_id,
                                  'service_id'           => $serviceId->id,
                                  'source_type'          =>'API',
                                  'client_id'            => $array_data['data']['client_id'],
                                  'uan_number'           =>$uan_number,
                                  'employment_history'   =>$array_data['data']['employment_history']!=NULL && count($array_data['data']['employment_history']) > 0 ? json_encode($array_data['data']['employment_history']) : NULL,
                                  'is_verified'          =>'1',
                                  'price'                =>$price,
                                  'user_type'            =>'customer',
                                  'user_id'              =>$user_id,
                                  'created_at'           =>date('Y-m-d H:i:s')
                              ];
                              //dd($log_data);
                              DB::table('uan_checks')->insert($log_data);
  
                    DB::table('jaf_form_data')->where(['id'=>$jaf_form_data_id])
                                        ->update(['is_api_checked'=>'1','is_api_verified'=>'1','verification_status'=>'success','verified_at'=>date('Y-m-d H:i:s'),'is_insufficiency'=>'0','clear_insuff_notes'=>'Auto Check UAN Cleared','is_all_insuff_cleared' => 1,'insuff_cleared_by'=>Auth::user()->id,'updated_at'=>date('Y-m-d H:i:s')]); 
                    $is_updated=TRUE;
  
                    $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf_form_data_id,'service_id'=>$service_id,'status'=>'removed'])->first();
                    if($ver_insuff!=NULL)
                    {
                        $ver_insuff_data=[
                          'notes' => 'Auto Check UAN Cleared',
                          'updated_by' => Auth::user()->id,
                          'updated_at' => date('Y-m-d H:i:s')
                        ];
  
                        DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf_form_data_id,'service_id'=>$service_id,'status'=>'removed'])->update($ver_insuff_data);
  
                        $ver_id=$ver_insuff->id;
                    }
                    else
                    {
                      $ver_insuff_data=
                      [
                        'parent_id'         =>$parent_id,
                        'business_id'       =>$business_id,
                        'coc_id'            => $jaf_uan->business_id,
                        'candidate_id'      => $candidate_id,
                        'service_id'        => $service_id,
                        'jaf_form_data_id'  => $jaf_uan->id,
                        'item_number'       => $jaf_uan->check_item_number,
                        'activity_type'     => 'jaf-save',
                        'status'            =>'removed',
                        'notes'             => 'Auto Check UAN Cleared',
                        'created_by'        => Auth::user()->id,
                        'created_at'        => date('Y-m-d H:i:s'),
                      ];
  
                      $ver_id=DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);
                    }
                    
                    $insuff_log_data=[
                      'parent_id'         =>$parent_id,
                      'business_id'       =>$business_id,
                      'coc_id'            => $jaf_uan->business_id,
                      'candidate_id'      => $candidate_id,
                      'service_id'        => $service_id,
                      'jaf_form_data_id'  => $jaf_uan->id,
                      'item_number'        => $jaf_uan->check_item_number,
                      'activity_type'      => 'jaf-save',
                      'status'            =>'removed',
                      'notes'             => 'Auto Check UAN Cleared',
                      'created_by'        => Auth::user()->id,
                      'user_type'         =>'customer',
                      'created_at'        => date('Y-m-d H:i:s'),
                    ];
              
                    DB::table('insufficiency_logs')->insert($insuff_log_data);
                  
                    $task = Task::where(['business_id'=> $jaf_data->business_id,'service_id'=>$service_id,'candidate_id'=>$candidate_id,'is_completed'=>0,'description'=>'Task for Verification'])->first();
                    $task_id='';
                    if ($task) {
                      # code...
                      $task_id = $task->id;
  
                        $task->is_completed= 1;
                        $task->save();
                    
                      //Change status of old task 
                      $task_assgn = TaskAssignment::where(['business_id'=> $jaf_data->business_id,'candidate_id'=>$candidate_id,'status'=>"1",'task_id'=>$task_id])->first();
                      // dd($task_assgn);
                      if($task_assgn)
                      {
                        $task_assgn->status= '2';
                        $task_assgn->save();
                      }
                    }
  
                    $ver_insuff=DB::table('verification_insufficiency')->where(['id'=>$ver_id])->first();
  
                    $candidates=DB::table('users as u')
                        ->select('u.*','j.business_id as coc_id','j.id as jaf_id','v.created_at as insuff_clear_date','v.created_by as insuff_clear_by','v.item_number','v.notes','s.verification_type','s.name as service_name','v.business_id as cust_id','v.attachment','v.updated_at','v.updated_by')
                        ->join('jaf_form_data as j','u.id','=','j.candidate_id')
                        ->join('verification_insufficiency as v','v.jaf_form_data_id','=','j.id')
                        ->join('services as s','s.id','=','v.service_id')
                        ->where(['u.user_type'=>'candidate','j.id'=>$jaf_form_data_id,'v.status'=>'removed','v.id'=>$ver_insuff->id])
                        ->first();
  
                    if($candidates!=NULL)
                    {
                      // $client=DB::table('users')->where(['id'=>$candidates->coc_id])->first();
                      // $name = $client->name;
                      // $email = $client->email;
                      // $msg= "Insufficiency Cleared For Candidate";
                      // $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                      // $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);
      
                      // Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email,$name) {
                      //   $message->to($email, $name)->subject
                      //       ('Clobminds Pvt Ltd - Insufficiency Notification');
                      //   $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                      // });
  
                      $kams = DB::table('key_account_managers')->where(['business_id'=>$candidates->business_id])->get();
                      if(count($kams)>0)
                      {
                        foreach($kams as $kam)
                        {
                            $user_data=DB::table('users')->where(['id'=>$kam->user_id])->first();
  
                            $name1 = $user_data->name;
                            $email1 = $user_data->email;
                            $msg= "Insufficiency Cleared For Candidate";
                            $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                            $data  = array('name'=>$name1,'email'=>$email1,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);
  
                            Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email1,$name1) {
                                $message->to($email1, $name1)->subject
                                    ('Clobminds Pvt Ltd - Insufficiency Notification');
                                $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                            });
  
                        }
                      }
  
                    }
  
                  }
                  else
                  {
                    //update insuff
  
                    DB::table('jaf_form_data')->where(['id'=>$jaf_form_data_id])->update(['is_api_checked'=>'1','is_api_verified'=>'0','is_insufficiency'=>'1','verification_status'=>'failed','verified_at'=>date('Y-m-d H:i:s')]); 
  
                    $jaf_data=DB::table('jaf_form_data')->where(['id'=>$jaf_form_data_id])->first();
                    $insuff_log_data=[
                      'parent_id'         =>$parent_id,
                      'business_id'       =>$business_id,
                      'coc_id' => $jaf_uan->business_id,
                      'candidate_id' => $candidate_id,
                      'service_id'  => $service_id,
                      'jaf_form_data_id' => $jaf_uan->id,
                      'item_number' => $jaf_uan->check_item_number,
                      'activity_type'=> 'jaf-save',
                      'status'=>'failed',
                      'notes' => 'Auto check UAN failed',
                      'created_by'   => Auth::user()->id,
                      'user_type'           =>'customer',
                      'created_at'   => date('Y-m-d H:i:s'),
                    ];
              
                    DB::table('insufficiency_logs')->insert($insuff_log_data);
  
                    $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf_form_data_id,'service_id'=>$service_id,'status'=>'raised'])->first();
  
                    if($ver_insuff!=NULL)
                    {
                        $ver_insuff_data=[
                          'notes' => 'Auto check UAN failed',
                          'updated_by' => Auth::user()->id,
                          'updated_at' => date('Y-m-d H:i:s')
                        ];
  
                        DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf_form_data_id,'service_id'=>$service_id,'status'=>'raised'])->update($ver_insuff_data);
  
                        $ver_id=$ver_insuff->id;
                    }
                    else
                    {
                      $ver_insuff_data=[
                        'parent_id'         =>$parent_id,
                        'business_id'       =>$business_id,
                        'coc_id' => $jaf_data->business_id,
                        'candidate_id' => $candidate_id,
                        'service_id'  => $service_id,
                        'jaf_form_data_id' => $jaf_form_data_id,
                        'item_number' => $jaf_data->check_item_number,
                        'activity_type'=> 'jaf-save',
                        'status'=>'raised',
                        'notes' => 'Auto check UAN failed',
                        'created_by'   => Auth::user()->id,
                        'created_at'   => date('Y-m-d H:i:s'),
                      ];
                
                      $ver_id = DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);
                    }
                     
                     // task assign start
                     $final_users = [];
                     // $j = 0;
                     $job_sla_item = DB::table('job_sla_items')->where(['candidate_id'=>$candidate_id,'service_id'=>$service_id])->first();
       
                     // foreach ($job_sla_items as $job_sla_item) {
                       if ($job_sla_item) {
                         # code...
                     
                         $kam  = KeyAccountManager::where(['business_id'=> $jaf_data->business_id,'is_primary'=>'1'])->first();
                         if ($kam) {
                           # code...
                        
                           $task = Task::where(['business_id'=>$jaf_data->business_id,'candidate_id'=>$candidate_id,'service_id'=>$service_id,'is_completed'=>0,'description'=>'Task for Verification'])->first();
                           $task_id='';
                           if ($task) {
                             # code...
                                $task_id = $task->id;
  
                                  $task->assigned_to= $kam->user_id;
                                  $task->assigned_by =Auth::user()->id;
                                  $task->assigned_at   = date('Y-m-d H:i:s');
                                  $task->start_date    = date('Y-m-d');
                                  $task->save();
                              
                              //Change status of old task 
                                $task_assgn = TaskAssignment::where(['business_id'=>$jaf_data->business_id,'candidate_id'=>$candidate_id,'status'=>"1",'task_id'=>$task_id])->first();
                                // dd($task_assgn);
                                if($task_assgn)
                                {
                                  $task_assgn->user_id= $kam->user_id;
                                  $task_assgn->save();
                                }
                            }
                          }
                       }
                  }
                }
              
                
              }
              elseif($serviceId->type_name == 'cibil')
              {

                $jaf_cibil= DB::table('jaf_form_data')->select('*')->where(['id'=>$jaf_form_data_id])->first();
                
                $username = DB::table('users')->where(['id'=>$jaf_cibil->candidate_id])->first();
                //dd($username);
                $jaf_array = json_decode($jaf_cibil->form_data, true);
                //print_r($jaf_array);
                $pan_number ="";
                $first_name ="";
                $contact_number ="";
                foreach($jaf_array as $input){
                    if(array_key_exists('First Name',$input)){
                      $first_name = $input['First Name'];
                    }
                    if(array_key_exists('PAN Number',$input)){
                      $pan_number = $input['PAN Number'];
                    }
                    if(array_key_exists('Contact Number',$input)){
                      $contact_number = $input['Contact Number'];
                    }
                }
              
                $master_data = DB::table('cibil_check_masters')->select('*')->where(['pan_number'=>$pan_number])->latest()->first();

                if($master_data !=null){
                  //update case
                  DB::table('jaf_form_data')->where(['id'=>$jaf_form_data_id])
                  ->update(['is_api_checked'=>'1','is_api_verified'=>'1','verification_status'=>'success','verified_at'=>date('Y-m-d H:i:s'),'is_insufficiency'=>'0','clear_insuff_notes'=>'Auto Check aadhar cleared','is_all_insuff_cleared' => 1,'insuff_cleared_by'=>Auth::user()->id,'updated_at'=>date('Y-m-d H:i:s')]); 

                  $log_data = 
                  [
                    'parent_id'            =>$parent_id,
                    'business_id'          =>$business_id,
                    'service_id'           => $serviceId->id,
                    'source_type'          =>'API',
                    'client_id'            => $master_data->client_id,
                    'pan_number'           => $master_data->pan_number,
                    'mobile_number'        => $master_data->mobile_number,
                    'name'                 =>$master_data->name,
                    'consent'              => 'Y',
                    'credit_score'         => $master_data->credit_score,
                    'report_type'          => 'html',
                    'credit_report_link'   => $master_data->credit_report_link,
                    'is_verified'          =>'1',
                    'price'                =>$price,
                    'user_type'            =>'customer',
                    'user_id'              =>$user_id,
                    'created_at'           =>date('Y-m-d H:i:s')
                  ];
                  //dd($log_data);
                  DB::table('cibil_checks')->insert($log_data);

                    $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf_form_data_id,'service_id'=>$service_id,'status'=>'removed'])->first();

                    if($ver_insuff!=NULL)
                    {
                      $ver_insuff_data=[
                        'notes' => 'Auto check cibil cleared',
                        'updated_by' => Auth::user()->id,
                        'updated_at' => date('Y-m-d H:i:s')
                      ];

                      DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf_form_data_id,'service_id'=>$service_id,'status'=>'removed'])->update($ver_insuff_data);

                      $ver_id=$ver_insuff->id;
                    }
                    else
                    {
                        $ver_insuff_data=[
                          'parent_id'         =>$parent_id,
                          'business_id'       =>$business_id,
                          'coc_id' => $jaf_cibil->business_id,
                          'candidate_id' => $jaf_cibil->candidate_id,
                          'service_id'  => $jaf_cibil->service_id,
                          'jaf_form_data_id' => $jaf_cibil->id,
                          'item_number' => $jaf_cibil->check_item_number,
                          'activity_type'=> 'jaf-save',
                          'status'=>'removed',
                          'notes' => 'Auto check aadhar cleared',
                          'created_by'   => Auth::user()->id,
                          'created_at'   => date('Y-m-d H:i:s'),
                          'updated_at' => date('Y-m-d H:i:s')
                        ];
                  
                        $ver_id=DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);
                    }

                    $insuff_log_data=[
                      'parent_id'         =>$parent_id,
                      'business_id'       =>$business_id,
                      'coc_id' => $jaf_cibil->business_id,
                      'candidate_id' => $candidate_id,
                      'service_id'  => $jaf_cibil->service_id,
                      'jaf_form_data_id' => $jaf_cibil->id,
                      'item_number' => $jaf_cibil->check_item_number,
                      'activity_type'=> 'jaf-save',
                      'status'=>'removed',
                      'notes' => 'Auto check aadhar cleared',
                      'created_by'   => Auth::user()->id,
                      'user_type'    =>'customer',
                      'created_at'   => date('Y-m-d H:i:s'),
                    ];
              
                    DB::table('insufficiency_logs')->insert($insuff_log_data);

                    $ver_insuff=DB::table('verification_insufficiency')->where(['id'=>$ver_id])->first();
    
                    $candidates=DB::table('users as u')
                        ->select('u.*','j.business_id as coc_id','j.id as jaf_id','v.created_at as insuff_clear_date','v.created_by as insuff_clear_by','v.item_number','v.notes','s.verification_type','s.name as service_name','v.business_id as cust_id','v.attachment','v.updated_by','v.updated_at')
                        ->join('jaf_form_data as j','u.id','=','j.candidate_id')
                        ->join('verification_insufficiency as v','v.jaf_form_data_id','=','j.id')
                        ->join('services as s','s.id','=','v.service_id')
                        ->where(['u.user_type'=>'candidate','j.id'=>$jaf_form_data_id,'v.status'=>'removed','v.id'=>$ver_insuff->id])
                        ->first();

                    if($candidates!=NULL)
                    {
                      // $client=DB::table('users')->where(['id'=>$candidates->coc_id])->first();
                      // $name = $client->name;
                      // $email = $client->email;
                      // $msg= "Insufficiency Cleared For Candidate";
                      // $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                      // $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);
      
                      // Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email,$name) {
                      //   $message->to($email, $name)->subject
                      //       ('Clobminds Pvt Ltd - Insufficiency Notification');
                      //   $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                      // });

                      $kams = DB::table('key_account_managers')->where(['business_id'=>$candidates->business_id])->get();
                      if(count($kams)>0)
                      {
                        foreach($kams as $kam)
                        {
                            $user_data=DB::table('users')->where(['id'=>$kam->user_id])->first();

                            $name1 = $user_data->name;
                            $email1 = $user_data->email;
                            $msg= "Insufficiency Cleared For Candidate";
                            $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                            
                            $data  = array('name'=>$name1,'email'=>$email1,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);

                            Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email1,$name1) {
                                $message->to($email1, $name1)->subject
                                    ('Clobminds Pvt Ltd - Insufficiency Notification');
                                $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                            });

                        }
                      }

                    }

               }
              else
                {
                  $api_check_status = false;
                  // Setup request to send json via POST
                  $data = array(
                      'name'    => $username->name,
                      'pan'    => $pan_number,
                      'mobile' => $contact_number,
                      'consent' => 'Y'
                  );
                  //dd($data);
                  $payload = json_encode($data);
                  $apiURL = "https://kyc-api.surepass.io/api/v1/credit-report-v2/fetch-report";
                  
                  $ch = curl_init();
                  curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);                
                  curl_setopt ($ch, CURLOPT_POST, 1);
                  $token_key = env('SUREPASS_PRODUCTION_TOKEN');
                  curl_setopt($ch, CURLOPT_HTTPHEADER, array('Authorization: Bearer '.$token_key, 'Content-Type: application/json'));
                  curl_setopt($ch, CURLOPT_URL, $apiURL);
                  curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);
                  $resp = curl_exec ( $ch );
                  //dd($resp);
                  $response_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
                  curl_close ( $ch );
                  $array_data =  json_decode($resp,true);
                  //dd($array_data);
                  // var_dump($resp); die;

                  if($array_data['success'])
                  {
                      $data = 
                          [
                            'parent_id'            => $parent_id,
                            'business_id'          => $business_id,
                            'client_id'            => $array_data['data']['client_id'],
                            'pan_number'           =>$array_data['data']['pan'],
                            'mobile_number'        =>$array_data['data']['mobile'],
                            'name'                 =>$array_data['data']['name'],
                            'consent'              => 'Y',
                            'credit_score'         => $array_data['data']['credit_score'],
                            'report_type'          => 'html',
                            'credit_report_link'   =>$array_data['data']['credit_report']!=NULL && count($array_data['data']['credit_report']) > 0 ? json_encode($array_data['data']['credit_report']) : NULL,
                            'is_api_verified'      =>'1',
                            'created_by'           => $user_id,
                            'created_at'           =>date('Y-m-d H:i:s')
                          ];
                        //dd($data);
                          DB::table('cibil_check_masters')->insert($data);

                          $master_data = DB::table('cibil_check_masters')->select('*')->where(['pan_number'=>$pan_number])->latest()->first();
                          //dd($master_data);
                          $log_data = 
                              [
                                'parent_id'            =>$parent_id,
                                'business_id'          =>$business_id,
                                'service_id'           => $serviceId->id,
                                'source_type'          =>'API',
                                'client_id'            => $array_data['data']['client_id'],
                                'pan_number'           =>$array_data['data']['pan'],
                                'mobile_number'        =>$array_data['data']['mobile'],
                                'name'                 =>$array_data['data']['name'],
                                'consent'              => 'Y',
                                'credit_score'         => $array_data['data']['credit_score'],
                                'report_type'          => 'html',
                                'credit_report_link'   =>$array_data['data']['credit_report']!=NULL && count($array_data['data']['credit_report']) > 0 ? json_encode($array_data['data']['credit_report']) : NULL,
                                'is_verified'          =>'1',
                                'price'                =>$price,
                                'user_type'            =>'customer',
                                'user_id'              =>$user_id,
                                'created_at'           =>date('Y-m-d H:i:s')
                              ];
                              //dd($log_data);
                              DB::table('cibil_checks')->insert($log_data);

                    DB::table('jaf_form_data')->where(['id'=>$jaf_form_data_id])
                                        ->update(['is_api_checked'=>'1','is_api_verified'=>'1','verification_status'=>'success','verified_at'=>date('Y-m-d H:i:s'),'is_insufficiency'=>'0','clear_insuff_notes'=>'Auto Check CIBIL Cleared','is_all_insuff_cleared' => 1,'insuff_cleared_by'=>Auth::user()->id,'updated_at'=>date('Y-m-d H:i:s')]); 
                    $is_updated=TRUE;

                    $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf_form_data_id,'service_id'=>$service_id,'status'=>'removed'])->first();
                    if($ver_insuff!=NULL)
                    {
                        $ver_insuff_data=[
                          'notes' => 'Auto Check CIBIL Cleared',
                          'updated_by' => Auth::user()->id,
                          'updated_at' => date('Y-m-d H:i:s')
                        ];

                        DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf_form_data_id,'service_id'=>$service_id,'status'=>'removed'])->update($ver_insuff_data);

                        $ver_id=$ver_insuff->id;
                    }
                    else
                    {
                      $ver_insuff_data=
                      [
                        'parent_id'         =>$parent_id,
                        'business_id'       =>$business_id,
                        'coc_id'            => $jaf_cibil->business_id,
                        'candidate_id'      => $candidate_id,
                        'service_id'        => $service_id,
                        'jaf_form_data_id'  => $jaf_cibil->id,
                        'item_number'       => $jaf_cibil->check_item_number,
                        'activity_type'     => 'jaf-save',
                        'status'            =>'removed',
                        'notes'             => 'Auto Check CIBIL Cleared',
                        'created_by'        => Auth::user()->id,
                        'created_at'        => date('Y-m-d H:i:s'),
                      ];

                      $ver_id=DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);
                    }
                    
                    $insuff_log_data=[
                      'parent_id'         =>$parent_id,
                      'business_id'       =>$business_id,
                      'coc_id'            => $jaf_cibil->business_id,
                      'candidate_id'      => $candidate_id,
                      'service_id'        => $service_id,
                      'jaf_form_data_id'  => $jaf_cibil->id,
                      'item_number'        => $jaf_cibil->check_item_number,
                      'activity_type'      => 'jaf-save',
                      'status'            =>'removed',
                      'notes'             => 'Auto Check CIBIL Cleared',
                      'created_by'        => Auth::user()->id,
                      'user_type'         =>'customer',
                      'created_at'        => date('Y-m-d H:i:s'),
                    ];
              
                    DB::table('insufficiency_logs')->insert($insuff_log_data);
                  
                    $task = Task::where(['business_id'=> $jaf_data->business_id,'service_id'=>$service_id,'candidate_id'=>$candidate_id,'is_completed'=>0,'description'=>'Task for Verification'])->first();
                    $task_id='';
                    if ($task) {
                      # code...
                      $task_id = $task->id;

                        $task->is_completed= 1;
                        $task->save();
                    
                      //Change status of old task 
                      $task_assgn = TaskAssignment::where(['business_id'=> $jaf_data->business_id,'candidate_id'=>$candidate_id,'status'=>"1",'task_id'=>$task_id])->first();
                      // dd($task_assgn);
                      if($task_assgn)
                      {
                        $task_assgn->status= '2';
                        $task_assgn->save();
                      }
                    }

                    $ver_insuff=DB::table('verification_insufficiency')->where(['id'=>$ver_id])->first();

                    $candidates=DB::table('users as u')
                        ->select('u.*','j.business_id as coc_id','j.id as jaf_id','v.created_at as insuff_clear_date','v.created_by as insuff_clear_by','v.item_number','v.notes','s.verification_type','s.name as service_name','v.business_id as cust_id','v.attachment','v.updated_at','v.updated_by')
                        ->join('jaf_form_data as j','u.id','=','j.candidate_id')
                        ->join('verification_insufficiency as v','v.jaf_form_data_id','=','j.id')
                        ->join('services as s','s.id','=','v.service_id')
                        ->where(['u.user_type'=>'candidate','j.id'=>$jaf_form_data_id,'v.status'=>'removed','v.id'=>$ver_insuff->id])
                        ->first();

                    if($candidates!=NULL)
                    {
                      // $client=DB::table('users')->where(['id'=>$candidates->coc_id])->first();
                      // $name = $client->name;
                      // $email = $client->email;
                      // $msg= "Insufficiency Cleared For Candidate";
                      // $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                      // $data  = array('name'=>$name,'email'=>$email,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);
      
                      // Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email,$name) {
                      //   $message->to($email, $name)->subject
                      //       ('Clobminds Pvt Ltd - Insufficiency Notification');
                      //   $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                      // });

                      $kams = DB::table('key_account_managers')->where(['business_id'=>$candidates->business_id])->get();
                      if(count($kams)>0)
                      {
                        foreach($kams as $kam)
                        {
                            $user_data=DB::table('users')->where(['id'=>$kam->user_id])->first();

                            $name1 = $user_data->name;
                            $email1 = $user_data->email;
                            $msg= "Insufficiency Cleared For Candidate";
                            $sender = DB::table('users')->where(['id'=>$candidates->parent_id])->first();
                            $data  = array('name'=>$name1,'email'=>$email1,'msg'=>$msg,'link'=>'','candidate'=>$candidates,'sender'=>$sender);

                            Mail::send(['html'=>'mails.insuff-clear-notify'], $data, function($message) use($email1,$name1) {
                                $message->to($email1, $name1)->subject
                                    ('Clobminds Pvt Ltd - Insufficiency Notification');
                                $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
                            });

                        }
                      }

                  }

                  }
                  else
                  {
                    //update insuff

                    DB::table('jaf_form_data')->where(['id'=>$jaf_form_data_id])->update(['is_api_checked'=>'1','is_api_verified'=>'0','is_insufficiency'=>'1','verification_status'=>'failed','verified_at'=>date('Y-m-d H:i:s')]); 

                    $jaf_data=DB::table('jaf_form_data')->where(['id'=>$jaf_form_data_id])->first();
                    $insuff_log_data=[
                      'parent_id'         =>$parent_id,
                      'business_id'       =>$business_id,
                      'coc_id' => $jaf_cibil->business_id,
                      'candidate_id' => $candidate_id,
                      'service_id'  => $service_id,
                      'jaf_form_data_id' => $jaf_cibil->id,
                      'item_number' => $jaf_cibil->check_item_number,
                      'activity_type'=> 'jaf-save',
                      'status'=>'failed',
                      'notes' => 'Auto check CIBIL failed',
                      'created_by'   => Auth::user()->id,
                      'user_type'           =>'customer',
                      'created_at'   => date('Y-m-d H:i:s'),
                    ];
              
                    DB::table('insufficiency_logs')->insert($insuff_log_data);

                    $ver_insuff=DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf_form_data_id,'service_id'=>$service_id,'status'=>'raised'])->first();

                    if($ver_insuff!=NULL)
                    {
                        $ver_insuff_data=[
                          'notes' => 'Auto check CIBIL failed',
                          'updated_by' => Auth::user()->id,
                          'updated_at' => date('Y-m-d H:i:s')
                        ];

                        DB::table('verification_insufficiency')->where(['jaf_form_data_id'=>$jaf_form_data_id,'service_id'=>$service_id,'status'=>'raised'])->update($ver_insuff_data);

                        $ver_id=$ver_insuff->id;
                    }
                    else
                    {
                      $ver_insuff_data=[
                        'parent_id'         =>$parent_id,
                        'business_id'       =>$business_id,
                        'coc_id' => $jaf_data->business_id,
                        'candidate_id' => $candidate_id,
                        'service_id'  => $service_id,
                        'jaf_form_data_id' => $jaf_form_data_id,
                        'item_number' => $jaf_data->check_item_number,
                        'activity_type'=> 'jaf-save',
                        'status'=>'raised',
                        'notes' => 'Auto check CIBIL failed',
                        'created_by'   => Auth::user()->id,
                        'created_at'   => date('Y-m-d H:i:s'),
                      ];
                
                      $ver_id = DB::table('verification_insufficiency')->insertGetId($ver_insuff_data);
                    }
                    
                    // task assign start
                    $final_users = [];
                    // $j = 0;
                    $job_sla_item = DB::table('job_sla_items')->where(['candidate_id'=>$candidate_id,'service_id'=>$service_id])->first();
      
                   // foreach ($job_sla_items as $job_sla_item) {
                     if ($job_sla_item) {
                       # code...
                   
                       $kam  = KeyAccountManager::where(['business_id'=> $jaf_data->business_id,'is_primary'=>'1'])->first();
                       if ($kam) {
                         # code...
                      
                         $task = Task::where(['business_id'=>$jaf_data->business_id,'candidate_id'=>$candidate_id,'service_id'=>$service_id,'is_completed'=>0,'description'=>'Task for Verification'])->first();
                         $task_id='';
                         if ($task) {
                           # code...
                              $task_id = $task->id;

                                $task->assigned_to= $kam->user_id;
                                $task->assigned_by =Auth::user()->id;
                                $task->assigned_at   = date('Y-m-d H:i:s');
                                $task->start_date    = date('Y-m-d');
                                $task->save();
                            
                            //Change status of old task 
                              $task_assgn = TaskAssignment::where(['business_id'=>$jaf_data->business_id,'candidate_id'=>$candidate_id,'status'=>"1",'task_id'=>$task_id])->first();
                              // dd($task_assgn);
                              if($task_assgn)
                              {
                                $task_assgn->user_id= $kam->user_id;
                                $task_assgn->save();
                              }
                          }
                        }
                     }
                  }
                }

                
              }

              DB::commit();
              return response()->json([
                'fail'=>false,
                'success' => true,
              ]);
            }
            catch (\Exception $e) {
              DB::rollback();
                // something went wrong
                return $e;
            } 

    }


    public function additionalChanges(Request $request)
    {

          $id = base64_decode($request->id);

          
          if ($request->isMethod('get'))
          {
              $data = DB::table('jaf_form_data as jf')
                      ->select('jf.*','s.name as service_name','s.verification_type as service_type')
                      ->join('services as s','s.id','=','jf.service_id')
                      ->where(['jf.id' => $id])        
                      ->first(); 

              $form = '';

              $add_chrge_attachments=DB::table('jaf_additional_charge_attachments')->where(['jaf_id'=>$id])->get();

              if(count($add_chrge_attachments)>0)
              {
                  $path=url('/').'/uploads/jaf/additional-charge/';
                  $form.='<div class="form-group">
                          <label><strong>Attachments Files: </strong></label>
                          <div class="row mt-2" style="min-height: 20px;">';
                  foreach($add_chrge_attachments as $item)
                  {
                      $img='';
                      $file=$path.$item->file_name;
                      if(strpos($item->file_name, 'pdf')!==false) {
                          $img='<img src="'.url("/")."/admin/images/icon_pdf.png".'" alt="preview" style="height:100px;"/>';
                      }
                      else
                      {
                          $img='<img src="'.$file.'" alt="preview" style="height:100px;"/>';
                      }
                      $form.='<div class="image-area">
                                  <a href="'.$file.'" download> 
                                      '.$img.'
                                  </a>
                              </div>';
                  }

                  $form.='</div>
                          </div>';
              }
          
              return response()->json([                
                  'result' => $data,
                  'form' =>  $form
              ]);
          }

          $charge_allowed = 0;
          
          $rules= [
            'amount'    => 'required|numeric|min:0',
            'comments' => 'required|min:1',
            // 'attachment' => 'nullable',
            // 'attachment.*' => 'mimes:png,jpeg,jpg,gif,svg,pdf|max:20000'
        ];

        
        $validator = Validator::make($request->all(), $rules);
          
        if ($validator->fails()){
            return response()->json([
                'fail' => true,
                'error_type' => 'validation',
                'errors' => $validator->errors()
            ]);
        }

          $allowedextension=['jpg','jpeg','png','png','pdf'];
          if($request->hasFile('attachment') && $request->file('attachment') !="")
          { 
            $files= $request->file('attachment');
            foreach($files as $file)
            {
                    $extension = $file->getClientOriginalExtension();

                    $check = in_array($extension,$allowedextension);

                    $file_size = number_format(File::size($file) / 1048576, 2);
                    
                    if(!$check)
                    {
                        return response()->json([
                          'fail' => true,
                          'errors' => ['attachment' => 'Only jpg,jpeg,png,pdf are allowed !'],
                          'error_type'=>'validation'
                        ]);                        
                    }

                    if($file_size > 10)
                    {
                        return response()->json([
                          'fail' => true,
                          'error_type'=>'validation',
                          'errors' => ['attachment' => 'The document size must be less than only 10mb Upload !'],
                        ]);                        
                    }
            }
          }

          if($request->input('additional-check')!=null)
          {
              $charge_allowed = 1;
          }

          $jaf_form_data= JafFormData::find($id);
          
          //dd($jaf_form_data);
          $report = DB::table('reports')->where('candidate_id',$jaf_form_data->candidate_id)->whereIn('status',['incomplete'])->first();
          //dd($report);
          if ($report) {
              $jaf_form_data->update(['is_charge_allowed'=>$charge_allowed,'additional_charges'=>$request->amount,'additional_charge_notes'=>$request->comments,'additional_charge_added_at'=>date('Y-m-d H:i:s'),'additional_charge_added_by'=>Auth::user()->id]);
            
              DB::table('report_items')->where(['jaf_id'=>$id])->update([
                'is_charge_allowed'=>$charge_allowed,
                'additional_charges'=>$request->amount,
                'additional_charge_notes'=>$request->comments,
                'additional_charge_added_at'=>date('Y-m-d H:i:s'),
                'additional_charge_added_by'=>Auth::user()->id
              ]);

            if($request->hasFile('attachment') && $request->file('attachment') !="")
            {
                $filePath = public_path('/uploads/jaf/additional-charge/'); 
                foreach($files as $file)
                {
                    $file_data = $file->getClientOriginalName();
                    $tmp_data  = date('YmdHis').'-'.$file_data; 
                    $data = $file->move($filePath, $tmp_data);
                    
                    DB::table('jaf_additional_charge_attachments')->insert(
                        [
                            'jaf_id' => $jaf_form_data->id,
                            'business_id' => $jaf_form_data->business_id,
                            'service_id'    => $jaf_form_data->service_id,
                            'service_item_number'    => $jaf_form_data->check_item_number,
                            'file_name' => $tmp_data,
                            'created_at' => date('Y-m-d H:i:s')
                        ]
                    );
                }
            }
          }
          return response()->json([
            'fail' => false,
          ]);
    }

    public function dragImage(Request $request)
    {
      // dd($request->order);
      if($request->imageType=='main'){
        $form='';
        $reportFiles = DB::table('jaf_item_attachments as jf')
        ->select('jf.id','jf.jaf_id','jf.file_name','jf.created_at','jf.attachment_type','jf.file_platform','jf.service_attachment_id','jf.service_attachment_name','sat.attachment_name')
        ->join('service_attachment_types as sat','sat.id','=','jf.service_attachment_id')
        ->where(['jf.jaf_id'=>$request->imageId,'jf.is_deleted'=>'0','jf.attachment_type'=>'main']) 
        ->orderBy('jf.img_order','ASC')   
        ->get();  
        // dd($reportFiles);
        // $getImgName=DB::table('jaf_item_attachments as jf')
        // ->select('jf.service_attachment_id','jf.service_attachment_name','sat.attachment_name')
        // ->join('service_attachment_types as sat','sat.id','=','jf.service_attachment_id')
        // ->where(['jf.jaf_id'=>$request->imageId,'jf.is_deleted'=>'0','jf.attachment_type'=>'main'])
        // ->get();
      
        $docs = array();
        foreach ($reportFiles as $item) {

            $type = url('/').'/admin/images/icon_docx.png';
            $extArray = explode('.', $item->file_name);
            $ext = end($extArray);
          
            if($item->file_name != NULL)
            {
                if($ext == 'pdf')
                {
                  $type = url('/').'/admin/images/icon_pdf.png';
                } 
                if($ext == 'doc' || $ext == 'docx')
                {
                  $type = url('/').'/admin/images/icon_docx.png';
                }
                if($ext == 'xls' || $ext == 'xlsx' || $ext == 'csv')
                {
                  $type = url('/').'/admin/images/icon_xlsx.png';
                }
                if($ext == 'jpg' || $ext == 'png' || $ext == 'jpeg'  || $ext == 'gif' || $ext == 'JPG' || $ext == 'PNG' || $ext == 'JPEG'  || $ext == 'GIF')
                {  
                  if(stripos($item->file_platform,'s3')!==false)
                  {
                      $filePath = 'uploads/jaf-files/';

                      $s3_config = S3ConfigTrait::s3Config();

                      $disk = Storage::disk('s3');

                      $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                          'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                          'Key'                        => $filePath.$item->file_name,
                          'ResponseContentDisposition' => 'attachment;'//for download
                      ]);

                      $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');

                      $type = (string)$req->getUri();  
                  }
                  else
                  {
                    $type = url('/').'/uploads/jaf-files/'.$item->file_name;
                  }
                }
                if($ext == 'pptx')
                {
                  $type = url('/').'/admin/images/icon_pptx.png';
                }

            }

            $docs[]= array(
                'file_id'=>$item->id, 
                'file_name'=>$item->file_name, 
                'image_name'=>$item->attachment_name,
                'custome_img_name'=>$item->service_attachment_name,             
                'attachment_type'=>$item->attachment_type, 
                'filePath'=>url('/').'/uploads/jaf-files/'.$item->file_name,
                'fileIcon'=>$type,
            );  
        } 
        $form.= '<ul class="reorder_ul reorder-photos-list">';
        
          $i=0;
        foreach($docs as $file)
        {
          if($file['attachment_type'] == 'main')
          {
            $file_id=$file['file_id'];
            if(stripos($file['file_name'],'pdf')!==false){
              $path=url('/').'/admin/images/';
              $file_path=$path.$file->file_name;
              $file_name =$file['file_name'];
              $img='<img src="'.$file_path.'" alt="preview" style="height:100px;" title="'.$file_name.'">';
            }
            else{
              $file_path=$file['fileIcon'];
              $file_name =$file['file_name'];
              $img='<img src="'.$file_path.'" alt="preview" style="height:100px;"title="'.$file_name.'">';
            }
            if($file["custome_img_name"]==null){
            $form.= '<li id="'.$file_id.'" class="ui-sortable-handle">
                  <a href="javascript:void(0);" style="float:none;" class="image_link">
                  '.$img.'
                  </a>
                  </br>
                <span class="filename">'.$file["image_name"].'</span>
              </li>';
            }else{
              $form.= '<li id="'.$file_id.'" class="ui-sortable-handle">
              <a href="javascript:void(0);" style="float:none;" class="image_link">
              '.$img.'
              </a>
              </br>
            <span class="filename">'.$file["custome_img_name"].'</span>
          </li>';
            }
          }
          
        }
        $form.= '</ul>';

        return $form;
      }
      else{
        $form='';
        $reportFiles = DB::table('jaf_item_attachments as jf')
        ->select('jf.id','jf.jaf_id','jf.file_name','jf.created_at','jf.attachment_type','jf.file_platform','jf.service_attachment_id','jf.service_attachment_name','sat.attachment_name')
        ->join('service_attachment_types as sat','sat.id','=','jf.service_attachment_id')
        ->where(['jf.jaf_id'=>$request->imageId,'jf.is_deleted'=>'0','jf.attachment_type'=>'supporting']) 
        ->orderBy('jf.img_order','ASC')   
        ->get();           
            // dd($reportFiles);
        $docs = array();
        foreach ($reportFiles as $item) {

            $type = url('/').'/admin/images/icon_docx.png';
            $extArray = explode('.', $item->file_name);
            $ext = end($extArray);
          
            if($item->file_name != NULL)
            {
                if($ext == 'pdf')
                {
                  $type = url('/').'/admin/images/icon_pdf.png';
                } 
                if($ext == 'doc' || $ext == 'docx')
                {
                  $type = url('/').'/admin/images/icon_docx.png';
                }
                if($ext == 'xls' || $ext == 'xlsx' || $ext == 'csv')
                {
                  $type = url('/').'/admin/images/icon_xlsx.png';
                }
                if($ext == 'jpg' || $ext == 'png' || $ext == 'jpeg'  || $ext == 'gif' || $ext == 'JPG' || $ext == 'PNG' || $ext == 'JPEG'  || $ext == 'GIF')
                {  
                  if(stripos($item->file_platform,'s3')!==false)
                  {
                      $filePath = 'uploads/jaf-files/';

                      $s3_config = S3ConfigTrait::s3Config();

                      $disk = Storage::disk('s3');

                      $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                          'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                          'Key'                        => $filePath.$item->file_name,
                          'ResponseContentDisposition' => 'attachment;'//for download
                      ]);

                      $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');

                      $type = (string)$req->getUri();  
                  }
                  else
                  {
                    $type = url('/').'/uploads/jaf-files/'.$item->file_name;
                  }

                }
                if($ext == 'pptx')
                {
                  $type = url('/').'/admin/images/icon_pptx.png';
                }

            }

            $docs[]= array(
                'file_id'=>$item->id, 
                'file_name'=>$item->file_name,    
                'image_name'=>$item->attachment_name,
                'custome_img_name'=>$item->service_attachment_name,            
                'attachment_type'=>$item->attachment_type, 
                'filePath'=>url('/').'/uploads/jaf-files/'.$item->file_name,
                'fileIcon'=>$type,
            );
        } 

        $form.= '<ul class="reorder_ul reorder-photos-list">';
        
          $i=0;
        foreach($docs as $file)
        {
          if($file['attachment_type'] == 'supporting')
          {
            $file_id=$file['file_id'];
            if(stripos($file['file_name'],'pdf')!==false){
              $path=url('/').'/admin/images/';
              $file_path=$path.$file->file_name;
              $file_name =$file['file_name'];
              $img='<img src="'.$file_path.'" alt="preview" style="height:100px;" title="'.$file_name.'">';
            }
            else{
              $file_path=$file['fileIcon'];
              $file_name =$file['file_name'];
              $img='<img src="'.$file_path.'" alt="preview" style="height:100px;"title="'.$file_name.'">';
            }
            if($file["custome_img_name"]==null){
            $form.= '<li id="'.$file_id.'" class="ui-sortable-handle">
                  <a href="javascript:void(0);" style="float:none;" class="image_link">
                  '.$img.'
                  </a>
                  </br> <span class="filename">'.$file["image_name"].'</span>
              </li>';
            }else{
              $form.= '<li id="'.$file_id.'" class="ui-sortable-handle">
                  <a href="javascript:void(0);" style="float:none;" class="image_link">
                  '.$img.'
                  </a>
                  </br> <span class="filename">'.$file["custome_img_name"].'</span>
              </li>';
            }
          }
          
        }
        $form.= '</ul>';

        return $form;
      }
    }

    public function dragImageSave(Request $request)
    {
      // dd($request->order);
      $order_number=$request->order_number;
      $jafImageType=$request->jafImageTypes;
      // $service_id=array_unique($service_id);
      // $new_arr[]=json_encode($order_number);
      // dd($request->order_number);
      $i=1;
      // $j=0;
      foreach($order_number as $order){
        // var_dump($order[$j]);
        DB::table('jaf_item_attachments')->where('id',$order)->update(['img_order'=>$i]);
        DB::table('report_item_attachments')->where('jaf_item_attachment_id',$order)->update(['img_order'=>$i]);
        $i++;
      }
      if($jafImageType=='main'){
        $reportFiles = DB::table('jaf_item_attachments as jf')
        ->select('jf.id','jf.jaf_id','jf.file_name','jf.created_at','jf.attachment_type','jf.file_platform','jf.service_attachment_id','jf.service_attachment_name','sat.attachment_name')
        ->join('service_attachment_types as sat','sat.id','=','jf.service_attachment_id')
        ->where(['jf.jaf_id'=>$request->imageIds,'is_deleted'=>'0','attachment_type'=>'main'])
        ->orderBy('img_order','ASC')   
        ->get();
          
        $docs = array();
        $jaf_id=NULL;
        foreach ($reportFiles as $item) {

            $type = url('/').'/admin/images/icon_docx.png';
            $extArray = explode('.', $item->file_name);
            $ext = end($extArray);
            $jaf_id =$item->jaf_id;
            if($item->file_name != NULL)
            {
                if($ext == 'pdf')
                {
                  $type = url('/').'/admin/images/icon_pdf.png';
                } 
                if($ext == 'doc' || $ext == 'docx')
                {
                  $type = url('/').'/admin/images/icon_docx.png';
                }
                if($ext == 'xls' || $ext == 'xlsx' || $ext == 'csv')
                {
                  $type = url('/').'/admin/images/icon_xlsx.png';
                }
                if($ext == 'jpg' || $ext == 'png' || $ext == 'jpeg'  || $ext == 'gif' || $ext == 'JPG' || $ext == 'PNG' || $ext == 'JPEG'  || $ext == 'GIF')
                {  
                  if(stripos($item->file_platform,'s3')!==false)
                  {
                    $filePath = 'uploads/jaf-files/';

                    $s3_config = S3ConfigTrait::s3Config();

                    $disk = Storage::disk('s3');

                    $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                        'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                        'Key'                        => $filePath.$item->file_name,
                        'ResponseContentDisposition' => 'attachment;'//for download
                    ]);

                    $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');

                    $type = (string)$req->getUri();  
                  }
                  else
                  {
                    $type = url('/').'/uploads/jaf-files/'.$item->file_name;
                  }
                }
                if($ext == 'pptx')
                {
                  $type = url('/').'/admin/images/icon_pptx.png';
                }

            } 

            $docs[]= array(
                'file_id'=>$item->id, 
                'file_name'=>$item->file_name,
                'image_name'=>$item->attachment_name,
                'custome_img_name'=>$item->service_attachment_name,                
                'attachment_type'=>$item->attachment_type, 
                'filePath'=>url('/').'/uploads/jaf-files/'.$item->file_name,
                'fileIcon'=>$type,
                'file_type'=>$ext,
            );
        } 
        return response()->json([
          'fail' => false,
          'data'=>$docs,
          'jaf_id'=>$jaf_id,
          'attachment_type'=>$jafImageType,
        ]); 
      }   
      else{
        $reportFiles = DB::table('jaf_item_attachments as jf')
        ->select('jf.id','jf.jaf_id','jf.file_name','jf.created_at','jf.attachment_type','jf.file_platform','jf.service_attachment_id','jf.service_attachment_name','sat.attachment_name')
        ->join('service_attachment_types as sat','sat.id','=','jf.service_attachment_id')
        ->where(['jf.jaf_id'=>$request->imageIds,'is_deleted'=>'0','attachment_type'=>'supporting'])
        ->orderBy('img_order','ASC')   
        ->get();
          
        $docs = array();
        $jaf_id=NULL;
        foreach ($reportFiles as $item) {

            $type = url('/').'/admin/images/icon_docx.png';
            $extArray = explode('.', $item->file_name);
            $ext = end($extArray);
            $jaf_id =$item->jaf_id;
            if($item->file_name != NULL)
            {
                if($ext == 'pdf')
                {
                  $type = url('/').'/admin/images/icon_pdf.png';
                } 
                if($ext == 'doc' || $ext == 'docx')
                {
                  $type = url('/').'/admin/images/icon_docx.png';
                }
                if($ext == 'xls' || $ext == 'xlsx' || $ext == 'csv')
                {
                  $type = url('/').'/admin/images/icon_xlsx.png';
                }
                if($ext == 'jpg' || $ext == 'png' || $ext == 'jpeg'  || $ext == 'gif' || $ext == 'JPG' || $ext == 'PNG' || $ext == 'JPEG'  || $ext == 'GIF')
                { 
                  if(stripos($item->file_platform,'s3')!==false)
                  {
                      $filePath = 'uploads/jaf-files/';

                      $s3_config = S3ConfigTrait::s3Config();

                      $disk = Storage::disk('s3');

                      $command = $disk->getDriver()->getAdapter()->getClient()->getCommand('GetObject', [
                          'Bucket'                     => Config::get('filesystems.disks.s3.bucket'),
                          'Key'                        => $filePath.$item->file_name,
                          'ResponseContentDisposition' => 'attachment;'//for download
                      ]);

                      $req = $disk->getDriver()->getAdapter()->getClient()->createPresignedRequest($command, '+10 minutes');

                      $type = (string)$req->getUri();  
                  }
                  else
                  {
                    $type = url('/').'/uploads/jaf-files/'.$item->file_name;
                  }
                }
                if($ext == 'pptx')
                {
                  $type = url('/').'/admin/images/icon_pptx.png';
                }

            } 

            $docs[]= array(
                'file_id'=>$item->id, 
                'file_name'=>$item->file_name,
                'image_name'=>$item->attachment_name,
                'custome_img_name'=>$item->service_attachment_name,                
                'attachment_type'=>$item->attachment_type, 
                'filePath'=>url('/').'/uploads/jaf-files/'.$item->file_name,
                'fileIcon'=>$type,
                'file_type'=>$ext,
            );
        } 
        return response()->json([
          'fail' => false,
          'data'=>$docs,
          'jaf_id'=>$jaf_id,
          'attachment_type'=>$jafImageType,
        ]); 
      }
    }

    // Check Whether Jaf Item Doesn't Have any Insufficiency 
    public function check_data_verified(Request $request)
    {
        $jaf_id = $request->id;
        // dd($jaf_id);

        $jaf_form_insuff = DB::table('jaf_form_data')->where(['id'=>$jaf_id,'is_insufficiency'=>1])->first();
        // dd($jaf_form_insuff);
        if($jaf_form_insuff==NULL)
        {
            return response()->json([
              'success' => true,
            ]);
        }

        return response()->json([
          'success' => false,
        ]);
    }

    public function addressVerificationData(Request $request)
    {
        $jaf_id = base64_decode($request->id);

        $result = DB::table('address_verifications as a')
                    ->select('a.*','s.name as service_name','j.check_item_number','j.business_id','u.display_id')
                    ->join('jaf_form_data as j','j.id','=','a.jaf_id')
                    ->join('users as u','u.id','=','j.candidate_id')
                    ->join('services as s','s.id','=','j.service_id')
                    ->where('a.jaf_id',$jaf_id)
                    ->first();

        $user = NULL;

        $submitted_at = NULL;

        $form = '';

        if($result!=NULL)
        {
          $submitted_at = date('d-M-Y h:i A',strtotime($result->created_at));
          $user = DB::table('users')->select('name','display_id')->where('id',$result->candidate_id)->first();

          $address_file = DB::table('address_verification_file_uploads')->where(['candidate_id'=>$result->candidate_id,'jaf_id'=>$jaf_id])->get();

          if(count($address_file)>0)
          {
              $form.='<div class="row">
                      <div class="col-12 pt-2">
                        <h5 class="text-muted">Attachments:-</h5>
                        <p class="pb-border"></p>
                      </div>
                      </div>';

              $profile_photo = DB::table('address_verification_file_uploads')->where(['candidate_id'=>$result->candidate_id,'jaf_id'=>$jaf_id,'file_type'=>'profile_photo'])->get();

              if(count($profile_photo)>0)
              {
                  $path=url('/').'/uploads/candidate-selfie/';

                  $form.='<div class="row">
                            <div class="col-12 pt-2">
                              <label>Profile Photo:-</label>
                            </div>';

                  foreach($profile_photo as $item)
                  {
                      $img='';

                      $file=$path.$item->image;

                      $img='<img src="'.$file.'" title="'.$item->image.'" alt="preview" style="height:100px;"/>';

                      $form.='<div class="col-4">
                                <div class="image-area" style="width:110px;">
                                    <a href="'.$file.'" download>
                                        '.$img.'
                                    </a>
                                </div>
                              </div>';
                  }

                  $form.='</div>';
              }

              $location_photo = DB::table('address_verification_file_uploads')->where(['candidate_id'=>$result->candidate_id,'jaf_id'=>$jaf_id,'file_type'=>'location'])->get();

              if(count($location_photo)>0)
              {
                  $path=url('/').'/uploads/candidate-location/';

                  $form.='<div class="row">
                            <div class="col-12 pt-2">
                              <label>Location:-</label>
                            </div>';

                  foreach($location_photo as $item)
                  {
                      $img='';

                      $file=$path.$item->image;

                      $img='<img src="'.$file.'" title="'.$item->image.'" alt="preview" style="height:100px;"/>';

                      $form.='<div class="col-4">
                                <div class="image-area" style="width:110px;">
                                    <a href="'.$file.'" download>
                                        '.$img.'
                                    </a>
                                </div>
                              </div>';
                  }

                  $form.='</div>';
              }

              $address_proof = DB::table('address_verification_file_uploads')->where(['candidate_id'=>$result->candidate_id,'jaf_id'=>$jaf_id,'file_type'=>'address_proof'])->get();

              if(count($address_proof)>0)
              {
                  $path=url('/').'/uploads/address-proof/';

                  $form.='<div class="row">
                            <div class="col-12 pt-2">
                              <label>Address Proof:-</label>
                            </div>';

                  foreach($address_proof as $item)
                  {
                      $img='';

                      $file=$path.$item->image;

                      $img='<img src="'.$file.'" title="'.$item->image.'" alt="preview" style="height:100px;"/>';

                      $form.='<div class="col-4">
                                <div class="image-area" style="width:110px;">
                                    <a href="'.$file.'" download>
                                        '.$img.'
                                    </a>
                                </div>
                              </div>';
                  }

                  $form.='</div>';
              }
              
          }

          // Signature

              if($result->signature!=NULL)
              {
                $path=url('/').'/uploads/candidate-signature/';

                $img='';

                $file=$path.$result->signature;

                $img='<img src="'.$file.'" title="'.$result->signature.'" alt="preview" style="height:100px;"/>';

                $form.='<div class="row">
                          <div class="col-12 pt-2">
                            <label>Signature:-</label>
                          </div>';

                $form.='<div class="col-4">
                          <div class="image-area" style="width:110px;">
                              <a href="'.$file.'" download>
                                  '.$img.'
                              </a>
                          </div>
                        </div>';
                

                $form.='</div>';
              }
        }



        return response()->json([
            'result' => $result,
            'user' => $user,
            'submitted_at' => $submitted_at,
            'form' => $form
        ]);
    }

     public function digitalAddressVerification(Request $request)
    {
      $jaf_id = base64_decode($request->id);

      if($request->isMethod('get'))
      {
        //  $candidate_id = 720;
        //  $candidate = User::where('id',$candidate_id)->first();

        $address_verification = AddressVerification::from('address_verifications as a')
                                ->select('a.*','j.business_id')
                                ->join('jaf_form_data as j','j.id','=','a.jaf_id')
                                ->where('a.jaf_id',$jaf_id)
                                ->first();

        
        $verification_decision = DB::table('address_verification_decision_logs')->where('jaf_id',$jaf_id)->latest()->first();
        
        return view('admin.candidates.address-digital-verification',compact('address_verification','verification_decision'));
      }

      if($request->type=='formtype')
      {

          if($request->map_image!=''){
            
                $folderPath = public_path('uploads/map-image/');

                if(!File::exists($folderPath))
                {
                    File::makeDirectory($folderPath, $mode = 0777, true, true);
                }
        
                $image_parts = explode(";base64,", $request->map_image);
                    
                $image_type_aux = explode("image/", $image_parts[0]);
                    
                $image_type = $image_type_aux[1];
                    
                $image_base64 = base64_decode($image_parts[1]);
                
                $map_image = 'map_image-'.date('Ymdhis').'.jpeg';
                $file = $folderPath . $map_image;
                header('Content-Type: bitmap; charset=utf-8');
                file_put_contents($file, $image_base64);

                $address_verification = AddressVerification::from('address_verifications as a')->where('jaf_id',$jaf_id)->first();

                if($address_verification->map_image!=NULL && File::exists($folderPath.$address_verification->map_image))
                {
                   File::delete($folderPath.$address_verification->map_image);
                }

                AddressVerification::find($address_verification->id)->update([
                  'map_image' => $map_image,
                  'distance'  => $request->distance,
                  'map_address' => $request->map_address
                ]);

                return response()->json([
                    'success' => true
                ]);

          }
      }
      else
      {
        $rules= [
          'stay'  => 'required',
          'address-type' => 'required',
          'nature_of_residence' => 'required',
          'verifier-name' => 'required',
          'relation-with-verifier' => 'required',
          'front-correct' => 'required',
          'profile-correct' => 'required',
          'address-correct' => 'required',
          'location-correct' => 'required',
          'signature-correct' => 'required',
          'maper' => 'required',
          'qc_decision' => 'required',
       ];
        
        $customMessages = [
          'stay.required' =>  'Select the Period of Stay Option',
          'address-type.required' => 'Select the Address Type Option',
          'ownership.required'=>'Select the Nature of Residence Option',
          'verifier-name.required' =>  'Select the Verifier Name Option',
          'relation-with-verifier.required' =>  'Select the Relation with Verifier Option',
          'front-correct.required' => 'Select the Front Door Option',
          'profile-correct.required' => 'Select the Profile Photo Option',
          'address-correct.required' => 'Select the Address Proof Option',
          'location-correct.required' => 'Select the Location Option',
          'signature-correct.required' => 'Select the Signature Option',
          'maper.required' => 'Select the Map QC Option',
        ];

        $validator = Validator::make($request->all(), $rules, $customMessages);
        
        if ($validator->fails()){
          return response()->json([
              'success' => false,
              'errors' => $validator->errors()
          ]);
        }

        DB::beginTransaction();
        try
        {
          $address_ver = AddressVerification::where('jaf_id',$jaf_id)->first();

          $address_ver_log = AddressVerificationDecisionLog::where('jaf_id',$jaf_id)->latest()->first();

          AddressVerificationDecisionLog::create([
            'candidate_id' => $address_ver->candidate_id,
            'jaf_id' => $address_ver->jaf_id,
            'stay' => $request->input('stay'),
            'address_type' => $request->input('address-type'),
            'ownership' => $request->input('nature_of_residence'),
            'verifier_name' => $request->input('verifier-name'),
            'relation_with_verifier' => $request->input('relation-with-verifier'),
            'front' => $request->input('front-correct'),
            'profile' => $request->input('profile-correct'),
            'address_proof' => $request->input('address-correct'),
            'location' => $request->input('location-correct'),
            'signature' => $request->input('signature-correct'),
            'map_qc' => $request->input('maper'),
            'qc_decision' => $request->input('qc_decision'),
            'comment' => $request->input('comment'),
            'is_send_report' => $address_ver_log!=NULL && $address_ver_log->is_send_report==0 ? 1 : 0,
            'created_at' => date('Y-m-d H:i:s')
          ]);

          DB::commit();

          return response()->json([
            'success' => true
          ]);
        }
        catch (\Exception $e) {
          DB::rollback();
          // something went wrong
          return $e;
        }
      }
      
        
    }

    public function reSendDigitalVerification(Request $request)
    {
      $resend = base64_decode($request->id);
      $address_verification = DB::table('address_verifications')->where('jaf_id',$resend)->first();
      $address_fileUpload =DB::table('address_verification_file_uploads')->where('jaf_id',$resend)->first();

      //signature image delete in folder
      $signature=$address_verification->signature;
          if($signature!=NULL && $signature!='')
            {
              if(File::exists(public_path().'uploads/candidate-signature/'.$signature))
                {
                  File::delete(public_path().'uploads/candidate-signature/'.$signature);
                } 
            }
       DB::table('address_verifications')->where('id', $address_verification->id)->update([
          'status'=>'0',
          'signature'=>null,      
      ]);
      
       $front= $address_fileUpload->image;
         if($front!=null && $front!='')
         {
           if(file::exists(public_path().'/uploads/candidate-front-door/'.$front))
           {
             file::delete(public_path().'/uploads/candidate-front-door/'.$front);
           }
         }
       
       $selfie= $address_fileUpload->image;
       if($selfie!=null && $selfie!='')
       {
         if(file::exists(public_path().'/uploads/candidate-selfie/'.$selfie))
         {
           file::delete(public_path().'/uploads/candidate-selfie/'.$selfie);
         }
       }
      

       $address= $address_fileUpload->image;
       if($address!=null && $address!='')
       {
         if(file::exists(public_path().'/uploads/address-proof/'.$address))
         {
          file::delete(public_path().'/uploads/address-proof/'.$address);
         }
       }
      
        $location = $address_fileUpload->image;
        if($location!=null && $location!='')
        {
          if(file::exists(public_path().'/uploads/candidate-location/'.$location))
          {
            file::delete(public_path().'/uploads/candidate-location/'.$location);
          }
        }
      
       DB::table('address_verification_file_uploads')->where('id', $address_fileUpload->id)->delete();
        
         return response()->json([
            'success' => true
          ]);
      
    }

    //Check exist ,mail
    public function checkEmailExist(Request $request)
    {
        $candidate_id = base64_decode($request->id);
        // $jaf_id = base64_decode($request->jaf_id);

        $candidate = DB::table('users')->select('name','display_id','email')->where('id',$candidate_id)->first();

        // Check where candidate email exist

        return response()->json([
          'status' => true,
          'email' => $candidate->email!=NULL ? true : false,
          'result' => $candidate
        ]);

    }

    //Send mail to candidate
    public function sendAddressVerificationLinkMail(Request $request)
    {
        $jaf_id = base64_decode($request->jaf_id);

        $candidate_id = base64_decode($request->candidate_id);

        $address = '';

        //$app_full_url = "https://play.google.com/store/apps/details?id=com.myBCDVerification";

        // $full_url = url('/address-verification-form',['id'=>base64_encode($jaf_id)]);

        $address_verification = DigitalAddressVerification::from('digital_address_verifications as a')
                                ->select('u.*','j.id as jaf_id')
                                ->join('jaf_form_data as j','j.id','=','a.jaf_id')
                                ->join('users as u','j.candidate_id','=','u.id')
                                ->where('a.jaf_id',$jaf_id)
                                ->first();
        $jaf_data = DB::table('jaf_form_data as j')
                    ->select('u.*','j.id as jaf_id','s.name as service_name','j.check_item_number','j.form_data')
                    ->join('users as u','u.id','=','j.candidate_id')
                    ->join('services as s','s.id','=','j.service_id')
                    ->where('j.id',$jaf_id)
                    ->first();

        DB::beginTransaction();
        try{

            // Fill the candidate email & its alternative.

            if($jaf_data->email==null)
            {
                $rules = [
                  'email'  => 'required|email:rfc,dns',
                  
                ];

                $validator = Validator::make($request->all(), $rules);
            
                if ($validator->fails()){
                  return response()->json([
                      'status' => false,
                      'errors' => $validator->errors()
                  ]);
                }

                if($request->input('email')!=null || $request->input('email')!=null)
                {
                    $email_user = DB::table('users')->where('email',$request->input('email'))->first();

                    if($email_user!=NULL)
                    {
                        return response()->json([
                          'status' => false,
                          'custom'=>'yes',
                          'errors' => ['email'=>'This Email Has Already Been Exists !!']
                        ]);
                    }
                }
                

                DB::table('users')->where('id',$candidate_id)->update([
                    'email' => $request->input('email')
                ]);

               
            }
            
            $jaf_data = DB::table('jaf_form_data as j')
                    ->select('u.*','j.id as jaf_id','s.name as service_name','j.check_item_number','j.form_data')
                    ->join('users as u','u.id','=','j.candidate_id')
                    ->join('services as s','s.id','=','j.service_id')
                    ->where('j.id',$jaf_id)
                    ->first();

            $form_data = $jaf_data->form_data;

            if($form_data!=null)
            {
                $input_item_data_array =  json_decode($form_data, true);

                foreach ($input_item_data_array as $key => $input) {
                    $key_val = array_keys($input);
                    $input_val = array_values($input);
                    // dd($key_val);
                    if(stripos($key_val[0],'Address')!==false){ 
                        
                      $address =$input_val[0]!=NULL ? $input_val[0] :'';
                      // dd($addr);
                    }
                }
            }

            // $app_code = Str::random(6);

            // $app_url = Config::get('app.url').'/add/'.$app_code;

            // $code = Str::random(6);

            // $url = Config::get('app.url').'/add/'.$code;

            if($jaf_data->email!=NULL)
            {
              $email = $jaf_data->email;
              $name  = $jaf_data->first_name;

              // $kams = DB::table('users as u')
              //         ->select('u.email','u.name')
              //         ->join('key_account_managers as k','k.user_id','=','u.id')
              //         ->where('k.business_id',$jaf_data->business_id)
              //         ->get();

              $sender = User::where('id',$jaf_data->parent_id)->first();
      
              $data  = array('name'=>$name,'email'=>$email,'sender'=>$sender,'jaf_data' => $jaf_data,'address' => $address);
      
              Mail::send(['html'=>'mails.address-verification-link'], $data, function($message) use($email,$name) {
                  $message->to($email, $name)->subject
                      ('Clobminds System - Digital Address Verification');
                  $message->from(env('MAIL_USERNAME'),env('MAIL_FROM_NAME'));
              });
            }

           

            // DB::table('short_links')->insert([
            //     'code' => $app_code,
            //     'link' => $app_full_url,
            //     'created_by' => Auth::user()->id,
            //     'created_at' => date('Y-m-d H:i:s')
            // ]);

            // DB::table('short_links')->insert([
            //     'code' => $code,
            //     'link' => $full_url,
            //     'created_by' => Auth::user()->id,
            //     'created_at' => date('Y-m-d H:i:s')
            // ]);


            if($address_verification==NULL)
            {
                $digital_user = DB::table('users')->select('user_type')->where('id',Auth::user()->business_id)->first();

                $digital_address_verification = [
                  'business_id'         => $jaf_data->business_id,
                  'candidate_id'     => $jaf_data->id,
                  'jaf_id'  =>$jaf_data->jaf_id,
                  'assigned_by_id'  =>Auth::user()->id,
                  'assigned_by' => $digital_user->user_type,
                  'status'   => '1',
                ];

                DigitalAddressVerification::create($digital_address_verification);
            }

              $digital_address_verification = [
                'business_id'         => $jaf_data->business_id,
                'candidate_id'     => $jaf_data->id,
                'jaf_id'  =>$jaf_data->jaf_id,
                'email'  => $jaf_data->email,
                'assigned_by'  =>Auth::user()->id,
                'status'   => 1,
                //'type' => 'form-app-link',
                'type' => 'form-link',
                'platform_ref' => 'mail'
              ];

            DigitalAddressVerificationLog::create($digital_address_verification);

            DB::commit();
            return response()->json([
                'status' =>true,
                'msg_status' =>true
            ]);

        }
        catch (\Exception $e) {
          DB::rollback();
          // something went wrong
          return $e;
        }

    }


}


                   